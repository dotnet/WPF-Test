#include "versions.h"
#include "ndp20.versions.h"

.assembly extern PresentationCore
{
	.publickeytoken = PRESENTATIONCORE_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver PRESENTATIONCORE_ASSEMBLY_VERSION_IL
}
.assembly extern PresentationFramework
{
	.publickeytoken = PRESENTATIONFRAMEWORK_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver PRESENTATIONFRAMEWORK_ASSEMBLY_VERSION_IL
}
.assembly extern System.Xml
{
	.publickeytoken = SYSTEM_XML_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_XML_ASSEMBLY_VERSION_IL
}
.assembly extern TestRuntime
{
	.publickeytoken = TESTRUNTIME_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver TESTRUNTIME_ASSEMBLY_VERSION_IL
}
.assembly extern WindowsBase
{
	.publickeytoken = WINDOWSBASE_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver WINDOWSBASE_ASSEMBLY_VERSION_IL
}
.assembly extern mscorlib
{
	.publickeytoken = MSCORLIB_20_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver MSCORLIB_20_ASSEMBLY_VERSION_IL
}
.assembly AnnotationCommon
{
	.custom instance void [mscorlib]System.CLSCompliantAttribute::.ctor(bool) = { bool(true) }
	.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = { bool(false) }
	.custom instance void [mscorlib]System.Security.AllowPartiallyTrustedCallersAttribute::.ctor() = { }
	.publickey = ANNOTATIONCOMMON_ASSEMBLY_PUBLIC_KEY_IL
	.hash algorithm 0x00008004
	.ver ANNOTATIONCOMMON_ASSEMBLY_VERSION_IL
}
.namespace Annotations.Test
{
	.class public AsyncAction
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(object caller, string methodName, object[] args, valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority priority)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority get_Priority()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Method()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Caller()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object[] get_Args()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type[] get_ArgTypes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CallSignature()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_MethodSignature()
		{
			ret
		}
		.property instance class [mscorlib]System.Type[] ArgTypes()
		{
			.get instance class [mscorlib]System.Type[] Annotations.Test.AsyncAction::get_ArgTypes()
		}
		.property instance object[] Args()
		{
			.get instance object[] Annotations.Test.AsyncAction::get_Args()
		}
		.property instance string CallSignature()
		{
			.get instance string Annotations.Test.AsyncAction::get_CallSignature()
		}
		.property instance object Caller()
		{
			.get instance object Annotations.Test.AsyncAction::get_Caller()
		}
		.property instance string Method()
		{
			.get instance string Annotations.Test.AsyncAction::get_Method()
		}
		.property instance string MethodSignature()
		{
			.get instance string Annotations.Test.AsyncAction::get_MethodSignature()
		}
		.property instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority Priority()
		{
			.get instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority Annotations.Test.AsyncAction::get_Priority()
		}
	}
	.class public AsyncTestScript
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority get_DefaultPriority()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DefaultPriority(valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddStatus(string msg)
		{
			ret
		}
		.method public hidebysig 
			instance void Add(string methodName)
		{
			ret
		}
		.method public hidebysig 
			instance void Add(string methodName, object[] args)
		{
			ret
		}
		.method public hidebysig 
			instance void Add(object caller, string methodName, object[] args)
		{
			ret
		}
		.method public hidebysig 
			instance void Add(string methodName, object[] args, valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority priority)
		{
			ret
		}
		.method public hidebysig 
			instance void Add(object caller, string methodName, object[] args, valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority priority)
		{
			ret
		}
		.method public hidebysig 
			instance bool Next()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Annotations.Test.AsyncAction get_Current()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance class Annotations.Test.AsyncAction Current()
		{
			.get instance class Annotations.Test.AsyncAction Annotations.Test.AsyncTestScript::get_Current()
		}
		.property instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority DefaultPriority()
		{
			.get instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority Annotations.Test.AsyncTestScript::get_DefaultPriority()
			.set instance void Annotations.Test.AsyncTestScript::set_DefaultPriority(valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority)
		}
	}
	.class public AsyncTestScriptRunner
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [TestRuntime]Annotations.Test.Framework.TestSuite context)
		{
			ret
		}
		.method public hidebysig 
			instance void Run(class Annotations.Test.AsyncTestScript scriptToRun)
		{
			ret
		}
		.method public hidebysig 
			instance void Run(class Annotations.Test.AsyncTestScript scriptToRun, bool passOnFinish)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ActionDelay(valuetype [mscorlib]System.TimeSpan 'value')
		{
			ret
		}
		.property instance valuetype [mscorlib]System.TimeSpan ActionDelay()
		{
			.set instance void Annotations.Test.AsyncTestScriptRunner::set_ActionDelay(valuetype [mscorlib]System.TimeSpan)
		}
	}
}
.namespace Annotations.Test.Framework
{
	.class public TestSuiteDriver
		extends [PresentationFramework]System.Windows.Application
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig 
			instance void Run(string[] args)
		{
			ret
		}
		.method family virtual hidebysig 
			instance void OnStartup(class [PresentationFramework]System.Windows.StartupEventArgs e)
		{
			ret
		}
	}
}
.namespace Annotations.Test.Reflection
{
	.class public abstract AReflectiveProxy
		extends [WindowsBase]System.Windows.DependencyObject
	{
		.method family hidebysig specialname 
			instance void .ctor(object delegateInstance)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateInstance, class [mscorlib]System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] parameterTypes, object[] parameterValues)
		{
			ret
		}
		.method public static hidebysig 
			object InvokeStaticDelegateMethod(string methodName, class [mscorlib]System.Type 'type', object[] parameters)
		{
			ret
		}
		.method public hidebysig 
			instance object InvokeDelegateMethod(string methodName, object[] parameters)
		{
			ret
		}
		.method public hidebysig 
			instance object GetField(string fieldName)
		{
			ret
		}
		.method public hidebysig 
			instance void SetField(string fieldName, object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance object RouteInstance(class [mscorlib]System.Reflection.MethodBase 'method', object[] parameters)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance string DelegateClassName()
		{
		}
		.method family virtual hidebysig newslot abstract 
			instance string DelegateAssemblyName()
		{
		}
		.method family static hidebysig 
			object RouteStatic(class [mscorlib]System.Reflection.MethodBase 'method', object[] parameters, class [mscorlib]System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method family static hidebysig 
			object RouteStatic(class [mscorlib]System.Reflection.MethodBase 'method', object[] parameters, string assemblyName)
		{
			ret
		}
		.method family hidebysig 
			instance void RouteEventMethod(class [mscorlib]System.Reflection.MethodBase 'method', class [mscorlib]System.MulticastDelegate 'handler')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Delegate()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type get_DelegateType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Reflection.Assembly get_Assembly()
		{
			ret
		}
		.method family static hidebysig 
			void InitializeStaticFields(string assemblyName, class [mscorlib]System.Type myType)
		{
			ret
		}
		.field family class [mscorlib]System.Reflection.Assembly delegateAssembly
		.field family object delegateObject
		.field family class [mscorlib]System.Type delegateTypeValue
		.property instance class [mscorlib]System.Reflection.Assembly Assembly()
		{
			.get instance class [mscorlib]System.Reflection.Assembly Annotations.Test.Reflection.AReflectiveProxy::get_Assembly()
		}
		.property instance object Delegate()
		{
			.get instance object Annotations.Test.Reflection.AReflectiveProxy::get_Delegate()
		}
		.property instance class [mscorlib]System.Type DelegateType()
		{
			.get instance class [mscorlib]System.Type Annotations.Test.Reflection.AReflectiveProxy::get_DelegateType()
		}
	}
	.class public ArrayModule
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			object[] UnwrapArray(class [mscorlib]System.Reflection.Assembly 'assembly', object[] 'array')
		{
			ret
		}
		.method public static hidebysig 
			object[] WrapArray(class [mscorlib]System.Reflection.Assembly 'assembly', object[] 'array')
		{
			ret
		}
		.method public static hidebysig 
			object[] Convert(class [mscorlib]System.Reflection.Assembly 'assembly', object[] 'array', valuetype Annotations.Test.Reflection.ConversionType conversion)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed ConversionType
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Annotations.Test.Reflection.ConversionType Unwrap = int32(0x00000001)
		.field static public literal valuetype Annotations.Test.Reflection.ConversionType Wrap = int32(0x00000000)
	}
	.class public EnumModule
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			object Convert(object enumValue, class [mscorlib]System.Type targetType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public GenericModule
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			object Convert(class [mscorlib]System.Reflection.Assembly 'assembly', object generic, valuetype Annotations.Test.Reflection.ConversionType conversion)
		{
			ret
		}
		.method public static hidebysig 
			object UnwrapGeneric(class [mscorlib]System.Reflection.Assembly 'assembly', object generic)
		{
			ret
		}
		.method public static hidebysig 
			object WrapGeneric(class [mscorlib]System.Reflection.Assembly 'assembly', object generic)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type ProxyToDelegate(class [mscorlib]System.Reflection.Assembly 'assembly', class [mscorlib]System.Type generic)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type DelegateToProxy(class [mscorlib]System.Reflection.Assembly 'assembly', class [mscorlib]System.Type generic)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public interface abstract IReflectiveProxy
	{
	}
	.class public ProxyConstants
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public string 'PROXY_NAMESPACE_PREFIX'
	}
	.class public ProxyDefinition
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]'System.IO.FileInfo' file)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]'System.IO.FileInfo' file, class [mscorlib]'System.Collections.Generic.IList`1'<string> allowedClasses)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Reflection.Assembly assemblyToLoadFrom, class [mscorlib]'System.IO.FileInfo' file, class [mscorlib]'System.Collections.Generic.IList`1'<string> allowedClasses)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Type[] Interfaces(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance void SetInterfaces(class [mscorlib]System.Type 'type', class [mscorlib]System.Type[] interfaces)
		{
			ret
		}
		.method public hidebysig 
			instance string BaseClass(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance void SetBaseClass(class [mscorlib]System.Type 'type', class [mscorlib]System.Type newBaseClass)
		{
			ret
		}
		.method public hidebysig 
			instance bool NonDefaultBaseClass(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Reflection.ConstructorInfo[] Constructors(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Reflection.MethodInfo[] PublicMethods(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Reflection.MethodInfo[] NonPublicMethods(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Reflection.PropertyInfo[] Properties(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Reflection.FieldInfo[] PublicFields(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Reflection.EventInfo[] Events(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_NeedsProxy()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.IO.FileInfo' get_Source()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Source(class [mscorlib]'System.IO.FileInfo' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [mscorlib]System.Type> get_ClassTypes()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<string> get_Imports()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Namespace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<string> get_Delegates()
		{
			ret
		}
		.field static family string 'DEFAULT_BASECLASS'
		.field family class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]System.Reflection.PropertyInfo[]> allProperties
		.field family class [mscorlib]'System.Collections.Generic.IList`1'<string> allowedClasses
		.field family class [mscorlib]System.Reflection.Assembly 'assembly'
		.field family class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]System.Reflection.ConstructorInfo[]> classConstructors
		.field family string classNamespace
		.field family class [mscorlib]'System.Collections.Generic.IList`1'<string> delegateDeclarations
		.field family class [mscorlib]'System.Collections.Generic.IList`1'<class [mscorlib]System.Type> internalClasses
		.property instance class [mscorlib]'System.Collections.Generic.IList`1'<class [mscorlib]System.Type> ClassTypes()
		{
			.get instance class [mscorlib]'System.Collections.Generic.IList`1'<class [mscorlib]System.Type> Annotations.Test.Reflection.ProxyDefinition::get_ClassTypes()
		}
		.property instance class [mscorlib]'System.Collections.Generic.IList`1'<string> Delegates()
		{
			.get instance class [mscorlib]'System.Collections.Generic.IList`1'<string> Annotations.Test.Reflection.ProxyDefinition::get_Delegates()
		}
		.property instance class [mscorlib]'System.Collections.Generic.IList`1'<string> Imports()
		{
			.get instance class [mscorlib]'System.Collections.Generic.IList`1'<string> Annotations.Test.Reflection.ProxyDefinition::get_Imports()
		}
		.property instance string Namespace()
		{
			.get instance string Annotations.Test.Reflection.ProxyDefinition::get_Namespace()
		}
		.property instance bool NeedsProxy()
		{
			.get instance bool Annotations.Test.Reflection.ProxyDefinition::get_NeedsProxy()
		}
		.property instance class [mscorlib]'System.IO.FileInfo' Source()
		{
			.get instance class [mscorlib]'System.IO.FileInfo' Annotations.Test.Reflection.ProxyDefinition::get_Source()
			.set instance void Annotations.Test.Reflection.ProxyDefinition::set_Source(class [mscorlib]'System.IO.FileInfo')
		}
	}
	.class public ProxyFactory
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Reflection.Assembly assemblyToLoadFrom, string[] sourcePaths)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [mscorlib]System.Type> CreateProxies(class [mscorlib]'System.Collections.Generic.IList`1'<string> allowedClasses, string importOverloads)
		{
			ret
		}
		.field family class [mscorlib]System.Reflection.Assembly 'assembly'
		.field family class [mscorlib]'System.Collections.Generic.IList`1'<string> namespacesWithProxies
		.field family class [mscorlib]'System.Collections.Generic.IList`1'<class Annotations.Test.Reflection.ProxyDefinition> proxyDefinitions
		.field family class [mscorlib]'System.Collections.Generic.IList`1'<class [mscorlib]System.Type> proxyDelegateTypes
		.field family class [mscorlib]'System.IO.FileSystemInfo'[] sources
	}
	.class public ProxyInstanceManager
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			object GetProxy(object delegateObject, class [mscorlib]System.Type proxyType)
		{
			ret
		}
		.method public static hidebysig 
			object GetDelegate(class Annotations.Test.Reflection.AReflectiveProxy proxy)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public ProxyTypeConverter
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [mscorlib]System.Type[] ConvertParameterTypes(class [mscorlib]System.Reflection.Assembly 'assembly', class [mscorlib]System.Reflection.MethodBase 'method', valuetype Annotations.Test.Reflection.ConversionType conversion)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type[] ProxyToDelegateType(class [mscorlib]System.Reflection.Assembly 'assembly', class [mscorlib]System.Type[] types)
		{
			ret
		}
		.method public static hidebysig 
			object Convert(class [mscorlib]System.Reflection.Assembly 'assembly', object toConvert, valuetype Annotations.Test.Reflection.ConversionType conversion)
		{
			ret
		}
		.method public static hidebysig 
			object WrapObject(class [mscorlib]System.Reflection.Assembly 'assembly', object toWrap)
		{
			ret
		}
		.method public static hidebysig 
			object UnwrapObject(class [mscorlib]System.Reflection.Assembly 'assembly', object toUnwrap)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type ProxyToDelegateType(class [mscorlib]System.Reflection.Assembly 'assembly', class [mscorlib]System.Type proxyType)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type DelegateToProxyType(class [mscorlib]System.Type delegateType)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public ProxyWriter
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance class [mscorlib]'System.IO.FileInfo' WriteProxy(class Annotations.Test.Reflection.ProxyDefinition proxyDef, class [mscorlib]'System.IO.DirectoryInfo' outputDirectory)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field public string ImportOverloads
		.field public string[] proxyImports
	}
	.class public ReflectionHelper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void EnsurePermissions()
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type GetType(string classname)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object GetInstance(string classname, class [mscorlib]System.Type[] parameterTypes, object[] parameters)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object GetInstance(class [mscorlib]System.Type 'type', class [mscorlib]System.Type[] parameterTypes, object[] parameters)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object GetInstance(string classname)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object InvokeStaticMethod(class [mscorlib]System.Type contextType, string methodName, class [mscorlib]System.Type[] parameterTypes, object[] parameters)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object InvokeMethod(class [mscorlib]System.Type contextType, string methodName)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object InvokeMethod(object context, string methodName, object[] parameters)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type[] ArgsToTypes(object[] args)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Reflection.MethodInfo FindMethod(class [mscorlib]System.Type context, string methodName, class [mscorlib]System.Type[] argTypes)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object InvokeMethod(object context, string methodName, class [mscorlib]System.Type[] parameterTypes, object[] parameters)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object InvokeMethod(object context, string methodName)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object GetField(object context, string fieldName)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			void SetField(object context, string fieldName, object 'value')
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			object GetProperty(object context, string propertyName)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			void SetProperty(object context, string propertyName, object 'value')
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Reflection.MemberInfo FindMemberInHierarchy(class [mscorlib]System.Type targetType, string memberName)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Reflection.PropertyInfo FindPropertyInHierarchy(class [mscorlib]System.Type targetType, string name)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Reflection.FieldInfo FindFieldInHierarchy(class [mscorlib]System.Type targetType, string name)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Reflection.MethodInfo FindMethodInHierarchy(class [mscorlib]System.Type targetType, string name, class [mscorlib]System.Type[] parameterTypes)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public valuetype [mscorlib]System.Reflection.BindingFlags 'FULL_PERMISSION'
		.field static public valuetype [mscorlib]System.Reflection.BindingFlags 'INSTANCE_PERMISSION'
		.field static public valuetype [mscorlib]System.Reflection.BindingFlags 'STATIC_PERMISSION'
	}
}
.namespace Avalon.Test.Annotations
{
	.class public abstract ADocumentViewerBaseSelector
		extends Avalon.Test.Annotations.SelectionModule
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase documentViewer)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance object CreateStartPointer(class [PresentationCore]System.Windows.Documents.DocumentPage page, object textView)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object CreateEndPointer(class [PresentationCore]System.Windows.Documents.DocumentPage page, object textView)
		{
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect CharacterRect(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance int32 PageOffset(int32 page)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance int32 DocumentLength()
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 pageNumber, int32 startIdx, int32 length)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 pageNumber, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 pageNumber, valuetype Avalon.Test.Annotations.PagePosition position, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startPageNum, int32 startOffset, int32 endPageNum, int32 endOffset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startPageNum, valuetype Avalon.Test.Annotations.PagePosition startPagePos, int32 endPageNum, valuetype Avalon.Test.Annotations.PagePosition endPagePos)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startPageNum, valuetype Avalon.Test.Annotations.PagePosition startPagePos, int32 startOffset, int32 endPageNum, valuetype Avalon.Test.Annotations.PagePosition endPagePos, int32 endOffset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 pageNum, valuetype Avalon.Test.Annotations.PagePosition startPos, int32 offset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange MakeTextRange(int32 pageNumber, int32 startIdx, int32 length)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance int32 PageLength(int32 pageNumber)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance object CreatePointer(int32 pageNum, int32 offset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public virtual hidebysig 
			instance object CreatePointer(object pointer, int32 offset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance object CreatePointer(int32 pageNum, valuetype Avalon.Test.Annotations.PagePosition position)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			string PrintFriendlySelection(string msg)
		{
			ret
		}
		.method public hidebysig 
			instance object GetTextView(class [PresentationCore]System.Windows.Documents.DocumentPage page)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase get_Viewer()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_StartOfDocument()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_EndOfDocument()
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.ADocumentViewerBaseSelector::get_Document()
		}
		.property instance object EndOfDocument()
		{
			.get instance object Avalon.Test.Annotations.ADocumentViewerBaseSelector::get_EndOfDocument()
		}
		.property instance object StartOfDocument()
		{
			.get instance object Avalon.Test.Annotations.ADocumentViewerBaseSelector::get_StartOfDocument()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase Viewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase Avalon.Test.Annotations.ADocumentViewerBaseSelector::get_Viewer()
		}
	}
	.class public abstract ADocumentViewerBaseWrapper
		extends Avalon.Test.Annotations.ATextControlWrapper
	{
		.method family hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase target)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void WholePageLayout()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void PageWidthLayout()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void PageLayout(int32 numPages)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GoToPageRange(int32 firstPage, int32 secondPage)
		{
		}
		.method public virtual hidebysig 
			instance void GoToStart()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToEnd()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void BringIntoView(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public hidebysig 
			instance void GoToSelection(object selection)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect[] GetBoundsOfVisiblePages()
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 pageNumber, int32 startIdx, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startPageNum, int32 startOffset, int32 endPageNum, int32 endOffset)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startPageNum, valuetype Avalon.Test.Annotations.PagePosition startPagePos, int32 endPageNum, valuetype Avalon.Test.Annotations.PagePosition endPagePos)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startPageNum, valuetype Avalon.Test.Annotations.PagePosition startPagePos, int32 startOffset, int32 endPageNum, valuetype Avalon.Test.Annotations.PagePosition endPagePos, int32 endOffset)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 pageNum, valuetype Avalon.Test.Annotations.PagePosition startPos, int32 offset)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange MakeTextRange(int32 pageNumber, int32 startIdx, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance object MakeTextAnchor(int32 pageNumber, valuetype Avalon.Test.Annotations.PagePosition startPos, int32 offset)
		{
			ret
		}
		.method public hidebysig 
			instance object MakeTextAnchor(int32 pageNumber, int32 startIdx, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance int32 PageLength(int32 page)
		{
			ret
		}
		.method family hidebysig 
			instance void WaitForFinalPageCount()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase get_ViewerBase()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_FirstVisiblePage()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_LastVisiblePage()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_PageCount()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.ADocumentViewerBaseSelector get_SelectionModule()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SelectionModule(class Avalon.Test.Annotations.ADocumentViewerBaseSelector 'value')
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.ADocumentViewerBaseWrapper::get_Document()
			.set instance void Avalon.Test.Annotations.ADocumentViewerBaseWrapper::set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource)
		}
		.property instance int32 FirstVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.ADocumentViewerBaseWrapper::get_FirstVisiblePage()
		}
		.property instance int32 LastVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.ADocumentViewerBaseWrapper::get_LastVisiblePage()
		}
		.property instance int32 PageCount()
		{
			.get instance int32 Avalon.Test.Annotations.ADocumentViewerBaseWrapper::get_PageCount()
		}
		.property instance class Avalon.Test.Annotations.ADocumentViewerBaseSelector SelectionModule()
		{
			.get instance class Avalon.Test.Annotations.ADocumentViewerBaseSelector Avalon.Test.Annotations.ADocumentViewerBaseWrapper::get_SelectionModule()
			.set instance void Avalon.Test.Annotations.ADocumentViewerBaseWrapper::set_SelectionModule(class Avalon.Test.Annotations.ADocumentViewerBaseSelector)
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase ViewerBase()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase Avalon.Test.Annotations.ADocumentViewerBaseWrapper::get_ViewerBase()
		}
	}
	.class public abstract ATextControlTestSuite
		extends [TestRuntime]Annotations.Test.Framework.VisualAutomationTestSuite
	{
		.class nested family sealed AnnotatableTextControlTypes
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes DocumentViewer = int32(0x00000000)
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes FlowDocumentPageViewer = int32(0x00000001)
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes FlowDocumentReader = int32(0x00000003)
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes FlowDocumentScrollViewer = int32(0x00000002)
		}
		.class nested family sealed RunMode
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlTestSuite/RunMode Normal = int32(0x00000000)
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlTestSuite/RunMode VScanUpdate = int32(0x00000001)
		}
		.method family virtual hidebysig 
			instance void CleanupVariation()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ProcessArgs(string[] args)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<string> UsageParameters()
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<string> UsageExamples()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance valuetype Avalon.Test.Annotations.TestMode DetermineTestMode(string[] args)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance valuetype Avalon.Test.Annotations.AnnotationMode DetermineAnnotationMode(string[] args)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/RunMode DetermineRunMode(string[] args)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes DetermineTargetControlType(string[] args)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string DetermineAnnotationFileToImport(string[] args)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetupTestWindow()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetupWindow()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance object CreateWindowContents()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SwitchTextControl(valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes newControlType)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetupAnnotationService()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore SetupAnnotationStore()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance class Avalon.Test.Annotations.ATextControlWrapper CreateTextControlWrapper(valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes targetType)
		{
			ret
		}
		.method family hidebysig 
			instance void SetContent(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource document)
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance valuetype [WindowsBase]System.Windows.Size get_WindowSize()
		{
			ret
		}
		.method family hidebysig 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource LoadContent(string filename)
		{
			ret
		}
		.method family hidebysig 
			instance void CloseWindow()
		{
			ret
		}
		.method family hidebysig 
			instance void DisableAnnotationService()
		{
			ret
		}
		.method family hidebysig 
			instance void ResizeWindow(valuetype [WindowsBase]System.Windows.Size size)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void ChangeWindowHeight(float64 delta)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void ChangeWindowWidth(float64 delta)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetWindowHeight(float64 height)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetWindowWidth(float64 width)
		{
			ret
		}
		.method family hidebysig 
			instance void SetWindowFocus()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void CompareToMaster(string masterFile, string toleranceFile)
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Avalon.Test.Annotations.StickyNoteWrapper get_CurrentlyAttachedStickyNote()
		{
			ret
		}
		.method family hidebysig 
			instance class Avalon.Test.Annotations.StickyNoteWrapper GetStickyNoteWithAuthor(string author)
		{
			ret
		}
		.method family hidebysig 
			instance class Avalon.Test.Annotations.StickyNoteWrapper[] GetStickyNotesByAuthor(string[] titles)
		{
			ret
		}
		.method family hidebysig 
			instance class Avalon.Test.Annotations.StickyNoteWrapper[] GetStickyNoteWrappers()
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyNoteViewportVisibility(string author, bool isVisibleInViewport)
		{
			ret
		}
		.method family hidebysig 
			instance void SetHighlightColor(int32 colorIndex)
		{
			ret
		}
		.method public hidebysig 
			instance bool CreateHighlight(class Avalon.Test.Annotations.ATextControlWrapper TextControlWrapper, class Avalon.Test.Annotations.ISelectionData selection, int32 colorIndex)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteHighlight(class Avalon.Test.Annotations.ATextControlWrapper TextControlWrapper, class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnnotationVisibility(string author, class Avalon.Test.Annotations.ISelectionData anchor, bool isVisibleInViewport)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyViewportVisibility(valuetype [WindowsBase]System.Windows.Rect rect, bool isVisibleInViewport)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnchorVisibility(class Avalon.Test.Annotations.ISelectionData anchor, bool isVisibleInViewport)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnnotationWithAnchorExists(string expectedAnchor)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnnotation(string expectedAnchorStart, string expectedAnchorEnd, int32 expectedAnchorLength)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyNumberOfAttachedAnnotations(int32 expectedNumber)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyNumberOfAttachedAnnotations(string statusMsg, int32 expectedNumber)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnnotations(int32 expectedNumAttachedAnnotations, string[] expectedAnchors)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnnotations(string[] expectedAnchors)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyAnnotation(string expectedAnchor)
		{
			ret
		}
		.method family hidebysig 
			instance void CreateAnnotation(class Avalon.Test.Annotations.AnnotationDefinition definition)
		{
			ret
		}
		.method public hidebysig 
			instance bool CreateAnnotation()
		{
			ret
		}
		.method public hidebysig 
			instance bool CreateAnnotation(valuetype Avalon.Test.Annotations.AnnotationMode 'type')
		{
			ret
		}
		.method public hidebysig 
			instance bool CreateAnnotation(valuetype Avalon.Test.Annotations.AnnotationMode 'type', string author)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateAnnotation(class Avalon.Test.Annotations.ISelectionData selection, valuetype Avalon.Test.Annotations.AnnotationMode 'type', string author)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateAnnotation(class Avalon.Test.Annotations.ISelectionData selection, valuetype Avalon.Test.Annotations.AnnotationMode 'type')
		{
			ret
		}
		.method public hidebysig 
			instance void CreateAnnotation(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateAnnotation(class Avalon.Test.Annotations.ISelectionData selection, string author)
		{
			ret
		}
		.method public hidebysig 
			instance void CreateAnnotation(bool expectedResult)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyCreateAnnotationFails(class Avalon.Test.Annotations.ISelectionData selection, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteAnnotation(class Avalon.Test.Annotations.ISelectionData selection, valuetype Avalon.Test.Annotations.AnnotationMode 'type')
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteAnnotation(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteAnnotation()
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteAnnotation(valuetype Avalon.Test.Annotations.AnnotationMode 'type')
		{
			ret
		}
		.method family hidebysig 
			instance void ImportAnnotations(string filename)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange GetTextRange(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance string GetText(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public hidebysig 
			instance void SetSelection(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method family hidebysig 
			instance void SetZoom(float64 zoomPercent)
		{
			ret
		}
		.method family hidebysig 
			instance void ZoomIn()
		{
			ret
		}
		.method family hidebysig 
			instance void ZoomOut()
		{
			ret
		}
		.method family hidebysig 
			instance void GoToEnd()
		{
			ret
		}
		.method family hidebysig 
			instance void GoToStart()
		{
			ret
		}
		.method public hidebysig 
			instance void PageUp()
		{
			ret
		}
		.method public hidebysig 
			instance void PageUp(int32 n)
		{
			ret
		}
		.method public hidebysig 
			instance void PageDown()
		{
			ret
		}
		.method public hidebysig 
			instance void PageDown(int32 n)
		{
			ret
		}
		.method public hidebysig 
			instance void BringIntoView(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public hidebysig 
			instance void GoToPage(int32 n)
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Proxies.System.Windows.Annotations.AnnotationService get_Service()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance class [mscorlib]'System.IO.Stream' get_AnnotationStream()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Control get_TextControl()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/RunMode get_Mode()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype Avalon.Test.Annotations.AnnotationMode get_AnnotationType()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype Avalon.Test.Annotations.TestMode get_ContentMode()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes get_TargetControlType()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Avalon.Test.Annotations.ATextControlWrapper get_TextControlWrapper()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void set_TextControlWrapper(class Avalon.Test.Annotations.ATextControlWrapper 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field family class [PresentationFramework]System.Windows.Window MainWindow
		.property instance class [mscorlib]'System.IO.Stream' AnnotationStream()
		{
			.get instance class [mscorlib]'System.IO.Stream' Avalon.Test.Annotations.ATextControlTestSuite::get_AnnotationStream()
		}
		.property instance valuetype Avalon.Test.Annotations.AnnotationMode AnnotationType()
		{
			.get instance valuetype Avalon.Test.Annotations.AnnotationMode Avalon.Test.Annotations.ATextControlTestSuite::get_AnnotationType()
		}
		.property instance valuetype Avalon.Test.Annotations.TestMode ContentMode()
		{
			.get instance valuetype Avalon.Test.Annotations.TestMode Avalon.Test.Annotations.ATextControlTestSuite::get_ContentMode()
		}
		.property instance class Avalon.Test.Annotations.StickyNoteWrapper CurrentlyAttachedStickyNote()
		{
			.get instance class Avalon.Test.Annotations.StickyNoteWrapper Avalon.Test.Annotations.ATextControlTestSuite::get_CurrentlyAttachedStickyNote()
		}
		.property instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/RunMode Mode()
		{
			.get instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/RunMode Avalon.Test.Annotations.ATextControlTestSuite::get_Mode()
		}
		.property instance class Proxies.System.Windows.Annotations.AnnotationService Service()
		{
			.get instance class Proxies.System.Windows.Annotations.AnnotationService Avalon.Test.Annotations.ATextControlTestSuite::get_Service()
		}
		.property instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes TargetControlType()
		{
			.get instance valuetype Avalon.Test.Annotations.ATextControlTestSuite/AnnotatableTextControlTypes Avalon.Test.Annotations.ATextControlTestSuite::get_TargetControlType()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Control TextControl()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Control Avalon.Test.Annotations.ATextControlTestSuite::get_TextControl()
		}
		.property instance class Avalon.Test.Annotations.ATextControlWrapper TextControlWrapper()
		{
			.get instance class Avalon.Test.Annotations.ATextControlWrapper Avalon.Test.Annotations.ATextControlTestSuite::get_TextControlWrapper()
			.set instance void Avalon.Test.Annotations.ATextControlTestSuite::set_TextControlWrapper(class Avalon.Test.Annotations.ATextControlWrapper)
		}
		.property instance valuetype [WindowsBase]System.Windows.Size WindowSize()
		{
			.get instance valuetype [WindowsBase]System.Windows.Size Avalon.Test.Annotations.ATextControlTestSuite::get_WindowSize()
		}
	}
	.class public abstract ATextControlWrapper
		extends [mscorlib]System.Object
	{
		.class nested public sealed HorizontalJustification
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification Bottom = int32(0x00000002)
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification Middle = int32(0x00000001)
			.field static public literal valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification Top = int32(0x00000000)
		}
		.class nested family RectComparer
			extends [mscorlib]System.Object
			implements [mscorlib]System.Collections.IComparer
		{
			.method public final virtual hidebysig newslot 
				instance int32 Compare(object x, object y)
			{
				ret
			}
			.method public hidebysig specialname 
				instance void .ctor()
			{
				ret
			}
		}
		.method family hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.Control target)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void SetZoom(float64 zoomPercent)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance float64 GetZoom()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void ZoomIn()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void ZoomOut()
		{
		}
		.method public hidebysig 
			instance void IcrementalZoomTo(float64 targetPercent)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void GoToStart()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void GoToEnd()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void ScrollUp(int32 n)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void ScrollDown(int32 n)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void BringIntoView(class Avalon.Test.Annotations.ISelectionData selection)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_FirstVisiblePage()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_LastVisiblePage()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_PageCount()
		{
		}
		.method public hidebysig 
			instance void PageUp()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void PageUp(int32 n)
		{
			ret
		}
		.method public hidebysig 
			instance void PageDown()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void PageDown(int32 n)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void GoToPage(int32 pageNum)
		{
			ret
		}
		.method public hidebysig 
			instance bool PageIsVisible(int32 pageNum)
		{
			ret
		}
		.method family hidebysig 
			instance void EnsurePageIsVisible(int32 page)
		{
			ret
		}
		.method family hidebysig 
			instance void ValidatePageNumber(int32 page)
		{
			ret
		}
		.method public hidebysig 
			instance object MakeTextAnchor(class [PresentationFramework]System.Windows.Documents.TextRange textRange)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype [WindowsBase]System.Windows.Point PointerToScreenCoordinates(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification horizontalJustification)
		{
		}
		.method family hidebysig 
			instance void SyncCommand(int32 n, class [PresentationCore]System.Windows.Input.RoutedCommand command, class [PresentationCore]System.Windows.IInputElement target)
		{
			ret
		}
		.method family hidebysig 
			instance void SyncCommand(int32 n, class [PresentationCore]System.Windows.Input.RoutedCommand command)
		{
			ret
		}
		.method family hidebysig 
			instance void SyncCommand(class [PresentationCore]System.Windows.Input.RoutedCommand command)
		{
			ret
		}
		.method family hidebysig 
			instance void SyncCommand(class [PresentationCore]System.Windows.Input.RoutedCommand command, object data)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource 'value')
		{
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.ScrollViewer get_ScrollViewer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Selection()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Proxies.System.Windows.Annotations.AnnotationService get_Service()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Control get_Target()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Avalon.Test.Annotations.SelectionModule get_SelectionModule()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_SelectionModule(class Avalon.Test.Annotations.SelectionModule 'value')
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.ATextControlWrapper::get_Document()
			.set instance void Avalon.Test.Annotations.ATextControlWrapper::set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource)
		}
		.property instance int32 FirstVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.ATextControlWrapper::get_FirstVisiblePage()
		}
		.property instance int32 LastVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.ATextControlWrapper::get_LastVisiblePage()
		}
		.property instance int32 PageCount()
		{
			.get instance int32 Avalon.Test.Annotations.ATextControlWrapper::get_PageCount()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.ScrollViewer ScrollViewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.ScrollViewer Avalon.Test.Annotations.ATextControlWrapper::get_ScrollViewer()
		}
		.property instance object Selection()
		{
			.get instance object Avalon.Test.Annotations.ATextControlWrapper::get_Selection()
		}
		.property instance class Avalon.Test.Annotations.SelectionModule SelectionModule()
		{
			.get instance class Avalon.Test.Annotations.SelectionModule Avalon.Test.Annotations.ATextControlWrapper::get_SelectionModule()
			.set instance void Avalon.Test.Annotations.ATextControlWrapper::set_SelectionModule(class Avalon.Test.Annotations.SelectionModule)
		}
		.property instance class Proxies.System.Windows.Annotations.AnnotationService Service()
		{
			.get instance class Proxies.System.Windows.Annotations.AnnotationService Avalon.Test.Annotations.ATextControlWrapper::get_Service()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Control Target()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Control Avalon.Test.Annotations.ATextControlWrapper::get_Target()
		}
	}
	.class public AbsoluteSelectionData
		extends Avalon.Test.Annotations.ISelectionData
	{
		.method public hidebysig specialname 
			instance void .ctor(int32 startOffset, int32 endOffset)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 endOffset)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
	}
	.class public AnchoredBlockSelectionData
		extends Avalon.Test.Annotations.ISelectionData
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type blockType, string name, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
	}
	.class public AnchoredBlockSelector
		extends Avalon.Test.Annotations.FlowElementSelector
	{
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(class [mscorlib]System.Type controlType, string name, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
	}
	.class public AnnotationComponentFinder
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.DependencyObject target)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Controls.StickyNoteControl> GetVisibleStickyNotes(class [PresentationCore]System.Windows.Media.Visual node)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Collections.IList GetVisibleHighlightComponents(class [PresentationCore]System.Windows.Media.Visual node)
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Type get_HighlightComponentType()
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'> GetHighlightComponents()
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class Proxies.System.Windows.Controls.StickyNoteControl> GetStickyNoteComponents()
		{
			ret
		}
		.property class [mscorlib]System.Type HighlightComponentType()
		{
			.get class [mscorlib]System.Type Avalon.Test.Annotations.AnnotationComponentFinder::get_HighlightComponentType()
		}
	}
	.class public abstract AnnotationDefinition
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void Create(class Avalon.Test.Annotations.ATextControlWrapper target)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Create(class Avalon.Test.Annotations.ATextControlWrapper target, bool goToSelection)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void Delete(class Avalon.Test.Annotations.ATextControlWrapper target)
		{
		}
		.method family hidebysig specialname 
			instance class Avalon.Test.Annotations.ISelectionData get_Anchor()
		{
			ret
		}
		.property instance class Avalon.Test.Annotations.ISelectionData Anchor()
		{
			.get instance class Avalon.Test.Annotations.ISelectionData Avalon.Test.Annotations.AnnotationDefinition::get_Anchor()
		}
	}
	.class public sealed AnnotationMode
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Avalon.Test.Annotations.AnnotationMode Highlight = int32(0x00000002)
		.field static public literal valuetype Avalon.Test.Annotations.AnnotationMode InkStickyNote = int32(0x00000001)
		.field static public literal valuetype Avalon.Test.Annotations.AnnotationMode StickyNote = int32(0x00000000)
	}
	.class public abstract AnnotationStateInfo
		extends [mscorlib]System.Object
	{
		.method family hidebysig specialname 
			instance void .ctor(int32 zOrder)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ZOrder()
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance int32 ZOrder()
		{
			.get instance int32 Avalon.Test.Annotations.AnnotationStateInfo::get_ZOrder()
		}
	}
	.class public AnnotationTestHelper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore CreateStore(string filename)
		{
			ret
		}
		.method public static hidebysig 
			bool BringToFront(class [PresentationFramework]System.Windows.Window window)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource LoadContent(string filename)
		{
			ret
		}
		.method public static hidebysig 
			object LoadXaml(string filename)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Controls.Canvas BuildSingleBranchTree()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Controls.Canvas BuildMultiBranchTree()
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Collections.Hashtable AnnotateMultiBranchTree(class [WindowsBase]System.Windows.DependencyObject root)
		{
			ret
		}
		.method public static hidebysig 
			object LoadTree(string xamlFileName)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation makeSimpleAnnotation(class Proxies.System.Windows.Annotations.AnnotationService service, object location)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation MakeAnnotation1()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation MakeAnnotation2()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation MakePartiallyResolvedAnnotation(class Proxies.System.Windows.Annotations.AnnotationService service, class [WindowsBase]System.Windows.DependencyObject root, string nodeId)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation UnauthoredAnnotation()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation UnanchoredAnnotation()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.Annotation ResourceBlankAnnotation()
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' GetOnlyAttachedAnnotation(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method public static hidebysig 
			class [System.Xml]System.Xml.XmlElement CreateContent(string name, string content)
		{
			ret
		}
		.method public static hidebysig 
			bool IsTextAnchor(object obj)
		{
			ret
		}
		.method public static hidebysig 
			string GetText(object obj)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.AnnotationResource MakeCargo(string 'type', string nameSpace, string content)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.AnnotationResource MakeCargo(string content)
		{
			ret
		}
		.method public static hidebysig 
			class [System.Xml]System.Xml.XmlNode CreateAuthor(class [System.Xml]System.Xml.XmlDocument xdoc, string author)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.AnnotationResource makeAnchor(class Proxies.System.Windows.Annotations.AnnotationService service, object location)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.AnnotationResource CreateAnchor(string anchorName, string anchorNamespace)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.AnnotationResource CreateAnchor(string anchorName, string anchorNamespace, string partContent)
		{
			ret
		}
		.method public static hidebysig 
			void ModifyAnchor(class [PresentationFramework]System.Windows.Annotations.AnnotationResource anchor)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.AnnotationResource MakePartiallyResolvedAnchor(class Proxies.System.Windows.Annotations.AnnotationService service, class [WindowsBase]System.Windows.DependencyObject root, string nodeId)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocator CreateLPS(string anchorName, string anchorNamespace, string partContent)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocator CreateLocator(string[] partContents)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart CreateLocatorPart(string content)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart CreateLocatorPart(string name, string nsp, string content)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocatorGroup CreateLocatorGroup(int32 locatorCount, int32 locatorPartCount, string lpContent)
		{
			ret
		}
		.method public static hidebysig 
			bool LocatorSetsEqual(class [PresentationFramework]System.Windows.Annotations.ContentLocatorGroup setA, class [PresentationFramework]System.Windows.Annotations.ContentLocatorGroup setB)
		{
			ret
		}
		.method public static hidebysig 
			bool LocatorPartListsEqual(class [PresentationFramework]System.Windows.Annotations.ContentLocator listA, class [PresentationFramework]System.Windows.Annotations.ContentLocator listB)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocator GetOnlyLocator(class [mscorlib]'System.Collections.Generic.ICollection`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocator> locatorCollection)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart GetOnlyLocatorPart(class [mscorlib]'System.Collections.Generic.ICollection`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> locatorPartCollection)
		{
			ret
		}
		.method public static hidebysig 
			void AddLocators(class [PresentationFramework]System.Windows.Annotations.AnnotationResource resource, class [mscorlib]'System.Collections.Generic.ICollection`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase> locCollect)
		{
			ret
		}
		.method public static hidebysig 
			void ReplaceAllLocators(class [PresentationFramework]System.Windows.Annotations.AnnotationResource resource, class [mscorlib]'System.Collections.Generic.ICollection`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase> locCollect)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public DispatcherHelper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void DoEvents()
		{
			ret
		}
		.method public static hidebysig 
			void DoEvents(int32 minimumWait, valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority priority)
		{
			ret
		}
		.method public static hidebysig 
			void DoEvents(int32 minimumWait)
		{
			ret
		}
		.method public static hidebysig 
			void DoEventsPastInput()
		{
			ret
		}
		.method public static hidebysig 
			void DoEvents(valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority minimumPriority)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public DocumentStateInfo
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance void AddState(int32 page, class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Controls.StickyNoteControl> stickynotes)
		{
			ret
		}
		.method public hidebysig 
			instance void AddState(int32 page, class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'> highlights)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class Avalon.Test.Annotations.AnnotationStateInfo> AnnotationState(int32 pageNum)
		{
			ret
		}
		.method family hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class Avalon.Test.Annotations.AnnotationStateInfo> InfoList(int32 page)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public DocumentViewerWrapper
		extends Avalon.Test.Annotations.ADocumentViewerBaseWrapper
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetZoom(float64 zoomPercent)
		{
			ret
		}
		.method public virtual hidebysig 
			instance float64 GetZoom()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomIn()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomOut()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToPageRange(int32 firstPage, int32 secondPage)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WholePageLayout()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void PageWidthLayout()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void PageLayout(int32 numPages)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollUp(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollDown(int32 n)
		{
			ret
		}
		.method public hidebysig 
			instance void DisableScrollAndToolbars()
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point PointerToScreenCoordinates(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification horizontalJustification)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.DocumentViewer get_Viewer()
		{
			ret
		}
		.property instance class [PresentationFramework]System.Windows.Controls.DocumentViewer Viewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.DocumentViewer Avalon.Test.Annotations.DocumentViewerWrapper::get_Viewer()
		}
	}
	.class public ElementPosition
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field public class [PresentationFramework]System.Windows.Documents.TextPointer End
		.field public class [PresentationFramework]System.Windows.Documents.TextPointer Start
	}
	.class public FlowDocumentPageViewerWrapper
		extends Avalon.Test.Annotations.ADocumentViewerBaseWrapper
	{
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.FlowDocumentPageViewer fdpv)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomIn()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomOut()
		{
			ret
		}
		.method public virtual hidebysig 
			instance float64 GetZoom()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToPageRange(int32 firstPage, int32 secondPage)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WholePageLayout()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void PageWidthLayout()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void PageLayout(int32 numPages)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetZoom(float64 zoomPercent)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollUp(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollDown(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point PointerToScreenCoordinates(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification horizontalJustification)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.FlowDocumentPageViewer get_Viewer()
		{
			ret
		}
		.method family hidebysig 
			instance class [PresentationFramework]System.Windows.Style LoadStyle(string styleName)
		{
			ret
		}
		.property instance class [PresentationFramework]System.Windows.Controls.FlowDocumentPageViewer Viewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.FlowDocumentPageViewer Avalon.Test.Annotations.FlowDocumentPageViewerWrapper::get_Viewer()
		}
	}
	.class public FlowDocumentProperties
		extends [mscorlib]System.Object
	{
		.class nested public abstract AFlowDocumentProperty
			extends [mscorlib]System.Object
		{
			.method public hidebysig specialname 
				instance void .ctor(string 'value')
			{
				ret
			}
			.method public virtual hidebysig newslot abstract 
				instance void ApplyProperty(class [PresentationFramework]System.Windows.Documents.FlowDocument document)
			{
			}
		}
		.class nested public ColumnWidthProperty
			extends Avalon.Test.Annotations.FlowDocumentProperties/AFlowDocumentProperty
		{
			.method public hidebysig specialname 
				instance void .ctor(string 'value')
			{
				ret
			}
			.method public virtual hidebysig 
				instance void ApplyProperty(class [PresentationFramework]System.Windows.Documents.FlowDocument document)
			{
				ret
			}
		}
		.class nested public FlowDirectionProperty
			extends Avalon.Test.Annotations.FlowDocumentProperties/AFlowDocumentProperty
		{
			.method public hidebysig specialname 
				instance void .ctor(string 'value')
			{
				ret
			}
			.method public virtual hidebysig 
				instance void ApplyProperty(class [PresentationFramework]System.Windows.Documents.FlowDocument document)
			{
				ret
			}
		}
		.class nested public TextAlignmentProperty
			extends Avalon.Test.Annotations.FlowDocumentProperties/AFlowDocumentProperty
		{
			.method public hidebysig specialname 
				instance void .ctor(string 'value')
			{
				ret
			}
			.method public virtual hidebysig 
				instance void ApplyProperty(class [PresentationFramework]System.Windows.Documents.FlowDocument document)
			{
				ret
			}
		}
		.method public hidebysig 
			instance void ProcessArgs(string[] args)
		{
			ret
		}
		.method public hidebysig 
			instance void ApplyProperties(class [PresentationFramework]System.Windows.Documents.FlowDocument document)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public FlowDocumentReaderWrapper
		extends Avalon.Test.Annotations.ATextControlWrapper
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void PageUp(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void PageDown(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToStart()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToEnd()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void BringIntoView(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetZoom(float64 zoomPercent)
		{
			ret
		}
		.method public virtual hidebysig 
			instance float64 GetZoom()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomIn()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomOut()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollUp(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollDown(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point PointerToScreenCoordinates(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification horizontalJustification)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationFramework]System.Windows.Controls.FlowDocumentReaderViewingMode get_ViewingMode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ViewingMode(valuetype [PresentationFramework]System.Windows.Controls.FlowDocumentReaderViewingMode 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.FlowDocumentReader get_Viewer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.ATextControlWrapper get_DelegateWrapper()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class Avalon.Test.Annotations.SelectionModule get_SelectionModule()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_PageCount()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_FirstVisiblePage()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_LastVisiblePage()
		{
			ret
		}
		.method family hidebysig 
			instance void WaitForPaginationToComplete()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper get_ScrollWrapper()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Avalon.Test.Annotations.FlowDocumentPageViewerWrapper get_PageWrapper()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Avalon.Test.Annotations.FlowDocumentPageViewerWrapper get_TwoPageWrapper()
		{
			ret
		}
		.property instance class Avalon.Test.Annotations.ATextControlWrapper DelegateWrapper()
		{
			.get instance class Avalon.Test.Annotations.ATextControlWrapper Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_DelegateWrapper()
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_Document()
			.set instance void Avalon.Test.Annotations.FlowDocumentReaderWrapper::set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource)
		}
		.property instance int32 FirstVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_FirstVisiblePage()
		}
		.property instance int32 LastVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_LastVisiblePage()
		}
		.property instance int32 PageCount()
		{
			.get instance int32 Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_PageCount()
		}
		.property instance class Avalon.Test.Annotations.FlowDocumentPageViewerWrapper PageWrapper()
		{
			.get instance class Avalon.Test.Annotations.FlowDocumentPageViewerWrapper Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_PageWrapper()
		}
		.property instance class Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper ScrollWrapper()
		{
			.get instance class Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_ScrollWrapper()
		}
		.property instance class Avalon.Test.Annotations.SelectionModule SelectionModule()
		{
			.get instance class Avalon.Test.Annotations.SelectionModule Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_SelectionModule()
		}
		.property instance class Avalon.Test.Annotations.FlowDocumentPageViewerWrapper TwoPageWrapper()
		{
			.get instance class Avalon.Test.Annotations.FlowDocumentPageViewerWrapper Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_TwoPageWrapper()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.FlowDocumentReader Viewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.FlowDocumentReader Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_Viewer()
		}
		.property instance valuetype [PresentationFramework]System.Windows.Controls.FlowDocumentReaderViewingMode ViewingMode()
		{
			.get instance valuetype [PresentationFramework]System.Windows.Controls.FlowDocumentReaderViewingMode Avalon.Test.Annotations.FlowDocumentReaderWrapper::get_ViewingMode()
			.set instance void Avalon.Test.Annotations.FlowDocumentReaderWrapper::set_ViewingMode(valuetype [PresentationFramework]System.Windows.Controls.FlowDocumentReaderViewingMode)
		}
	}
	.class public FlowDocumentScrollViewerSelector
		extends Avalon.Test.Annotations.SelectionModule
	{
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer fdsv)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_StartOfDocument()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance object get_EndOfDocument()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object CreatePointer(object pointer, int32 offset)
		{
			ret
		}
		.method family hidebysig specialname 
			instance object get_TextContainer()
		{
			ret
		}
		.method family hidebysig specialname 
			instance object get_TextView()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer get_Viewer()
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.FlowDocumentScrollViewerSelector::get_Document()
		}
		.property instance object EndOfDocument()
		{
			.get instance object Avalon.Test.Annotations.FlowDocumentScrollViewerSelector::get_EndOfDocument()
		}
		.property instance object StartOfDocument()
		{
			.get instance object Avalon.Test.Annotations.FlowDocumentScrollViewerSelector::get_StartOfDocument()
		}
		.property instance object TextContainer()
		{
			.get instance object Avalon.Test.Annotations.FlowDocumentScrollViewerSelector::get_TextContainer()
		}
		.property instance object TextView()
		{
			.get instance object Avalon.Test.Annotations.FlowDocumentScrollViewerSelector::get_TextView()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer Viewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer Avalon.Test.Annotations.FlowDocumentScrollViewerSelector::get_Viewer()
		}
	}
	.class public FlowDocumentScrollViewerWrapper
		extends Avalon.Test.Annotations.ATextControlWrapper
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer fdsv)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToStart()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToEnd()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void BringIntoView(class Avalon.Test.Annotations.ISelectionData selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetZoom(float64 zoomPercent)
		{
			ret
		}
		.method public virtual hidebysig 
			instance float64 GetZoom()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomIn()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ZoomOut()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollUp(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void ScrollDown(int32 n)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point PointerToScreenCoordinates(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, valuetype Avalon.Test.Annotations.ATextControlWrapper/HorizontalJustification horizontalJustification)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void GoToPage(int32 page)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer get_Viewer()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_FirstVisiblePage()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_LastVisiblePage()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_PageCount()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource 'value')
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper::get_Document()
			.set instance void Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper::set_Document(class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource)
		}
		.property instance int32 FirstVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper::get_FirstVisiblePage()
		}
		.property instance int32 LastVisiblePage()
		{
			.get instance int32 Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper::get_LastVisiblePage()
		}
		.property instance int32 PageCount()
		{
			.get instance int32 Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper::get_PageCount()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer Viewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.FlowDocumentScrollViewer Avalon.Test.Annotations.FlowDocumentScrollViewerWrapper::get_Viewer()
		}
	}
	.class public abstract FlowElementSelector
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.SelectionModule selectionMod)
		{
			ret
		}
		.method public hidebysig 
			instance object FindElement(class [mscorlib]System.Type elementType, string name)
		{
			ret
		}
		.method family hidebysig 
			instance void PrintStatus(string str)
		{
			ret
		}
		.method family hidebysig 
			instance class Avalon.Test.Annotations.ElementPosition FindElementWithName(class [mscorlib]System.Type elementType, string name)
		{
			ret
		}
		.method family hidebysig 
			instance class Avalon.Test.Annotations.ElementPosition FindNextElement(class [mscorlib]System.Type elementType, class [PresentationFramework]System.Windows.Documents.TextPointer startPointer, class [PresentationFramework]System.Windows.Documents.TextPointer endPointer)
		{
			ret
		}
		.method family hidebysig 
			instance class Avalon.Test.Annotations.ElementPosition FindNthElement(class [mscorlib]System.Type elementType, class [PresentationFramework]System.Windows.Documents.TextPointer startPointer, class [PresentationFramework]System.Windows.Documents.TextPointer endPointer, int32 occurance)
		{
			ret
		}
		.method family hidebysig 
			instance void VerifyDocument()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer get_StartOfDocument()
		{
			ret
		}
		.method family hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer get_EndOfDocument()
		{
			ret
		}
		.method family hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer CreatePointer(class Avalon.Test.Annotations.ElementPosition element, valuetype Avalon.Test.Annotations.PagePosition relativePosition)
		{
			ret
		}
		.method family hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(class Avalon.Test.Annotations.ElementPosition element, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.field family class Avalon.Test.Annotations.SelectionModule selectionModule
		.property instance class [PresentationFramework]System.Windows.Documents.TextPointer EndOfDocument()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextPointer Avalon.Test.Annotations.FlowElementSelector::get_EndOfDocument()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextPointer StartOfDocument()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextPointer Avalon.Test.Annotations.FlowElementSelector::get_StartOfDocument()
		}
	}
	.class public HighlightDefinition
		extends Avalon.Test.Annotations.AnnotationDefinition
	{
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor, valuetype [PresentationCore]System.Windows.Media.Color color)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Create(class Avalon.Test.Annotations.ATextControlWrapper target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Create(class Avalon.Test.Annotations.ATextControlWrapper target, bool goToSelection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Delete(class Avalon.Test.Annotations.ATextControlWrapper target)
		{
			ret
		}
	}
	.class public HighlightStateInfo
		extends Avalon.Test.Annotations.AnnotationStateInfo
	{
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationCore]System.Windows.Media.Brush brush, int32 zOrder, object anchor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Media.Brush get_HighlightBrush()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationCore]System.Windows.Media.Color get_HighlightBrushColor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Anchor()
		{
			ret
		}
		.method public static hidebysig 
			class Avalon.Test.Annotations.HighlightStateInfo FromHighlightComponent(class 'Proxies.MS.Internal.Annotations.Component.HighlightComponent' highlight)
		{
			ret
		}
		.method public static hidebysig 
			class Avalon.Test.Annotations.HighlightStateInfo FromHighlightComponent(object highlight)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance object Anchor()
		{
			.get instance object Avalon.Test.Annotations.HighlightStateInfo::get_Anchor()
		}
		.property instance class [PresentationCore]System.Windows.Media.Brush HighlightBrush()
		{
			.get instance class [PresentationCore]System.Windows.Media.Brush Avalon.Test.Annotations.HighlightStateInfo::get_HighlightBrush()
		}
		.property instance valuetype [PresentationCore]System.Windows.Media.Color HighlightBrushColor()
		{
			.get instance valuetype [PresentationCore]System.Windows.Media.Color Avalon.Test.Annotations.HighlightStateInfo::get_HighlightBrushColor()
		}
	}
	.class public abstract ISelectionData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance string SetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
		.method public hidebysig 
			instance string GetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange GetSelectionAsTextRange(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public MultiPageSelectionData
		extends Avalon.Test.Annotations.PaginatedSelectionData
	{
		.method public hidebysig specialname 
			instance void .ctor(int32 pageA, valuetype Avalon.Test.Annotations.PagePosition positionA, int32 lengthA, int32 pageB, valuetype Avalon.Test.Annotations.PagePosition positionB, int32 lengthB)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.ADocumentViewerBaseSelector selectionModule)
		{
			ret
		}
		.method public hidebysig 
			instance class Avalon.Test.Annotations.ISelectionData[] GetPageBasedSelection()
		{
			ret
		}
	}
	.class public sealed PagePosition
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Avalon.Test.Annotations.PagePosition Beginning = int32(0x00000000)
		.field static public literal valuetype Avalon.Test.Annotations.PagePosition End = int32(0x00000002)
		.field static public literal valuetype Avalon.Test.Annotations.PagePosition Middle = int32(0x00000001)
	}
	.class public abstract PaginatedSelectionData
		extends Avalon.Test.Annotations.ISelectionData
	{
		.method family virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.ADocumentViewerBaseSelector selector)
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public SecurityHelper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig specialname 
			bool get_HasClipboadPermission()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property bool HasClipboadPermission()
		{
			.get bool Avalon.Test.Annotations.SecurityHelper::get_HasClipboadPermission()
		}
	}
	.class public abstract SelectionModule
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.Control target)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(int32 startOffset, int32 endOffset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(valuetype Avalon.Test.Annotations.PagePosition position, int32 length)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange SetSelection(valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance void SetDirection(object pointer, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange CreateTextRange(object startPointer, object endPointer)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(object startPointer, object endPointer)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public virtual hidebysig newslot 
			instance object CreatePointer(object pointer, int32 offset)
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method public static hidebysig 
			string PrintFriendlySelection(string msg)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource get_Document()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_StartOfDocument()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_EndOfDocument()
		{
		}
		.method public hidebysig specialname 
			instance bool get_WriteThrough()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_WriteThrough(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextRange get_Selection()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Control get_Target()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.TableSelector get_Tables()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.AnchoredBlockSelector get_AnchoredBlocks()
		{
			ret
		}
		.method family virtual hidebysig newslot specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextSelection get_TextSelection()
		{
			.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 11 01 54 02 0C 55 6E 72 65 73 74 72 69 63 74 65 64 01)
			ret
		}
		.method family hidebysig 
			instance object PositionToPointer(valuetype Avalon.Test.Annotations.PagePosition position)
		{
			ret
		}
		.method family hidebysig 
			instance object FindLastInsertionPosition(object textView)
		{
			ret
		}
		.field static family class [mscorlib]System.Type ITextContainerType
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextContainer_End
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextContainer_Start
		.field static family class [mscorlib]System.Type ITextPointerType
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextPointer_CreatePointer
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextPointer_GetCharacterRect
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextPointer_GetOffsetToPosition
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextPointer_IsAtInsertionPosition
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextPointer_LogicalDirection
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextPointer_MoveToInsertionPosition
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextPointer_MoveToNextInsertionPosition
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextPointer_Offset
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextPointer_TextContainer
		.field static family class [mscorlib]System.Type ITextRangeType
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextRange_Select
		.field static family class [mscorlib]System.Type ITextViewType
		.field static family class [mscorlib]System.Reflection.MethodInfo ITextView_GetTextPositionFromPoint
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextView_TextContainer
		.field static family class [mscorlib]System.Reflection.PropertyInfo ITextView_TextSegments
		.field static family class [mscorlib]System.Reflection.PropertyInfo Item
		.field static family class [mscorlib]System.Reflection.Assembly PresentationFramework
		.field static family class [mscorlib]System.Type TextEditorType
		.field static family class [mscorlib]System.Reflection.MethodInfo TextEditor_Selection
		.field static family class [mscorlib]System.Type TextSegmentType
		.field static family class [mscorlib]System.Reflection.PropertyInfo TextSegment_End
		.field static family class [mscorlib]System.Reflection.PropertyInfo TextSegment_Start
		.field family class Avalon.Test.Annotations.AnchoredBlockSelector anchoredBlockSelector
		.field family class Avalon.Test.Annotations.TableSelector tableSelector
		.field family class [PresentationFramework]System.Windows.Controls.Control targetControl
		.property instance class Avalon.Test.Annotations.AnchoredBlockSelector AnchoredBlocks()
		{
			.get instance class Avalon.Test.Annotations.AnchoredBlockSelector Avalon.Test.Annotations.SelectionModule::get_AnchoredBlocks()
		}
		.property instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Document()
		{
			.get instance class [PresentationCore]System.Windows.Documents.IDocumentPaginatorSource Avalon.Test.Annotations.SelectionModule::get_Document()
		}
		.property instance object EndOfDocument()
		{
			.get instance object Avalon.Test.Annotations.SelectionModule::get_EndOfDocument()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextRange Selection()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextRange Avalon.Test.Annotations.SelectionModule::get_Selection()
		}
		.property instance object StartOfDocument()
		{
			.get instance object Avalon.Test.Annotations.SelectionModule::get_StartOfDocument()
		}
		.property instance class Avalon.Test.Annotations.TableSelector Tables()
		{
			.get instance class Avalon.Test.Annotations.TableSelector Avalon.Test.Annotations.SelectionModule::get_Tables()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Control Target()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Control Avalon.Test.Annotations.SelectionModule::get_Target()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextSelection TextSelection()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextSelection Avalon.Test.Annotations.SelectionModule::get_TextSelection()
		}
		.property instance bool WriteThrough()
		{
			.get instance bool Avalon.Test.Annotations.SelectionModule::get_WriteThrough()
			.set instance void Avalon.Test.Annotations.SelectionModule::set_WriteThrough(bool)
		}
	}
	.class public SelectionProcessorTester
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [TestRuntime]Annotations.Test.Framework.TestSuite testSuite, class 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor' selectionProcessor)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyMergeSelections(object anchor1, object anchor2, bool expectedResult, string expectedNewAnchor)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyMergeSelections(object anchor1, object anchor2, string startText, string endText, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyMergeSelectionsFailed(object selection1, object selection2, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGetSelectedNodes(object selection, object[] expectedResults)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGetSelectedNodesFails(object selection, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGenerateLocatorPartsFails(object selection, class [WindowsBase]System.Windows.DependencyObject startNode, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart part, class [WindowsBase]System.Windows.DependencyObject startNode, object expectedResult, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' expectedAttachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyResolveLocatorPartFails(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart part, class [WindowsBase]System.Windows.DependencyObject node, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGetParent(object selection, class [PresentationCore]System.Windows.UIElement expectedParent)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGetParentFails(object selection, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGetAnchorPoint(object selection, valuetype [WindowsBase]System.Windows.Point expectedPoint)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGetAnchorPointFails(object selection, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.field family class 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor' processor
		.field family class [TestRuntime]Annotations.Test.Framework.TestSuite suite
	}
	.class public SimpleSelectionData
		extends Avalon.Test.Annotations.PaginatedSelectionData
	{
		.method public hidebysig specialname 
			instance void .ctor(int32 page, int32 offset, int32 length)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 page, int32 offset, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 page, valuetype Avalon.Test.Annotations.PagePosition position, int32 length)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 page, valuetype Avalon.Test.Annotations.PagePosition position, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.ADocumentViewerBaseSelector selectionModule)
		{
			ret
		}
	}
	.class public StickyNoteDefinition
		extends Avalon.Test.Annotations.AnnotationDefinition
	{
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor, valuetype Avalon.Test.Annotations.AnnotationMode mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor, bool isExpanded)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor, bool isExpanded, bool sendToBack)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor, bool isExpanded, bool sendToBack, valuetype Avalon.Test.Annotations.AnnotationMode mode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.ISelectionData anchor, valuetype Avalon.Test.Annotations.AnnotationMode mode, bool isExpanded, string author)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Create(class Avalon.Test.Annotations.ATextControlWrapper target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Create(class Avalon.Test.Annotations.ATextControlWrapper target, bool goToSelection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Delete(class Avalon.Test.Annotations.ATextControlWrapper target)
		{
			ret
		}
	}
	.class public sealed StickyNoteState
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Avalon.Test.Annotations.StickyNoteState Active_Focused = int32(0x00000001)
		.field static public literal valuetype Avalon.Test.Annotations.StickyNoteState Active_Selected = int32(0x00000002)
		.field static public literal valuetype Avalon.Test.Annotations.StickyNoteState Inactive = int32(0x00000000)
	}
	.class public StickyNoteStateInfo
		extends Avalon.Test.Annotations.AnnotationStateInfo
	{
		.method public hidebysig specialname 
			instance void .ctor(valuetype [WindowsBase]System.Windows.Point position, bool isMaximized, int32 zOrder, class Avalon.Test.Annotations.HighlightStateInfo anchor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Point get_Position()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsMaximized()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.HighlightStateInfo get_AnchorState()
		{
			ret
		}
		.method public static hidebysig 
			class Avalon.Test.Annotations.StickyNoteStateInfo FromStickyNote(class [PresentationFramework]System.Windows.Controls.StickyNoteControl sn)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.property instance class Avalon.Test.Annotations.HighlightStateInfo AnchorState()
		{
			.get instance class Avalon.Test.Annotations.HighlightStateInfo Avalon.Test.Annotations.StickyNoteStateInfo::get_AnchorState()
		}
		.property instance bool IsMaximized()
		{
			.get instance bool Avalon.Test.Annotations.StickyNoteStateInfo::get_IsMaximized()
		}
		.property instance valuetype [WindowsBase]System.Windows.Point Position()
		{
			.get instance valuetype [WindowsBase]System.Windows.Point Avalon.Test.Annotations.StickyNoteStateInfo::get_Position()
		}
	}
	.class public StickyNoteWrapper
		extends [mscorlib]System.Object
	{
		.class nested public ContextMenuWrapper
			extends [mscorlib]System.Object
		{
			.class nested public sealed Position
				extends [mscorlib]System.Enum
			{
				.field public rtspecialname specialname int32 value__
				.field static public literal valuetype Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper/Position Middle = int32(0x00000001)
				.field static public literal valuetype Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper/Position UpperLeft = int32(0x00000000)
			}
			.method public hidebysig 
				instance void Cut(valuetype Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper/Position menuPosition)
			{
				ret
			}
			.method public hidebysig 
				instance void Copy(valuetype Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper/Position menuPosition)
			{
				ret
			}
			.method public hidebysig 
				instance void Paste(valuetype Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper/Position menuPosition)
			{
				ret
			}
			.method public hidebysig 
				instance void OpenMenu(valuetype Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper/Position menuPosition)
			{
				ret
			}
			.method public hidebysig specialname 
				instance void set_UseAccessKeys(bool 'value')
			{
				ret
			}
			.method public hidebysig specialname 
				instance bool get_UseAccessKeys()
			{
				ret
			}
			.property instance bool UseAccessKeys()
			{
				.get instance bool Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper::get_UseAccessKeys()
				.set instance void Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper::set_UseAccessKeys(bool)
			}
		}
		.class nested public MenuWrapper
			extends [mscorlib]System.Object
		{
			.class nested public MenuItemWrapper
				extends [mscorlib]System.Object
			{
				.method public hidebysig 
					instance void Execute()
				{
					ret
				}
				.method public hidebysig specialname 
					instance bool get_IsEnabled()
				{
					ret
				}
				.property instance bool IsEnabled()
				{
					.get instance bool Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper::get_IsEnabled()
				}
			}
			.method public hidebysig specialname 
				instance class [PresentationFramework]System.Windows.Controls.MenuItem get_Target()
			{
				ret
			}
			.method public hidebysig 
				instance void Open()
			{
				ret
			}
			.method public hidebysig specialname 
				instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper get_Delete()
			{
				ret
			}
			.method public hidebysig specialname 
				instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper get_Copy()
			{
				ret
			}
			.method public hidebysig specialname 
				instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper get_Paste()
			{
				ret
			}
			.method public hidebysig specialname 
				instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper get_Ink()
			{
				ret
			}
			.method public hidebysig specialname 
				instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper get_Select()
			{
				ret
			}
			.method public hidebysig specialname 
				instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper get_Erase()
			{
				ret
			}
			.field static public literal string CopyItem = "PART_CopyMenuItem"
			.field static public literal string DeleteItem = "PART_DeleteMenuItem"
			.field static public literal string EraseItem = "PART_EraseMenuItem"
			.field static public literal string InkItem = "PART_InkMenuItem"
			.field static public literal string PasteItem = "PART_PasteMenuItem"
			.field static public literal string SelectItem = "PART_SelectMenuItem"
			.field static public literal string ToolsItem = "EditMenuItem"
			.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Copy()
			{
				.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Copy()
			}
			.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Delete()
			{
				.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Delete()
			}
			.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Erase()
			{
				.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Erase()
			}
			.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Ink()
			{
				.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Ink()
			}
			.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Paste()
			{
				.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Paste()
			}
			.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Select()
			{
				.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper/MenuItemWrapper Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Select()
			}
			.property instance class [PresentationFramework]System.Windows.Controls.MenuItem Target()
			{
				.get instance class [PresentationFramework]System.Windows.Controls.MenuItem Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper::get_Target()
			}
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.Control stickynote, string uniqueId)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Proxies.System.Windows.Controls.StickyNoteControl stickynoteProxy, string uniqueId)
		{
			ret
		}
		.method public hidebysig 
			instance void Focus()
		{
			ret
		}
		.method public hidebysig 
			instance void ClickIn()
		{
			ret
		}
		.method public hidebysig 
			instance void MoveTo()
		{
			ret
		}
		.method public hidebysig 
			instance void MinimizeWithMouse()
		{
			ret
		}
		.method public hidebysig 
			instance void ResizeWithMouse(valuetype [WindowsBase]System.Windows.Vector delta)
		{
			ret
		}
		.method public hidebysig 
			instance void Drag(valuetype [WindowsBase]System.Windows.Point dest)
		{
			ret
		}
		.method public hidebysig 
			instance void Drag(valuetype [WindowsBase]System.Windows.Vector delta)
		{
			ret
		}
		.method public hidebysig 
			instance void Move(valuetype [WindowsBase]System.Windows.Vector delta)
		{
			ret
		}
		.method public hidebysig 
			instance void SelectAll()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.RichTextBox get_RichTextBox()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.InkCanvas get_InkCanvas()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Content()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Content(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_HasContent()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.FrameworkElement get_InnerControl()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ZOrder()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Author()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Expanded()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Expanded(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.StickyNoteControl get_Target()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Point get_Location()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Avalon.Test.Annotations.StickyNoteState get_State()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Size(valuetype [WindowsBase]System.Windows.Size 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Rect get_BoundingRect()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper get_Menu()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper get_ContextMenu()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb get_TitleThumb()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb get_ResizeThumb()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Button get_CloseButton()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Button get_Icon()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType get_Type()
		{
			ret
		}
		.field static public valuetype [WindowsBase]System.Windows.Size IconDefaultSize
		.field static public valuetype [WindowsBase]System.Windows.Size IconHoverSize
		.property instance string Author()
		{
			.get instance string Avalon.Test.Annotations.StickyNoteWrapper::get_Author()
		}
		.property instance valuetype [WindowsBase]System.Windows.Rect BoundingRect()
		{
			.get instance valuetype [WindowsBase]System.Windows.Rect Avalon.Test.Annotations.StickyNoteWrapper::get_BoundingRect()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Button CloseButton()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Button Avalon.Test.Annotations.StickyNoteWrapper::get_CloseButton()
		}
		.property instance object Content()
		{
			.get instance object Avalon.Test.Annotations.StickyNoteWrapper::get_Content()
			.set instance void Avalon.Test.Annotations.StickyNoteWrapper::set_Content(object)
		}
		.property instance class Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper ContextMenu()
		{
			.get instance class Avalon.Test.Annotations.StickyNoteWrapper/ContextMenuWrapper Avalon.Test.Annotations.StickyNoteWrapper::get_ContextMenu()
		}
		.property instance bool Expanded()
		{
			.get instance bool Avalon.Test.Annotations.StickyNoteWrapper::get_Expanded()
			.set instance void Avalon.Test.Annotations.StickyNoteWrapper::set_Expanded(bool)
		}
		.property instance bool HasContent()
		{
			.get instance bool Avalon.Test.Annotations.StickyNoteWrapper::get_HasContent()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Button Icon()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Button Avalon.Test.Annotations.StickyNoteWrapper::get_Icon()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.InkCanvas InkCanvas()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.InkCanvas Avalon.Test.Annotations.StickyNoteWrapper::get_InkCanvas()
		}
		.property instance class [PresentationFramework]System.Windows.FrameworkElement InnerControl()
		{
			.get instance class [PresentationFramework]System.Windows.FrameworkElement Avalon.Test.Annotations.StickyNoteWrapper::get_InnerControl()
		}
		.property instance valuetype [WindowsBase]System.Windows.Point Location()
		{
			.get instance valuetype [WindowsBase]System.Windows.Point Avalon.Test.Annotations.StickyNoteWrapper::get_Location()
		}
		.property instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper Menu()
		{
			.get instance class Avalon.Test.Annotations.StickyNoteWrapper/MenuWrapper Avalon.Test.Annotations.StickyNoteWrapper::get_Menu()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb ResizeThumb()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb Avalon.Test.Annotations.StickyNoteWrapper::get_ResizeThumb()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.RichTextBox RichTextBox()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.RichTextBox Avalon.Test.Annotations.StickyNoteWrapper::get_RichTextBox()
		}
		.property instance valuetype [WindowsBase]System.Windows.Size Size()
		{
			.set instance void Avalon.Test.Annotations.StickyNoteWrapper::set_Size(valuetype [WindowsBase]System.Windows.Size)
		}
		.property instance valuetype Avalon.Test.Annotations.StickyNoteState State()
		{
			.get instance valuetype Avalon.Test.Annotations.StickyNoteState Avalon.Test.Annotations.StickyNoteWrapper::get_State()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.StickyNoteControl Target()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.StickyNoteControl Avalon.Test.Annotations.StickyNoteWrapper::get_Target()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb TitleThumb()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb Avalon.Test.Annotations.StickyNoteWrapper::get_TitleThumb()
		}
		.property instance valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType Type()
		{
			.get instance valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType Avalon.Test.Annotations.StickyNoteWrapper::get_Type()
		}
		.property instance int32 ZOrder()
		{
			.get instance int32 Avalon.Test.Annotations.StickyNoteWrapper::get_ZOrder()
		}
	}
	.class public SubtreeProcessorTester
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [TestRuntime]Annotations.Test.Framework.TestSuite testSuite, class 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor' subTreeProcessor)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyPreProcessNode(class [WindowsBase]System.Windows.DependencyObject node, bool expectedCalledProcessAnnotations, int32 expectedNumAttachedAnnotations)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyPreProcessNodeFails(class [WindowsBase]System.Windows.DependencyObject node, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyPostProcessNode(class [WindowsBase]System.Windows.DependencyObject node, bool childrenCalledProcessAnnotations, bool expectedCalledProcessAnnotations, int32 expectedNumAttachedAnnotations)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyPostProcessNodeFails(class [WindowsBase]System.Windows.DependencyObject node, bool childrenCalledProcessAnnotations, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGenerateLocator(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, bool expectedContinueGenerating)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyGenerateLocatorFails(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, bool expectedContinueResolving, object expectedResult)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyResolveLocatorPartFails(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, class [mscorlib]System.Type expectedExceptionType)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyGetLocatorPartTypes(class [System.Xml]System.Xml.XmlQualifiedName[] names)
		{
			ret
		}
		.field family class 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor' processor
		.field family class [TestRuntime]Annotations.Test.Framework.TestSuite suite
	}
	.class public TabHelper
		extends [mscorlib]System.Object
	{
		.class nested public sealed TabDirection
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype Avalon.Test.Annotations.TabHelper/TabDirection Backward = int32(0x00000001)
			.field static public literal valuetype Avalon.Test.Annotations.TabHelper/TabDirection Forward = int32(0x00000000)
		}
		.method public hidebysig 
			instance void TabToAnnotationGroup()
		{
			ret
		}
		.method public hidebysig 
			instance void Tab()
		{
			ret
		}
		.method public hidebysig 
			instance void Tab(int32 times)
		{
			ret
		}
		.method public hidebysig 
			instance void CtrlTab()
		{
			ret
		}
		.method public hidebysig 
			instance void CtrlTab(int32 times)
		{
			ret
		}
		.method public hidebysig 
			instance void CtrlShiftTab()
		{
			ret
		}
		.method public hidebysig 
			instance void CtrlShiftTab(int32 times)
		{
			ret
		}
		.method public hidebysig 
			instance void MoveToNextAnnotation()
		{
			ret
		}
		.method public hidebysig 
			instance void MoveToPreviousAnnotation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.IInputElement get_CurrentlyFocusedElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Avalon.Test.Annotations.StickyNoteWrapper get_CurrentlyFocusedStickyNote()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Window get_Root()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Root(class [PresentationFramework]System.Windows.Window 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Avalon.Test.Annotations.TabHelper/TabDirection get_Direction()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Direction(valuetype Avalon.Test.Annotations.TabHelper/TabDirection 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCurrentElementAStickyNote()
		{
			ret
		}
		.method public hidebysig 
			instance void LogFocusedElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.IInputElement CurrentlyFocusedElement()
		{
			.get instance class [PresentationCore]System.Windows.IInputElement Avalon.Test.Annotations.TabHelper::get_CurrentlyFocusedElement()
		}
		.property instance class Avalon.Test.Annotations.StickyNoteWrapper CurrentlyFocusedStickyNote()
		{
			.get instance class Avalon.Test.Annotations.StickyNoteWrapper Avalon.Test.Annotations.TabHelper::get_CurrentlyFocusedStickyNote()
		}
		.property instance valuetype Avalon.Test.Annotations.TabHelper/TabDirection Direction()
		{
			.get instance valuetype Avalon.Test.Annotations.TabHelper/TabDirection Avalon.Test.Annotations.TabHelper::get_Direction()
			.set instance void Avalon.Test.Annotations.TabHelper::set_Direction(valuetype Avalon.Test.Annotations.TabHelper/TabDirection)
		}
		.property instance bool IsCurrentElementAStickyNote()
		{
			.get instance bool Avalon.Test.Annotations.TabHelper::get_IsCurrentElementAStickyNote()
		}
		.property instance class [PresentationFramework]System.Windows.Window Root()
		{
			.get instance class [PresentationFramework]System.Windows.Window Avalon.Test.Annotations.TabHelper::get_Root()
			.set instance void Avalon.Test.Annotations.TabHelper::set_Root(class [PresentationFramework]System.Windows.Window)
		}
	}
	.class public TableSelectionData
		extends Avalon.Test.Annotations.ISelectionData
	{
		.method public hidebysig specialname 
			instance void .ctor(string tableName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, int32 endRow)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, int32 startRow, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, int32 row, int32 column)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, int32 startRow)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, int32 startRow, int32 startColumn, int32 endRow, int32 endColumn)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string tableName, int32 row, int32 column, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method family virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange DoSetSelection(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
	}
	.class public TableSelector
		extends Avalon.Test.Annotations.FlowElementSelector
	{
		.method public hidebysig specialname 
			instance void .ctor(class Avalon.Test.Annotations.SelectionModule selectionModule)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, int32 rowIdx, int32 columnIdx)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, int32 startRow, int32 startColumn, int32 endRow, int32 endColumn)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, int32 startRow)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, int32 row, int32 column, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, valuetype Avalon.Test.Annotations.PagePosition startPosition, int32 startOffset, int32 endRow)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange Select(string name, int32 startRow, valuetype Avalon.Test.Annotations.PagePosition endPosition, int32 endOffset)
		{
			ret
		}
	}
	.class public sealed TestMode
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Avalon.Test.Annotations.TestMode Fixed = int32(0x00000000)
		.field static public literal valuetype Avalon.Test.Annotations.TestMode Flow = int32(0x00000001)
	}
	.class public 'VisualTreeWalker`1'<T>
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<!0> FindChildren(class [PresentationCore]System.Windows.Media.Visual startNode)
		{
			ret
		}
		.method public hidebysig 
			instance !0 FindParent(class [PresentationCore]System.Windows.Media.Visual startNode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
}
.namespace 'Proxies.MS.Internal.Annotations'
{
	.class public sequential sealed AnnotationXmlConstants
		extends [mscorlib]System.ValueType
	{
		.class nested public sequential sealed Attributes
			extends [mscorlib]System.ValueType
		{
			.field static public literal string Id = "Id"
			.field static public literal string CreationTime = "CreationTime"
			.field static public literal string LastModificationTime = "LastModificationTime"
			.field static public literal string TypeName = "Type"
			.field static public literal string ResourceName = "Name"
			.field static public literal string ItemName = "Name"
			.field static public literal string ItemValue = "Value"
		}
		.class nested public sequential sealed Elements
			extends [mscorlib]System.ValueType
		{
			.field static public literal string Annotation = "Annotation"
			.field static public literal string Resource = "Resource"
			.field static public literal string ContentLocator = "ContentLocator"
			.field static public literal string ContentLocatorGroup = "ContentLocatorGroup"
			.field static public literal string AuthorCollection = "Authors"
			.field static public literal string AnchorCollection = "Anchors"
			.field static public literal string CargoCollection = "Cargos"
			.field static public literal string Item = "Item"
			.field static public literal string StringAuthor = "StringAuthor"
		}
		.class nested public sequential sealed Namespaces
			extends [mscorlib]System.ValueType
		{
			.field static public literal string CoreSchemaNamespace = "http://schemas.microsoft.com/windows/annotations/2003/11/core"
			.field static public literal string BaseSchemaNamespace = "http://schemas.microsoft.com/windows/annotations/2003/11/base"
		}
		.class nested public sequential sealed Prefixes
			extends [mscorlib]System.ValueType
		{
			.field static public literal string XmlnsPrefix = "xmlns"
			.field static public literal string CoreSchemaPrefix = "anc"
			.field static public literal string BaseSchemaPrefix = "anb"
		}
	}
	.class public sealed AttachedAnnotationAction
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' Added = int32(0x00000003)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' AnchorModified = int32(0x00000002)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' Deleted = int32(0x00000004)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' Loaded = int32(0x00000000)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' Unloaded = int32(0x00000001)
	}
	.class public AttachedAnnotationChangedEventArgs
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' action, class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, object previousAttachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' previousAttachmentLevel)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' Added(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' Loaded(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' Deleted(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' Unloaded(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' Modified(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, object previousAttachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' previousAttachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' get_Action()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' get_AttachedAnnotation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_PreviousAttachedAnchor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' get_PreviousAttachmentLevel()
		{
			ret
		}
		.field static family string static_DelegateAssembly
		.property instance valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' Action()
		{
			.get instance valuetype 'Proxies.MS.Internal.Annotations.AttachedAnnotationAction' 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs'::get_Action()
		}
		.property instance class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' AttachedAnnotation()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs'::get_AttachedAnnotation()
		}
		.property instance object PreviousAttachedAnchor()
		{
			.get instance object 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs'::get_PreviousAttachedAnchor()
		}
		.property instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' PreviousAttachmentLevel()
		{
			.get instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs'::get_PreviousAttachmentLevel()
		}
	}
	.class public sealed AttachedAnnotationChangedEventHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(object sender, class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' e, class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed AttachmentLevel
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' EndPortion = int32(0x00000003)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' Full = int32(0x00000000)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' Incomplete = int32(0x00000004)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' MiddlePortion = int32(0x00000002)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' StartPortion = int32(0x00000001)
		.field static public literal valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' Unresolved = int32(0x00000005)
	}
	.class public interface abstract IAttachedAnnotation
		implements Annotations.Test.Reflection.IReflectiveProxy
	{
		.method public virtual hidebysig newslot abstract 
			instance bool IsAnchorEqual(object o)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationFramework]System.Windows.Annotations.Annotation get_Annotation()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationFramework]System.Windows.Annotations.AnnotationResource get_Anchor()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance object get_AttachedAnchor()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' get_AttachmentLevel()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [WindowsBase]System.Windows.DependencyObject get_Parent()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance valuetype [WindowsBase]System.Windows.Point get_AnchorPoint()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore get_Store()
		{
		}
		.property instance class [PresentationFramework]System.Windows.Annotations.AnnotationResource Anchor()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.AnnotationResource 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_Anchor()
		}
		.property instance valuetype [WindowsBase]System.Windows.Point AnchorPoint()
		{
			.get instance valuetype [WindowsBase]System.Windows.Point 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_AnchorPoint()
		}
		.property instance class [PresentationFramework]System.Windows.Annotations.Annotation Annotation()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.Annotation 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_Annotation()
		}
		.property instance object AttachedAnchor()
		{
			.get instance object 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_AttachedAnchor()
		}
		.property instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' AttachmentLevel()
		{
			.get instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_AttachmentLevel()
		}
		.property instance class [WindowsBase]System.Windows.DependencyObject Parent()
		{
			.get instance class [WindowsBase]System.Windows.DependencyObject 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_Parent()
		}
		.property instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore Store()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'::get_Store()
		}
	}
}
.namespace 'Proxies.MS.Internal.Annotations.Anchoring'
{
	.class public AttachedAnnotation
		extends Annotations.Test.Reflection.AReflectiveProxy
		implements 'Proxies.MS.Internal.Annotations.IAttachedAnnotation', Annotations.Test.Reflection.IReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager, class [PresentationFramework]System.Windows.Annotations.Annotation annotation, class [PresentationFramework]System.Windows.Annotations.AnnotationResource anchor, object attachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' attachmentLevel)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager, class [PresentationFramework]System.Windows.Annotations.Annotation annotation, class [PresentationFramework]System.Windows.Annotations.AnnotationResource anchor, object attachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' attachmentLevel, class [WindowsBase]System.Windows.DependencyObject parent)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsAnchorEqual(object o)
		{
			ret
		}
		.method public hidebysig 
			instance void Update(object attachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' attachmentLevel, class [WindowsBase]System.Windows.DependencyObject parent)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore GetStore()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [PresentationFramework]System.Windows.Annotations.Annotation get_Annotation()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [PresentationFramework]System.Windows.Annotations.AnnotationResource get_Anchor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_AttachedAnchor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' get_AttachmentLevel()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [WindowsBase]System.Windows.DependencyObject get_Parent()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype [WindowsBase]System.Windows.Point get_AnchorPoint()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore get_Store()
		{
			ret
		}
		.field static family string static_DelegateAssembly
		.property instance class [PresentationFramework]System.Windows.Annotations.AnnotationResource Anchor()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.AnnotationResource 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_Anchor()
		}
		.property instance valuetype [WindowsBase]System.Windows.Point AnchorPoint()
		{
			.get instance valuetype [WindowsBase]System.Windows.Point 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_AnchorPoint()
		}
		.property instance class [PresentationFramework]System.Windows.Annotations.Annotation Annotation()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.Annotation 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_Annotation()
		}
		.property instance object AttachedAnchor()
		{
			.get instance object 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_AttachedAnchor()
		}
		.property instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' AttachmentLevel()
		{
			.get instance valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_AttachmentLevel()
		}
		.property instance class [WindowsBase]System.Windows.DependencyObject Parent()
		{
			.get instance class [WindowsBase]System.Windows.DependencyObject 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_Parent()
		}
		.property instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore Store()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore 'Proxies.MS.Internal.Annotations.Anchoring.AttachedAnnotation'::get_Store()
		}
	}
	.class public DataIdProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> PreProcessNode(class [WindowsBase]System.Windows.DependencyObject node, [out] bool& calledProcessAnnotations)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> PostProcessNode(class [WindowsBase]System.Windows.DependencyObject node, bool childrenCalledProcessAnnotations, [out] bool& calledProcessAnnotations)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Annotations.ContentLocator GenerateLocator(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, [out] bool& continueGenerating)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [WindowsBase]System.Windows.DependencyObject ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] bool& continueResolving)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public static hidebysig 
			void SetDataId(class [WindowsBase]System.Windows.DependencyObject d, string id)
		{
			ret
		}
		.method public static hidebysig 
			string GetDataId(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public static hidebysig 
			void SetFetchAnnotationsAsBatch(class [WindowsBase]System.Windows.DependencyObject d, bool id)
		{
			ret
		}
		.method public static hidebysig 
			bool GetFetchAnnotationsAsBatch(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public static hidebysig 
			void OnDataIdPropertyChanged(class [WindowsBase]System.Windows.DependencyObject d, valuetype [WindowsBase]System.Windows.DependencyPropertyChangedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			object CoerceDataId(class [WindowsBase]System.Windows.DependencyObject d, object 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart CreateLocatorPart(class [WindowsBase]System.Windows.DependencyObject node)
		{
			ret
		}
		.method public hidebysig 
			instance string GetNodeId(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public class [System.Xml]System.Xml.XmlQualifiedName DataIdElementName
		.field static public class [WindowsBase]System.Windows.DependencyProperty DataIdProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty FetchAnnotationsAsBatchProperty
		.field static public string Id
		.field static public class [System.Xml]System.Xml.XmlQualifiedName[] LocatorPartTypeNames
		.field static public string ValueAttributeName
	}
	.class public DynamicSelectionProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MergeSelections(object selection1, object selection2, [out] object& newSelection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [WindowsBase]System.Windows.DependencyObject> GetSelectedNodes(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationCore]System.Windows.UIElement GetParent(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetAnchorPoint(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> GenerateLocatorParts(object selection, class [WindowsBase]System.Windows.DependencyObject startNode)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
	}
	.class public FixedPageProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> PreProcessNode(class [WindowsBase]System.Windows.DependencyObject node, [out] bool& calledProcessAnnotations)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Annotations.ContentLocator GenerateLocator(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, [out] bool& continueGenerating)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [WindowsBase]System.Windows.DependencyObject ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] bool& continueResolving)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart CreateLocatorPart(int32 page)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_UseLogicalTree(bool 'value')
		{
			ret
		}
		.field static public string Id
		.field static public class [System.Xml]System.Xml.XmlQualifiedName[] LocatorPartTypeNames
		.field static public class [System.Xml]System.Xml.XmlQualifiedName PageNumberElementName
		.field static public string ValueAttributeName
		.property instance bool UseLogicalTree()
		{
			.set instance void 'Proxies.MS.Internal.Annotations.Anchoring.FixedPageProcessor'::set_UseLogicalTree(bool)
		}
	}
	.class public FixedPageProxy
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.DependencyObject parent, int32 page)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Page()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'> get_Segments()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Segments(class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'> 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void AddSegment(class 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment' seg)
		{
			ret
		}
		.field static family string staticstatic_DelegateAssembly
		.property instance int32 Page()
		{
			.get instance int32 'Proxies.MS.Internal.Annotations.Anchoring.FixedPageProxy'::get_Page()
		}
		.property instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'> Segments()
		{
			.get instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'> 'Proxies.MS.Internal.Annotations.Anchoring.FixedPageProxy'::get_Segments()
			.set instance void 'Proxies.MS.Internal.Annotations.Anchoring.FixedPageProxy'::set_Segments(class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'>)
		}
	}
	.class public FixedTextSelectionProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MergeSelections(object selection1, object selection2, [out] object& newSelection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [WindowsBase]System.Windows.DependencyObject> GetSelectedNodes(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationCore]System.Windows.UIElement GetParent(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetAnchorPoint(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> GenerateLocatorParts(object selection, class [WindowsBase]System.Windows.DependencyObject startNode)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationCore]System.Windows.Documents.DocumentPage GetDocumentPage(class [PresentationFramework]System.Windows.Documents.FixedPage page)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetPoint(string xstr, string ystr, string pointType)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public string EndXAttribute
		.field static public string EndYAttribute
		.field static public class [System.Xml]System.Xml.XmlQualifiedName FixedTextElementName
		.field static public class [System.Xml]System.Xml.XmlQualifiedName[] LocatorPartTypeNames
		.field static public string StartXAttribute
		.field static public string StartYAttribute
	}
	.class public LocatorManager
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore store)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public hidebysig 
			instance void RegisterSubTreeProcessor(class 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor' processor, string processorId)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor' GetSubTreeProcessor(class [WindowsBase]System.Windows.DependencyObject node)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor' GetSubTreeProcessorForLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart)
		{
			ret
		}
		.method public hidebysig 
			instance void RegisterSelectionProcessor(class 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor' processor, class [mscorlib]System.Type selectionType)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor' GetSelectionProcessor(class [mscorlib]System.Type selectionType)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor' GetSelectionProcessorForLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> ProcessAnnotations(class [WindowsBase]System.Windows.DependencyObject node)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase> GenerateLocators(object selection)
		{
			ret
		}
		.method public hidebysig 
			instance object ResolveLocator(class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase locator, int32 offset, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
			ret
		}
		.method public static hidebysig 
			void SetSubTreeProcessorId(class [WindowsBase]System.Windows.DependencyObject d, string id)
		{
			ret
		}
		.method public static hidebysig 
			string GetSubTreeProcessorId(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> ProcessSubTree(class [WindowsBase]System.Windows.DependencyObject subTree)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase> GenerateLocators(class 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor' processor, class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' startNode, object selection)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase GenerateLocatorGroup(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, object selection)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase> Merge(class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase initialLocator, class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorBase> additionalLocators)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public class [WindowsBase]System.Windows.DependencyProperty SubTreeProcessorIdProperty
		.field static family string static_DelegateAssembly
	}
	.class public PathNode
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.DependencyObject node)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' BuildPathForElements(class [mscorlib]System.Collections.ICollection nodes)
		{
			ret
		}
		.method public static hidebysig 
			class [WindowsBase]System.Windows.DependencyObject GetParent(class [WindowsBase]System.Windows.DependencyObject node)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' BuildPathForElement(class [WindowsBase]System.Windows.DependencyObject node)
		{
			ret
		}
		.method public static hidebysig 
			class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' AddBranchToPath(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' path, class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' branch)
		{
			ret
		}
		.method public hidebysig 
			instance void AddChild(object child)
		{
			ret
		}
		.method public hidebysig 
			instance void FreezeChildren()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyObject get_Node()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Collections.IList get_Children()
		{
			ret
		}
		.field static public class [WindowsBase]System.Windows.DependencyProperty HiddenParentProperty
		.field static family string static_DelegateAssembly
		.property instance class [mscorlib]System.Collections.IList Children()
		{
			.get instance class [mscorlib]System.Collections.IList 'Proxies.MS.Internal.Annotations.Anchoring.PathNode'::get_Children()
		}
		.property instance class [WindowsBase]System.Windows.DependencyObject Node()
		{
			.get instance class [WindowsBase]System.Windows.DependencyObject 'Proxies.MS.Internal.Annotations.Anchoring.PathNode'::get_Node()
		}
	}
	.class public PointSegment
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(valuetype [WindowsBase]System.Windows.Point start, valuetype [WindowsBase]System.Windows.Point end)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Point get_Start()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Start(valuetype [WindowsBase]System.Windows.Point 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Point get_End()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_End(valuetype [WindowsBase]System.Windows.Point 'value')
		{
			ret
		}
		.field static public initonly valuetype [WindowsBase]System.Windows.Point NotAPoint
		.field static family string staticstatic_DelegateAssembly
		.property instance valuetype [WindowsBase]System.Windows.Point End()
		{
			.get instance valuetype [WindowsBase]System.Windows.Point 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'::get_End()
			.set instance void 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'::set_End(valuetype [WindowsBase]System.Windows.Point)
		}
		.property instance valuetype [WindowsBase]System.Windows.Point Start()
		{
			.get instance valuetype [WindowsBase]System.Windows.Point 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'::get_Start()
			.set instance void 'Proxies.MS.Internal.Annotations.Anchoring.PointSegment'::set_Start(valuetype [WindowsBase]System.Windows.Point)
		}
	}
	.class public abstract SelectionProcessor
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance bool MergeSelections(object selection1, object selection2, [out] object& newSelection)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [WindowsBase]System.Windows.DependencyObject> GetSelectedNodes(object selection)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class [PresentationCore]System.Windows.UIElement GetParent(object selection)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance valuetype [WindowsBase]System.Windows.Point GetAnchorPoint(object selection)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> GenerateLocatorParts(object selection, class [WindowsBase]System.Windows.DependencyObject startNode)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static family string staticstatic_DelegateAssembly
	}
	.class public abstract SubTreeProcessor
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> PreProcessNode(class [WindowsBase]System.Windows.DependencyObject node, [out] bool& calledProcessAnnotations)
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> PostProcessNode(class [WindowsBase]System.Windows.DependencyObject node, bool childrenCalledProcessAnnotations, [out] bool& calledProcessAnnotations)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class [PresentationFramework]System.Windows.Annotations.ContentLocator GenerateLocator(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, [out] bool& continueGenerating)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class [WindowsBase]System.Windows.DependencyObject ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] bool& continueResolving)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' get_Manager()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' get_locatorManager()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_locatorManager(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' 'value')
		{
			ret
		}
		.field static family string staticstatic_DelegateAssembly
		.property instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' Manager()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor'::get_Manager()
		}
		.property instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' locatorManager()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor'::get_locatorManager()
			.set instance void 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor'::set_locatorManager(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager')
		}
	}
	.class public TextFingerprintProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SubTreeProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' manager)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> PreProcessNode(class [WindowsBase]System.Windows.DependencyObject node, [out] bool& calledProcessAnnotations)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationFramework]System.Windows.Annotations.ContentLocator GenerateLocator(class 'Proxies.MS.Internal.Annotations.Anchoring.PathNode' node, [out] bool& continueGenerating)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [WindowsBase]System.Windows.DependencyObject ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] bool& continueResolving)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public string Id
	}
	.class public TextSelectionProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MergeSelections(object anchor1, object anchor2, [out] object& newAnchor)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [WindowsBase]System.Windows.DependencyObject> GetSelectedNodes(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationCore]System.Windows.UIElement GetParent(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetAnchorPoint(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> GenerateLocatorParts(object selection, class [WindowsBase]System.Windows.DependencyObject startNode)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public hidebysig 
			instance void SetTargetDocumentPageView(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentPageView target)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Clamping(bool 'value')
		{
			ret
		}
		.field static public class [System.Xml]System.Xml.XmlQualifiedName CharacterRangeElementName
		.field static public string CountAttribute
		.field static public string IncludeOverlaps
		.field static public class [System.Xml]System.Xml.XmlQualifiedName[] LocatorPartTypeNames
		.field static public string SegmentAttribute
		.property instance bool Clamping()
		{
			.set instance void 'Proxies.MS.Internal.Annotations.Anchoring.TextSelectionProcessor'::set_Clamping(bool)
		}
	}
	.class public TextViewSelectionProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MergeSelections(object selection1, object selection2, [out] object& newSelection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [WindowsBase]System.Windows.DependencyObject> GetSelectedNodes(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationCore]System.Windows.UIElement GetParent(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetAnchorPoint(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> GenerateLocatorParts(object selection, class [WindowsBase]System.Windows.DependencyObject startNode)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public string DocumentPageViewRangeElementName
		.field static public class [System.Xml]System.Xml.XmlQualifiedName[] LocatorPartTypeNames
	}
	.class public TreeNodeSelectionProcessor
		extends 'Proxies.MS.Internal.Annotations.Anchoring.SelectionProcessor'
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool MergeSelections(object selection1, object selection2, [out] object& newSelection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [WindowsBase]System.Windows.DependencyObject> GetSelectedNodes(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [PresentationCore]System.Windows.UIElement GetParent(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetAnchorPoint(object selection)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart> GenerateLocatorParts(object selection, class [WindowsBase]System.Windows.DependencyObject startNode)
		{
			ret
		}
		.method public virtual hidebysig 
			instance object ResolveLocatorPart(class [PresentationFramework]System.Windows.Annotations.ContentLocatorPart locatorPart, class [WindowsBase]System.Windows.DependencyObject startNode, [out] valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel'& attachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig 
			instance class [System.Xml]System.Xml.XmlQualifiedName[] GetLocatorPartTypes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public class [System.Xml]System.Xml.XmlQualifiedName[] LocatorPartTypeNames
	}
}
.namespace 'Proxies.MS.Internal.Annotations.Component'
{
	.class public AdornerPresentationContext
		extends 'Proxies.MS.Internal.Annotations.Component.PresentationContext'
	{
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Documents.AdornerLayer adornerLayer, class 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner' adorner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void AddToHost(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void RemoveFromHost(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component, bool reorder)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void InvalidateTransform(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void BringToFront(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SendToBack(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public static hidebysig 
			bool op_Equality(class 'Proxies.MS.Internal.Annotations.Component.AdornerPresentationContext' left, class 'Proxies.MS.Internal.Annotations.Component.AdornerPresentationContext' right)
		{
			ret
		}
		.method public static hidebysig 
			bool op_Inequality(class 'Proxies.MS.Internal.Annotations.Component.AdornerPresentationContext' c1, class 'Proxies.MS.Internal.Annotations.Component.AdornerPresentationContext' c2)
		{
			ret
		}
		.method public hidebysig 
			instance void UpdateComponentZOrder(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public static hidebysig 
			void HostComponent(class [PresentationFramework]System.Windows.Documents.AdornerLayer adornerLayer, class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component, class [PresentationCore]System.Windows.UIElement annotatedElement, bool reorder)
		{
			ret
		}
		.method public static hidebysig 
			void SetTypeZLevel(class [mscorlib]System.Type 'type', int32 level)
		{
			ret
		}
		.method public static hidebysig 
			void SetZLevelRange(int32 level, int32 min, int32 max)
		{
			ret
		}
		.method public hidebysig 
			instance void ResetInternalAnnotationAdorner()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsInternalComponent(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner' FindAnnotationAdorner(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.List`1'<class 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner'> GetTopAnnotationAdorners(int32 level, class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public hidebysig 
			instance void AddAdorner(class [mscorlib]'System.Collections.Generic.List`1'<class 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner'> adorners, class 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner' adorner)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetNextZOrder(class [PresentationFramework]System.Windows.Documents.AdornerLayer adornerLayer, int32 level)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner' GetAnnotationAdorner(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetComponentLevel(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public static hidebysig 
			int32 ComponentToAdorner(int32 zOrder, int32 level)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [PresentationCore]System.Windows.UIElement get_Host()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' get_EnclosingContext()
		{
			ret
		}
		.field static public class [mscorlib]System.Collections.Hashtable ZLevel
		.field static public class [mscorlib]System.Collections.Hashtable ZRanges
		.property instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' EnclosingContext()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'Proxies.MS.Internal.Annotations.Component.AdornerPresentationContext'::get_EnclosingContext()
		}
		.property instance class [PresentationCore]System.Windows.UIElement Host()
		{
			.get instance class [PresentationCore]System.Windows.UIElement 'Proxies.MS.Internal.Annotations.Component.AdornerPresentationContext'::get_Host()
		}
	}
	.class public AnnotationAdorner
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component, class [PresentationCore]System.Windows.UIElement annotatedElement)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [PresentationCore]System.Windows.Media.GeneralTransform GetDesiredTransform(class [PresentationCore]System.Windows.Media.GeneralTransform transform)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [PresentationCore]System.Windows.Media.Visual GetVisualChild(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype [WindowsBase]System.Windows.Size MeasureOverride(valuetype [WindowsBase]System.Windows.Size availableSize)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance valuetype [WindowsBase]System.Windows.Size ArrangeOverride(valuetype [WindowsBase]System.Windows.Size finalSize)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveChildren()
		{
			ret
		}
		.method public hidebysig 
			instance void InvalidateTransform()
		{
			ret
		}
		.method public hidebysig 
			instance void OnLayoutUpdated(object sender, class [mscorlib]System.EventArgs args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_VisualChildrenCount()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' get_AnnotationComponent()
		{
			ret
		}
		.field static family string static_DelegateAssembly
		.property instance class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' AnnotationComponent()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner'::get_AnnotationComponent()
		}
		.property instance int32 VisualChildrenCount()
		{
			.get instance int32 'Proxies.MS.Internal.Annotations.Component.AnnotationAdorner'::get_VisualChildrenCount()
		}
	}
	.class public AnnotationComponentManager
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public hidebysig 
			instance void AddAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, bool reorder)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, bool reorder)
		{
			ret
		}
		.method public hidebysig 
			instance void AttachedAnnotationUpdateEventHandler(object sender, class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' e)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' FindComponent(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public hidebysig 
			instance void AddComponent(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component, bool reorder)
		{
			ret
		}
		.method public hidebysig 
			instance void ModifyAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, object previousAttachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' previousAttachmentLevel)
		{
			ret
		}
		.method public hidebysig 
			instance void AddToAttachedAnnotations(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation',class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'>> get_attachedAnnotations()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_attachedAnnotations(class [mscorlib]'System.Collections.Generic.Dictionary`2'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation',class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'>> 'value')
		{
			ret
		}
		.field static family string static_DelegateAssembly
		.property instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation',class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'>> attachedAnnotations()
		{
			.get instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation',class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'>> 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager'::get_attachedAnnotations()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager'::set_attachedAnnotations(class [mscorlib]'System.Collections.Generic.Dictionary`2'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation',class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'>>)
		}
	}
	.class public AnnotationHighlightLayer
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Type get_OwnerType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsFixedContainer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsFixedContainer(bool 'value')
		{
			ret
		}
		.field static family string static_DelegateAssembly
		.property instance bool IsFixedContainer()
		{
			.get instance bool 'Proxies.MS.Internal.Annotations.Component.AnnotationHighlightLayer'::get_IsFixedContainer()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.AnnotationHighlightLayer'::set_IsFixedContainer(bool)
		}
		.property instance class [mscorlib]System.Type OwnerType()
		{
			.get instance class [mscorlib]System.Type 'Proxies.MS.Internal.Annotations.Component.AnnotationHighlightLayer'::get_OwnerType()
		}
	}
	.class public HighlightComponent
		extends Annotations.Test.Reflection.AReflectiveProxy
		implements 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent', Annotations.Test.Reflection.IReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(int32 priority, class [System.Xml]System.Xml.XmlQualifiedName 'type')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [PresentationCore]System.Windows.Media.GeneralTransform GetDesiredTransform(class [PresentationCore]System.Windows.Media.GeneralTransform transform)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void ModifyAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, object previousAttachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' previousAttachmentLevel)
		{
			ret
		}
		.method public hidebysig 
			instance void Activate(bool active)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddChild(class [PresentationFramework]System.Windows.Shapes.Shape child)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveChild(class [PresentationFramework]System.Windows.Shapes.Shape child)
		{
			ret
		}
		.method public static hidebysig 
			valuetype [PresentationCore]System.Windows.Media.Color GetColor(string color)
		{
			ret
		}
		.method public hidebysig 
			instance void OnAnnotationUpdated(object sender, class [PresentationFramework]System.Windows.Annotations.AnnotationResourceChangedEventArgs args)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IList get_AttachedAnnotations()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' get_PresentationContext()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_PresentationContext(class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ZOrder()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ZOrder(int32 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			class [System.Xml]System.Xml.XmlQualifiedName get_TypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationCore]System.Windows.Media.Color get_DefaultBackground()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DefaultBackground(valuetype [PresentationCore]System.Windows.Media.Color 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationCore]System.Windows.Media.Color get_DefaultActiveBackground()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DefaultActiveBackground(valuetype [PresentationCore]System.Windows.Media.Color 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_HighlightBrush(class [PresentationCore]System.Windows.Media.Brush 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [PresentationCore]System.Windows.UIElement get_AnnotatedElement()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype [PresentationCore]System.Windows.Media.Color get_Background()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype [PresentationCore]System.Windows.Media.Color get_SelectedBackground()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Priority()
		{
			ret
		}
		.field static public string ActiveBackgroundAttributeName
		.field static public string BackgroundAttributeName
		.field static public string ColorsContentName
		.field static public class [WindowsBase]System.Windows.DependencyProperty HighlightBrushProperty
		.field static public string HighlightResourceName
		.field static public class [System.Xml]System.Xml.XmlQualifiedName name
		.field static family string static_DelegateAssembly
		.property instance class [PresentationCore]System.Windows.UIElement AnnotatedElement()
		{
			.get instance class [PresentationCore]System.Windows.UIElement 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_AnnotatedElement()
		}
		.property instance class [mscorlib]System.Collections.IList AttachedAnnotations()
		{
			.get instance class [mscorlib]System.Collections.IList 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_AttachedAnnotations()
		}
		.property instance valuetype [PresentationCore]System.Windows.Media.Color Background()
		{
			.get instance valuetype [PresentationCore]System.Windows.Media.Color 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_Background()
		}
		.property instance valuetype [PresentationCore]System.Windows.Media.Color DefaultActiveBackground()
		{
			.get instance valuetype [PresentationCore]System.Windows.Media.Color 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_DefaultActiveBackground()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::set_DefaultActiveBackground(valuetype [PresentationCore]System.Windows.Media.Color)
		}
		.property instance valuetype [PresentationCore]System.Windows.Media.Color DefaultBackground()
		{
			.get instance valuetype [PresentationCore]System.Windows.Media.Color 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_DefaultBackground()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::set_DefaultBackground(valuetype [PresentationCore]System.Windows.Media.Color)
		}
		.property instance class [PresentationCore]System.Windows.Media.Brush HighlightBrush()
		{
			.set instance void 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::set_HighlightBrush(class [PresentationCore]System.Windows.Media.Brush)
		}
		.property instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' PresentationContext()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_PresentationContext()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::set_PresentationContext(class 'Proxies.MS.Internal.Annotations.Component.PresentationContext')
		}
		.property instance int32 Priority()
		{
			.get instance int32 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_Priority()
		}
		.property instance valuetype [PresentationCore]System.Windows.Media.Color SelectedBackground()
		{
			.get instance valuetype [PresentationCore]System.Windows.Media.Color 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_SelectedBackground()
		}
		.property class [System.Xml]System.Xml.XmlQualifiedName TypeName()
		{
			.get class [System.Xml]System.Xml.XmlQualifiedName 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_TypeName()
		}
		.property instance int32 ZOrder()
		{
			.get instance int32 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::get_ZOrder()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.HighlightComponent'::set_ZOrder(int32)
		}
	}
	.class public HighlightSegment
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public hidebysig 
			instance void UpdateOwners()
		{
			ret
		}
		.method public hidebysig 
			instance void Discard()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [PresentationCore]System.Windows.Media.Geometry get_DefiningGeometry()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Media.Brush get_OwnerColor()
		{
			ret
		}
		.field static family string static_DelegateAssembly
		.property instance class [PresentationCore]System.Windows.Media.Geometry DefiningGeometry()
		{
			.get instance class [PresentationCore]System.Windows.Media.Geometry 'Proxies.MS.Internal.Annotations.Component.HighlightSegment'::get_DefiningGeometry()
		}
		.property instance class [PresentationCore]System.Windows.Media.Brush OwnerColor()
		{
			.get instance class [PresentationCore]System.Windows.Media.Brush 'Proxies.MS.Internal.Annotations.Component.HighlightSegment'::get_OwnerColor()
		}
	}
	.class public interface abstract IAnnotationComponent
		implements Annotations.Test.Reflection.IReflectiveProxy
	{
		.method public virtual hidebysig newslot abstract 
			instance class [PresentationCore]System.Windows.Media.GeneralTransform GetDesiredTransform(class [PresentationCore]System.Windows.Media.GeneralTransform transform)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void AddAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void RemoveAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void ModifyAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, object previousAttachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' previousAttachmentLevel)
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [mscorlib]System.Collections.IList get_AttachedAnnotations()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' get_PresentationContext()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_PresentationContext(class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance int32 get_ZOrder()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance void set_ZOrder(int32 'value')
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationCore]System.Windows.UIElement get_AnnotatedElement()
		{
		}
		.property instance class [PresentationCore]System.Windows.UIElement AnnotatedElement()
		{
			.get instance class [PresentationCore]System.Windows.UIElement 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'::get_AnnotatedElement()
		}
		.property instance class [mscorlib]System.Collections.IList AttachedAnnotations()
		{
			.get instance class [mscorlib]System.Collections.IList 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'::get_AttachedAnnotations()
		}
		.property instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' PresentationContext()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'::get_PresentationContext()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'::set_PresentationContext(class 'Proxies.MS.Internal.Annotations.Component.PresentationContext')
		}
		.property instance int32 ZOrder()
		{
			.get instance int32 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'::get_ZOrder()
			.set instance void 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent'::set_ZOrder(int32)
		}
	}
	.class public abstract PresentationContext
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void AddToHost(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void RemoveFromHost(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component, bool reorder)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void InvalidateTransform(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void BringToFront(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance void SendToBack(class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' component)
		{
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [PresentationCore]System.Windows.UIElement get_Host()
		{
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' get_EnclosingContext()
		{
		}
		.field static family string static_DelegateAssembly
		.property instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' EnclosingContext()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'Proxies.MS.Internal.Annotations.Component.PresentationContext'::get_EnclosingContext()
		}
		.property instance class [PresentationCore]System.Windows.UIElement Host()
		{
			.get instance class [PresentationCore]System.Windows.UIElement 'Proxies.MS.Internal.Annotations.Component.PresentationContext'::get_Host()
		}
	}
}
.namespace Proxies.System.Windows.Annotations
{
	.class public AnnotationComponentChooser
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent' ChooseAnnotationComponent(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static public class Proxies.System.Windows.Annotations.AnnotationComponentChooser None
		.field static family string staticstatic_DelegateAssembly
	}
	.class public abstract AnnotationHelper
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public static hidebysig 
			void CreateHighlightForSelection(class Proxies.System.Windows.Annotations.AnnotationService service, string author, class [PresentationCore]System.Windows.Media.Brush highlightBrush)
		{
			ret
		}
		.method public static hidebysig 
			void CreateTextStickyNoteForSelection(class Proxies.System.Windows.Annotations.AnnotationService service, string author)
		{
			ret
		}
		.method public static hidebysig 
			void CreateInkStickyNoteForSelection(class Proxies.System.Windows.Annotations.AnnotationService service, string author)
		{
			ret
		}
		.method public static hidebysig 
			void ClearHighlightsForSelection(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method public static hidebysig 
			void DeleteTextStickyNotesForSelection(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method public static hidebysig 
			void DeleteInkStickyNotesForSelection(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method public static hidebysig 
			void OnCreateHighlightCommand(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnCreateTextStickyNoteCommand(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnCreateInkStickyNoteCommand(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnClearHighlightsCommand(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnDeleteStickyNotesCommand(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnDeleteAnnotationsCommand(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryCreateHighlightCommand(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryCreateTextStickyNoteCommand(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryCreateInkStickyNoteCommand(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryClearHighlightsCommand(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryDeleteStickyNotesCommand(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryDeleteAnnotationsCommand(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Controls.Primitives.DocumentPageView FindView(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase viewer, int32 pageNb)
		{
			ret
		}
		.method public static hidebysig 
			void CreateStickyNoteForSelection(class Proxies.System.Windows.Annotations.AnnotationService service, class [System.Xml]System.Xml.XmlQualifiedName noteType, string author)
		{
			ret
		}
		.method public static hidebysig 
			bool AreAllPagesVisibile(class Proxies.System.Windows.Annotations.AnnotationService service, int32 startPage, int32 endPage)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> GetSpannedAnnotations(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method public static hidebysig 
			void AddRange(class [mscorlib]'System.Collections.Generic.List`1'<class [PresentationFramework]System.Windows.Annotations.Annotation> annotations, class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.Annotation> newAnnotations)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.List`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> ResolveAnnotations(class Proxies.System.Windows.Annotations.AnnotationService service, class [mscorlib]'System.Collections.Generic.IList`1'<class [PresentationFramework]System.Windows.Annotations.Annotation> annotations)
		{
			ret
		}
		.method public static hidebysig 
			void DeleteSpannedAnnotations(class Proxies.System.Windows.Annotations.AnnotationService service, class [System.Xml]System.Xml.XmlQualifiedName annotationType)
		{
			ret
		}
		.method public static hidebysig 
			void InsertAttachedAnnotation(class [mscorlib]'System.Collections.Generic.List`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> annotations, class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnot)
		{
			ret
		}
		.method public static hidebysig 
			void Highlight(class Proxies.System.Windows.Annotations.AnnotationService service, string author, class [PresentationCore]System.Windows.Media.Brush highlightBrush, bool create)
		{
			ret
		}
		.method public static hidebysig 
			bool CheckHighlightColor(class [PresentationFramework]System.Windows.Annotations.Annotation annotation, valuetype [mscorlib]'System.Nullable`1'<valuetype [PresentationCore]System.Windows.Media.Color> color)
		{
			ret
		}
		.method public static hidebysig 
			void CheckInputs(class Proxies.System.Windows.Annotations.AnnotationService service)
		{
			ret
		}
		.method public static hidebysig 
			bool IsCommandEnabled(object sender, bool checkForEmpty)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.field static family string static_DelegateAssembly
	}
	.class public AnnotationService
		extends Annotations.Test.Reflection.AReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase viewer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.DependencyObject root)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public hidebysig 
			instance void Enable(class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore annotationStore)
		{
			ret
		}
		.method public hidebysig 
			instance void Disable()
		{
			ret
		}
		.method public static hidebysig 
			class Proxies.System.Windows.Annotations.AnnotationService GetService(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase viewer)
		{
			ret
		}
		.method public hidebysig 
			instance void LoadAnnotations(class [WindowsBase]System.Windows.DependencyObject element)
		{
			ret
		}
		.method public hidebysig 
			instance void UnloadAnnotations(class [WindowsBase]System.Windows.DependencyObject element)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.IList`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> GetAttachedAnnotations()
		{
			ret
		}
		.method public static hidebysig 
			class Proxies.System.Windows.Annotations.AnnotationService GetService(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public static hidebysig 
			class Proxies.System.Windows.Annotations.AnnotationComponentChooser GetChooser(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public static hidebysig 
			void SetSubTreeProcessorId(class [WindowsBase]System.Windows.DependencyObject d, string id)
		{
			ret
		}
		.method public static hidebysig 
			string GetSubTreeProcessorId(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public static hidebysig 
			void SetDataId(class [WindowsBase]System.Windows.DependencyObject d, string id)
		{
			ret
		}
		.method public static hidebysig 
			string GetDataId(class [WindowsBase]System.Windows.DependencyObject d)
		{
			ret
		}
		.method public hidebysig 
			instance void Initialize(class [WindowsBase]System.Windows.DependencyObject root)
		{
			ret
		}
		.method public static hidebysig 
			object LoadAnnotationsAsync(object obj)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyServiceConfiguration(class [WindowsBase]System.Windows.DependencyObject root)
		{
			ret
		}
		.method public static hidebysig 
			bool VerifyNoServiceOnNode(class [WindowsBase]System.Windows.DependencyObject node, object data)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' FindExistingAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Collections.IList GetAllAttachedAnnotationsFor(class [WindowsBase]System.Windows.DependencyObject element)
		{
			ret
		}
		.method public hidebysig 
			instance bool GetAttachedAnnotationsFor(class [WindowsBase]System.Windows.DependencyObject node, class [mscorlib]'System.Collections.Generic.List`1'<class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation'> result)
		{
			ret
		}
		.method public hidebysig 
			instance void OnStoreContentChanged(object node, class [PresentationFramework]System.Windows.Annotations.Storage.StoreContentChangedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void OnAnchorChanged(object sender, class [PresentationFramework]System.Windows.Annotations.AnnotationResourceChangedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void AnnotationAdded(class [PresentationFramework]System.Windows.Annotations.Annotation annotation)
		{
			ret
		}
		.method public hidebysig 
			instance void AnnotationDeleted(valuetype [mscorlib]System.Guid annotationId)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' AnchorAdded(class [PresentationFramework]System.Windows.Annotations.Annotation annotation, class [PresentationFramework]System.Windows.Annotations.AnnotationResource anchor)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' AnchorRemoved(class [PresentationFramework]System.Windows.Annotations.Annotation annotation, class [PresentationFramework]System.Windows.Annotations.AnnotationResource anchor)
		{
			ret
		}
		.method public hidebysig 
			instance class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs' AnchorModified(class [PresentationFramework]System.Windows.Annotations.Annotation annotation, class [PresentationFramework]System.Windows.Annotations.AnnotationResource anchor)
		{
			ret
		}
		.method public hidebysig 
			instance void DoAddAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public hidebysig 
			instance void DoRemoveAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public hidebysig 
			instance void FireEvents(class [mscorlib]'System.Collections.Generic.List`1'<class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventArgs'> eventsToFire)
		{
			ret
		}
		.method public hidebysig 
			instance void RegisterOnDocumentViewer(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase viewer)
		{
			ret
		}
		.method public hidebysig 
			instance void LoadAnnotationsForAllDPVs()
		{
			ret
		}
		.method public hidebysig 
			instance void UnloadAnnotationsForAllDPVs()
		{
			ret
		}
		.method public hidebysig 
			instance void UnregisterOnDocumentViewer(class [PresentationFramework]System.Windows.Controls.Primitives.DocumentViewerBase viewer)
		{
			ret
		}
		.method public hidebysig 
			instance void OnPageViewsChanged(object sender, class [mscorlib]System.EventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void OnPageDisconnected(object sender, class [mscorlib]System.EventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void OnPageConnected(object sender, class [mscorlib]System.EventArgs e)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsEnabled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore get_Store()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' get_LocatorManager()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyObject get_Root()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void add_AttachedAnnotationChanged(class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventHandler' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void remove_AttachedAnnotationChanged(class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventHandler' 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager' get_AnnotationComponentManager()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AnnotationComponentManager(class 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager' 'value')
		{
			ret
		}
		.field static public class [WindowsBase]System.Windows.DependencyProperty AttachedAnnotationsProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty ChooserProperty
		.field static public class [PresentationCore]System.Windows.Input.RoutedUICommand ClearHighlightsCommand
		.field static public class [PresentationCore]System.Windows.Input.RoutedUICommand CreateHighlightCommand
		.field static public class [PresentationCore]System.Windows.Input.RoutedUICommand CreateInkStickyNoteCommand
		.field static public class [PresentationCore]System.Windows.Input.RoutedUICommand CreateTextStickyNoteCommand
		.field static public class [WindowsBase]System.Windows.DependencyProperty DataIdProperty
		.field static public class [PresentationCore]System.Windows.Input.RoutedUICommand DeleteAnnotationsCommand
		.field static public class [PresentationCore]System.Windows.Input.RoutedUICommand DeleteStickyNotesCommand
		.field static public class [WindowsBase]System.Windows.DependencyProperty ServiceProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty SubTreeProcessorIdProperty
		.field static family string static_DelegateAssembly
		.event 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventHandler' AttachedAnnotationChanged
		{
			.addon instance void Proxies.System.Windows.Annotations.AnnotationService::add_AttachedAnnotationChanged(class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventHandler')
			.removeon instance void Proxies.System.Windows.Annotations.AnnotationService::remove_AttachedAnnotationChanged(class 'Proxies.MS.Internal.Annotations.AttachedAnnotationChangedEventHandler')
		}
		.property instance class 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager' AnnotationComponentManager()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager' Proxies.System.Windows.Annotations.AnnotationService::get_AnnotationComponentManager()
			.set instance void Proxies.System.Windows.Annotations.AnnotationService::set_AnnotationComponentManager(class 'Proxies.MS.Internal.Annotations.Component.AnnotationComponentManager')
		}
		.property instance bool IsEnabled()
		{
			.get instance bool Proxies.System.Windows.Annotations.AnnotationService::get_IsEnabled()
		}
		.property instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' LocatorManager()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Anchoring.LocatorManager' Proxies.System.Windows.Annotations.AnnotationService::get_LocatorManager()
		}
		.property instance class [WindowsBase]System.Windows.DependencyObject Root()
		{
			.get instance class [WindowsBase]System.Windows.DependencyObject Proxies.System.Windows.Annotations.AnnotationService::get_Root()
		}
		.property instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore Store()
		{
			.get instance class [PresentationFramework]System.Windows.Annotations.Storage.AnnotationStore Proxies.System.Windows.Annotations.AnnotationService::get_Store()
		}
	}
}
.namespace Proxies.System.Windows.Controls
{
	.class public StickyNoteControl
		extends Annotations.Test.Reflection.AReflectiveProxy
		implements 'Proxies.MS.Internal.Annotations.Component.IAnnotationComponent', Annotations.Test.Reflection.IReflectiveProxy
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType 'type')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type[] types, object[] values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object delegateObject)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnApplyTemplate()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void RemoveAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void ModifyAttachedAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation, object previousAttachedAnchor, valuetype 'Proxies.MS.Internal.Annotations.AttachmentLevel' previousAttachmentLevel)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [PresentationCore]System.Windows.Media.GeneralTransform GetDesiredTransform(class [PresentationCore]System.Windows.Media.GeneralTransform transform)
		{
			ret
		}
		.method public hidebysig 
			instance void OnAuthorUpdated(object obj, class [PresentationFramework]System.Windows.Annotations.AnnotationAuthorChangedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void OnAnnotationUpdated(object obj, class [PresentationFramework]System.Windows.Annotations.AnnotationResourceChangedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void SetAnnotation(class 'Proxies.MS.Internal.Annotations.IAttachedAnnotation' attachedAnnotation)
		{
			ret
		}
		.method public hidebysig 
			instance void ClearAnnotation()
		{
			ret
		}
		.method public hidebysig 
			instance void UpdateOffsets()
		{
			ret
		}
		.method public static hidebysig 
			void OnIsExpandedChanged(class [WindowsBase]System.Windows.DependencyObject d, valuetype [WindowsBase]System.Windows.DependencyPropertyChangedEventArgs e)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnTemplateChanged(class [PresentationFramework]System.Windows.Controls.ControlTemplate oldTemplate, class [PresentationFramework]System.Windows.Controls.ControlTemplate newTemplate)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnIsKeyboardFocusWithinChanged(valuetype [WindowsBase]System.Windows.DependencyPropertyChangedEventArgs args)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnGotKeyboardFocus(class [PresentationCore]System.Windows.Input.KeyboardFocusChangedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void EnsureStickyNoteType()
		{
			ret
		}
		.method public hidebysig 
			instance void DisconnectContent()
		{
			ret
		}
		.method public hidebysig 
			instance void ConnectContent()
		{
			ret
		}
		.method public static hidebysig 
			void OnInkEditingModeChanged(class [WindowsBase]System.Windows.DependencyObject d, valuetype [WindowsBase]System.Windows.DependencyPropertyChangedEventArgs e)
		{
			ret
		}
		.method public static hidebysig 
			void UpdateInkDrawingAttributes(class [WindowsBase]System.Windows.DependencyObject d, valuetype [WindowsBase]System.Windows.DependencyPropertyChangedEventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void OnTextChanged(object obj, class [PresentationFramework]System.Windows.Controls.TextChangedEventArgs args)
		{
			ret
		}
		.method public static hidebysig 
			void OnContextMenuOpening(object sender, class [PresentationCore]System.Windows.RoutedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void OnInkCanvasStrokesReplacedEventHandler(object sender, class [PresentationFramework]System.Windows.Controls.InkCanvasStrokesReplacedEventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void OnInkStrokesChanged(object sender, class [PresentationCore]System.Windows.Ink.StrokeCollectionChangedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void InitStickyNoteControl()
		{
			ret
		}
		.method public hidebysig 
			instance void InitializeEventHandlers()
		{
			ret
		}
		.method public hidebysig 
			instance void ShowBubble(bool show)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetInitialPosition()
		{
			ret
		}
		.method public hidebysig 
			instance void OnButtonClick(object sender, class [PresentationCore]System.Windows.RoutedEventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteStickyNote()
		{
			ret
		}
		.method public hidebysig 
			instance void OnDragCompleted(object sender, class [PresentationFramework]System.Windows.Controls.Primitives.DragCompletedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void OnDragDelta(object sender, class [PresentationFramework]System.Windows.Controls.Primitives.DragDeltaEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void OnTitleDragDelta(float64 horizontalChange, float64 verticalChange)
		{
			ret
		}
		.method public hidebysig 
			instance void OnResizeDragDelta(float64 horizontalChange, float64 verticalChange)
		{
			ret
		}
		.method public hidebysig 
			instance void OnPreviewDeviceDown(object dc, class [PresentationCore]System.Windows.Input.InputEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void OnLoadedEventHandler(object sender, class [PresentationCore]System.Windows.RoutedEventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveStickyNoteControlFromAnnotationStore()
		{
			ret
		}
		.method public hidebysig 
			instance void ClearCachedControls()
		{
			ret
		}
		.method public hidebysig 
			instance void OnInkEditingModeChanged()
		{
			ret
		}
		.method public hidebysig 
			instance void OnIsExpandedChanged()
		{
			ret
		}
		.method public hidebysig 
			instance object TakeFocus(object notUsed)
		{
			ret
		}
		.method public hidebysig 
			instance void GiveUpFocus()
		{
			ret
		}
		.method public hidebysig 
			instance void BringToFront()
		{
			ret
		}
		.method public hidebysig 
			instance void SendToBack()
		{
			ret
		}
		.method public hidebysig 
			instance void InvalidateTransform()
		{
			ret
		}
		.method public hidebysig 
			instance object AsyncUpdateAnnotation(object arg)
		{
			ret
		}
		.method public hidebysig 
			instance void BindContentControlProperties()
		{
			ret
		}
		.method public hidebysig 
			instance void UnbindContentControlProperties()
		{
			ret
		}
		.method public hidebysig 
			instance void StartListenToContentControlEvent()
		{
			ret
		}
		.method public hidebysig 
			instance void StopListenToContentControlEvent()
		{
			ret
		}
		.method public hidebysig 
			instance void StartListenToStrokesEvent(class [PresentationCore]System.Windows.Ink.StrokeCollection strokes)
		{
			ret
		}
		.method public hidebysig 
			instance void StopListenToStrokesEvent(class [PresentationCore]System.Windows.Ink.StrokeCollection strokes)
		{
			ret
		}
		.method public hidebysig 
			instance void StartListenToStrokeEvent(class [PresentationCore]System.Windows.Ink.StrokeCollection strokes)
		{
			ret
		}
		.method public hidebysig 
			instance void StopListenToStrokeEvent(class [PresentationCore]System.Windows.Ink.StrokeCollection strokes)
		{
			ret
		}
		.method public hidebysig 
			instance void SetupMenu()
		{
			ret
		}
		.method public hidebysig 
			instance void SetupMenuSeparators(class [PresentationFramework]System.Windows.Controls.ItemCollection itemCollection, class [PresentationFramework]System.Windows.Controls.MenuItem item, class [PresentationFramework]System.Windows.Data.Binding bind)
		{
			ret
		}
		.method public static hidebysig 
			void OnCommandExecuted(object sender, class [PresentationCore]System.Windows.Input.ExecutedRoutedEventArgs args)
		{
			ret
		}
		.method public static hidebysig 
			void OnQueryCommandEnabled(object sender, class [PresentationCore]System.Windows.Input.CanExecuteRoutedEventArgs args)
		{
			ret
		}
		.method public hidebysig 
			instance void UpdateInkDrawingAttributes()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string DelegateClassName()
		{
			ret
		}
		.method family virtual hidebysig 
			instance string DelegateAssemblyName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Collections.IList get_AttachedAnnotations()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [PresentationCore]System.Windows.UIElement get_AnnotatedElement()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' get_PresentationContext()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_PresentationContext(class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_ZOrder()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ZOrder(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Media.TranslateTransform get_PositionTransform()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PositionTransform(class [PresentationCore]System.Windows.Media.TranslateTransform 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_XOffset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XOffset(float64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_YOffset()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_YOffset(float64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Rect get_StickyNoteBounds()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Rect get_PageBounds()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsExpanded()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsExpanded(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsActive()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsMouseOverAnchor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Media.FontFamily get_CaptionFontFamily()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CaptionFontFamily(class [PresentationCore]System.Windows.Media.FontFamily 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_CaptionFontSize()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CaptionFontSize(float64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationCore]System.Windows.FontStretch get_CaptionFontStretch()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CaptionFontStretch(valuetype [PresentationCore]System.Windows.FontStretch 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationCore]System.Windows.FontStyle get_CaptionFontStyle()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CaptionFontStyle(valuetype [PresentationCore]System.Windows.FontStyle 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationCore]System.Windows.FontWeight get_CaptionFontWeight()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CaptionFontWeight(valuetype [PresentationCore]System.Windows.FontWeight 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance float64 get_PenWidth()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_PenWidth(float64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType get_StickyNoteType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Button get_CloseButton()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Button get_IconButton()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb get_TitleThumb()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.TextBlock get_TitleLabel()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.ScrollViewer get_ScrollViewer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb get_ResizeThumb()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.MenuItem get_EditMenu()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_DefaultIsExpanded()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsDirty()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsDirty(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.Menu get_Menu()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.MenuItem get_DeleteMenuItem()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.MenuItem get_InkMenuItem()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.MenuItem get_SelectMenuItem()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Controls.MenuItem get_EraseMenuItem()
		{
			ret
		}
		.field static public class [WindowsBase]System.Windows.DependencyProperty AuthorProperty
		.field static public class [WindowsBase]System.Windows.DependencyPropertyKey AuthorPropertyKey
		.field static public class [WindowsBase]System.Windows.DependencyProperty CaptionFontFamilyProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty CaptionFontSizeProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty CaptionFontStretchProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty CaptionFontStyleProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty CaptionFontWeightProperty
		.field static public class [PresentationCore]System.Windows.Input.RoutedCommand DeleteNoteCommand
		.field static public class [PresentationCore]System.Windows.Input.RoutedCommand InkCommand
		.field static public class [WindowsBase]System.Windows.DependencyProperty InkEditingModeProperty
		.field static public class [WindowsBase]System.Windows.DependencyPropertyKey InkEditingModePropertyKey
		.field static public class [System.Xml]System.Xml.XmlQualifiedName InkSchemaName
		.field static public class [WindowsBase]System.Windows.DependencyProperty IsActiveProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty IsExpandedProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty IsMouseOverAnchorProperty
		.field static public class [WindowsBase]System.Windows.DependencyProperty PenWidthProperty
		.field static public string SchemaNamespace
		.field static public class [WindowsBase]System.Windows.DependencyProperty StickyNoteTypeProperty
		.field static public class [WindowsBase]System.Windows.DependencyPropertyKey StickyNoteTypePropertyKey
		.field static public class [System.Xml]System.Xml.XmlQualifiedName TextSchemaName
		.field static family string staticstatic_DelegateAssembly
		.property instance class [PresentationCore]System.Windows.UIElement AnnotatedElement()
		{
			.get instance class [PresentationCore]System.Windows.UIElement Proxies.System.Windows.Controls.StickyNoteControl::get_AnnotatedElement()
		}
		.property instance class [mscorlib]System.Collections.IList AttachedAnnotations()
		{
			.get instance class [mscorlib]System.Collections.IList Proxies.System.Windows.Controls.StickyNoteControl::get_AttachedAnnotations()
		}
		.property instance class [PresentationCore]System.Windows.Media.FontFamily CaptionFontFamily()
		{
			.get instance class [PresentationCore]System.Windows.Media.FontFamily Proxies.System.Windows.Controls.StickyNoteControl::get_CaptionFontFamily()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_CaptionFontFamily(class [PresentationCore]System.Windows.Media.FontFamily)
		}
		.property instance float64 CaptionFontSize()
		{
			.get instance float64 Proxies.System.Windows.Controls.StickyNoteControl::get_CaptionFontSize()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_CaptionFontSize(float64)
		}
		.property instance valuetype [PresentationCore]System.Windows.FontStretch CaptionFontStretch()
		{
			.get instance valuetype [PresentationCore]System.Windows.FontStretch Proxies.System.Windows.Controls.StickyNoteControl::get_CaptionFontStretch()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_CaptionFontStretch(valuetype [PresentationCore]System.Windows.FontStretch)
		}
		.property instance valuetype [PresentationCore]System.Windows.FontStyle CaptionFontStyle()
		{
			.get instance valuetype [PresentationCore]System.Windows.FontStyle Proxies.System.Windows.Controls.StickyNoteControl::get_CaptionFontStyle()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_CaptionFontStyle(valuetype [PresentationCore]System.Windows.FontStyle)
		}
		.property instance valuetype [PresentationCore]System.Windows.FontWeight CaptionFontWeight()
		{
			.get instance valuetype [PresentationCore]System.Windows.FontWeight Proxies.System.Windows.Controls.StickyNoteControl::get_CaptionFontWeight()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_CaptionFontWeight(valuetype [PresentationCore]System.Windows.FontWeight)
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Button CloseButton()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Button Proxies.System.Windows.Controls.StickyNoteControl::get_CloseButton()
		}
		.property instance bool DefaultIsExpanded()
		{
			.get instance bool Proxies.System.Windows.Controls.StickyNoteControl::get_DefaultIsExpanded()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.MenuItem DeleteMenuItem()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.MenuItem Proxies.System.Windows.Controls.StickyNoteControl::get_DeleteMenuItem()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.MenuItem EditMenu()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.MenuItem Proxies.System.Windows.Controls.StickyNoteControl::get_EditMenu()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.MenuItem EraseMenuItem()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.MenuItem Proxies.System.Windows.Controls.StickyNoteControl::get_EraseMenuItem()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Button IconButton()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Button Proxies.System.Windows.Controls.StickyNoteControl::get_IconButton()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.MenuItem InkMenuItem()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.MenuItem Proxies.System.Windows.Controls.StickyNoteControl::get_InkMenuItem()
		}
		.property instance bool IsActive()
		{
			.get instance bool Proxies.System.Windows.Controls.StickyNoteControl::get_IsActive()
		}
		.property instance bool IsDirty()
		{
			.get instance bool Proxies.System.Windows.Controls.StickyNoteControl::get_IsDirty()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_IsDirty(bool)
		}
		.property instance bool IsExpanded()
		{
			.get instance bool Proxies.System.Windows.Controls.StickyNoteControl::get_IsExpanded()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_IsExpanded(bool)
		}
		.property instance bool IsMouseOverAnchor()
		{
			.get instance bool Proxies.System.Windows.Controls.StickyNoteControl::get_IsMouseOverAnchor()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Menu Menu()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Menu Proxies.System.Windows.Controls.StickyNoteControl::get_Menu()
		}
		.property instance valuetype [WindowsBase]System.Windows.Rect PageBounds()
		{
			.get instance valuetype [WindowsBase]System.Windows.Rect Proxies.System.Windows.Controls.StickyNoteControl::get_PageBounds()
		}
		.property instance float64 PenWidth()
		{
			.get instance float64 Proxies.System.Windows.Controls.StickyNoteControl::get_PenWidth()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_PenWidth(float64)
		}
		.property instance class [PresentationCore]System.Windows.Media.TranslateTransform PositionTransform()
		{
			.get instance class [PresentationCore]System.Windows.Media.TranslateTransform Proxies.System.Windows.Controls.StickyNoteControl::get_PositionTransform()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_PositionTransform(class [PresentationCore]System.Windows.Media.TranslateTransform)
		}
		.property instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' PresentationContext()
		{
			.get instance class 'Proxies.MS.Internal.Annotations.Component.PresentationContext' Proxies.System.Windows.Controls.StickyNoteControl::get_PresentationContext()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_PresentationContext(class 'Proxies.MS.Internal.Annotations.Component.PresentationContext')
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb ResizeThumb()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb Proxies.System.Windows.Controls.StickyNoteControl::get_ResizeThumb()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.ScrollViewer ScrollViewer()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.ScrollViewer Proxies.System.Windows.Controls.StickyNoteControl::get_ScrollViewer()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.MenuItem SelectMenuItem()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.MenuItem Proxies.System.Windows.Controls.StickyNoteControl::get_SelectMenuItem()
		}
		.property instance valuetype [WindowsBase]System.Windows.Rect StickyNoteBounds()
		{
			.get instance valuetype [WindowsBase]System.Windows.Rect Proxies.System.Windows.Controls.StickyNoteControl::get_StickyNoteBounds()
		}
		.property instance valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType StickyNoteType()
		{
			.get instance valuetype [PresentationFramework]System.Windows.Controls.StickyNoteType Proxies.System.Windows.Controls.StickyNoteControl::get_StickyNoteType()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.TextBlock TitleLabel()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.TextBlock Proxies.System.Windows.Controls.StickyNoteControl::get_TitleLabel()
		}
		.property instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb TitleThumb()
		{
			.get instance class [PresentationFramework]System.Windows.Controls.Primitives.Thumb Proxies.System.Windows.Controls.StickyNoteControl::get_TitleThumb()
		}
		.property instance float64 XOffset()
		{
			.get instance float64 Proxies.System.Windows.Controls.StickyNoteControl::get_XOffset()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_XOffset(float64)
		}
		.property instance float64 YOffset()
		{
			.get instance float64 Proxies.System.Windows.Controls.StickyNoteControl::get_YOffset()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_YOffset(float64)
		}
		.property instance int32 ZOrder()
		{
			.get instance int32 Proxies.System.Windows.Controls.StickyNoteControl::get_ZOrder()
			.set instance void Proxies.System.Windows.Controls.StickyNoteControl::set_ZOrder(int32)
		}
	}
}
