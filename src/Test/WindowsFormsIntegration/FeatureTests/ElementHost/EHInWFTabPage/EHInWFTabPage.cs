using System;
using System.Windows.Forms;

using WFCTestLib.Util;
using WFCTestLib.Log;
using ReflectTools;
using MS.Internal.Mita.Foundation;
using MS.Internal.Mita.Foundation.Controls;
using System.Windows.Forms.Integration;

//
// Testcase:    EHInWFTabPage
// Description: We need to verify that EH and Avalon contols work in an WinForm TabPage control.
// Author:      a-larryl
//
public class EHInWFTabPage : ReflectBase {

    public EHInWFTabPage(string[] args) : base(args) { }

    UIObject uiApp = null;
    string buttonClickResult;
    private System.Windows.Forms.TabControl tabControl1;
    private System.Windows.Forms.TabPage tabPage1;
    private System.Windows.Forms.TabPage tabPage2;
    private System.Windows.Forms.Panel panel1;
    private System.Windows.Forms.TabPage tabPage3;
    private System.Windows.Forms.TabPage tabPage4;
    private System.Windows.Forms.Panel panel2;
    private System.Windows.Forms.Panel panel3;
    private System.Windows.Forms.Panel panel4;
    private System.Windows.Forms.Button button1;
    private ElementHost host1;
    private ElementHost host2;
    private ElementHost host3;
    private System.Windows.Controls.TextBox av_tb1;
    private System.Windows.Controls.TextBox av_tb2;
    private System.Windows.Controls.Button av_btn;

    #region Testcase setup
    protected override void InitTest(TParams p)
    {
        base.InitTest(p);
        UseMita = true;
        this.Text = "EHInWFTabPageTest";
        InitializeForm();   //call the code generated by the WinForms designer
    }

    void av_btn_Click(object sender, System.Windows.RoutedEventArgs e)
    {
        buttonClickResult = "AV Button clicked";
    }

    void button1_Click(object sender, EventArgs e)
    {
        buttonClickResult = "WF Button clicked";
    }
    protected override bool BeforeScenario(TParams p, System.Reflection.MethodInfo scenario)
    {
        uiApp = UIObject.Root.Children.Find(UICondition.CreateFromName("EHInWFTabPageTest"));
        buttonClickResult = "";
        return base.BeforeScenario(p, scenario);
    }

    #endregion

    //==========================================
    // Scenarios
    //==========================================
    #region Scenarios
    [Scenario("2 tabs, 1 with a EH & Avalon Button, 1 with WF button.  Verify that switching tabs show the correct button (switch back and forth more than once).")]
    public ScenarioResult Scenario1(TParams p) {
        Tab TabControl1;
        TabItem Tab3;
        TabItem Tab4;
        ScenarioResult sr = new ScenarioResult();

        TabControl1 = new Tab(uiApp.Descendants.Find(UICondition.CreateFromId("tabControl1")));
        Tab3 = TabControl1.Items[2];
        Tab4 = TabControl1.Items[3];

        //try to find the buttons on the 3rd and 4th tabs

        ClickTabWithButton(Tab3, "button1");
        //ensure the click event fired - it will set the 'buttonClickResult' text
        sr.IncCounters(buttonClickResult == "WF Button clicked", "Could not find WF button on Tab Control Page", p.log);

        ClickTabWithButton(Tab4, "AVButton");
        //ensure the click event fired - it will set the 'buttonClickResult' text
        sr.IncCounters(buttonClickResult == "AV Button clicked", "Could not find AV button on Tab Control Page", p.log);

        ClickTabWithButton(Tab3, "button1");
        //ensure the click event fired - it will set the 'buttonClickResult' text
        sr.IncCounters(buttonClickResult == "WF Button clicked", "Could not find WF button on Tab Control Page", p.log);

        ClickTabWithButton(Tab4, "AVButton");
        //ensure the click event fired - it will set the 'buttonClickResult' text
        sr.IncCounters(buttonClickResult == "AV Button clicked", "Could not find AV button on Tab Control Page", p.log);

        ClickTabWithButton(Tab3, "button1");
        //ensure the click event fired - it will set the 'buttonClickResult' text
        sr.IncCounters(buttonClickResult == "WF Button clicked", "Could not find WF button on Tab Control Page", p.log);

        ClickTabWithButton(Tab4, "AVButton");
        //ensure the click event fired - it will set the 'buttonClickResult' text
        sr.IncCounters(buttonClickResult == "AV Button clicked", "Could not find AV button on Tab Control Page", p.log);

        return sr;
    }

    void ClickTabWithButton(TabItem tabToClick, string buttonName)
    {
        tabToClick.Click();
        Utilities.SleepDoEvents(10);
        UIObject myButton = tabToClick.Descendants.Find(UICondition.CreateFromId(buttonName));
        Mouse.Instance.MovePointerToClickPoint(myButton);
        Mouse.Instance.Click(MS.Internal.Mita.Foundation.MouseButtons.Primary);
        Utilities.SleepDoEvents(10);
    }

    [Scenario("2 tabs, both with a EH & EH Textbox.  Verify that text is preserved between tabs. (switch back and forth more than once).")]
    public ScenarioResult Scenario2(TParams p) {
        Tab TabControl1;
        TabItem Tab1;
        TabItem Tab2;
        string txt;
        ScenarioResult sr = new ScenarioResult();

        TabControl1 = new Tab(uiApp.Descendants.Find(UICondition.CreateFromId("tabControl1")));
        Tab1 = TabControl1.Items[0];
        Tab2 = TabControl1.Items[1];

        //try to find the text on the 1st and 2nd tabs            
        txt = ClickTabWithTextBox(Tab1, "avTextbox1");
        sr.IncCounters(txt == "AV TextBox inside EH on first tab.", "Did not find correct text on Tab 1", p.log);

        txt = ClickTabWithTextBox(Tab2, "avTextbox2");
        sr.IncCounters(txt == "AV TextBox inside EH on second tab.", "Did not find correct text on Tab 2", p.log);

        //we found the text ok - now do it again
        txt = ClickTabWithTextBox(Tab1, "avTextbox1");
        sr.IncCounters(txt == "AV TextBox inside EH on first tab.", "Did not find correct text on Tab 1", p.log);

        txt = ClickTabWithTextBox(Tab2, "avTextbox2");
        sr.IncCounters(txt == "AV TextBox inside EH on second tab.", "Did not find correct text on Tab 2", p.log);

        //we found the text ok - now do it one last time
        txt = ClickTabWithTextBox(Tab1, "avTextbox1");
        sr.IncCounters(txt == "AV TextBox inside EH on first tab.", "Did not find correct text on Tab 1", p.log);

        txt = ClickTabWithTextBox(Tab2, "avTextbox2");
        sr.IncCounters(txt == "AV TextBox inside EH on second tab.", "Did not find correct text on Tab 2", p.log);

        return sr;
    }

    string ClickTabWithTextBox(TabItem tabToClick, string textboxName)
    {
        tabToClick.Click();
        Utilities.SleepDoEvents(10);
        UIObject myTextbox = tabToClick.Descendants.Find(UICondition.CreateFromId(textboxName));
        Edit myEdit = new Edit(myTextbox);
        return myEdit.DocumentRange.GetText(-1);
    }


    #endregion

    void InitializeForm()
    {
        //note: this code was borrowed from the designer code in a standalone WinForms app
        this.ClientSize = new System.Drawing.Size(410, 423);
        tabControl1 = new System.Windows.Forms.TabControl();

        tabPage1 = new System.Windows.Forms.TabPage();
        tabPage2 = new System.Windows.Forms.TabPage();
        tabPage3 = new System.Windows.Forms.TabPage();
        tabPage4 = new System.Windows.Forms.TabPage();
        
        panel1 = new System.Windows.Forms.Panel();
        panel2 = new System.Windows.Forms.Panel();
        panel3 = new System.Windows.Forms.Panel();
        panel4 = new System.Windows.Forms.Panel();
        
        button1 = new System.Windows.Forms.Button();
        
        tabControl1.Controls.Add(tabPage1);
        tabControl1.Controls.Add(tabPage2);
        tabControl1.Controls.Add(tabPage3);
        tabControl1.Controls.Add(tabPage4);

        tabControl1.Location = new System.Drawing.Point(26, 13);
        tabControl1.Name = "tabControl1";
        tabControl1.SelectedIndex = 0;
        tabControl1.Size = new System.Drawing.Size(355, 389);
        tabControl1.TabIndex = 0;
        
        tabPage1.Controls.Add(panel1);
        tabPage1.Location = new System.Drawing.Point(4, 22);
        tabPage1.Name = "tabPage1";
        tabPage1.Padding = new System.Windows.Forms.Padding(3);
        tabPage1.Size = new System.Drawing.Size(347, 363);
        tabPage1.TabIndex = 0;
        tabPage1.Text = "tabPage1";
        tabPage1.UseVisualStyleBackColor = true;
        
        tabPage2.Controls.Add(panel2);
        tabPage2.Location = new System.Drawing.Point(4, 22);
        tabPage2.Name = "tabPage2";
        tabPage2.Padding = new System.Windows.Forms.Padding(3);
        tabPage2.Size = new System.Drawing.Size(347, 363);
        tabPage2.TabIndex = 1;
        tabPage2.Text = "tabPage2";
        tabPage2.UseVisualStyleBackColor = true;
        
        tabPage3.Controls.Add(panel3);
        tabPage3.Location = new System.Drawing.Point(4, 22);
        tabPage3.Name = "tabPage3";
        tabPage3.Size = new System.Drawing.Size(347, 363);
        tabPage3.TabIndex = 2;
        tabPage3.Text = "tabPage3";
        tabPage3.UseVisualStyleBackColor = true;
        
        tabPage4.Controls.Add(panel4);
        tabPage4.Location = new System.Drawing.Point(4, 22);
        tabPage4.Name = "tabPage4";
        tabPage4.Size = new System.Drawing.Size(347, 363);
        tabPage4.TabIndex = 3;
        tabPage4.Text = "tabPage4";
        tabPage4.UseVisualStyleBackColor = true;

        panel1.Location = new System.Drawing.Point(24, 25);
        panel1.Name = "panel1";
        panel1.Size = new System.Drawing.Size(297, 311);
        panel1.TabIndex = 0;

        panel2.Location = new System.Drawing.Point(25, 26);
        panel2.Name = "panel2";
        panel2.Size = new System.Drawing.Size(297, 311);
        panel2.TabIndex = 1;
        
        panel3.Controls.Add(button1);
        panel3.Location = new System.Drawing.Point(25, 26);
        panel3.Name = "panel3";
        panel3.Size = new System.Drawing.Size(297, 311);
        panel3.TabIndex = 1;
        
        panel4.Location = new System.Drawing.Point(25, 26);
        panel4.Name = "panel4";
        panel4.Size = new System.Drawing.Size(297, 311);
        panel4.TabIndex = 1;
        
        button1.Dock = System.Windows.Forms.DockStyle.Fill;
        button1.Font = new System.Drawing.Font("Microsoft Sans Serif", 14.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        button1.Location = new System.Drawing.Point(0, 0);
        button1.Name = "button1";
        button1.Size = new System.Drawing.Size(297, 311);
        button1.TabIndex = 0;
        button1.Text = "WF Button";
        button1.UseVisualStyleBackColor = true;
        button1.Click += new EventHandler(button1_Click);
        
        av_tb1 = new System.Windows.Controls.TextBox();
        av_tb1.Text = string.Empty;
        av_tb1.Width = 300;
        av_tb1.Height = 200;
        av_tb1.TextWrapping = System.Windows.TextWrapping.Wrap;
        av_tb1.VerticalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Auto;
        av_tb1.HorizontalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Auto;
        av_tb1.Text = "AV TextBox inside EH on first tab.";
        av_tb1.Name = "avTextbox1";
        av_tb1.AcceptsReturn = true;
        av_tb1.MaxLength = 32760;

        host1 = new ElementHost();
        host1.Child = av_tb1;
        host1.Dock = DockStyle.Fill;

        av_tb2 = new System.Windows.Controls.TextBox();
        av_tb2.Text = string.Empty;
        av_tb2.Width = 300;
        av_tb2.Height = 200;
        av_tb2.TextWrapping = System.Windows.TextWrapping.Wrap;
        av_tb2.VerticalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Auto;
        av_tb2.HorizontalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Auto;
        av_tb2.Text = "AV TextBox inside EH on second tab.";
        av_tb2.Name = "avTextbox2";
        av_tb2.AcceptsReturn = true;
        av_tb2.MaxLength = 32760;

        host2 = new ElementHost();
        host2.Child = av_tb2;
        host2.Dock = DockStyle.Fill;

        av_btn = new System.Windows.Controls.Button();
        av_btn.Content = "AV Button";
        av_btn.Name = "AVButton";
        av_btn.Click += new System.Windows.RoutedEventHandler(av_btn_Click);

        host3 = new ElementHost();
        host3.Child = av_btn;
        host3.Dock = DockStyle.Fill;

        panel1.Controls.Add(host1);
        panel2.Controls.Add(host2);
        panel4.Controls.Add(host3);

        this.Controls.Add(this.tabControl1);
    }
}

// Keep these in sync by running the testcase locally through the driver whenever
// you add, remove, or rename scenarios.
//
// [Scenarios]
//@ 2 tabs, 1 with a EH &amp; Avalon Button, 1 with WF button.  Verify that switching tabs show the correct button (switch back and forth more than once).
//@ 2 tabs, both with a EH &amp; EH Textbox.  Verify that text is preserved between tabs. (switch back and forth more than once).
