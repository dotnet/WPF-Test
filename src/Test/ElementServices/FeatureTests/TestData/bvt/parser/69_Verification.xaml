

<cmn:CustomDockPanel
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:cmn="clr-namespace:Microsoft.Test.Serialization.CustomElements;assembly=TestRuntime" xmlns:MappingPIGen1="clr-namespace:Microsoft.Test.Serialization.CustomElements;assembly=TestRuntime">
    <cmn:CustomDockPanel.Resources>
    <!--
         ****************************************
         * ComboBox Style                       *
         ****************************************
    -->

    <Style x:Key="DropShadowEffect" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <DockPanel LastChildFill="true">
                <DockPanel Dock="Right" Width="4" LastChildFill="true">
                    <Rectangle DockPanel.Dock="Top" Margin="0,4,0,0" Height="4">
                        <Rectangle.Fill>
                            <RadialGradientBrush GradientOrigin="0,1" Center="0,1" RadiusX=".9" RadiusY=".9">
                                <RadialGradientBrush.GradientStops>
                                    <GradientStop Color="#99000000" Offset="0" />
                                    <GradientStop Color="Transparent" Offset="1" />
                                </RadialGradientBrush.GradientStops>
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>

                    <Rectangle DockPanel.Dock="Bottom" Height="4" Margin="0,0,0,0">
                        <Rectangle.Fill>
                            <RadialGradientBrush GradientOrigin="0,0" Center="0,0" RadiusX=".9" RadiusY=".9">
                                <RadialGradientBrush.GradientStops>
                                    <GradientStop Color="#88000000" Offset="0" />
                                    <GradientStop Color="Transparent" Offset="1" />
                                </RadialGradientBrush.GradientStops>
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                    <Rectangle>
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="#99000000" Offset="0" />
                                    <GradientStop Color="Transparent" Offset="1" />
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                </DockPanel>

                <DockPanel Height="5" DockPanel.Dock="Bottom" LastChildFill="true">
                    <Rectangle Width="4" Margin="4,0,0,0" DockPanel.Dock="Left">
                        <Rectangle.Fill>
                            <RadialGradientBrush GradientOrigin="1,0" Center="1,0" RadiusX=".9" RadiusY=".9">
                                <RadialGradientBrush.GradientStops>
                                    <GradientStop Color="#99000000" Offset="0" />
                                    <GradientStop Color="Transparent" Offset="1" />
                                </RadialGradientBrush.GradientStops>
                            </RadialGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>

                    <Rectangle>
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Color="#99000000" Offset="0" />
                                    <GradientStop Color="Transparent" Offset="1" />
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>
                </DockPanel>
                <ContentPresenter Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
        </DockPanel>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- We really should have style-local resources! why don't we?? -->
    <Style x:Key="http://schemas.microsoft.com/2003/xaml/ComboBox/TransparentButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <DockPanel LastChildFill="true">
                <Border x:Name="DropDownButton" DockPanel.Dock="Right" Width="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/VerticalScrollBarWidth}" Background="{DynamicResource ComboBoxButtonNormalBackground}" />
                <Border Background="Transparent" />

            </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource ComboBoxButtonMouseOverBackground}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource ComboBoxButtonPressedBackground}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="DropDownButton" Property="Background" Value="{DynamicResource ComboBoxButtonDisabledBackground}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <!-- TODO: Where does background metric come from? and BorderBrush/thickness? [Min]Width/[Min]Height? -->
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FontFamily" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/MessageFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/MessageFontSize}" />
        <Setter Property="FontStyle" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/MessageFontStyle}" />
        <Setter Property="FontWeight" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/MessageFontWeight}" />
        <Setter Property="Foreground" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/ControlTextBrush}" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/ActiveBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Width" Value="150" />
        <Setter Property="Height" Value="20" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                <Canvas>
                <DockPanel DockPanel.LastChildFill="true">
                    <!-- This is actually a placeholder.  Kind of weird, but necessary.  We draw over this with button below -->
                    <Border DockPanel.Dock="Right" Width="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/VerticalScrollBarWidth}" />

                    <Border>
                        <Border x:Name="SelectedItemBorder" Margin="{TemplateBinding Padding}">
                            <!-- TODO: this margin should be a metric? -->
                            <ContentPresenter x:Name="ContentSite" Focusable="true" Margin="1,1,1,1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                        </Border>
                    </Border>

                </DockPanel>
                <Button MinHeight="0" Style="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/ComboBox/TransparentButtonStyle}" />
                <!-- TODO: fix HorizontalOffset  ... Popup placement is screwy -->
                <Popup Placement="Bottom" StaysOpen="False" Focusable="False" IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}" HorizontalOffset="-1">

                    <ContentControl Style="{DynamicResource DropShadowEffect}">
                        <Border MaxHeight="{TemplateBinding MaxDropDownHeight}" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" ClipToBounds="True" MinWidth="{TemplateBinding Width}">
                            <!-- TODO: Metric for Margin? -->
                            <StackPanel>
                                <Border Margin="{TemplateBinding Padding}">
                                    <StackPanel IsItemsHost="True" />
                                </Border>
                            </StackPanel>
                        </Border>
                    </ContentControl>

                </Popup>
                </Canvas>
            </Border>

        <ControlTemplate.Triggers>

        <!-- TODO: this Should be multiproperty with IsKeyboardFocusWithin and not IsDropDownOpen? -->
        <Trigger Property="IsKeyboardFocusWithin" Value="true">
        <Setter TargetName="SelectedItemBorder" Property="Background" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/HighlightBrush}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/GrayTextBrush}" />
        </Trigger>
        <!-- TODO: this Should be multiproperty with IsKeyboardFocusWithin and not IsDropDownOpen? -->
        <Trigger Property="IsKeyboardFocusWithin" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource http://schemas.microsoft.com/winfx/2006/xaml/xaml/SystemResources/HighlightTextBrush}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    </cmn:CustomDockPanel.Resources>
</cmn:CustomDockPanel>
