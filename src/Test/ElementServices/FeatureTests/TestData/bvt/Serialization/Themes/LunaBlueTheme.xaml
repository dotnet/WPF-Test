<?Mapping XmlNamespace="Controls" ClrNamespace="System.Windows.Controls" Assembly="PresentationFramework" ?>
<?Mapping XmlNamespace="Collections" ClrNamespace="System.Collections" Assembly="Mscorlib" ?>
<?Mapping XmlNamespace="Documents" ClrNamespace="System.Windows.Documents" Assembly="PresentationFramework" ?>
<?Mapping XmlNamespace="System" ClrNamespace="System" Assembly="Mscorlib" ?>
<?Mapping XmlNamespace="Themes" ClrNamespace="Microsoft.Windows.Themes" Assembly="PresentationFramework.Luna" ?>

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:theme="Themes">

    <!-- Luna Blue -->

    <!--
         ****************************************
         * FocusVisual Style                    *
         ****************************************
    -->

    <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Rectangle StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeButtonFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="3,3,3,3" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeTabItemFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="3,3,3,1" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeRadioButtonFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="14,0,0,0" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeComboBoxFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="4,4,21,4" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>


    <!--
         ****************************************
         * HyperLink Style (deprecated)         *
         ****************************************
    -->

    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundDefault" Color="Blue" />
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundMouseOver" Color="Red" />
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundVisited" Color="Purple" />
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundDisabled" Color="{StaticResource {x:Static SystemColors.GrayTextColorKey}}" />

    <Style x:Key="{x:Type HyperLink}" TargetType="{x:Type HyperLink}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundDefault}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type HyperLink}">
            <Border Name="HyperLinkBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsVisited" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundVisited}" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundMouseOver}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundDisabled}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         ****************************************
         * Hyperlink Style                      *
         ****************************************
    -->

    <SolidColorBrush x:Key="PFThemeHyperlinkForegroundDefault" Color="Blue" />
    <SolidColorBrush x:Key="PFThemeHyperlinkForegroundMouseOver" Color="Red" />
    <SolidColorBrush x:Key="PFThemeHyperlinkForegroundDisabled" Color="{StaticResource {x:Static SystemColors.GrayTextColorKey}}" />

    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperlinkForegroundDefault}" />
        <Setter Property="TextDecorations" Value="Underline" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundMouseOver}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundDisabled}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--
         ************************************
         * Frame Style                      *
         ************************************
    -->
    <Style x:Key="{x:Type Frame}" TargetType="{x:Type Frame}">
        <Setter Property="ClipToBounds" Value="true" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Frame}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <ContentPresenter Content="{TemplateBinding Content}" />
                 </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style> <!-- End Frame Style -->

    <!--
        **********************************************
        * Button Style
        **********************************************
    -->

    <Pen x:Key="PFThemeButtonFocusedHighlightBorder" Thickness="2.6666666667">
        <Pen.Brush>
            <LinearGradientBrush EndPoint="0.5, 1" StartPoint="0.5, 0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFCEE7FF" Offset="0" />
            <GradientStop Color="#FFBCD4F6" Offset="0.03" />
            <GradientStop Color="#FF89ADE4" Offset="0.97" />
            <GradientStop Color="#FF6982EE" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
        </Pen.Brush>
    </Pen>

    <Pen x:Key="PFThemeButtonMouseOverHighlightBorder" Thickness="2.6666666667">
        <Pen.Brush>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFF0CF" Offset="0" />
            <GradientStop Color="#FFFCD279" Offset="0.03" />
            <GradientStop Color="#FFF8B73B" Offset="0.75" />
            <GradientStop Color="#FFE59700" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
        </Pen.Brush>
    </Pen>

    <LinearGradientBrush x:Key="PFThemeButtonNormalBackgroundFill" EndPoint="0.5,1" StartPoint="0.5,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFFFFFFF" Offset="0" />
                <GradientStop Color="#FFF0F0EA" Offset="0.9" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeButtonNormalBackgroundBottom" EndPoint="0.5,1" StartPoint="0.5,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="Transparent" Offset="0.5" />
                <GradientStop Color="#35592F00" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeButtonNormalBackgroundRight" EndPoint="1, 0.5" StartPoint="0,0.5">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="Transparent" Offset="0.5" />
                <GradientStop Color="#28592F00" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeButtonPressedBackgroundFill" EndPoint="0.5,0" StartPoint="0.5,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFE5E4DD" Offset="0" />
                <GradientStop Color="#FFE2E2DA" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeButtonPressedBackgroundTop" EndPoint="0.5,0" StartPoint="0.5,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF978B72" Offset="1" />
                <GradientStop Color="Transparent" Offset=".6" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeButtonPressedBackgroundBottom" EndPoint="0.5,1" StartPoint="0.5,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="Transparent" Offset="0.6" />
                <GradientStop Color="#FFFFFFFF" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeButtonPressedBackgroundLeft" EndPoint="0,0.5" StartPoint="1,0.5">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFAA9D87" Offset="1" />
                <GradientStop Color="Transparent" Offset=".6" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Pen x:Key="PFThemeButtonOuterBorder" Thickness="1.3333333333">
        <Pen.Brush>
            <LinearGradientBrush EndPoint="0.4,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#20000000" Offset="0" />
            <GradientStop Color="#00FFFFFF" Offset="0.5" />
            <GradientStop Color="#80FFFFFF" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
        </Pen.Brush>
    </Pen>

    <SolidColorBrush x:Key="PFThemeButtonDisabledFill" Color="#77FFFFFF" />
    <SolidColorBrush x:Key="PFThemeButtonDisabledStroke" Color="#44000000" />
    <SolidColorBrush x:Key="PFThemeButtonBorder" Color="#FF003C74" />

    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeButtonNormalBackgroundFill}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeButtonBorder}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <theme:ThickChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" OuterHighlight="{DynamicResource PFThemeButtonOuterBorder}" BottomShade="{DynamicResource PFThemeButtonNormalBackgroundBottom}" RightShade="{DynamicResource PFThemeButtonNormalBackgroundRight}">
                    <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </theme:ThickChrome>

        <ControlTemplate.Triggers>

        <!-- Focused -->
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{DynamicResource PFThemeButtonFocusedHighlightBorder}" />
        </Trigger>
        <!-- Defaulted -->
        <Trigger Property="IsDefaulted" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{DynamicResource PFThemeButtonFocusedHighlightBorder}" />
        </Trigger>
        <!-- MouseOver -->
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{DynamicResource PFThemeButtonMouseOverHighlightBorder}" />
        </Trigger>
        <!-- Pressed -->
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{x:Null}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.Fill" Value="{DynamicResource PFThemeButtonPressedBackgroundFill}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.TopShade" Value="{DynamicResource PFThemeButtonPressedBackgroundTop}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.LeftShade" Value="{DynamicResource PFThemeButtonPressedBackgroundLeft}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.RightShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.BottomShade" Value="{DynamicResource PFThemeButtonPressedBackgroundBottom}" />
        </Trigger>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.OuterHighlight" Value="{x:Null}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{x:Null}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.BorderBrush" Value="{DynamicResource PFThemeButtonDisabledStroke}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.Fill" Value="{DynamicResource PFThemeButtonDisabledFill}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.TopShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.LeftShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.RightShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.BottomShade" Value="Transparent" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="75" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="23" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        **********************************************
        CHECKBOX
        **********************************************
    -->

    <LinearGradientBrush x:Key="PFThemeCheckBoxFillNormal">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#FFD2D4D2" Offset="0" />
          <GradientStop Color="#FFFFFFFF" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeCheckBoxStrokeNormal">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF004C94" Offset="0" />
            <GradientStop Color="#FF003C74" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeCheckBoxStrokeMouseOver">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFF0CF" Offset="0" />
            <GradientStop Color="#FFF8B330" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeCheckBoxFillPressed">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#FFB2B2A9" Offset="0" />
          <GradientStop Color="#FFEBEADA" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PFThemeCheckBoxCheckedFill" Color="#FF21A121" />
    <SolidColorBrush x:Key="PFThemeCheckBoxCheckedPressedFill" Color="#FF1A7E18" />
    <SolidColorBrush x:Key="PFThemeCheckBoxCheckedDisabledFill" Color="#FFCAC8BB" />
    <SolidColorBrush x:Key="PFThemeCheckBoxnullFill" Color="#FF73C273" />
    <SolidColorBrush x:Key="PFThemeCheckBoxnullPressedFill" Color="#FF1A7E18" />
    <SolidColorBrush x:Key="PFThemeCheckBoxnullDisabledFill" Color="#FFCAC8BB" />
    <SolidColorBrush x:Key="PFThemeCheckBoxDisabledStroke" Color="#FFCAC8BB" />
    <SolidColorBrush x:Key="PFThemeCheckBoxDisabledFill" Color="#FFEBEADA" />

    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeRadioButtonFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeCheckBoxFillNormal}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeCheckBoxStrokeNormal}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
            <BulletPanel Background="Transparent">
                <Border x:Name="CheckBoxBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                    <Border x:Name="CheckBoxHighlight" FlowDirection="LeftToRight" BorderThickness="2px" Height="11px" Width="11px">
                        <Path x:Name="CheckBoxChecked" Fill="{DynamicResource PFThemeCheckBoxCheckedFill}" />
                    </Border>
                </Border>
                <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </BulletPanel>
        <ControlTemplate.Triggers>

        <!-- Checked -->
        <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="CheckBoxChecked" Property="Path.Data" Value="M 0 2.0 L 0 4.8 L 2.5 7.4 L 7.1 2.8 L 7.1 0 L 2.5 4.6 Z" />
        </Trigger>
        <!-- null -->
        <Trigger Property="IsChecked" Value="null">
        <Setter TargetName="CheckBoxChecked" Property="Path.Fill" Value="{DynamicResource PFThemeCheckBoxnullFill}" />
        <Setter TargetName="CheckBoxChecked" Property="Path.Data" Value="M 0 0 L 0 7 L 7 7 L 7 0 Z" />
        </Trigger>
        <!-- MouseOver -->
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="CheckBoxHighlight" Property="BorderBrush" Value="{DynamicResource PFThemeCheckBoxStrokeMouseOver}" />
        </Trigger>
        <!-- Pressed -->
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="CheckBoxBorder" Property="Background" Value="{DynamicResource PFThemeCheckBoxFillPressed}" />
        <Setter TargetName="CheckBoxHighlight" Property="BorderBrush" Value="Transparent" />
        <Setter TargetName="CheckBoxChecked" Property="Shape.Fill" Value="{DynamicResource PFThemeCheckBoxCheckedPressedFill}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="true" />
                    <Condition Property="IsChecked" Value="null" />
                </MultiTrigger.Conditions>
        <Setter TargetName="CheckBoxChecked" Property="Shape.Fill" Value="{DynamicResource PFThemeCheckBoxnullPressedFill}" />
        </MultiTrigger>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="CheckBoxBorder" Property="Background" Value="{DynamicResource PFThemeCheckBoxDisabledFill}" />
        <Setter TargetName="CheckBoxBorder" Property="BorderBrush" Value="{DynamicResource PFThemeCheckBoxDisabledStroke}" />
        <Setter TargetName="CheckBoxChecked" Property="Shape.Fill" Value="{DynamicResource PFThemeCheckBoxCheckedDisabledFill}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsEnabled" Value="false" />
                    <Condition Property="IsChecked" Value="null" />
                </MultiTrigger.Conditions>
        <Setter TargetName="CheckBoxChecked" Property="Shape.Fill" Value="{DynamicResource PFThemeCheckBoxnullDisabledFill}" />
        </MultiTrigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeCheckBoxDisabledStroke}" />
        </Trigger>
        </Style.Triggers>
    </Style>




    <!--
        **********************************************
        RADIOBUTTON
        **********************************************
    -->

    <LinearGradientBrush x:Key="PFThemeRadioButtonFillNormal">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#FFD2D4D2" Offset="0" />
          <GradientStop Color="#FFFFFFFF" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRadioButtonStrokeNormal">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF004C94" Offset="0" />
            <GradientStop Color="#FF003C74" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRadioButtonStrokeMouseOver">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFEDF9C" Offset="0" />
            <GradientStop Color="#FFF9BB43" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRadioButtonSelectedFill" EndPoint="1,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FF60CF5D" Offset="0" />
            <GradientStop Color="#FFACEFAA" Offset="0.302469134" />
            <GradientStop Color="#FF139210" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRadioButtonPressedFill" EndPoint="1,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
          <GradientStop Color="#FFB2B2A9" Offset="0" />
          <GradientStop Color="#FFEBEADA" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PFThemeRadioButtonDisabledFill" Color="#FFEBEADA" />
    <SolidColorBrush x:Key="PFThemeRadioButtonDisabledStroke" Color="#FFCAC8BB" />

    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeRadioButtonFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeRadioButtonFillNormal}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeRadioButtonStrokeNormal}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
            <BulletPanel Background="Transparent">
                <Grid>
                    <Ellipse Width="13" Height="13" x:Name="RadioButtonBackground" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" />
                    <Ellipse Width="5" Height="5" x:Name="RadioButtonSelectedFill" Visibility="Hidden" Canvas.Top="4" Canvas.Left="4" Fill="{DynamicResource PFThemeRadioButtonSelectedFill}" />
                    <Ellipse Width="11" Height="11" StrokeThickness="2" x:Name="RadioButtonHighlight" Visibility="Hidden" Canvas.Top="1" Canvas.Left="1" Fill="Transparent" Stroke="{DynamicResource PFThemeRadioButtonStrokeMouseOver}" />
                </Grid>
                <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
            </BulletPanel>
        <ControlTemplate.Triggers>

        <!-- Checked -->
        <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="RadioButtonSelectedFill" Property="Visibility" Value="Visible" />
        </Trigger>
        <!-- MouseOver -->
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="RadioButtonHighlight" Property="Visibility" Value="Visible" />
        </Trigger>
        <!-- Pressed -->
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="RadioButtonBackground" Property="Rectangle.Fill" Value="{DynamicResource PFThemeRadioButtonPressedFill}" />
        <Setter TargetName="RadioButtonHighlight" Property="Rectangle.Stroke" Value="Transparent" />
        <Setter TargetName="RadioButtonSelectedFill" Property="Rectangle.Fill" Value="Transparent" />
        </Trigger>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="RadioButtonBackground" Property="Shape.Fill" Value="{DynamicResource PFThemeRadioButtonDisabledFill}" />
        <Setter TargetName="RadioButtonBackground" Property="Shape.Stroke" Value="{DynamicResource PFThemeRadioButtonDisabledStroke}" />
        <Setter TargetName="RadioButtonSelectedFill" Property="Rectangle.Fill" Value="{DynamicResource PFThemeRadioButtonDisabledStroke}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeCheckBoxDisabledStroke}" />
        </Trigger>
        </Style.Triggers>
    </Style>


   <!--
         ****************************************
         * ItemsControl Style             *
         ****************************************
    -->
    <Style x:Key="{x:Type ItemsControl}" TargetType="{x:Type ItemsControl}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ItemsControl}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <ItemsPresenter Margin="{TemplateBinding Padding}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

   <!--
         **********************************
         * ContentControl Style             *
         **********************************
    -->

            <Style x:Key="{x:Type ContentControl}" TargetType="{x:Type ContentControl}">
                <Setter Property="Template">
                <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter />
                </ControlTemplate>
                </Setter.Value>
                </Setter>
            </Style>

   <!--
         ****************************************
         * RadioButtonList Style                *
         ****************************************
    -->

    <Style x:Key="{x:Type RadioButtonList}" TargetType="{x:Type RadioButtonList}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButtonList}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ItemsPresenter Margin="{TemplateBinding Padding}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         ****************************************
         * ToolBar Style                        *
         ****************************************
    -->

    <!-- Button Style hosted in ToolBar -->
    <Style x:Key="PFThemeToolBarButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width" Value="23" />
        <Setter Property="Height" Value="23" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <Border Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Background" Value="#FF8492B5" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToggleButton Style hosted in ToolBar -->
    <Style x:Key="PFThemeToolBarToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width" Value="23" />
        <Setter Property="Height" Value="23" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsChecked" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFD6D7D6" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Background" Value="#FF8492B5" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Thumb used in ToolBar Style -->
    <Style x:Key="PFThemeToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
            <Border Padding="2,2,2,2" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                <Border>
                  <Border.Background>
                    <DrawingBrush Viewbox="0,0,0,0" Viewport="1,0,4,4" TileMode="Tile" ViewportUnits="Absolute">
                        <DrawingBrush.Drawing>
                            <DrawingGroup>
                                <DrawingGroup.Children>
                                    <GeometryDrawing Brush="White" Geometry="M 1 1 A 1 1 0 1 0 1 1.01  z" />
                                    <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Geometry="M 0 0 A 1 1 0 1 0 0 0.01  z" />
                                </DrawingGroup.Children>
                            </DrawingGroup>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                  </Border.Background>
                </Border>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Cursor" Value="SizeAll" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="PFThemeToolBarHorizontalBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0" />
            <GradientStop Color="#FFECEBE6" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeToolBarVerticalBackground" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0" />
            <GradientStop Color="#FFECEBE6" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="{x:Type ToolBar}" BasedOn="{x:Null}" TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource PFThemeToolBarHorizontalBackground}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="MinWidth" Value="27" />
        <Setter Property="MinHeight" Value="27" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,3,3,3" Padding="{TemplateBinding Padding}">
                <StackPanel Orientation="{TemplateBinding Orientation}">
                    <Thumb x:Name="ToolBarThumb" Style="{DynamicResource PFThemeToolBarThumbStyle}" Width="8" />
                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,4,0" />
                    <StackPanel Orientation="{TemplateBinding Orientation}" IsItemsHost="True" />
                </StackPanel>
            </Border>
        <ControlTemplate.Triggers>

        <!-- Header -->
        <Trigger Property="Header" Value="{x:Null}">
        <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <!-- IsLocked -->
        <Trigger Property="ToolBarTray.IsLocked" Value="true">
        <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <!-- Orientation -->
        <Trigger Property="Orientation" Value="Vertical">
        <Setter TargetName="ToolBarThumb" Property="Height" Value="8" />
        <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
        <Setter TargetName="ToolBarHeader" Property="Margin" Value="0,0,0,4" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Orientation -->
        <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background" Value="{DynamicResource PFThemeToolBarVerticalBackground}" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
         ****************************************
         * ComboBox Style                       *
         ****************************************
    -->

    <Style x:Key="PFThemeComboBoxTransparentButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel Background="{TemplateBinding Background}" LastChildFill="false">
                <DockPanel DockPanel.Dock="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">

                    <!--right -->   <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--bottom-->   <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--left  -->   <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--top   -->   <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                    <!--right -->   <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--bottom-->   <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--left  -->   <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--top   -->   <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <Path x:Name="Arrow" Margin="1,1,1,1" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                </DockPanel>
            </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="R2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="B2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="L2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="T2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="Arrow" Property="Margin" Value="2,2,0,0" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PFThemeComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
            <ScrollViewer x:Name="TextBoxScroller" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="{TemplateBinding Background}">
                <TextBlock x:Name="TextBoxContent" TextTrimming="None" ClipToBounds="True" Cursor="IBeam" TextBox.AcceptsReturn="{TemplateBinding AcceptsReturn}" />
           </ScrollViewer>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         ***************************************************************
         * Keep DocumentViewer's ComboBox style in-sync with this one. *
         ***************************************************************
    -->

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <!-- Fixed height and width necessary until TextBox can size to content -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeComboBoxFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid>
                    <DockPanel LastChildFill="false">
                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    </DockPanel>

                    <Border>
                        <DockPanel Margin="2">
                            <!-- saves space for the button which will be drawn on top -->
                            <FrameworkElement DockPanel.Dock="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                            <Grid Margin="{TemplateBinding Padding}">
                    <Border x:Name="SelectedItemBorder" ClipToBounds="{TemplateBinding ClipToBounds}">
                        <ContentPresenter x:Name="ContentSite" Margin="1,1,1,1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" />
                    </Border>
                    <TextBox x:Name="EditableSite" Style="{DynamicResource PFThemeComboBoxEditableTextBox}" Visibility="Collapsed" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid>
                        </DockPanel>
                    </Border>

                    <Border x:Name="DropDownButtonBorder">
                        <ToggleButton x:Name="DropDownButton" Margin="2" MinWidth="0" MinHeight="0" Width="Auto" Focusable="False" Style="{DynamicResource PFThemeComboBoxTransparentButtonStyle}" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
                    </Border>

                    <Popup Placement="Bottom" IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                        <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" MinWidth="{TemplateBinding ActualWidth}">
                            <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Border>

                    </Popup>
                </Grid>
            </Border>

        <ControlTemplate.Triggers>

        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
        <Setter TargetName="SelectedItemBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        </MultiTrigger>
        <Trigger Property="IsEditable" Value="true">
        <!-- For exitable ComboBox we want to step directly on TextBox and skip ComboBox itself -->
        <Setter TargetName="DropDownButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="SelectedItemBorder" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="EditableSite" Property="Visibility" Value="Visible" />
        <Setter TargetName="EditableSite" Property="ComboBox.IsEditableTextBox" Value="True" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiTrigger>
        <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="150" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

   <!--
            **********************************************************
            * DocumentViewer ComboBox Style                          *
            *   Keep this in-sync with ComboBox's Style              *
            **********************************************************
    -->
    <Style x:Key="PFThemeDocumentViewerComboBoxStyle" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
        <!-- Fixed height and width necessary until TextBox can size to content -->
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid>
                    <DockPanel LastChildFill="false">
                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                            <!-- Right --> <Rectangle DockPanel.Dock="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!-- Bottom --><Rectangle DockPanel.Dock="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                            <!-- Left -->  <Rectangle DockPanel.Dock="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                            <!-- Top -->   <Rectangle DockPanel.Dock="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    </DockPanel>

                    <Border>
                        <DockPanel Margin="2">
                            <!-- saves space for the button which will be drawn on top -->
                            <FrameworkElement DockPanel.Dock="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                            <Grid Margin="{TemplateBinding Padding}">
                                <Border x:Name="SelectedItemBorder" ClipToBounds="{TemplateBinding ClipToBounds}">
                                    <ContentPresenter x:Name="ContentSite" Margin="1,1,1,1" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" VerticalAlignment="Center" />
                                </Border>
                                <TextBox x:Name="EditableSite" Style="{DynamicResource PFThemeComboBoxEditableTextBox}" Visibility="Collapsed" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" />

                                <!-- This TextBox has been added to display the current Zoom Level -->

                                <TextBox x:Name="ZoomTextBox" Style="{DynamicResource PFThemeComboBoxEditableTextBox}" Visibility="Visible" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" Text="{Binding Path=ZoomPercentage,Mode=OneWay,Converter={StaticResource PFThemeDocumentViewerZoomPercentageConverter},RelativeSource={RelativeSource AncestorType={x:Type DocumentViewer}}}" Focusable="True" VerticalContentAlignment="Center" />
                            </Grid>
                        </DockPanel>
                    </Border>

                    <Border x:Name="DropDownButtonBorder">
                        <ToggleButton x:Name="DropDownButton" Margin="2" MinWidth="0" MinHeight="0" Width="Auto" Focusable="False" Style="{DynamicResource PFThemeComboBoxTransparentButtonStyle}" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
                    </Border>

                    <Popup Placement="Bottom" IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                        <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" MinWidth="{TemplateBinding ActualWidth}">
                            <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                            </ScrollViewer>
                        </Border>

                    </Popup>
                </Grid>
            </Border>

        <ControlTemplate.Triggers>

        <Trigger Property="IsEditable" Value="true">
        <!-- For exitable ComboBox we want to step directly on TextBox and skip ComboBox itself -->
        <Setter TargetName="DropDownButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="SelectedItemBorder" Property="Visibility" Value="Collapsed" />
        <!-- Changed this line to ensure ComboBox's normal TextBox is not showing. -->
        <Setter TargetName="EditableSite" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="EditableSite" Property="ComboBox.IsEditableTextBox" Value="True" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        </Trigger>
        </Style.Triggers>
    </Style>



    <!--
         ****************************************
         * Label Style                          *
         ****************************************
    -->

        <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
            <!-- TODO: Padding should come from theme metric? -->
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="ClipToBounds" Value="True" />
            <Setter Property="Padding" Value="5" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Label}">
                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}">
                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>



    <!--
         ****************************************
         * ListBox Style                        *
         ****************************************
    -->

    <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="#FF7F9DB9" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Padding="{TemplateBinding Padding}">
                    <ItemsPresenter />
                </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1,0,0,0" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsSelected" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        </MultiTrigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>




    <!--
         ****************************************
         * Menu Style                           *
         ****************************************
    -->

    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBarBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ItemsPresenter Margin="{TemplateBinding Padding}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         *******************************************
         * MenuItem/ContextMenu ScrollViewer Style *
         *******************************************
    -->

    <Style x:Key="PFThemeMenuScrollButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />

        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <DockPanel Background="Transparent">

                <!--right -->   <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Fill="Transparent" />
                <!--bottom-->   <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Fill="Transparent" />
                <!--left  -->   <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Fill="Transparent" />
                <!--top   -->   <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Fill="Transparent" />

                <ContentPresenter x:Name="ContentContainer" Margin="2,2,2,2" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </DockPanel>

            <ControlTemplate.Triggers>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <Setter TargetName="ContentContainer" Property="Margin" Value="3,3,1,1" />
                </Trigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <MenuScrollingVisibilityConverter x:Key="PFThemeMenuScrollingVisibilityConverter" />

    <Style x:Key="PFThemeMenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Border Grid.Row="1" Grid.Column="0">
                    <ScrollContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
                <RepeatButton x:Name="LineUpButton" Style="{DynamicResource PFThemeMenuScrollButton}" Grid.Row="0" Grid.Column="0" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="False">
                    <RepeatButton.Visibility>
                        <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource PFThemeMenuScrollingVisibilityConverter}" ConverterParameter="0">
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                        </MultiBinding>
                    </RepeatButton.Visibility>
                    <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="M 0 4 L 3.5 0 L 7 4 Z" />
                </RepeatButton>
                <RepeatButton x:Name="LineDownButton" Style="{DynamicResource PFThemeMenuScrollButton}" Grid.Row="2" Grid.Column="0" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="False">
                    <RepeatButton.Visibility>
                        <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource PFThemeMenuScrollingVisibilityConverter}" ConverterParameter="100">
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                        </MultiBinding>
                    </RepeatButton.Visibility>
                    <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                </RepeatButton>
            </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         ****************************************
         * ContextMenu Style                    *
         ****************************************
    -->

    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ScrollViewer Style="{DynamicResource PFThemeMenuScrollViewer}">
                    <ItemsPresenter Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle" />
                </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>





    <!--
         ****************************************
         * MenuItem Style                       *
         ****************************************
    -->

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <DockPanel>
                    <!-- Glyph -->
                    <!--
                        Width  = "{*SystemParameters.MenuCheckMarkWidthKey}"
                        Height = "{*SystemParameters.MenuCheckMarkHeightKey}"
                    -->
                    <Path x:Name="GlyphPanel" Margin="4,0,6,0" Visibility="Collapsed" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Data="M 0 2.0 L 0 4.8 L 2.5 7.4 L 7.1 2.8 L 7.1 0 L 2.5 4.6 Z" />
                    <!-- Submenu arrow -->
                    <Path x:Name="ArrowPanel" DockPanel.Dock="Right" Visibility="Collapsed" VerticalAlignment="Center" Margin="4,0,6,0" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 0 8 L 4 4 Z" />
                    <!--
                        HorizontalAlignment  = "*Alias(Target=HorizontalContentAlignment)"
                        VerticalAlignment    = "*Alias(Target=VerticalContentAlignment)"
                    -->
                    <ContentPresenter ContentSource="Header" Margin="{TemplateBinding Padding}" />

                    <Popup x:Name="SubMenuPopup" Placement="Bottom" IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">

                    <!-- MinWidth        = "*Alias(Target=Width)" -->
                        <Border Background="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" ClipToBounds="False">
                            <ScrollViewer Style="{DynamicResource PFThemeMenuScrollViewer}">
                                <!-- TODO: Metric for Margin? -->
                                <ItemsPresenter Margin="2" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Border>

                    </Popup>
                </DockPanel>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="Role" Value="TopLevelHeader">
        <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuHeader">
        <Setter TargetName="SubMenuPopup" Property="Placement" Value="Right" />
        <Setter TargetName="SubMenuPopup" Property="VerticalOffset" Value="-3" />
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Hidden" />
        <Setter TargetName="ArrowPanel" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuItem">
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Hidden" />
        <Setter TargetName="ArrowPanel" Property="Visibility" Value="Hidden" />
        </Trigger>
        <Trigger Property="IsChecked" Value="True">
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="Mode" Value="Separator">
        <Setter TargetName="GlyphPanel" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="ArrowPanel" Property="Visibility" Value="Collapsed" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="Role" Value="TopLevelHeader">
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Padding" Value="6,3,6,3" />
        </Trigger>
        <Trigger Property="Role" Value="TopLevelItem">
        <Setter Property="Margin" Value="0,1,0,1" />
        <Setter Property="Padding" Value="6,3,6,3" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuHeader">
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="Padding" Value="0,2,0,2" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuItem">
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="Padding" Value="0,2,0,2" />
        </Trigger>
        <Trigger Property="IsHighlighted" Value="True">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <Trigger Property="Mode" Value="Separator">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
        <Setter Property="Margin" Value="0,3,0,0" />
        <Setter Property="Padding" Value="0,3,0,0" />
        <Setter Property="Focusable" Value="false" />
        </Trigger>
        </Style.Triggers>
    </Style>



   <!--
        **********************************************
        * RepeatButton Style
        **********************************************
    -->

    <Pen x:Key="PFThemeRepeatButtonFocusedHighlightBorder" Thickness="2.6666666667">
        <Pen.Brush>
            <LinearGradientBrush EndPoint="0.5, 1" StartPoint="0.5, 0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFCEE7FF" Offset="0" />
            <GradientStop Color="#FFBCD4F6" Offset="0.03" />
            <GradientStop Color="#FF89ADE4" Offset="0.97" />
            <GradientStop Color="#FF6982EE" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
        </Pen.Brush>
        </Pen>

    <Pen x:Key="PFThemeRepeatButtonMouseOverHighlightBorder" Thickness="2.6666666667">
        <Pen.Brush>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFF0CF" Offset="0" />
            <GradientStop Color="#FFFCD279" Offset="0.03" />
            <GradientStop Color="#FFF8B73B" Offset="0.75" />
            <GradientStop Color="#FFE59700" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
        </Pen.Brush>
        </Pen>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonNormalBackgroundFill" EndPoint="0.5,1" StartPoint="0.5,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFFFFFFF" Offset="0" />
                <GradientStop Color="#FFF0F0EA" Offset="0.9" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonNormalBackgroundBottom" EndPoint="0.5,1" StartPoint="0.5,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="Transparent" Offset="0.5" />
                <GradientStop Color="#35592F00" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonNormalBackgroundRight" EndPoint="1, 0.5" StartPoint="0,0.5">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="Transparent" Offset="0.5" />
                <GradientStop Color="#28592F00" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonPressedBackgroundFill" EndPoint="0.5,0" StartPoint="0.5,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFE5E4DD" Offset="0" />
                <GradientStop Color="#FFE2E2DA" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonPressedBackgroundTop" EndPoint="0.5,0" StartPoint="0.5,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF978B72" Offset="1" />
                <GradientStop Color="Transparent" Offset=".6" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonPressedBackgroundBottom" EndPoint="0.5,1" StartPoint="0.5,0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="Transparent" Offset="0.6" />
                <GradientStop Color="#FFFFFFFF" Offset="1" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeRepeatButtonPressedBackgroundLeft" EndPoint="0,0.5" StartPoint="1,0.5">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFAA9D87" Offset="1" />
                <GradientStop Color="Transparent" Offset=".6" />
            </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Pen x:Key="PFThemeRepeatButtonOuterBorder" Thickness="1.3333333333">
        <Pen.Brush>
            <LinearGradientBrush EndPoint="0.4,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#20000000" Offset="0" />
            <GradientStop Color="#00FFFFFF" Offset="0.5" />
            <GradientStop Color="#80FFFFFF" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
        </Pen.Brush>
    </Pen>

    <SolidColorBrush x:Key="PFThemeRepeatButtonDisabledFill" Color="#77FFFFFF" />
    <SolidColorBrush x:Key="PFThemeRepeatButtonDisabledStroke" Color="#44000000" />
    <SolidColorBrush x:Key="PFThemeRepeatButtonBorder" Color="#FF003C74" />

    <Style x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeRepeatButtonNormalBackgroundFill}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeRepeatButtonBorder}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <theme:ThickChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Fill="{TemplateBinding Background}" OuterHighlight="{DynamicResource PFThemeRepeatButtonOuterBorder}" BottomShade="{DynamicResource PFThemeRepeatButtonNormalBackgroundBottom}" RightShade="{DynamicResource PFThemeRepeatButtonNormalBackgroundRight}">
                    <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </theme:ThickChrome>

        <ControlTemplate.Triggers>

        <!-- Focused -->
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{DynamicResource PFThemeRepeatButtonFocusedHighlightBorder}" />
        </Trigger>
        <!-- MouseOver -->
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{DynamicResource PFThemeRepeatButtonMouseOverHighlightBorder}" />
        </Trigger>
        <!-- Pressed -->
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{x:Null}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.Fill" Value="{DynamicResource PFThemeRepeatButtonPressedBackgroundFill}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.TopShade" Value="{DynamicResource PFThemeRepeatButtonPressedBackgroundTop}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.LeftShade" Value="{DynamicResource PFThemeRepeatButtonPressedBackgroundLeft}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.RightShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.BottomShade" Value="{DynamicResource PFThemeRepeatButtonPressedBackgroundBottom}" />
        </Trigger>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="Chrome" Property="theme:ThickChrome.OuterHighlight" Value="{x:Null}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.InnerHighlight" Value="{x:Null}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.BorderBrush" Value="{DynamicResource PFThemeRepeatButtonDisabledStroke}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.Fill" Value="{DynamicResource PFThemeRepeatButtonDisabledFill}" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.TopShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.LeftShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.RightShade" Value="Transparent" />
        <Setter TargetName="Chrome" Property="theme:ThickChrome.BottomShade" Value="Transparent" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Disabled -->
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="75" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="23" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        *****************************************
        * Thumb Style
        *****************************************
        * TODO:
        *     1. Add ThumbMinWidth & ThumbMinHeight to SystemMetrics
        *           (MinWidth = 2 * cxEdge, MinHeight = 2 * cyEdge)
        *****************************************
    -->

    <Style x:Key="{x:Type Thumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <!-- Draw Edge -->
                    <Border BorderThickness="0,0,1,1" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <Border BorderThickness="0,0,1,1" Margin="1" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <Border BorderThickness="0" Margin="2" BorderBrush="Transparent" Background="{TemplateBinding Background}" />
                </Grid>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="10" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="10" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         ****************************************
         * ToggleButton Style                   *
         ****************************************
    -->

    <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>

                    <!--right -->   <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->   <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->   <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--top   -->   <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                    <Border x:Name="ContentContainer" BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" BorderThickness="1" Margin="1,1,1,1" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </DockPanel>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="ContentContainer" Property="Margin" Value="2,2,0,0" />
        </Trigger>
        <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="ContentContainer" Property="Margin" Value="2,2,0,0" />
        </Trigger>
        <!--
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="null"/>
                    <Condition Property="IsPressed" Value="false"/>
                </MultiTrigger.Conditions>
                <Set Target="R1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="B1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="L1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="T1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
            </MultiTrigger>
-->
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <Trigger Property="IsChecked" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        </Trigger>
        <!--
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="null"/>
                    <Condition Property="IsPressed" Value="false"/>
                </MultiTrigger.Conditions>
                <Set Target="R1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="B1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="L1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="T1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
            </MultiTrigger>
-->
        </Style.Triggers>
    </Style>



    <!--
         ****************************************
         * ToolTip Style                        *
         ****************************************
    -->

        <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
            <Setter Property="Padding" Value="3,1,3,2" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="ClipToBounds" Value="True" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToolTip}">
                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" ClipToBounds="{TemplateBinding ClipToBounds}" Padding="{TemplateBinding Padding}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">

                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

    <!-- ********************* TabControl ************************ -->

    <LinearGradientBrush x:Key="PFThemeTabControlPaneTopNormalBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFCFCFE" Offset="0" />
            <GradientStop Color="#FFF4F3EE" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PFThemeTabControlPaneBottomNormalBackground" StartPoint="0,1" EndPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFCFCFE" Offset="0" />
            <GradientStop Color="#FFF4F3EE" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PFThemeTabControlPaneLeftNormalBackground" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFCFCFE" Offset="0" />
            <GradientStop Color="#FFF4F3EE" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PFThemeTabControlPaneRightNormalBackground" StartPoint="1,0" EndPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFCFCFE" Offset="0" />
            <GradientStop Color="#FFF4F3EE" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PFThemeTabControlNormalBorderBrush" Color="#919B9C" />

    <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding" Value="4,4,4,4" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeTabControlNormalBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeTabControlPaneTopNormalBackground}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
            <Grid KeyboardNavigation.TabNavigation="Local">
                <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="ColumnDefinition0" />
                <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                <RowDefinition x:Name="RowDefinition1" Height="*" />
                </Grid.RowDefinitions>

                <Border x:Name="ContentPanel" BorderThickness="0,0,1,1" BorderBrush="#D0CEBF" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Control.TabIndex="2" Grid.Column="0" Grid.Row="1">
                <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                    <Border ClipToBounds="{TemplateBinding ClipToBounds}" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="ContentSite" Margin="{TemplateBinding Padding}" ContentSource="SelectedContent" />
                    </Border>
                </Border>
                </Border>

                <TabPanel x:Name="HeaderPanel" Control.TabIndex="1" Grid.Column="0" Grid.Row="0" Margin="2,2,2,0" IsItemsHost="True" />

            </Grid>
        <ControlTemplate.Triggers>

        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="Grid.Row" Value="1" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="Auto" TargetName="RowDefinition1" />
        <Setter Property="Margin" Value="2,0,2,2" TargetName="HeaderPanel" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Grid.Row" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Grid.Column" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Column" Value="1" TargetName="ContentPanel" />
        <Setter Property="Width" Value="Auto" TargetName="ColumnDefinition0" />
        <Setter Property="Width" Value="*" TargetName="ColumnDefinition1" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="0" TargetName="RowDefinition1" />
        <Setter Property="Margin" Value="2,2,0,2" TargetName="HeaderPanel" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Grid.Row" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Grid.Column" Value="1" TargetName="HeaderPanel" />
        <Setter Property="Grid.Column" Value="0" TargetName="ContentPanel" />
        <Setter Property="Width" Value="*" TargetName="ColumnDefinition0" />
        <Setter Property="Width" Value="Auto" TargetName="ColumnDefinition1" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="0" TargetName="RowDefinition1" />
        <Setter Property="Margin" Value="0,2,2,2" TargetName="HeaderPanel" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="Background" Value="{DynamicResource PFThemeTabControlPaneBottomNormalBackground}" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Background" Value="{DynamicResource PFThemeTabControlPaneLeftNormalBackground}" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Background" Value="{DynamicResource PFThemeTabControlPaneRightNormalBackground}" />
        </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ********************* TabItem ************************ -->
    <LinearGradientBrush x:Key="PFThemeTabItemNormalBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0" />
            <GradientStop Color="#FFECEBE6" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="PFThemeTabItemHotBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0" />
            <GradientStop Color="#FFECEBE6" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="PFThemeTabItemSelectedBackground" Color="#FFFCFCFE" />
    <SolidColorBrush x:Key="PFThemeTabItemDisabledBackground" Color="#FFF5F4EA" />

    <SolidColorBrush x:Key="PFThemeTabItemSelectedBorderBackround" Color="#FFFFC73C" />
    <SolidColorBrush x:Key="PFThemeTabItemSelectedBorderBrush" Color="#FFE68B2C" />

    <SolidColorBrush x:Key="PFThemeTabItemHotBorderBackround" Color="#FFFFC73C" />
    <SolidColorBrush x:Key="PFThemeTabItemHotBorderBrush" Color="#FFE68B2C" />

    <SolidColorBrush x:Key="PFThemeTabItemDisabledBorderBrush" Color="#FFC9C7BA" />

    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeTabItemFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding" Value="12,2,12,2" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeTabControlNormalBorderBrush}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeTabItemNormalBackground}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="BorderThickness" Value="1,1,1,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
            <Border>
                <Grid Margin="0,0,1,0">
                    <Decorator x:Name="Transform">
                        <Grid>
                            <!-- Header Border -->
                            <Border CornerRadius="3,3,0,0" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" />

                            <!-- Top part used for orange highlight -->
                            <Border x:Name="HighlightBorder" Height="3" BorderThickness="1,1,1,0" CornerRadius="3,3,0,0" VerticalAlignment="Top" />
                        </Grid>
                    </Decorator>

                    <!-- Header Content -->
                    <Border BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="{TemplateBinding ClipToBounds}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="ContentSite" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="HighlightBorder" Property="BorderBrush" Value="{DynamicResource PFThemeTabItemHotBorderBrush}" />
        <Setter TargetName="HighlightBorder" Property="Background" Value="{DynamicResource PFThemeTabItemHotBorderBackround}" />
        </Trigger>
        <Trigger Property="IsSelected" Value="true">
        <Setter TargetName="HighlightBorder" Property="BorderBrush" Value="{DynamicResource PFThemeTabItemSelectedBorderBrush}" />
        <Setter TargetName="HighlightBorder" Property="Background" Value="{DynamicResource PFThemeTabItemSelectedBorderBackround}" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="Decorator.LayoutTransform" Value="scale 1 -1" TargetName="Transform" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Decorator.LayoutTransform" Value="rotate -90" TargetName="Transform" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Decorator.LayoutTransform" Value="rotate 90" TargetName="Transform" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeTabItemHotBackground}" />
        </Trigger>
        <Trigger Property="IsSelected" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeTabItemSelectedBackground}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource PFThemeTabItemDisabledBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource PFThemeTabItemDisabledBorderBrush}" />
        </Trigger>
        <MultiTrigger>
        <!-- Selected and Top -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
        <Setter Property="TabPanel.Bottom" Value="-1" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Bottom -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
        <Setter Property="TabPanel.Top" Value="-1" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Left -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
        <Setter Property="TabPanel.Right" Value="-1" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Right -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
        <Setter Property="TabPanel.Left" Value="-1" />
        </MultiTrigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="20" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         **********************************************************
         * PageFunctionBase style                                 *
         **********************************************************
    -->
    <Style x:Key="{x:Type PageFunctionBase}" TargetType="{x:Type PageFunctionBase}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type PageFunctionBase}">
            <ContentPresenter ClipToBounds="true" Content="{TemplateBinding PageFunctionBase.Child}" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         **********************************************************
         * Page style                                             *
         **********************************************************
    -->
    <Style x:Key="{x:Type Page}" TargetType="{x:Type Page}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Page}">
            <ContentPresenter ClipToBounds="true" Content="{TemplateBinding Page.Child}" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         **********************************************************
         * Window/NavigationWindow style                          *
         **********************************************************
    -->

    <!-- Window Style -->
    <Style x:Key="{x:Type Window}" TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <AdornerDecorator Grid.Row="0" Grid.Column="0">
                        <ContentPresenter ClipToBounds="true" Content="{TemplateBinding Window.Content}" />
                    </AdornerDecorator>

                    <!-- ResizeGrip's Width should be SystemParameters.VerticalScrollBarWidthKey -->
                    <!-- Its Height should be SystemParameters.HorizontalScrollBarHeightKey -->
                    <!-- But we can't use them right now because the ResizeGrip's visual tree hard coded positions of dots on canvas-->
                    <!-- Opened work item #22121 to clean up its visual tree and move its style to theme file too-->
                    <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" HorizontalAlignment="right" VerticalAlignment="bottom" Height="23" Width="14" Foreground="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="Transparent" Visibility="Collapsed" IsTabStop="false" />
                </Grid>
                    </Border>
        <ControlTemplate.Triggers>

        <MultiTrigger>
        <!-- There may be perf implications b/c of the following conditions.  We may cause
                     an extra layout to happen when WindowState changes to Minimized and ResizeMode
                     is set to CanResizeWithGrip -->
        <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                    <Condition Property="Window.WindowState" Value="Normal" />
                </MultiTrigger.Conditions>
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

   <!-- Navigation Window back/fwd button Drop Down style-->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonJournalEntryStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="{Binding Path=Name}" />
        <Setter Property="Command" Value="NavigationCommands.NavigateJournal" />
    </Style>

    <!-- Navigation Window Back Button Style -->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonBackButtonStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="54" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseBack" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <DockPanel Background="Transparent">
                <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <Grid>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="10" />
                    </Grid.RowDefinitions>

                    <!-- Circle -->
                    <Path StrokeThickness="0.4" Grid.Column="0" Grid.Row="0" HorizontalAlignment="center" VerticalAlignment="center" x:Name="Circle" Fill="VerticalGradient #C4C4BB white" Stroke="#C4C4BB"><Path.Data><EllipseGeometry Center="16 16" RadiusX="16" RadiusY="16" /></Path.Data></Path>
                    <!-- shadow -->
                    <Path Grid.Column="0" Grid.Row="0" HorizontalAlignment="center" VerticalAlignment="center" Data="M -0,13 l 10,10 a 2 2 0 1,0 2.83,-2.83  l -5.17,-5.17 15.4,0 a 2,2 0 1,0 0,-4 l -15.4,0 l 5.17,-5.17 a 2,2 0 1,0 -2.83,-2.83z" Fill="#AA777777" />
                    <!-- arrow -->
                    <Path Grid.Column="0" Grid.Row="0" HorizontalAlignment="center" VerticalAlignment="center" x:Name="Arrow" Data="M 3,16 l 10,10 a 2 2 0 1,0 2.8,-2.8  l -5.2,-5.2 15.4,0 a 2,2 0 1,0 0,-4 l -15.4,0 l 5.2,-5.2 a 2,2 0 1,0 -2.8,-2.8z" Stroke="#BBBBBB" StrokeThickness="1" Fill="VerticalGradient lightblue darkblue" />

                    <Path Grid.Column="0" Grid.Row="1" HorizontalAlignment="center" VerticalAlignment="center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />

                    <Menu Grid.Column="0" Grid.Row="1" Background="Transparent" Padding="0, 0, 0, 0">
                       <MenuItem x:Name="NavWinMenu" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=BackStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Menu>
                </Grid>
            </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Fill" Value="VerticalGradient white gray" TargetName="Arrow" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Fill" Value="VerticalGradient #AAAAAA white" TargetName="Circle" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- Navigation Window Fwd Button Style -->
    <!-- It has the same visual tree as the Back Button. But we can't share them because visual triggers are different-->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonForwardButtonStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="54" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseForward" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <DockPanel Background="Transparent">
                <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <Grid>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="10" />
                    </Grid.RowDefinitions>

                    <!-- Circle -->
                    <Path StrokeThickness="0.4" Grid.Column="0" Grid.Row="0" HorizontalAlignment="center" VerticalAlignment="center" x:Name="Circle" Fill="VerticalGradient #C4C4BB white" Stroke="#C4C4BB"><Path.Data><EllipseGeometry Center="16 16" RadiusX="16" RadiusY="16" /></Path.Data></Path>
                    <!-- Shadow -->
                    <Path Grid.Column="0" Grid.Row="0" HorizontalAlignment="center" VerticalAlignment="center" Data="M 26,13 l -10,10 a 2 2 0 0,1 -2.8,-2.8  l 5.2,-5.2 -15.4,0 a 2,2 0 0,1 0,-4 l 15.4,0 l -5.2,-5.2 a 2,2 0 0,1 2.8,-2.8z" Fill="#AA777777" />
                    <!-- Arrow -->
                    <Path Grid.Column="0" Grid.Row="0" HorizontalAlignment="center" VerticalAlignment="center" x:Name="Arrow" Data="M 29,16 l -10,10 a 2 2 0 0,1 -2.8,-2.8  l 5.2,-5.2 -15.4,0 a 2,2 0 0,1 0,-4 l 15.4,0 l -5.2,-5.2 a 2,2 0 0,1 2.8,-2.8z" Stroke="#D5D5D5" StrokeThickness="1" Fill="VerticalGradient darkblue lightblue" />

                    <Path Grid.Column="0" Grid.Row="1" HorizontalAlignment="center" VerticalAlignment="center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />

                    <Menu Grid.Column="0" Grid.Row="1" DockPanel.Dock="Bottom" Background="Transparent">
                       <MenuItem x:Name="NavWinMenu" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=ForwardStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Menu>
                 </Grid>
              </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Fill" Value="VerticalGradient gray white" TargetName="Arrow" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Fill" Value="VerticalGradient #AAAAAA white" TargetName="Circle" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- NavigationWindow Style-->
    <Style x:Key="{x:Type NavigationWindow}" TargetType="{x:Type NavigationWindow}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type NavigationWindow}">
            <!-- We are using this Border's Name to identify whether our Framelet style has been applied -->
            <!-- HuWang TODO We need to turn off the system icon, title and contextmenu when it is using our style.
                 The plan is to have a property on Window to turn it on and off. EnsureVisual and the Name will be removed when we do that.
                 This is tracked in task #12401-->
            <Border Name="NavigationBarRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>
                    <Border x:Name="NavigationBarBackground" DockPanel.Dock="Top" Background="HorizontalGradient silver white">
                        <DockPanel>
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonBackButtonStyle}" DockPanel.Dock="left" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoBack}" />
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonForwardButtonStyle}" DockPanel.Dock="left" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoForward}" />
                            <!-- We will need to find out FontSize from system resources -->
                            <!-- Opened work item #22122 to track this-->
                            <TextBlock Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" FontSize="16" Margin="8,0,0,0" VerticalAlignment="Center" TextBlock.Text="{TemplateBinding Window.Text}" />
                        </DockPanel>
                    </Border>

                    <Grid>
                        <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollViewer Grid.Row="0" Grid.Column="0" HorizontalScrollBarVisibility="{TemplateBinding NavigationWindow.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding NavigationWindow.VerticalScrollBarVisibility}">
                            <ContentPresenter ClipToBounds="true" Content="{TemplateBinding Window.Content}" />
                        </ScrollViewer>

                        <!-- ResizeGrip's Width should be SystemParameters.VerticalScrollBarWidthKey -->
                        <!-- Its Height should be SystemParameters.HorizontalScrollBarHeightKey -->
                        <!-- But we can't use them right now because the ResizeGrip's visual tree hard coded positions of dots on canvas-->
                        <!-- Opened work item #22121 to clean up its visual tree and move its style to theme file too-->
                        <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" HorizontalAlignment="right" VerticalAlignment="bottom" Height="23" Width="14" Foreground="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="Transparent" Visibility="Collapsed" IsTabStop="false" />
                       </Grid>
                  </DockPanel>
            </Border>
        <ControlTemplate.Triggers>

        <MultiTrigger>
        <!-- There may be perf implications b/c of the following conditions.  We may cause
                     an extra layout to happen when WindowState changes to Minimized and ResizeMode
                     is set to CanResizeWithGrip -->
        <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                    <Condition Property="Window.WindowState" Value="Normal" />
                </MultiTrigger.Conditions>
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
            **********************************************************
            * BrowserWindow Styles                                   *
            **********************************************************
    -->

    <!-- Downlevel Browser Window Back Button Style -->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonBackButtonDownlevelStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseBack" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
        <DockPanel>
                <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Viewbox Grid.Column="0" Grid.Row="0">
                        <Grid Width="50" Height="50" Margin="15,0,0,0">
                        <Ellipse StrokeThickness="2" x:Name="EllipseBackground" Opacity="1" Fill="VerticalGradient #B3E2A2 #25B40E " Stroke="VerticalGradient black #ccffffff" />
                        <Ellipse x:Name="EllipseShine" Fill="VerticalGradient #aaffffff transparent" Stroke="transparent" Margin="5,5,5,15" />
                        <Path x:Name="Arrow" RenderTransform="scale 0.65 translate 11.5 10 " Fill="white" Stroke="#086403" Data="M0.5,20.468c0.002,0.34,0.036,0.679,0.102,1.013c0.032,0.162,0.092,0.312,0.139,0.468    c0.052,0.176,0.092,0.355,0.163,0.527c0.076,0.183,0.18,0.349,0.274,0.521c0.073,0.132,0.131,0.27,0.216,0.397    c0.196,0.294,0.418,0.568,0.667,0.817l14.611,14.611c2.083,2.083,5.459,2.083,7.542,0c2.083-2.083,2.083-5.459,0-7.542    l-5.509-5.509h23.791c2.945,0,5.333-2.388,5.333-5.333c0-2.946-2.388-5.333-5.333-5.333H18.732l5.509-5.509    c2.083-2.083,2.083-5.459,0-7.542c-2.083-2.083-5.459-2.083-7.542,0L2.203,16.549c-0.043,0.04-0.095,0.07-0.136,0.111    c-0.002,0.002-0.005,0.003-0.007,0.006c-0.002,0.002-0.003,0.004-0.005,0.006c-0.246,0.247-0.465,0.517-0.659,0.807    c-0.088,0.132-0.149,0.275-0.224,0.413c-0.092,0.167-0.192,0.328-0.266,0.505c-0.072,0.175-0.114,0.357-0.167,0.538    c-0.045,0.153-0.104,0.299-0.135,0.458C0.536,19.732,0.5,20.075,0.5,20.419c0,0.006-0.002,0.012-0.002,0.019    C0.498,20.448,0.5,20.458,0.5,20.468z" />
                        </Grid>
                </Viewbox>

                <DockPanel Grid.Column="1" Grid.Row="0">
                    <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                    <Grid Width="10">
                        <Path HorizontalAlignment="center" VerticalAlignment="center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                        <Menu Background="Transparent">
                       <MenuItem x:Name="NavWinMenu" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=BackStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Menu>
                </Grid>
            </DockPanel>
            </Grid>
        </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Path.Fill" Value="VerticalGradient white gray" TargetName="EllipseBackground" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="NavWinMenu" Property="Background" Value="Transparent"></Setter>
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="Arrow" Property="Path.RenderTransform" Value="scale 0.65 translate 10 12" />
        <Setter TargetName="EllipseShine" Property="Path.RenderTransform" Value="translate 0 2" />
        </Trigger>
        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
        <Setter Property="Visibility" Value="Visible" TargetName="L2" />
        <Setter Property="Visibility" Value="Visible" TargetName="R2" />
        <Setter Property="Visibility" Value="Visible" TargetName="T2" />
        <Setter Property="Visibility" Value="Visible" TargetName="B2" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- Downlevel Browser Window Forward Button Style -->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonForwardButtonDownlevelStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseForward" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
        <DockPanel>
                <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                <Viewbox Grid.Column="0" Grid.Row="0">
                        <Grid Width="50" Height="50" Margin="15,0,0,0">
                            <Ellipse StrokeThickness="2" x:Name="EllipseBackground" Opacity="1" Fill="VerticalGradient #B3E2A2 #25B40E " Stroke="VerticalGradient black #ccffffff" />
                            <Ellipse x:Name="EllipseShine" Fill="VerticalGradient #aaffffff transparent" Stroke="transparent" Margin="5,3,5,15" />
                            <Path x:Name="Arrow" RenderTransform="scale 0.65 translate 8.5 10 " Fill="white" Stroke="#086403" Data="M47.82,20.407c-0.002-0.34-0.036-0.679-0.102-1.013c-0.032-0.162-0.092-0.312-0.139-0.468    c-0.052-0.176-0.092-0.355-0.163-0.527c-0.076-0.183-0.18-0.349-0.274-0.521c-0.073-0.132-0.131-0.27-0.216-0.397    c-0.196-0.294-0.418-0.568-0.667-0.817L31.647,2.053c-2.083-2.083-5.459-2.083-7.542,0c-2.083,2.083-2.083,5.459,0,7.542    l5.509,5.509H5.823c-2.945,0-5.333,2.388-5.333,5.333c0,2.946,2.388,5.333,5.333,5.333h23.765l-5.509,5.509    c-2.083,2.083-2.083,5.459,0,7.542c2.083,2.083,5.459,2.083,7.542,0l14.497-14.497c0.043-0.04,0.095-0.07,0.136-0.111    c0.002-0.002,0.005-0.003,0.007-0.006c0.002-0.002,0.003-0.004,0.005-0.006c0.246-0.247,0.465-0.517,0.659-0.807    c0.088-0.132,0.149-0.275,0.224-0.413c0.092-0.167,0.192-0.328,0.266-0.505c0.072-0.175,0.114-0.357,0.167-0.538    c0.045-0.153,0.104-0.299,0.135-0.458c0.067-0.339,0.103-0.682,0.104-1.026c0-0.006,0.002-0.012,0.002-0.019    C47.823,20.427,47.82,20.417,47.82,20.407z" />
                        </Grid>
                </Viewbox>

                <DockPanel Grid.Column="1" Grid.Row="0">
                    <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                    <Grid Width="10">
                        <Path HorizontalAlignment="center" VerticalAlignment="center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                        <Menu Background="Transparent">
                       <MenuItem x:Name="NavWinMenu" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=ForwardStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                    </Menu>
                </Grid>
            </DockPanel>
            </Grid>
        </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Path.Fill" Value="VerticalGradient white gray" TargetName="EllipseBackground" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="NavWinMenu" Property="Background" Value="Transparent"></Setter>
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="Arrow" Property="Path.RenderTransform" Value="scale 0.65 translate 10 12" />
        <Setter TargetName="EllipseShine" Property="Path.RenderTransform" Value="translate 0 2" />
        </Trigger>
        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
        <Setter Property="Visibility" Value="Visible" TargetName="L2" />
        <Setter Property="Visibility" Value="Visible" TargetName="R2" />
        <Setter Property="Visibility" Value="Visible" TargetName="T2" />
        <Setter Property="Visibility" Value="Visible" TargetName="B2" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static SystemParameters.NavigationChromeStyleKey}" TargetType="{x:Type NavigationWindow}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type NavigationWindow}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator>
                    <ContentPresenter Content="{TemplateBinding Window.Content}" ClipToBounds="true" />
                </AdornerDecorator>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

     <Style x:Key="{x:Static SystemParameters.NavigationChromeDownlevelStyleKey}" TargetType="{x:Type NavigationWindow}">
         <Setter Property="Template">
         <Setter.Value>
         <ControlTemplate TargetType="{x:Type NavigationWindow}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>
                    <Border x:Name="NavigationBarBackground" DockPanel.Dock="Top" Height="30" Background="HorizontalGradient silver white">
                        <Grid>
                            <Rectangle Opacity="0.05" Fill="VerticalGradient transparent #99000000" Margin="1,0,1,0" Height="7" VerticalAlignment="bottom" RadiusX="3" RadiusY="3" />
                        <DockPanel LastChildFill="false">
                            <Rectangle Height="1" Fill="#D8D2BD" VerticalAlignment="bottom" />
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonBackButtonDownlevelStyle}" DockPanel.Dock="left" Width="40" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoBack}" />
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonForwardButtonDownlevelStyle}" DockPanel.Dock="left" Width="40" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoForward}" />
                        </DockPanel>
                        </Grid>
                    </Border>
                    <Border>
                        <AdornerDecorator>
                            <ContentPresenter Content="{TemplateBinding Window.Content}" ClipToBounds="true" />
                        </AdornerDecorator>
                    </Border>
                  </DockPanel>
            </Border>
         </ControlTemplate>
         </Setter.Value>
         </Setter>
     </Style>

    <!--
        *****************************************
        * Document Template
        *****************************************
    -->

    <DataTemplate DataType="{x:Type Document}">
        <DocumentViewer Content="{Binding}" />
    </DataTemplate>

   <!--
            **********************************************************
            * DocumentViewer Style                                       *
            **********************************************************
    -->

    <!-- Localizable Strings -->
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipMenu">Menu</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipZoomOut">
        Decrease the size of the content (-)
    </String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipZoom">
        Select a zoom percentage, a predefined zoom setting or type a zoom percent
    </String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipZoomIn">
        Increase the size of the content (+)
    </String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipFind">Find (Ctrl+F)</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipCopy">Copy (Ctrl+C)</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipPrint">Print (Ctrl+P)</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom400Percent">400%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom250Percent">250%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom150Percent">150%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom100Percent">100%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom75Percent">75%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom50Percent">50%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom25Percent">25%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomPageWidth">Page Width</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomWholePage">Whole Page</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomTwoPages">Two Pages</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomThumbnails">Thumbnails</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuCopy">Copy</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuFind">Find</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuPrint">Print</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuZoomIn">Zoom In</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuZoomOut">Zoom Out</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuShowToolbar">Show Toolbar</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuHideToolbar">Hide Toolbar</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuShowHideToolbar">Show/Hide Toolbar</String>

    <!-- DocumentLayout Style and Collection for the Zoom ComboBox -->
    <DataTemplate x:Key="PFThemeDocumentViewerDocumentLayoutTemplate" DataType="{x:Type DocumentLayout}">
        <TextBlock Text="{Binding Path=Text}" />
    </DataTemplate>

    <!-- Default Style used for most of our toolbar buttons -->
    <DataTemplate x:Key="PFThemeDocumentViewerMenuButtonTemplate">
        <ContentPresenter Content="{DynamicResource PFThemeDocumentViewerMenuButton}" />
    </DataTemplate>

    <!-- Style for the Immersive Menu button -->
    <DataTemplate x:Key="PFThemeDocumentViewerMenuButtonImmersiveTemplate">
        <ContentPresenter Content="{DynamicResource PFThemeDocumentViewerMenuButtonImmersive}" />

    <!-- DataTemplate does not support triggers that target the templated element.  Review with NamitaG.
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Set PropertyPath="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Set PropertyPath="Opacity" Value="0.5" />
            </Trigger>
        </DataTemplate.Triggers>
    -->

    </DataTemplate>

    <!-- Contents of the Menu button -->
    <Canvas x:Key="PFThemeDocumentViewerMenuButton" Width="16px" Height="24px">
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="1" Y="1" Width="14" Height="14" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="Black" StrokeThickness="2" Data="M 3,5 L 13,5 M 3,8 L 13,8 M 3,11 L 13,11" />
    </Canvas>

    <!-- Contents of the Immersive Menu button -->
    <Canvas Width="16px" Height="24px" x:Key="PFThemeDocumentViewerMenuButtonImmersive">
        <Path Stroke="White" StrokeThickness="2">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="1" Y="1" Width="14" Height="14" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="White" StrokeThickness="2" Data="M 3,5 L 13,5 M 3,8 L 13,8 M 3,11 L 13,11" />
    </Canvas>

    <!-- Contents of the Copy button -->
    <Canvas x:Key="PFThemeDocumentViewerCopyButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="7" Y="4" Width="8" Height="11" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="Black" StrokeThickness="2" Data="M 8,12 L 1,12 L 1,1 L 9,1 L 9,4" />
    </Canvas>

    <!-- Contents of the Print button -->
    <Canvas x:Key="PFThemeDocumentViewerPrintButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="3">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="2" Y="9" Width="12" Height="5" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="Black" StrokeThickness="1" Data="M 1,1 L 3,8 M 10,1 L 12,8 M 0,1 L 10,1" />
    </Canvas>

    <!-- Contents of the Zoom In button -->
    <Canvas x:Key="PFThemeDocumentViewerZoomInButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="3" Data="M 6,12 L 2,16" />
        <Path Stroke="Black" StrokeThickness="2" Data="M 6,8 L 14,8 M 10,4 L 10,12" />
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <EllipseGeometry Center="10,8" RadiusX="6" RadiusY="6" />
            </Path.Data>
        </Path>
    </Canvas>

    <!-- Contents of the Zoom Out button -->
    <Canvas x:Key="PFThemeDocumentViewerZoomOutButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="3" Data="M 6,12 L 2,16" />
        <Path Stroke="Black" StrokeThickness="2" Data="M 7,8 L 13,8" />
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <EllipseGeometry Center="10,8" RadiusX="6" RadiusY="6" />
            </Path.Data>
        </Path>
    </Canvas>

    <!-- List of options to display in Zoom Combo Box. -->
    <C:ArrayList xmlns:C="Collections" xmlns:D="Documents" x:Key="PFThemeDocumentViewerComboList">
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="100.0" Text="{StaticResource PFThemeDocumentViewerZoom100Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="400.0" Text="{StaticResource PFThemeDocumentViewerZoom400Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="250.0" Text="{StaticResource PFThemeDocumentViewerZoom250Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="150.0" Text="{StaticResource PFThemeDocumentViewerZoom150Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="75.0" Text="{StaticResource PFThemeDocumentViewerZoom75Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="50.0" Text="{StaticResource PFThemeDocumentViewerZoom50Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="25.0" Text="{StaticResource PFThemeDocumentViewerZoom25Percent}" />
        <D:DocumentLayout DocumentLayoutType="FitToWidth" Text="{StaticResource PFThemeDocumentViewerZoomPageWidth}" />
        <D:DocumentLayout DocumentLayoutType="GridColumnCount" Value="1.0" Text="{StaticResource PFThemeDocumentViewerZoomWholePage}" />
        <D:DocumentLayout DocumentLayoutType="GridColumnCount" Value="2.0" Text="{StaticResource PFThemeDocumentViewerZoomTwoPages}" />
        <D:DocumentLayout DocumentLayoutType="ThumbnailView" Text="{StaticResource PFThemeDocumentViewerZoomThumbnails}" />
    </C:ArrayList>

    <ContextMenu x:Key="PFThemeDocumentViewerContextMenu">
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuCopy}" Command="ApplicationCommands.Copy" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuPrint}" Command="ApplicationCommands.Print" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomIn}" Command="DocumentViewer.IncreaseZoom" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomOut}" Command="DocumentViewer.DecreaseZoom" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuShowHideToolbar}" Command="DocumentViewer.ToggleToolBar" />
    </ContextMenu>

    <!-- Reference to the ZoomPercentageConverter -->
    <ValueConverterSource x:Key="PFThemeDocumentViewerZoomPercentageConverter" TypeName="System.Windows.Documents.ZoomPercentageConverter" />

    <!-- DocumentViewer Style -->
    <Style x:Key="{x:Type DocumentViewer}" TargetType="{x:Type DocumentViewer}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type DocumentViewer}">
            <Grid Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />    <!-- One column for both the toolbar and the content -->
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />    <!-- Top row, auto height for the Toolbar -->
                <RowDefinition Height="*" />      <!-- Bottom row, full height for the Content area -->
                </Grid.RowDefinitions>

                <!-- DocumentViewer's ToolBar, docked to the Top -->
                <Border Grid.Row="0" Grid.Column="0" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Visibility="Visible" BorderThickness="1" x:Name="Toolbar" Name="Toolbar">
                    <StackPanel Orientation="Horizontal">
                        <!-- Menu Button -->
                        <Menu VerticalAlignment="Center" Background="Transparent">
                            <MenuItem Height="20px" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" Background="Transparent" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipMenu}" x:Name="ToolMenu" Name="ToolMenu" TabIndex="1" HeaderTemplate="{DynamicResource PFThemeDocumentViewerMenuButtonTemplate}">
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuCopy}" Command="ApplicationCommands.Copy" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuPrint}" Command="ApplicationCommands.Print" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomIn}" Command="DocumentViewer.IncreaseZoom" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomOut}" Command="DocumentViewer.DecreaseZoom" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuHideToolbar}" Command="DocumentViewer.ToggleToolBar" />
                            </MenuItem>
                        </Menu>
                        <!-- Zoom Controls -->
                        <Button Content="{DynamicResource PFThemeDocumentViewerZoomOutButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipZoomOut}" Command="DocumentViewer.DecreaseZoom" Name="ZoomOutButton" x:Name="ZoomOutButton" TabIndex="2" />
                        <ComboBox Width="90px" Height="24px" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipZoom}" IsReadOnly="False" IsEditable="True" SelectedItem="{Binding Path=DocumentLayout,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ItemTemplate="{DynamicResource PFThemeDocumentViewerDocumentLayoutTemplate}" Name="ZoomComboBox" x:Name="ZoomComboBox" TabIndex="3" ItemsSource="{DynamicResource PFThemeDocumentViewerComboList}" Style="{DynamicResource PFThemeDocumentViewerComboBoxStyle}" />
                        <Button Content="{DynamicResource PFThemeDocumentViewerZoomInButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipZoomIn}" Command="DocumentViewer.IncreaseZoom" Name="ZoomInButton" x:Name="ZoomInButton" TabIndex="4" />
                        <!-- Copy -->
                        <Button Content="{DynamicResource PFThemeDocumentViewerCopyButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipCopy}" Command="ApplicationCommands.Copy" Name="CopyButton" x:Name="CopyButton" TabIndex="6" />
                        <!-- Print -->
                        <Button Content="{DynamicResource PFThemeDocumentViewerPrintButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipPrint}" Command="ApplicationCommands.Print" Name="PrintButton" x:Name="PrintButton" TabIndex="7" />
                    </StackPanel>
                </Border>
                <!-- Define the Content area and its paging/scrolling controls inside the Grid -->
                <ScrollViewer Grid.Row="1" Grid.Column="0" HorizontalScrollBarVisibility="Auto" x:Name="PART_ContentHost" Focusable="True" ContextMenu="{DynamicResource PFThemeDocumentViewerContextMenu}" />
                <!-- Immersive Menu Button -->
                <Menu Grid.Row="1" Grid.Column="0" x:Name="FloatingMenuButton" Background="Transparent" BorderThickness="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <MenuItem Height="24px" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" BorderThickness="0" Background="Transparent" Name="ImmersiveToolMenu" x:Name="ImmersiveToolMenu" Focusable="False" HeaderTemplate="{DynamicResource PFThemeDocumentViewerMenuButtonImmersiveTemplate}">
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuCopy}" Command="ApplicationCommands.Copy" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuPrint}" Command="ApplicationCommands.Print" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomIn}" Command="DocumentViewer.IncreaseZoom" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomOut}" Command="DocumentViewer.DecreaseZoom" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuShowToolbar}" Command="DocumentViewer.ToggleToolBar" />
                    </MenuItem>
                </Menu>
            </Grid>
        <ControlTemplate.Triggers>

        <!-- Maximize the Toolbar -->
        <Trigger Property="IsToolBarMaximized" Value="true">
        <Setter TargetName="Toolbar" Property="Visibility" Value="Visible" />
        <Setter TargetName="FloatingMenuButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Toolbar" Property="Focusable" Value="True" />
        <Setter TargetName="ToolMenu" Property="IsKeyboardFocused" Value="True" />
        </Trigger>
        <!-- Minimize the Toolbar -->
        <Trigger Property="IsToolBarMaximized" Value="false">
        <Setter TargetName="Toolbar" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="FloatingMenuButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="ImmersiveToolMenu" Property="Focusable" Value="True" />
        <Setter TargetName="Toolbar" Property="Focusable" Value="False" />
        <Setter TargetName="ImmersiveToolMenu" Property="IsKeyboardFocused" Value="True" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
        **************************************************
        *                                                *
        * HorizontalScrollBar & VerticalScrollBar Styles *
        *                                                *
        **************************************************
    -->

        <!--
             *******************************************************************
             * Default ContextMenu for VerticalScrollBar & HorizontalScrollBar *
             *******************************************************************
        -->

        <ContextMenu x:Key="PFThemeHorizontalScrollBarDefaultContextMenu" x:Shared="false">
            <MenuItem Header="Scroll Here" Command="ScrollBar.ScrollHereCommand" />
            <Separator />
            <MenuItem Header="Left Edge" Command="ScrollBar.ScrollToLeftEndCommand" />
            <MenuItem Header="Right Edge" Command="ScrollBar.ScrollToRightEndCommand" />
            <Separator />
            <MenuItem Header="Page Left" Command="ScrollBar.PageLeftCommand" />
            <MenuItem Header="Page Right" Command="ScrollBar.PageRightCommand" />
            <Separator />
            <MenuItem Header="Scroll Left" Command="ScrollBar.LineLeftCommand" />
            <MenuItem Header="Scroll Right" Command="ScrollBar.LineRightCommand" />
        </ContextMenu>

        <ContextMenu x:Key="PFThemeVerticalScrollBarDefaultContextMenu" x:Shared="false">
            <MenuItem Header="Scroll Here" Command="ScrollBar.ScrollHereCommand" />
            <Separator />
            <MenuItem Header="Top" Command="ScrollBar.ScrollToTopCommand" />
            <MenuItem Header="Bottom" Command="ScrollBar.ScrollToBottomCommand" />
            <Separator />
            <MenuItem Header="Page Up" Command="ScrollBar.PageUpCommand" />
            <MenuItem Header="Page Down" Command="ScrollBar.PageDownCommand" />
            <Separator />
            <MenuItem Header="Scroll Up" Command="ScrollBar.LineUpCommand" />
            <MenuItem Header="Scroll Down" Command="ScrollBar.LineDownCommand" />
        </ContextMenu>

        <!--
             ******************************
             * ScrollBar Pens and Brushes *
             ******************************
        -->

        <SolidColorBrush x:Key="PFThemeScrollBarBackground" Color="#EEEDE5" />

        <Pen x:Key="PFThemeScrollBarButtonShadowNormal" Thickness="1">
            <Pen.Brush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#00A0B5D3" Offset="0" />
                        <GradientStop Color="#FFA0B5D3" Offset="0.5" />
                        <GradientStop Color="#FF7C9FD3" Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Pen.Brush>
        </Pen>

        <Pen x:Key="PFThemeScrollBarButtonShadowDisabled" Thickness="1">
            <Pen.Brush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#00CCCCBA" Offset="0" />
                        <GradientStop Color="#FFCCCCBA" Offset="0.5" />
                        <GradientStop Color="#FFC4C4AF" Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Pen.Brush>
        </Pen>

        <LinearGradientBrush x:Key="PFThemeScrollBarButtonFillNormal" StartPoint="0,0" EndPoint="1,1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFE1EAFE" Offset="0" />
                <GradientStop Color="#FFC3D3FD" Offset="0.3" />
                <GradientStop Color="#FFC3D3FD" Offset="0.6" />
                <GradientStop Color="#FFBBCDF9" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeScrollBarButtonFillHover" StartPoint="0, 0" EndPoint="1, 1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFD6E7FF" Offset="0" />
                <GradientStop Color="#FFD6E7FF" Offset="0.6" />
                <GradientStop Color="#FFB9DAFB" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeScrollBarButtonFillPressed" StartPoint="0, 0" EndPoint="1, 1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FF93A8D9" Offset="0" />
                <GradientStop Color="#FFA5BDFB" Offset="0.3" />
                <GradientStop Color="#FFA5BDFB" Offset="0.7" />
                <GradientStop Color="#FFD2DEEB" Offset="1.0" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeScrollBarButtonFillDisabled" StartPoint="0, 0" EndPoint="1, 1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#FFF7F7F7" Offset="0" />
                <GradientStop Color="#FFF0F0F0" Offset="0.3" />
                <GradientStop Color="#FFECECEC" Offset="0.6" />
                <GradientStop Color="#FFE3E3E3" Offset="1.0" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <Pen x:Key="PFThemeScrollBarButtonOuterBorder" Brush="White" Thickness="1" />

        <Pen x:Key="PFThemeScrollBarButtonInnerBorderNormal" Brush="#FFBBCDF9" Thickness="1" />
        <Pen x:Key="PFThemeScrollBarButtonInnerBorderHover" Brush="#FF98B1E4" Thickness="1" />
        <Pen x:Key="PFThemeScrollBarButtonInnerBorderPressed" Brush="#FF838FDA" Thickness="1" />
        <Pen x:Key="PFThemeScrollBarButtonInnerBorderDisabled" Brush="#FFE8E8DF" Thickness="1" />

        <LinearGradientBrush x:Key="PFThemeHorizontalScrollBarPageButtonNormal" StartPoint="0, 0" EndPoint="0, 1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#EEEDE5" Offset="0" />
                <GradientStop Color="#EEEDE5" Offset="0.05" />
                <GradientStop Color="#F3F1EC" Offset="0.06" />
                <GradientStop Color="#FEFEFE" Offset="0.94" />
                <GradientStop Color="#EEEDE5" Offset="0.95" />
                <GradientStop Color="#EEEDE5" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeHorizontalScrollBarPageButtonPressed" StartPoint="0, 0" EndPoint="0, 1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#D7D5C2" Offset="0" />
                <GradientStop Color="#D7D5C2" Offset="0.05" />
                <GradientStop Color="#E3DED3" Offset="0.06" />
                <GradientStop Color="#FDFDF6" Offset="0.94" />
                <GradientStop Color="#D7D5C2" Offset="0.95" />
                <GradientStop Color="#D7D5C2" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeHorizontalScrollBarPageButtonDisabled" StartPoint="0, 0" EndPoint="0, 1">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#EEEDE5" Offset="0" />
                <GradientStop Color="#EEEDE5" Offset="0.05" />
                <GradientStop Color="#F3F1EC" Offset="0.06" />
                <GradientStop Color="#FEFEFE" Offset="0.94" />
                <GradientStop Color="#EEEDE5" Offset="0.95" />
                <GradientStop Color="#EEEDE5" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeVerticalScrollBarPageButtonNormal" StartPoint="0, 0" EndPoint="1, 0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#EEEDE5" Offset="0" />
                <GradientStop Color="#EEEDE5" Offset="0.05" />
                <GradientStop Color="#F3F1EC" Offset="0.06" />
                <GradientStop Color="#FEFEFE" Offset="0.94" />
                <GradientStop Color="#EEEDE5" Offset="0.95" />
                <GradientStop Color="#EEEDE5" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeVerticalScrollBarPageButtonPressed" StartPoint="0, 0" EndPoint="1, 0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#D7D5C2" Offset="0" />
                <GradientStop Color="#D7D5C2" Offset="0.05" />
                <GradientStop Color="#E3DED3" Offset="0.06" />
                <GradientStop Color="#FDFDF6" Offset="0.94" />
                <GradientStop Color="#D7D5C2" Offset="0.95" />
                <GradientStop Color="#D7D5C2" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PFThemeVerticalScrollBarPageButtonDisabled" StartPoint="0, 0" EndPoint="1, 0">
            <LinearGradientBrush.GradientStops>
                <GradientStop Color="#EEEDE5" Offset="0" />
                <GradientStop Color="#EEEDE5" Offset="0.05" />
                <GradientStop Color="#F3F1EC" Offset="0.06" />
                <GradientStop Color="#FEFEFE" Offset="0.94" />
                <GradientStop Color="#EEEDE5" Offset="0.95" />
                <GradientStop Color="#EEEDE5" Offset="1" />
            </LinearGradientBrush.GradientStops>
        </LinearGradientBrush>


        <!--
            *******************************
            * ScrollBar Line Button Style *
            *******************************
        -->

        <Style x:Key="PFThemeScrollBarButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Width" Value="17" />
            <Setter Property="Height" Value="17" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <theme:ScrollChrome x:Name="Chrome" Fill="{DynamicResource PFThemeScrollBarButtonFillNormal}" OuterBorder="{DynamicResource PFThemeScrollBarButtonOuterBorder}" InnerBorder="{DynamicResource PFThemeScrollBarButtonInnerBorderNormal}" Shadow="{DynamicResource PFThemeScrollBarButtonShadowNormal}" Glyph="#FF4D6185" ScrollGlyph="{TemplateBinding theme:ScrollChrome.ScrollGlyph}" />
            <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="true">
            <Setter TargetName="Chrome" Property="theme:Fill" Value="{DynamicResource PFThemeScrollBarButtonFillHover}" />
            <Setter TargetName="Chrome" Property="theme:InnerBorder" Value="{DynamicResource PFThemeScrollBarButtonInnerBorderHover}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
            <Setter TargetName="Chrome" Property="theme:Fill" Value="{DynamicResource PFThemeScrollBarButtonFillPressed}" />
            <Setter TargetName="Chrome" Property="theme:InnerBorder" Value="{DynamicResource PFThemeScrollBarButtonInnerBorderPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
            <Setter TargetName="Chrome" Property="theme:Fill" Value="{DynamicResource PFThemeScrollBarButtonFillDisabled}" />
            <Setter TargetName="Chrome" Property="theme:InnerBorder" Value="{DynamicResource PFThemeScrollBarButtonInnerBorderDisabled}" />
            <Setter TargetName="Chrome" Property="theme:Shadow" Value="{DynamicResource PFThemeScrollBarButtonShadowDisabled}" />
            <Setter TargetName="Chrome" Property="theme:Glyph" Value="#FFC9C9C2" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>


        <!--
            *************************
            * ScrollBar Thumb Style *
            *************************
        -->

        <Style x:Key="PFThemeScrollBarThumb" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
                <theme:ScrollChrome x:Name="Chrome" Fill="{DynamicResource PFThemeScrollBarButtonFillNormal}" OuterBorder="{DynamicResource PFThemeScrollBarButtonOuterBorder}" InnerBorder="{DynamicResource PFThemeScrollBarButtonInnerBorderNormal}" Shadow="{DynamicResource PFThemeScrollBarButtonShadowNormal}" Glyph="#FFEEF4FE" GlyphShadow="#FF8CB0F8" ScrollGlyph="{TemplateBinding theme:ScrollChrome.ScrollGlyph}" />
            <ControlTemplate.Triggers>

            <Trigger Property="IsMouseOver" Value="true">
            <Setter TargetName="Chrome" Property="theme:Fill" Value="{DynamicResource PFThemeScrollBarButtonFillHover}" />
            <Setter TargetName="Chrome" Property="theme:InnerBorder" Value="{DynamicResource PFThemeScrollBarButtonInnerBorderHover}" />
            </Trigger>
            <Trigger Property="IsDragging" Value="true">
            <Setter TargetName="Chrome" Property="theme:Fill" Value="{DynamicResource PFThemeScrollBarButtonFillPressed}" />
            <Setter TargetName="Chrome" Property="theme:InnerBorder" Value="{DynamicResource PFThemeScrollBarButtonInnerBorderPressed}" />
            <Setter TargetName="Chrome" Property="theme:Glyph" Value="#FFCFDDFD" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
            <Setter TargetName="Chrome" Property="theme:Fill" Value="{DynamicResource PFThemeScrollBarButtonFillDisabled}" />
            <Setter TargetName="Chrome" Property="theme:InnerBorder" Value="{DynamicResource PFThemeScrollBarButtonInnerBorderDisabled}" />
            <Setter TargetName="Chrome" Property="theme:Shadow" Value="{DynamicResource PFThemeScrollBarButtonShadowDisabled}" />
            <Setter TargetName="Chrome" Property="theme:Glyph" Value="#FFC9C9C2" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>


        <!--
            *****************************************
            * HorizontalScrollBar Page Button Style *
            *****************************************
        -->
        <Style x:Key="PFThemeHorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalScrollBarPageButtonNormal}" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsPressed" Value="true">
            <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalScrollBarPageButtonPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalScrollBarPageButtonDisabled}" />
            </Trigger>
            </Style.Triggers>
        </Style>


        <!--
            ***************************************
            * VerticalScrollBar Page Button Style *
            ***************************************
        -->
        <Style x:Key="PFThemeVerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Background" Value="{DynamicResource PFThemeVerticalScrollBarPageButtonNormal}" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle Fill="{TemplateBinding Background}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsPressed" Value="true">
            <Setter Property="Background" Value="{DynamicResource PFThemeVerticalScrollBarPageButtonPressed}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="{DynamicResource PFThemeVerticalScrollBarPageButtonDisabled}" />
            </Trigger>
            </Style.Triggers>
        </Style>


        <!--
            *****************************
            * HorizontalScrollBar Style *
            *****************************
        -->
           <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="ContextMenu" Value="{DynamicResource PFThemeVerticalScrollBarDefaultContextMenu}" />
            <Setter Property="Template">
            <Setter.Value>
            </ControlTemplate>
            </Setter.Value>                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        <RowDefinition Height="0.00001*"/>
                        <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Viewbox Stretch="Fill">
                            <RepeatButton x:Name="VerticalScrollBarLineUpButton" Style="{DynamicResource PFThemeVerticalScrollBarLineUpButtonStyle}"/>
                        </Viewbox>
                        <Track Grid.Row="1" Name="PART_Track"
                                            IsDirectionReversed="true">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource PFThemeVerticalScrollBarPageUpButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource PFThemeVerticalScrollBarThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource PFThemeVerticalScrollBarPageDownButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                        </Track >
                        <Viewbox Stretch="Fill" Grid.Row="2">
                            <RepeatButton x:Name="VerticalScrollBarLineDownButton" Style="{DynamicResource PFThemeVerticalScrollBarLineDownButtonStyle}"/>
                        </Viewbox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="{DynamicResource PFThemeVerticalScrollBarDisabledBackground}" />
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="ContextMenu" Value="{DynamicResource PFThemeHorizontalScrollBarDefaultContextMenu}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                <ColumnDefinition Width="0.00001*"/>
                                <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Viewbox Stretch="Fill">
                                    <RepeatButton x:Name="HorizontalScrollBarLineLeftButton" Style="{DynamicResource PFThemeHorizontalScrollBarLineLeftButtonStyle}"/>
                                </Viewbox>
                                <Track Grid.Column="1" Name="PART_Track">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{DynamicResource PFThemeHorizontalScrollBarPageLeftButtonStyle}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource PFThemeHorizontalScrollBarThumbStyle}" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{DynamicResource PFThemeHorizontalScrollBarPageRightButtonStyle}" />
                                    </Track.IncreaseRepeatButton>
                                </Track >
                                <Viewbox Stretch="Fill" Grid.Column="2">
                                    <RepeatButton x:Name="HorizontalScrollBarLineRightButton" Style="{DynamicResource PFThemeHorizontalScrollBarLineRightButtonStyle}"/>
                                </Viewbox>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


    <!-- End ScrollBar Styles -->

    <!--
        *********************************************
        * VerticalSlider and HorizontalSlider Style *
        *********************************************
    -->
    <!--
        *
        * HorizontalSlider Resources
        *
    -->
    <LinearGradientBrush x:Key="PFThemeHorizontalSliderThumbNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderThumbFocusedBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderThumbHoverBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderThumbPressedBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="0" />
            <GradientStop Color="White" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PFThemeHorizontalSliderThumbDisabledBackground" Color="{StaticResource {x:Static SystemColors.ControlLightLightColorKey}}" />

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderTrackNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderTrackSelectionBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="1" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="0" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderTrackPressedBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderTrackFocusBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderTrackDisableBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeHorizontalSliderTrackHoverBackground" EndPoint="0,1" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--
        *
        * HorizontalSlider Path Styles
        *
    -->
    <Style x:Key="PFThemeHorizontalSliderDecreaseButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Command" Value="Slider.DecreaseLarge" />
        <Setter Property="DockPanel.Dock" Value="Left" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                </Canvas>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PFThemeHorizontalSliderIncreaseButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Command" Value="Slider.IncreaseLarge" />
        <Setter Property="DockPanel.Dock" Value="Right" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                </Canvas>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PFThemeHorizontalSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalSliderThumbNormalBackground}" />
        <Setter Property="Width" Value="11" />
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalSliderThumbHoverBackground}" />
        </Trigger>
        <Trigger Property="IsDragging" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalSliderThumbPressedBackground}" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalSliderThumbFocusedBackground}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource PFThemeHorizontalSliderThumbDisabledBackground}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        **************************
        * HorizontalSlider Style *
        **************************
    -->
    <Style x:Key="{x:Type Slider}" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="MinWidth" Value="11" />
        <Setter Property="MinHeight" Value="21" />
        <Setter Property="Width" Value="104" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
            <Border x:Name="HorizontalSliderBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" MinHeight="{TemplateBinding Slider.MinHeight}" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <!--
                        #
                        # Top TickBar: Will be shown only when Slider.TickPlacement = TopLeft or Both
                        # This should be placed in Col0-2, Row0
                    -->
                    <TickBar x:Name="TopTick" Placement="Top" Fill="{TemplateBinding Foreground}" Height="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualWidth}" />

                    <!--
                        #
                        # Slider Track Background
                        #
                    -->
                    <Rectangle Grid.Row="1" VerticalAlignment="center" x:Name="HorizontalSliderTrack" Fill="{DynamicResource PFThemeHorizontalSliderTrackNormalBackground}" RadiusX="2.0" RadiusY="2.0" Height="5.0" />

                    <!--
                        #
                        # SelectionRangeElement (draw on top of Track background)
                        #
                    -->
                    <Canvas Grid.Row="1" VerticalAlignment="center" Height="5.0">
                        <Rectangle x:Name="SliderSelectionMark" Slider.IsSelectionRangeElement="true" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="5.0" Visibility="Hidden" StrokeThickness="1.0" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    </Canvas>

                    <!--
                        #
                        # MainPartsPanel
                        # ==============
                        #   This is a panel that hold 2 transparent RepeatButtons and Thumb.
                        #   This part usually lay on top of the Track background.
                        #
                        # Styling
                        # =======
                        #   When Slider calculates its RepeatButton sizes, it needs to know
                        #   the size of the panel that contains the buttons.
                        #   By setting IsTrack to 'true' will tells Slider to use this
                        #   panel's size as a reference for calculation.
                        #
                    -->
                    <Track Grid.Row="1" Name="PART_Track">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderDecreaseButtonStyle}" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{DynamicResource PFThemeHorizontalSliderThumbStyle}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderIncreaseButtonStyle}" />
                        </Track.IncreaseRepeatButton>
                    </Track >

                    <!--
                        #
                        # Bottom TickBar: Will be shown only when Slider.TickPlacement = BottomRight or Both
                        #
                    -->
                    <TickBar x:Name="BottomTick" Grid.Row="2" Placement="Bottom" Fill="{TemplateBinding Foreground}" Height="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualWidth}" />
               </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <!-- Invert the docking property of both RepeatButtons when orientation is inverted -->
        <Trigger Property="IsOrientationInverted" Value="true">
        <Setter TargetName="HorizontalSliderIncreaseButton" Property="DockPanel.Dock" Value="Left" />
        <Setter TargetName="HorizontalSliderDecreaseButton" Property="DockPanel.Dock" Value="Right" />
        </Trigger>
        <!-- Show Tickbars and Reposition the Track-->
        <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="TopTick" Property="Height" Value="4" />
        </Trigger>
        <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="BottomTick" Property="Height" Value="4" />
        </Trigger>
        <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="TopTick" Property="Height" Value="4" />
        <Setter TargetName="BottomTick" Property="Height" Value="4" />
        </Trigger>
        <!-- Display SelectionRange background -->
        <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="SliderSelectionMark" Property="Visibility" Value="Visible" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
        *
        * VerticalSlider Resources
        *
    -->
    <LinearGradientBrush x:Key="PFThemeVerticalSliderThumbNormalBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderThumbFocusedBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderThumbHoverBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="White" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderThumbPressedBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="0" />
            <GradientStop Color="White" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="PFThemeVerticalSliderThumbDisabledBackground" Color="{StaticResource {x:Static SystemColors.ControlLightLightColorKey}}" />

    <LinearGradientBrush x:Key="PFThemeVerticalSliderTrackNormalBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderTrackSelectionBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="1" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="0" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderTrackPressedBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderTrackFocusBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderTrackDisableBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeVerticalSliderTrackHoverBackground" EndPoint="1,0" StartPoint="0,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlDarkDarkColorKey}}" Offset="0" />
            <GradientStop Color="{StaticResource {x:Static SystemColors.ControlColorKey}}" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!--
        *
        * VerticalSlider Path Styles
        *
    -->
    <Style x:Key="PFThemeVerticalSliderDecreaseButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Command" Value="Slider.DecreaseLarge" />
        <Setter Property="DockPanel.Dock" Value="Bottom" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                </Canvas>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PFThemeVerticalSliderIncreaseButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Command" Value="Slider.IncreaseLarge" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Canvas Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                </Canvas>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PFThemeVerticalSliderThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource PFThemeVerticalSliderThumbNormalBackground}" />
        <Setter Property="Height" Value="11" />
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeVerticalSliderThumbHoverBackground}" />
        </Trigger>
        <Trigger Property="IsDragging" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeVerticalSliderThumbPressedBackground}" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Background" Value="{DynamicResource PFThemeVerticalSliderThumbFocusedBackground}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource PFThemeVerticalSliderThumbDisabledBackground}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        ************************
        * VerticalSlider Style *
        ************************
    -->
    <Style x:Key="{x:Type Slider}" TargetType="{x:Type Slider}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="MinHeight" Value="11" />
        <Setter Property="MinWidth" Value="21" />
        <Setter Property="Height" Value="104" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type VerticalSlider}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding Slider.MinWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    </Grid.RowDefinitions>


                    <!--
                        #
                        # Left TickBar: Will be shown only when Slider.TickPlacement = TopLeft or Both
                        #
                    -->
                    <TickBar x:Name="LeftTick" Fill="{TemplateBinding Foreground}" Placement="Left" Width="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualHeight}" />

                    <!--
                        #
                        # Draw Track Background. Usually, the track image is smaller than the size of
                        # the channel. So, we need to put the background at center of the channel.
                        #
                    -->
                    <Rectangle x:Name="VerticalSliderTrack" Fill="{DynamicResource PFThemeVerticalSliderTrackNormalBackground}" RadiusX="2.0" RadiusY="2.0" Width="5.0" Grid.Column="1" HorizontalAlignment="center" />

                    <!--
                        #
                        # SelectionRangeElement
                        #
                    -->
                    <Canvas Width="5.0" Grid.Column="1" HorizontalAlignment="center">
                        <Rectangle x:Name="SliderSelectionMark" Slider.IsSelectionRangeElement="true" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" StrokeThickness="1.0" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Width="5.0" Visibility="Hidden" />
                    </Canvas>

                    <!--
                        #
                        # MainPartsPanel
                        # ==============
                        #   This is a panel that hold 2 transparent RepeatButtons and Thumb.
                        #   This part usually lay on top of the Track background.
                        #
                        # Styling
                        # =======
                        #   When Slider calculates its RepeatButton sizes, it needs to know
                        #   the size of the panel that contains the buttons.
                        #   By setting IsTrack to 'true' will tells Slider to use this
                        #   panel's size as a reference for calculation.
                        #
                    -->
                    <Track Grid.Row="1" Name="PART_Track" >
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderDecreaseButtonStyle}" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{DynamicResource PFThemeHorizontalSliderThumbStyle}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderIncreaseButtonStyle}" />
                        </Track.IncreaseRepeatButton>
                    </Track >

                    <!--
                        #
                        # Right TickBar: Will be shown only when Slider.TickPlacement = BottomRight or Both
                        #
                    -->
                    <TickBar x:Name="RightTick" Grid.Column="2" Fill="{TemplateBinding Foreground}" Placement="Right" DockPanel.Dock="Left" Width="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualHeight}" />
                </Grid> <!-- #### Main Grid: Contains Ticks & Track #### -->
            </Border>
        <ControlTemplate.Triggers>

        <!-- Invert the docking property of both RepeatButtons when orientation is inverted -->
        <Trigger Property="IsOrientationInverted" Value="true">
        <Setter TargetName="VerticalSliderIncreaseButton" Property="DockPanel.Dock" Value="Bottom" />
        <Setter TargetName="VerticalSliderDecreaseButton" Property="DockPanel.Dock" Value="Top" />
        </Trigger>
        <!-- Show Tickbars and Reposition the Track-->
        <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="LeftTick" Property="Width" Value="4" />
        </Trigger>
        <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="RightTick" Property="Width" Value="4" />
        </Trigger>
        <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="LeftTick" Property="Width" Value="4" />
        <Setter TargetName="RightTick" Property="Width" Value="4" />
        </Trigger>
        <!-- Display SelectionRange background -->
        <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="SliderSelectionMark" Property="Visibility" Value="Visible" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- End VerticalSlider and HorizontalSlider Styles -->

    <!--
        **********************************************************
        * PreviewPane Styles                                     *
        **********************************************************
    -->

    <Style x:Key="PFThemePreviewPaneTitle" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="16pt" />
    </Style>

    <Style x:Key="PFThemePreviewPaneMetadataText" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
    </Style>

    <Style x:Key="PFThemePreviewPaneWelcomePaneNumber" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="18pt" />
    </Style>

    <Style x:Key="PFThemePreviewPaneWelcomePaneItems" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="FontSize" Value="12pt" />
    </Style>

    <Style x:Key="PFThemePreviewPaneWelcomePaneInThisFolder" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="DockPanel.Dock" Value="Top" />
        <Setter Property="FontSize" Value="10pt" />
    </Style>


    <!--
        **********************************************
        TextBoxBase
        **********************************************
    -->

    <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="BorderThickness" Value="2.0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="3,4,3,4" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
            <Border />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="100" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        **********************************************
        TextBox
        **********************************************
    -->

    <Style x:Key="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
            <Border x:Name="TextBoxBorder">
                <ScrollViewer x:Name="TextBoxScroller">
                    <TextBlock x:Name="TextBoxContent" Margin="1,0,1,0" />
                </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
        **********************************************
        RichTextBox
        **********************************************
    -->

    <Style x:Key="{x:Type RichTextBox}" BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type RichTextBox}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RichTextBox}">
            <Border x:Name="TextBoxBorder">
                <ScrollViewer x:Name="TextBoxScroller">
                    <TextFlow x:Name="TextBoxContent" Margin="1,0,1,0"><Paragraph /></TextFlow>
                </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
        **********************************************
        PasswordBox
        **********************************************
    -->

    <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="BorderThickness" Value="2.0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Padding" Value="3,4,3,4" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
            <Border x:Name="PasswordBoxBorder">
                <ScrollViewer x:Name="PasswordBoxScroller">
                    <TextBlock x:Name="PasswordBoxContent" Margin="1,0,1,0" />
                </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="100" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
         ****************************************
         * Expander Style                       *
         ****************************************
    -->

    <Style x:Key="PFThemeExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false">
                <DockPanel.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="White" Offset="0" />
                                <GradientStop Color="White" Offset="0.5" />
                                <GradientStop Color="#C8D5F7" Offset="1" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </DockPanel.Background>
                <Border DockPanel.Dock="Left" VerticalAlignment="Center" Margin="5 0 5 0" Focusable="false">
                    <ContentPresenter />
                </Border>
                <Canvas DockPanel.Dock="Right" Margin="1 1 3 1" Width="19" Height="19">
                    <Ellipse Width="17" Height="17" Canvas.Left="1.5" Canvas.Top="1.5" Stroke="#AEB3D3" Fill="White" />
                    <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 7,7 L 10,10 L 13,7 M 7,11 L 10,14 L 13,11" />
                </Canvas>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Data" Value="M 7,9 L 10,6 L 13,9 M 7,13 L 10,10 L 13 13" TargetName="arrow" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#428EFF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PFThemeExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false">
                <DockPanel.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="White" Offset="0" />
                                <GradientStop Color="White" Offset="0.5" />
                                <GradientStop Color="#C8D5F7" Offset="1" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </DockPanel.Background>
                <Border DockPanel.Dock="Left" VerticalAlignment="Center" Margin="5 0 5 0" Focusable="false">
                    <ContentPresenter />
                </Border>
                <Canvas DockPanel.Dock="Right" Margin="1 1 3 1" Width="19" Height="19">
                    <Ellipse Width="17" Height="17" Canvas.Left="1.5" Canvas.Top="1.5" Stroke="#AEB3D3" Fill="White" />
                    <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 7,9 L 10,6 L 13,9 M 7,13 L 10,10 L 13 13" />
                </Canvas>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="arrow" Property="Data" Value="M 7,7 L 10,10 L 13,7 M 7,11 L 10,14 L 13,11" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#428EFF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PFThemeExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false">
                <DockPanel.Background>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="White" Offset="0" />
                                <GradientStop Color="White" Offset="0.5" />
                                <GradientStop Color="#C8D5F7" Offset="1" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </DockPanel.Background>
                <Border DockPanel.Dock="Top" HorizontalAlignment="Center" Margin="0 5 0 5" Focusable="false">
                    <ContentPresenter />
                </Border>
                <Canvas DockPanel.Dock="Bottom" Margin="1 1 3 1" Width="19" Height="19">
                    <Ellipse Width="17" Height="17" Canvas.Left="1.5" Canvas.Top="1.5" Stroke="#AEB3D3" Fill="White" />
                    <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 9,7 L 6,10 L 9,13 M 13,7 L 10,10 L 13,13" />
                </Canvas>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="arrow" Property="Data" Value="M 7,7 L 10,10 L 7,13 M 11,7 L 14,10 L 11 13" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#428EFF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PFThemeExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false">
                <DockPanel.Background>
                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                        <LinearGradientBrush.GradientStops>
                            <GradientStopCollection>
                                <GradientStop Color="White" Offset="0" />
                                <GradientStop Color="White" Offset="0.5" />
                                <GradientStop Color="#C8D5F7" Offset="1" />
                            </GradientStopCollection>
                        </LinearGradientBrush.GradientStops>
                    </LinearGradientBrush>
                </DockPanel.Background>
                <Border DockPanel.Dock="Bottom" HorizontalAlignment="Center" Margin="0 5 0 5" Focusable="false">
                    <ContentPresenter />
                </Border>
                <Canvas DockPanel.Dock="Top" Margin="1 1 3 1" Width="19" Height="19">
                    <Ellipse Width="17" Height="17" Canvas.Left="1.5" Canvas.Top="1.5" Stroke="#AEB3D3" Fill="White" />
                    <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 7,7 L 10,10 L 7,13 M 11,7 L 14,10 L 11 13" />
                </Canvas>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="arrow" Property="Data" Value="M 9,7 L 6,10 L 9,13 M 13,7 L 10,10 L 13,13" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#428EFF" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamily}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Padding" Value="12,2,12,2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
            <Border BorderBrush="{TemplateBinding Background}" BorderThickness="1" ClipToBounds="{TemplateBinding ClipToBounds}">
                <DockPanel>
                    <ToggleButton x:Name="HeaderSite" DockPanel.Dock="Top" Style="{DynamicResource PFThemeExpanderDownHeaderStyle}" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Background="{TemplateBinding Background}" />
                    <ContentPresenter x:Name="ExpandSite" Visibility="Collapsed" />
                </DockPanel>
            </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="DockPanel.Dock" Value="Left" TargetName="HeaderSite" />
                <Setter Property="Style" Value="{DynamicResource PFThemeExpanderRightHeaderStyle}" TargetName="HeaderSite" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="HeaderSite" />
                <Setter Property="Style" Value="{DynamicResource PFThemeExpanderUpHeaderStyle}" TargetName="HeaderSite" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="DockPanel.Dock" Value="Right" TargetName="HeaderSite" />
                <Setter Property="Style" Value="{DynamicResource PFThemeExpanderLeftHeaderStyle}" TargetName="HeaderSite" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         ****************************************
         * StatusBar Style                      *
         ****************************************
    -->

    <Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}">
        <Setter Property="ItemsPanel">
            <Setter.Value><ItemsPanelTemplate><DockPanel/></ItemsPanelTemplate></Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type StatusBar}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ItemsPresenter />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type StatusBarItem}" TargetType="{x:Type StatusBarItem}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type StatusBarItem}">
            <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="Center" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>



</ResourceDictionary>
