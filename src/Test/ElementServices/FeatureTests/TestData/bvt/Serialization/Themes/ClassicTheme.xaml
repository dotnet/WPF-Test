<?Mapping XmlNamespace="Controls" ClrNamespace="System.Windows.Controls" Assembly="PresentationFramework" ?>
<?Mapping XmlNamespace="Collections" ClrNamespace="System.Collections" Assembly="Mscorlib" ?>
<?Mapping XmlNamespace="Documents" ClrNamespace="System.Windows.Documents" Assembly="PresentationFramework" ?>
<?Mapping XmlNamespace="System" ClrNamespace="System" Assembly="Mscorlib" ?>

<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:primitives="primitives">

    <!-- Classic -->

    <!--
         ****************************************
         * FocusVisual Style                    *
         ****************************************
    -->

    <Style x:Key="{x:Static SystemParameters.FocusVisualStyleKey}">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Rectangle StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeButtonFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="4,4,4,4" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeTabItemFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="4,4,4,2" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeRadioButtonFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="14,0,0,0" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>

    <Style x:Key="PFThemeComboBoxFocusVisual">

            <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate>
            <Border>
                <Rectangle Margin="4,4,21,4" StrokeThickness="1" Stroke="Black" StrokeDashArray="1 2" />
            </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

    </Style>


    <!--
         ****************************************
         * HyperLink Style (Deprecated)         *
         ****************************************
    -->
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundDefault" Color="Blue" />
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundMouseOver" Color="Red" />
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundVisited" Color="Purple" />
    <SolidColorBrush x:Key="PFThemeHyperLinkForegroundDisabled" Color="{StaticResource {x:Static SystemColors.GrayTextColorKey}}" />

    <Style x:Key="{x:Type HyperLink}" TargetType="{x:Type HyperLink}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundDefault}" />
        <Setter Property="TextDecorations" Value="Underline" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type HyperLink}">
            <Border Name="HyperLinkBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="ContentSite" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsVisited" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundVisited}" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundMouseOver}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundDisabled}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         ****************************************
         * Hyperlink Style                      *
         ****************************************
    -->

    <SolidColorBrush x:Key="PFThemeHyperlinkForegroundDefault" Color="Blue" />
    <SolidColorBrush x:Key="PFThemeHyperlinkForegroundMouseOver" Color="Red" />
    <SolidColorBrush x:Key="PFThemeHyperlinkForegroundDisabled" Color="{StaticResource {x:Static SystemColors.GrayTextColorKey}}" />

    <Style x:Key="{x:Type Hyperlink}" TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperlinkForegroundDefault}" />
        <Setter Property="TextDecorations" Value="Underline" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundMouseOver}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource PFThemeHyperLinkForegroundDisabled}" />
            </Trigger>
        </Style.Triggers>

    </Style>

    <!--
         ************************************
         * Frame Style                      *
         ************************************
    -->
    <Style x:Key="{x:Type Frame}" TargetType="{x:Type Frame}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Frame}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <ContentPresenter Content="{TemplateBinding Content}" />
                 </ScrollViewer>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style> <!-- End Frame Style -->


    <!--
        *****************************************
        * Button Style
        *****************************************
        * TODO:
        *   Get MinWidth/Height from system (our) metrics?
        *****************************************
    -->

    <Style x:Key="{x:Type Button}" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,1,12,2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <Grid Background="{TemplateBinding Background}">

                <!--right -->    <Rectangle x:Name="R1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom-->    <Rectangle x:Name="B1" Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  -->    <Rectangle x:Name="L1" Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   -->    <Rectangle x:Name="T1" Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <!--right -->    <Rectangle x:Name="R2" Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <!--bottom-->    <Rectangle x:Name="B2" Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <!--left  -->    <Rectangle x:Name="L2" Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <!--top   -->    <Rectangle x:Name="T2" Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />

                <!--right -->    <Rectangle x:Name="R3" Margin="2,2,2,2" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <!--bottom-->    <Rectangle x:Name="B3" Margin="2,2,3,2" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <!--left  -->    <Rectangle x:Name="L3" Margin="2,2,3,3" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <!--top   -->    <Rectangle x:Name="T3" Margin="3,2,3,3" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                <Border x:Name="ContentContainer" Margin="3,3,4,4" Padding="{TemplateBinding Padding}">

                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
            </Grid>
        <ControlTemplate.Triggers>

        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="R1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="B1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="L1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="T1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T3" />
        </Trigger>
        <Trigger Property="IsDefaulted" Value="true">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="R1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="B1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="L1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="T1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T3" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="R1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="B1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="L1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="T1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="L2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="T2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="R3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="B3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="L3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="T3" />
        <Setter Property="Margin" Value="4,4,3,3" TargetName="ContentContainer" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Opacity" Value="0.5" TargetName="ContentSite" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="75" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="23" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
         ****************************************
         * CheckBox Style                       *
         ****************************************
    -->

    <Style x:Key="{x:Type CheckBox}" TargetType="{x:Type CheckBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeRadioButtonFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <BulletPanel>
                    <!-- Draw Checkmark border and tick mark -->
                    <Border Width="13" Height="13" FlowDirection="LeftToRight" BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}">
                        <Border BorderThickness="1,1,0,0" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}">
                            <Border BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                                <Border x:Name="CheckMark" BorderThickness="1,1,0,0" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                    <Path x:Name="CheckMarkPath" Margin="1,0.5,1,0.5" Fill="{TemplateBinding Foreground}" Data="M 0 2.0 L 0 4.8 L 2.5 7.4 L 7.1 2.8 L 7.1 0 L 2.5 4.6 Z" />
                                </Border>
                            </Border>
                        </Border>
                    </Border>

                    <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                </BulletPanel>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="IsChecked" Value="false">
        <Setter TargetName="CheckMarkPath" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <Trigger Property="IsChecked" Value="null">
        <Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="CheckMarkPath" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="CheckMark" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="CheckMarkPath" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>


   <!--
         ****************************************
         * RadioButton Style                    *
         ****************************************
    -->

    <Style x:Key="{x:Type RadioButton}" TargetType="{x:Type RadioButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeRadioButtonFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="2,0,0,0" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButton}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <BulletPanel>
                    <!-- Draw Checkmark border and tick mark -->
                    <Canvas Width="13" Height="13" FlowDirection="LeftToRight">
                        <!-- Upper Left Outside-->
                        <Path StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Data="M 2 10 A 4 4 0 0 1 10 2" />
                        <!-- Down Right Outside-->
                        <Path StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Data="M 2 10 A 4 4 0 1 0 10 2" />

                        <!-- Background -->
                        <Path x:Name="RadioMarkBackground" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" Data="M 6 2 A 4 4 0 1 0 6.01 2 z" />

                        <!-- Dot mark -->
                        <Path x:Name="RadioMarkDot" Visibility="Collapsed" Fill="{TemplateBinding Foreground}" Data="M 6 4 A 2 2 0 1 0 6.01 4 z" />
                    </Canvas>

                    <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                </BulletPanel>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="RadioMarkDot" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="RadioMarkBackground" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter TargetName="RadioMarkBackground" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="RadioMarkDot" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

   <!--
         **********************************
         * ItemsControl Style             *
         **********************************
    -->
            <Style x:Key="{x:Type ItemsControl}" TargetType="{x:Type ItemsControl}">
                <Setter Property="Template">
                <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ItemsPresenter />
                    </Border>
                </ControlTemplate>
                </Setter.Value>
                </Setter>
            </Style>

   <!--
         **********************************
         * ContentControl Style             *
         **********************************
    -->

            <Style x:Key="{x:Type ContentControl}" TargetType="{x:Type ContentControl}">
                <Setter Property="Template">
                <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ContentPresenter />
                </ControlTemplate>
                </Setter.Value>
                </Setter>
            </Style>

   <!--
         ****************************************
         * RadioButtonList Style                *
         ****************************************
    -->

    <Style x:Key="{x:Type RadioButtonList}" TargetType="{x:Type RadioButtonList}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RadioButtonList}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <ItemsPresenter />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         ****************************************
         * ToolBar Style                        *
         ****************************************
    -->

    <!-- Button Style hosted in ToolBar -->
    <Style x:Key="PFThemeToolBarButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width" Value="23" />
        <Setter Property="Height" Value="23" />
        <Setter Property="MinWidth" Value="23" />
        <Setter Property="MinHeight" Value="23" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <Border Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Background" Value="#FF8492B5" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ToggleButton Style hosted in ToolBar -->
    <Style x:Key="PFThemeToolBarToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width" Value="23" />
        <Setter Property="Height" Value="23" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border Name="ButtonBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsChecked" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFD6D7D6" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="BorderBrush" Value="#FF08246B" />
        <Setter Property="Background" Value="#FFB5BED6" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Background" Value="#FF8492B5" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Thumb used in ToolBar Style -->
    <Style x:Key="PFThemeToolBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
            <Border Padding="2,2,2,2" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                <Border>
                  <Border.Background>
                    <DrawingBrush Viewbox="0,0,0,0" Viewport="1,0,4,4" TileMode="Tile" ViewportUnits="Absolute">
                        <DrawingBrush.Drawing>
                            <DrawingGroup>
                                <DrawingGroup.Children>
                                    <GeometryDrawing Brush="White" Geometry="M 1 1 A 1 1 0 1 0 1 1.01  z" />
                                    <GeometryDrawing Brush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Geometry="M 0 0 A 1 1 0 1 0 0 0.01  z" />
                                </DrawingGroup.Children>
                            </DrawingGroup>
                        </DrawingBrush.Drawing>
                    </DrawingBrush>
                  </Border.Background>
                </Border>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Cursor" Value="SizeAll" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="PFThemeToolBarHorizontalBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0" />
            <GradientStop Color="#FFECEBE6" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PFThemeToolBarVerticalBackground" StartPoint="0,0" EndPoint="1,0">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFFFFFFF" Offset="0" />
            <GradientStop Color="#FFECEBE6" Offset="1" />
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="{x:Type ToolBar}" BasedOn="{x:Null}" TargetType="{x:Type ToolBar}">
        <Setter Property="Background" Value="{DynamicResource PFThemeToolBarHorizontalBackground}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="MinWidth" Value="27" />
        <Setter Property="MinHeight" Value="27" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToolBar}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="3,3,3,3" Padding="{TemplateBinding Padding}">
                <StackPanel Orientation="{TemplateBinding Orientation}">
                    <Thumb x:Name="ToolBarThumb" Style="{DynamicResource PFThemeToolBarThumbStyle}" Width="8" />
                    <ContentPresenter x:Name="ToolBarHeader" ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,4,0" />
                    <StackPanel Orientation="{TemplateBinding Orientation}" IsItemsHost="True" />
                </StackPanel>
            </Border>
        <ControlTemplate.Triggers>

        <!-- Header -->
        <Trigger Property="Header" Value="{x:Null}">
        <Setter TargetName="ToolBarHeader" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <!-- IsLocked -->
        <Trigger Property="ToolBarTray.IsLocked" Value="true">
        <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed" />
        </Trigger>
        <!-- Orientation -->
        <Trigger Property="Orientation" Value="Vertical">
        <Setter TargetName="ToolBarThumb" Property="Height" Value="8" />
        <Setter TargetName="ToolBarThumb" Property="Width" Value="Auto" />
        <Setter TargetName="ToolBarHeader" Property="Margin" Value="0,0,0,4" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Orientation -->
        <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background" Value="{DynamicResource PFThemeToolBarVerticalBackground}" />
        </Trigger>
        </Style.Triggers>
    </Style>



    <!--
         ****************************************
         * ComboBox Style                       *
         ****************************************
    -->

    <Style x:Key="PFThemeComboBoxTransparentButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel Background="{TemplateBinding Background}" LastChildFill="false">
                <Grid DockPanel.Dock="Right" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">

                    <!--right -->    <Rectangle x:Name="R1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B1" Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L1" Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T1" Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                    <!--right -->    <Rectangle x:Name="R2" Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B2" Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L2" Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T2" Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                    <Path x:Name="Arrow" Margin="3,3,3,3" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                </Grid>
            </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="R2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="B2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="L2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="T2" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter TargetName="Arrow" Property="Margin" Value="4,4,2,2" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PFThemeComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
            <ScrollViewer x:Name="TextBoxScroller" Focusable="False" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="{TemplateBinding Background}">
                <TextBlock x:Name="TextBoxContent" TextTrimming="None" Cursor="IBeam" TextBox.AcceptsReturn="{TemplateBinding AcceptsReturn}" />
            </ScrollViewer>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         ***************************************************************
         * Keep DocumentViewer's ComboBox style in-sync with this one. *
         ***************************************************************
    -->

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeComboBoxFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="Padding" Value="2,2,2,2" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid>

                    <!--right -->    <Rectangle x:Name="R1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B1" Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L1" Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T1" Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!--right -->    <Rectangle x:Name="R2" Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B2" Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L2" Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T2" Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <Grid Margin="2">
                        <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="{Binding Source={StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}}" />
                        </Grid.ColumnDefinitions>
                        <!-- saves space for the button which will be drawn on top -->

                        <Border x:Name="SelectedItemBorder" Margin="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="ContentSite" Margin="1,1,1,1" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                        </Border>

                        <TextBox x:Name="EditableSite" Style="{DynamicResource PFThemeComboBoxEditableTextBox}" Visibility="Collapsed" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" />

                        <Border Grid.Column="0" Grid.ColumnSpan="2" x:Name="DropDownButtonBorder">
                            <ToggleButton x:Name="DropDownButton" Focusable="False" Style="{DynamicResource PFThemeComboBoxTransparentButtonStyle}" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
                        </Border>

                    </Grid>

                    <Popup Placement="Bottom" IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                            <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" MinWidth="{TemplateBinding ActualWidth}">
                                <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Border>
                    </Popup>
                </Grid>
            </Border>

        <ControlTemplate.Triggers>

        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
        <Setter TargetName="SelectedItemBorder" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        </MultiTrigger>
        <Trigger Property="IsEditable" Value="true">
        <!-- For exitable ComboBox we want to step directly on TextBox and skip ComboBox itself -->
        <Setter TargetName="DropDownButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="SelectedItemBorder" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="EditableSite" Property="Visibility" Value="Visible" />
        <Setter TargetName="EditableSite" Property="ComboBox.IsEditableTextBox" Value="True" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsKeyboardFocusWithin" Value="true" />
                    <Condition Property="IsDropDownOpen" Value="false" />
                    <Condition Property="IsEditable" Value="false" />
                </MultiTrigger.Conditions>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiTrigger>
        <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="150" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBoxItem}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsHighlighted" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>


   <!--
            **********************************************************
            * DocumentViewer ComboBox Style                          *
            *   Keep this in-sync with ComboBox's Style              *
            **********************************************************
    -->
    <Style x:Key="PFThemeDocumentViewerComboBoxStyle" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid>

                    <!--right -->    <Rectangle x:Name="R1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B1" Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L1" Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T1" Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!--right -->    <Rectangle x:Name="R2" Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B2" Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L2" Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T2" Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <Grid Margin="2">
                        <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="{Binding Source={StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}}" />
                        </Grid.ColumnDefinitions>
                        <!-- saves space for the button which will be drawn on top -->

                        <Border x:Name="SelectedItemBorder" Margin="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="ContentSite" Margin="1,1,1,1" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" />
                        </Border>

                        <TextBox x:Name="EditableSite" Style="{DynamicResource PFThemeComboBoxEditableTextBox}" Visibility="Collapsed" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" />

                        <!-- This TextBox has been added to display the current Zoom Level -->

                        <TextBox x:Name="ZoomTextBox" Style="{DynamicResource PFThemeComboBoxEditableTextBox}" Visibility="Visible" IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}" Text="{Binding Path=ZoomPercentage,Mode=OneWay,Converter={StaticResource PFThemeDocumentViewerZoomPercentageConverter},RelativeSource={RelativeSource AncestorType={x:Type DocumentViewer}}}" Focusable="True" />

                        <Border Grid.Column="0" Grid.ColumnSpan="2" x:Name="DropDownButtonBorder">
                            <ToggleButton x:Name="DropDownButton" Focusable="False" Style="{DynamicResource PFThemeComboBoxTransparentButtonStyle}" IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press" />
                        </Border>

                    </Grid>

                    <Popup Placement="Bottom" IsOpen="{Binding Path=IsDropDownOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">

                            <Border Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" MinWidth="{TemplateBinding ActualWidth}">
                                <ScrollViewer HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Border>
                    </Popup>
                </Grid>
            </Border>

        <ControlTemplate.Triggers>

        <Trigger Property="IsEditable" Value="true">
        <!-- For exitable ComboBox we want to step directly on TextBox and skip ComboBox itself -->
        <Setter TargetName="DropDownButton" Property="Background" Value="{x:Null}" />
        <Setter TargetName="SelectedItemBorder" Property="Visibility" Value="Collapsed" />
        <!-- Changed this line to ensure ComboBox's normal TextBox is not showing. -->
        <Setter TargetName="EditableSite" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="EditableSite" Property="ComboBox.IsEditableTextBox" Value="True" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEditable" Value="true">
        <Setter Property="IsTabStop" Value="false" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
         ****************************************
         * Label Style                          *
         ****************************************
    -->

        <Style x:Key="{x:Type Label}" TargetType="{x:Type Label}">
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Padding" Value="5" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Label}">
                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}">
                    <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>



    <!--
         ****************************************
         * ListBox Style                        *
         ****************************************
    -->

    <Style x:Key="{x:Type ListBox}" TargetType="{x:Type ListBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBox}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>

                    <!--right -->    <Rectangle x:Name="R1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B1" Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L1" Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T1" Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!--right -->    <Rectangle x:Name="R2" Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle x:Name="B2" Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle x:Name="L2" Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--top   -->    <Rectangle x:Name="T2" Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />


                    <ScrollViewer Margin="2" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Padding="{TemplateBinding Padding}">
                        <ItemsPresenter />
                    </ScrollViewer>
                </Grid>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ListBoxItem}" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="3,0,3,0" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListBoxItem}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ContentPresenter x:Name="ContentSite" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsSelected" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="Selector.IsSelectionActive" Value="false" />
                </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        </MultiTrigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         ****************************************
         * Menu Style                           *
         ****************************************
    -->

    <Style x:Key="PFThemeMenuItemPopupBackground" TargetType="{x:Type ContentControl}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
                <Grid Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                    <!--right -->    <Rectangle HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--bottom-->    <Rectangle VerticalAlignment="Bottom" Margin="0,0,1,0" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--left  -->    <Rectangle HorizontalAlignment="Left" Margin="0,0,0,1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--top   -->    <Rectangle VerticalAlignment="Top" Margin="1,0,1,0" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                    <!--right -->    <Rectangle HorizontalAlignment="Right" Margin="0,1,1,1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--bottom-->    <Rectangle VerticalAlignment="Bottom" Margin="1,0,2,1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--left  -->    <Rectangle HorizontalAlignment="Left" Margin="1,2,0,2" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--top   -->    <Rectangle VerticalAlignment="Top" Margin="2,1,2,0" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                    <!--right -->    <Rectangle HorizontalAlignment="Right" Margin="0,2,2,2" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle VerticalAlignment="Bottom" Margin="2,0,3,2" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle HorizontalAlignment="Left" Margin="2,3,0,3" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--top   -->    <Rectangle VerticalAlignment="Top" Margin="3,2,3,0" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                    <ContentPresenter Margin="3" />
                </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Menu}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ItemsPresenter />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         *******************************************
         * MenuItem/ContextMenu ScrollViewer Style *
         *******************************************
    -->

    <Style x:Key="PFThemeMenuScrollButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}">
        <Setter Property="ClickMode" Value="Hover" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="0" />

        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <DockPanel Background="Transparent">

                <!--right -->   <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Fill="Transparent" />
                <!--bottom-->   <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Fill="Transparent" />
                <!--left  -->   <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Fill="Transparent" />
                <!--top   -->   <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Fill="Transparent" />

                <ContentPresenter x:Name="ContentContainer" Margin="2,2,2,2" VerticalAlignment="Center" HorizontalAlignment="Center" />
            </DockPanel>

            <ControlTemplate.Triggers>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <Setter TargetName="ContentContainer" Property="Margin" Value="3,3,1,1" />
                </Trigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <MenuScrollingVisibilityConverter x:Key="PFThemeMenuScrollingVisibilityConverter" />

    <Style x:Key="PFThemeMenuScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility" Value="Auto" />

        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Border Grid.Row="1" Grid.Column="0">
                    <ScrollContentPresenter Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
                <RepeatButton x:Name="LineUpButton" Style="{DynamicResource PFThemeMenuScrollButton}" Grid.Row="0" Grid.Column="0" Command="{x:Static ScrollBar.LineUpCommand}" Focusable="False">
                    <RepeatButton.Visibility>
                        <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource PFThemeMenuScrollingVisibilityConverter}" ConverterParameter="0">
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                        </MultiBinding>
                    </RepeatButton.Visibility>
                    <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="M 0 4 L 3.5 0 L 7 4 Z" />
                </RepeatButton>
                <RepeatButton x:Name="LineDownButton" Style="{DynamicResource PFThemeMenuScrollButton}" Grid.Row="2" Grid.Column="0" Command="{x:Static ScrollBar.LineDownCommand}" Focusable="False">
                    <RepeatButton.Visibility>
                        <MultiBinding FallbackValue="Visibility.Collapsed" Converter="{StaticResource PFThemeMenuScrollingVisibilityConverter}" ConverterParameter="100">
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ComputedVerticalScrollBarVisibility" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="VerticalOffset" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ExtentHeight" />
                            <Binding RelativeSource="{RelativeSource TemplatedParent}" Path="ViewportHeight" />
                        </MultiBinding>
                    </RepeatButton.Visibility>
                    <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                </RepeatButton>
            </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         ****************************************
         * ContextMenu Style                    *
         ****************************************
    -->

    <Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.MenuBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
            <ContentControl Style="{DynamicResource PFThemeMenuItemPopupBackground}">
                <ScrollViewer Style="{DynamicResource PFThemeMenuScrollViewer}">
                    <Border Padding="{TemplateBinding Padding}"> <!-- Need this b/c I want margin on the panel -->
                        <ItemsPresenter />
                    </Border>
                </ScrollViewer>
            </ContentControl>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         ****************************************
         * MenuItem Style                       *
         ****************************************
    -->

<!-- TODO: Selector.IsSelected should be MenuItem.IsHighlighted and Selector.IsSelectable should be MenuItem.HasItems
           We can't do this today for two reasons:
           1) These properties are attached and read-only (if they were non-attached and read-only then we could attach them)
           2) The XAML gets parsed before the dll is generated ... so we couldn't do #1 and then fix up the
              properties because the parser will barf b/c it's working off of old binaries.
-->

    <!--   PART: TopLevelItem   -->
    <Style x:Key="PFThemeMenuItemTopLevelItem" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Border Background="{TemplateBinding Background}">
                <Grid Background="{TemplateBinding Background}">
                    <!--top   -->
                    <Rectangle VerticalAlignment="Top" x:Name="TopLine" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->
                    <Rectangle HorizontalAlignment="Left" x:Name="LeftLine" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->
                    <Rectangle VerticalAlignment="Bottom" x:Name="BottomLine" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                     <!--right -->
                    <Rectangle HorizontalAlignment="Right" x:Name="RightLine" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <ContentPresenter Margin="6,3,6,3" />
                </Grid>
            </Border>

        <ControlTemplate.Triggers>

        <Trigger Property="Selector.IsSelected" Value="True">
        <Setter TargetName="RightLine" Property="Visibility" Value="Visible" />
        <Setter TargetName="BottomLine" Property="Visibility" Value="Visible" />
        <Setter TargetName="LeftLine" Property="Visibility" Value="Visible" />
        <Setter TargetName="TopLine" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="MenuItem.IsSubmenuOpen" Value="True">
        <Setter TargetName="RightLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="BottomLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="LeftLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        <Setter TargetName="TopLine" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--   PART: TopLevelHeader   -->
    <Style x:Key="PFThemeMenuItemTopLevelHeader" BasedOn="{StaticResource PFThemeMenuItemTopLevelItem}" TargetType="{x:Type ContentControl}">
        <!-- <ContentControl FontWeight="Bold" /> -->
    </Style>


    <!--   PART: SubmenuItem   -->
    <Style x:Key="PFThemeMenuItemSubmenuItem" TargetType="{x:Type ContentControl}">
        <Setter Property="Selector.IsSelectable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                <Grid Margin="0,2,0,2">
                    <Path x:Name="Checkmark" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="4,0,6,0" Fill="{TemplateBinding Foreground}" FlowDirection="LeftToRight" Data="M 0 2.0 L 0 4.8 L 2.5 7.4 L 7.1 2.8 L 7.1 0 L 2.5 4.6 Z" />

                    <Path x:Name="SubmenuIndicator" Visibility="Hidden" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="4,0,6,0" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 0 8 L 4 4 Z" />

                    <ContentPresenter Margin="17,0,14,0" VerticalAlignment="Center" />
                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="MenuItem.IsChecked" Value="True">
        <Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
        </Trigger>
        <Trigger Property="Selector.IsSelectable" Value="True">
        <Setter TargetName="SubmenuIndicator" Property="Visibility" Value="Visible" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--   PART: SubmenuHeader   -->
    <Style x:Key="PFThemeMenuItemSubmenuHeader" BasedOn="{StaticResource PFThemeMenuItemSubmenuItem}" TargetType="{x:Type ContentControl}">
        <Setter Property="Selector.IsSelectable" Value="True" />
    </Style>

    <!--   PART: Separator   -->
    <Style x:Key="PFThemeMenuItemSeparator" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContentControl}">
            <Grid Margin="1,2,1,3" Height="2">
                <Rectangle Height="2" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <Rectangle VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </Grid>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Grid Background="Transparent">
                    <!-- Note: if this is a ContentControl without a ContentPresenter then it will steal logical
                                parentage from MenuItem.
                    -->
                    <ContentControl x:Name="HeaderSite" Background="{TemplateBinding Background}" Selector.IsSelected="{Binding Path=IsHighlighted,RelativeSource={RelativeSource TemplatedParent}}" MenuItem.IsChecked="{Binding Path=IsChecked,RelativeSource={RelativeSource TemplatedParent}}" MenuItem.IsSubmenuOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}">
                        <ContentPresenter ContentSource="Header" />
                    </ContentControl>

                    <Popup x:Name="SubMenuPopup" Placement="Right" IsOpen="{Binding Path=IsSubmenuOpen,RelativeSource={RelativeSource TemplatedParent}}" Focusable="False" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                        <ContentControl Style="{DynamicResource PFThemeMenuItemPopupBackground}">
                            <ScrollViewer Style="{DynamicResource PFThemeMenuScrollViewer}">
                                <ItemsPresenter Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="None" KeyboardNavigation.ControlTabNavigation="None" />
                            </ScrollViewer>
                        </ContentControl>
                    </Popup>
                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="Role" Value="TopLevelHeader">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource PFThemeMenuItemTopLevelHeader}" />
        <Setter TargetName="SubMenuPopup" Property="Placement" Value="Bottom" />
        </Trigger>
        <Trigger Property="Role" Value="TopLevelItem">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource PFThemeMenuItemTopLevelItem}" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuHeader">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource PFThemeMenuItemSubmenuHeader}" />
        <Setter TargetName="SubMenuPopup" Property="VerticalOffset" Value="-3" />
        <Setter TargetName="SubMenuPopup" Property="HorizontalOffset" Value="-3" />
        </Trigger>
        <Trigger Property="Role" Value="SubmenuItem">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource PFThemeMenuItemSubmenuItem}" />
        </Trigger>
        <Trigger Property="Mode" Value="Separator">
        <Setter TargetName="HeaderSite" Property="Style" Value="{DynamicResource PFThemeMenuItemSeparator}" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="Mode" Value="Separator">
        <Setter Property="Focusable" Value="False" />
        </Trigger>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="SubmenuHeader" />
                    <Condition Property="IsHighlighted" Value="True" />
                </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiTrigger>
        <MultiTrigger>
        <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="SubmenuItem" />
                    <Condition Property="IsHighlighted" Value="True" />
                </MultiTrigger.Conditions>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
        </MultiTrigger>
        </Style.Triggers>
    </Style>



    <!-- ********************* TabControl ************************ -->

    <Style x:Key="{x:Type TabControl}" TargetType="{x:Type TabControl}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="MinWidth" Value="10" />
        <Setter Property="MinHeight" Value="10" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabControl}">
            <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">

                <Grid KeyboardNavigation.TabNavigation="Local">
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="ColumnDefinition0" />
                    <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                    <RowDefinition x:Name="RowDefinition1" Height="*" />
                    </Grid.RowDefinitions>

                    <Grid x:Name="ContentPanel" KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained" Control.TabIndex="2" Grid.Column="0" Grid.Row="1">
                        <!-- Right -->
                        <Rectangle HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                        <!-- Bottom -->
                        <Rectangle VerticalAlignment="Bottom" Margin="0,0,1,0" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                        <!-- Left -->
                        <Rectangle HorizontalAlignment="Left" Margin="0,0,0,1" Width="1" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                        <!-- Top -->
                        <Rectangle VerticalAlignment="Top" Margin="1,0,1,0" Height="1" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                        <!-- Right -->
                        <Rectangle HorizontalAlignment="Right" Margin="0,1,1,1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                        <!-- Bottom -->
                        <Rectangle VerticalAlignment="Bottom" Margin="1,0,2,1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                        <Border Margin="1,1,2,2" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                            <ContentPresenter x:Name="ContentSite" Margin="2,2,2,2" Content="{TemplateBinding SelectedContent}" ContentTemplate="{TemplateBinding SelectedContentTemplate}" />
                        </Border>
                    </Grid>

                    <TabPanel x:Name="HeaderPanel" Control.TabIndex="1" Grid.Column="0" Grid.Row="0" Margin="2,0,2,0" IsItemsHost="True" Background="Transparent" ClipToBounds="False" />

                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="Grid.Row" Value="1" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="Auto" TargetName="RowDefinition1" />
        <Setter Property="Margin" Value="2,0,2,2" TargetName="HeaderPanel" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Grid.Row" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Grid.Column" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Column" Value="1" TargetName="ContentPanel" />
        <Setter Property="Width" Value="Auto" TargetName="ColumnDefinition0" />
        <Setter Property="Width" Value="*" TargetName="ColumnDefinition1" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="0" TargetName="RowDefinition1" />
        <Setter Property="Margin" Value="2,2,0,2" TargetName="HeaderPanel" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Grid.Row" Value="0" TargetName="HeaderPanel" />
        <Setter Property="Grid.Row" Value="0" TargetName="ContentPanel" />
        <Setter Property="Grid.Column" Value="1" TargetName="HeaderPanel" />
        <Setter Property="Grid.Column" Value="0" TargetName="ContentPanel" />
        <Setter Property="Width" Value="*" TargetName="ColumnDefinition0" />
        <Setter Property="Width" Value="Auto" TargetName="ColumnDefinition1" />
        <Setter Property="Height" Value="*" TargetName="RowDefinition0" />
        <Setter Property="Height" Value="0" TargetName="RowDefinition1" />
        <Setter Property="Margin" Value="0,2,2,2" TargetName="HeaderPanel" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!-- ********************* TabItem ************************ -->

    <Style x:Key="{x:Type TabItem}" TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeTabItemFocusVisual}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Padding" Value="12,2,12,2" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TabItem}">
            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid x:Name="MainTabPanel" VerticalAlignment="Stretch" ClipToBounds="False">
                    <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!-- Top -->
                    <Rectangle Grid.Row="0" Height="1" Margin="2,0,2,0" x:Name="TopBorder1" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                    <!-- Top -->
                    <Grid Grid.Row="1" Height="1" x:Name="TopBorder2">
                        <Rectangle HorizontalAlignment="Left" Width="1" Margin="1,0,0,0" x:Name="UpperBorderLeft" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                        <Rectangle HorizontalAlignment="Right" Width="1" Margin="0,0,1,0" x:Name="UpperBorderRight" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                        <Rectangle x:Name="UpperBorder" Margin="2,0,2,0" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    </Grid>

                    <!-- Left -->
                    <Rectangle Grid.Row="2" HorizontalAlignment="Left" Width="1" x:Name="LeftBorder" Fill="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />

                    <!-- Right -->
                    <Rectangle Grid.Row="2" HorizontalAlignment="Right" Width="1" x:Name="RightBorder1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <!-- Right -->
                    <Rectangle Grid.Row="2" HorizontalAlignment="Right" Margin="0,0,1,0" Width="1" x:Name="RightBorder2" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!-- Bottom -->
                    <Rectangle x:Name="BottomBorder" Grid.Row="2" VerticalAlignment="Bottom" Margin="1,0,2,0" Height="3" Fill="{TemplateBinding Background}" />

                    <Border x:Name="InternalBorder" Grid.Row="2" Margin="1,0,2,1" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" />
                    </Border>
                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
        <Setter Property="Grid.Row" Value="4" TargetName="TopBorder1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="TopBorder1" />
        <Setter Property="Grid.Row" Value="3" TargetName="TopBorder2" />
        <Setter Property="VerticalAlignment" Value="Top" TargetName="BottomBorder" />
        <Setter Property="Margin" Value="1,1,2,0" TargetName="InternalBorder" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="UpperBorder" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="BottomBorder" />
        </Trigger>
        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="BottomBorder" />
        </Trigger>
        <MultiTrigger>
        <!-- Selected and Top -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
        <Setter Property="Margin" Value="0,0,0,0" TargetName="LeftBorder" />
        <Setter Property="Margin" Value="0,0,0,0" TargetName="RightBorder1" />
        <Setter Property="Margin" Value="0,0,1,0" TargetName="RightBorder2" />
        <Setter Property="Margin" Value="1,0,2,2" TargetName="InternalBorder" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Bottom -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
        <Setter Property="Margin" Value="0,1,0,0" TargetName="LeftBorder" />
        <Setter Property="Margin" Value="0,1,0,0" TargetName="RightBorder1" />
        <Setter Property="Margin" Value="0,1,1,0" TargetName="RightBorder2" />
        <Setter Property="VerticalAlignment" Value="Top" TargetName="BottomBorder" />
        <Setter Property="Margin" Value="1,2,2,0" TargetName="InternalBorder" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Left -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
        <Setter Property="Visibility" Value="Collapsed" TargetName="RightBorder1" />
        <Setter Property="Visibility" Value="Collapsed" TargetName="RightBorder2" />
        <Setter Property="Margin" Value="2,0,1,0" TargetName="UpperBorder" />
        <Setter Property="Margin" Value="1,0,1,1" TargetName="InternalBorder" />
        <Setter Property="Margin" Value="1,0,1,0" TargetName="BottomBorder" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Right -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
        <Setter Property="Visibility" Value="Collapsed" TargetName="LeftBorder" />
        <Setter Property="Visibility" Value="Collapsed" TargetName="UpperBorderLeft" />
        <Setter Property="Margin" Value="0,0,2,0" TargetName="UpperBorder" />
        <Setter Property="Margin" Value="0,0,2,1" TargetName="InternalBorder" />
        </MultiTrigger>
        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Fill" Value="Orange" TargetName="UpperBorder" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <MultiTrigger>
        <!-- Selected and Top -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Top" />
                </MultiTrigger.Conditions>
        <Setter Property="TabPanel.Bottom" Value="-1" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Bottom -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Bottom" />
                </MultiTrigger.Conditions>
        <Setter Property="TabPanel.Top" Value="-2" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Left -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Left" />
                </MultiTrigger.Conditions>
        <Setter Property="Padding" Value="11,2,14,2" />
        <Setter Property="TabPanel.Right" Value="-2" />
        </MultiTrigger>
        <MultiTrigger>
        <!-- Selected and Right -->
        <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="true" />
                    <Condition Property="TabControl.TabStripPlacement" Value="Right" />
                </MultiTrigger.Conditions>
        <Setter Property="Padding" Value="14,2,11,2" />
        <Setter Property="TabPanel.Left" Value="-2" />
        </MultiTrigger>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="20" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        *****************************************
        * RepeatButton Style
        *****************************************
        * TODO:
        *   Get MinWidth/Height from system (our) metrics?
        *****************************************
    -->
    <Style x:Key="{x:Type RepeatButton}" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="12,1,12,2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RepeatButton}">
            <Grid Background="{TemplateBinding Background}">

                <!--right -->    <Rectangle x:Name="R1" Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom-->    <Rectangle x:Name="B1" Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  -->    <Rectangle x:Name="L1" Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   -->    <Rectangle x:Name="T1" Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <!--right -->    <Rectangle x:Name="R2" Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <!--bottom-->    <Rectangle x:Name="B2" Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                <!--left  -->    <Rectangle x:Name="L2" Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
                <!--top   -->    <Rectangle x:Name="T2" Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />

                <!--right -->    <Rectangle x:Name="R3" Margin="2,2,2,2" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <!--bottom-->    <Rectangle x:Name="B3" Margin="2,2,3,2" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <!--left  -->    <Rectangle x:Name="L3" Margin="2,2,3,3" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <!--top   -->    <Rectangle x:Name="T3" Margin="3,2,3,3" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                <Border x:Name="ContentContainer" Margin="3,3,4,4" Padding="{TemplateBinding Padding}">

                    <ContentPresenter x:Name="ContentSite" />
                </Border>
            </Grid>
        <ControlTemplate.Triggers>

        <Trigger Property="IsKeyboardFocused" Value="true">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="R1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="B1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="L1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="T1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T3" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="R1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="B1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="L1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" TargetName="T1" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="L2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="T2" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="R3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="B3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="L3" />
        <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" TargetName="T3" />
        <Setter Property="Margin" Value="4,4,3,3" TargetName="ContentContainer" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="75" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="23" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        **********************************************
        TextBoxBase
        **********************************************
    -->

    <Style x:Key="{x:Type TextBoxBase}" TargetType="{x:Type TextBoxBase}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Padding" Value="4,1,4,1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBoxBase}">
            <Border />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="100" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
        **********************************************
        TextBox
        **********************************************
    -->

    <Style x:Key="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
            <Border x:Name="TextBoxBorder">
                <Grid>
                    <!--right -->    <Rectangle Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->    <Rectangle Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->    <Rectangle Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--top   -->    <Rectangle Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!--right -->    <Rectangle Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--top   -->    <Rectangle Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <ScrollViewer x:Name="TextBoxScroller" Margin="2">
                        <TextBlock x:Name="TextBoxContent" Margin="1,0,1,0" />
                    </ScrollViewer>
                </Grid>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
        **********************************************
        RichTextBox
        **********************************************
    -->

    <Style x:Key="{x:Type RichTextBox}" BasedOn="{StaticResource {x:Type TextBoxBase}}" TargetType="{x:Type RichTextBox}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type RichTextBox}">
            <Border x:Name="TextBoxBorder">
                <Grid>
                    <!--right -->    <Rectangle Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->    <Rectangle Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->    <Rectangle Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--top   -->    <Rectangle Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!--right -->    <Rectangle Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--top   -->    <Rectangle Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <ScrollViewer x:Name="TextBoxScroller" Margin="2">
                        <TextBlock x:Name="TextBoxContent" Margin="1,0,1,0"><Paragraph /></TextBlock>
                    </ScrollViewer>
                </Grid>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
        **********************************************
        PasswordBox
        **********************************************
    -->

    <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Padding" Value="4,1,4,1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type PasswordBox}">
            <Border x:Name="PasswordBoxBorder">
                <Grid>
                    <!--right -->    <Rectangle Margin="0,0,0,0" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--bottom-->    <Rectangle Margin="0,0,1,0" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                    <!--left  -->    <Rectangle Margin="0,0,1,1" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
                    <!--top   -->    <Rectangle Margin="1,0,1,1" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />

                    <!--right -->    <Rectangle Margin="1,1,1,1" HorizontalAlignment="Right" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->    <Rectangle Margin="1,1,2,1" VerticalAlignment="Bottom" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->    <Rectangle Margin="1,1,2,2" HorizontalAlignment="Left" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                    <!--top   -->    <Rectangle Margin="2,1,2,2" VerticalAlignment="Top" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />

                    <ScrollViewer x:Name="PasswordBoxScroller" Margin="2">
                        <TextBlock x:Name="PasswordBoxContent" Margin="1,0,1,0" />
                    </ScrollViewer>
                </Grid>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsEnabled" Value="False">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
        </Trigger>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="100" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="20" />
        </Trigger>
        </Style.Triggers>
    </Style>


    <!--
        *****************************************
        * Thumb Style
        *****************************************
        * TODO:
        *     1. Add ThumbMinWidth & ThumbMinHeight to SystemMetrics
        *           (MinWidth = 2 * cxEdge, MinHeight = 2 * cyEdge)
        *****************************************
    -->

    <Style x:Key="{x:Type Thumb}" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <!-- Draw Edge -->
                    <Border BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Margin="0,0,0,0" />

                    <Border BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Margin="1,1,1,1" />

                    <Border BorderThickness="0,0,0,0" BorderBrush="Transparent" Background="{TemplateBinding Background}" Margin="2,2,2,2" />
                </Grid>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <!-- Width -->
        <Trigger Property="Width" Value="Auto">
        <Setter Property="MinWidth" Value="10" />
        </Trigger>
        <!-- Height -->
        <Trigger Property="Height" Value="Auto">
        <Setter Property="MinHeight" Value="10" />
        </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         **********************************
         * ToggleButton Style             *
         **********************************
    -->

    <Style x:Key="{x:Type ToggleButton}" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{DynamicResource PFThemeButtonFocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <!--right -->   <Rectangle HorizontalAlignment="Right" x:Name="R1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--bottom-->   <Rectangle VerticalAlignment="Bottom" Margin="0,0,1,0" x:Name="B1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--left  -->   <Rectangle HorizontalAlignment="Left" Margin="0,0,0,1" x:Name="L1" Width="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <!--top   -->   <Rectangle VerticalAlignment="Top" Margin="1,0,1,0" x:Name="T1" Height="1" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <Border Margin="1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" BorderThickness="1" Padding="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="ContentContainer" Margin="1" />
                    </Border>
                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="ContentContainer" Property="Margin" Value="2,2,0,0" />
        </Trigger>
        <Trigger Property="IsChecked" Value="true">
        <Setter TargetName="R1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="B1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
        <Setter TargetName="L1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="T1" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter TargetName="ContentContainer" Property="Margin" Value="2,2,0,0" />
        </Trigger>
        <!--
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="null"/>
                    <Condition Property="IsPressed" Value="false"/>
                </MultiTrigger.Conditions>
                <Set Target="R1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="B1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="L1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="T1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
            </MultiTrigger>
-->
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
        <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        </Trigger>
        <Trigger Property="IsChecked" Value="true">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        </Trigger>
        <!--
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="null"/>
                    <Condition Property="IsPressed" Value="false"/>
                </MultiTrigger.Conditions>
                <Set Target="R1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="B1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="L1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
                <Set Target="T1" PropertyPath="Fill" Value="{*SystemColors.ControlDarkDarkBrushKey}" />
            </MultiTrigger>
-->
        </Style.Triggers>
    </Style>


    <!--
         ****************************************
         * ToolTip Style                        *
         ****************************************
    -->

        <Style x:Key="{x:Type ToolTip}" TargetType="{x:Type ToolTip}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.InfoBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InfoTextBrushKey}}" />
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Padding" Value="1,2,1,2" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type ToolTip}">

                        <!-- The content -->
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="ContentSite" HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

    <!--
        ********************************************
        *                                          *
        * HorizontalSlider & VerticalSlider Styles *
        *                                          *
        ********************************************
    -->
        <!--
            *****************************************
            * HorizontalSlider DecreaseButton Style *
            *****************************************
        -->
        <Style x:Key="PFThemeHorizontalSliderDecreaseButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Command" Value="Slider.DecreaseLarge" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Background="{TemplateBinding Background}" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            *****************************************
            * HorizontalSlider IncreaseButton Style *
            *****************************************
        -->
        <Style x:Key="PFThemeHorizontalSliderIncreaseButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Command" Value="Slider.IncreaseLarge" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Background="{TemplateBinding Background}" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            ********************************
            * HorizonatlSlider Thumb Style *
            ********************************
        -->
        <Style x:Key="PFThemeHorizontalSliderThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="Height" Value="24" />
            <Setter Property="Width" Value="11" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
            <Border Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                <Canvas>
                    <Canvas x:Name="TipDownBackground" Visibility="Collapsed">
                        <!-- Fill Background Area including base border -->
                        <Path Fill="{TemplateBinding Background}" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 10.5 1.5 L 0.5 1.5 L 0.5 18.5 L 5 23 L 6 23 L 10.5 18 z" />

                        <!-- Top/Left/LeftTip OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 9.5 1.5 L 0.5 1.5 L 0.5 18.5 L 5.5 23.5 L 6 23.5" />

                        <!-- Right/RightTip OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" StrokeThickness="1.0" Data="M 6 23.5 L 6.5 23.5 L 10.5 18.5 L 10.5 1" />

                        <!-- Top/Left/LeftTip InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="1.0" Data="M 9.5 2.5 L 1.5 2.5 L 1.5 17.5 L 1.5 18.5 L 5.5 22.5 L 6 22.5" />

                        <!-- Right/RightTip InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" StrokeThickness="1.0" Data="M 6 22.5 L 6.5 22.5 L 9.5 18.5 L 9.5 2" />
                    </Canvas>

                    <Canvas x:Name="TipUpBackground" Visibility="Collapsed">
                        <!-- Fill Background Area including base border -->
                        <Path Fill="{TemplateBinding Background}" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 10.5 22 L 0.5 22 L 0.5 5.5 L 5 1 L 6 1 L 10.5 6 z" />

                        <!-- LeftTip/Left-OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 0.5 22.5 L 0.5 5.5 L 5 0.5 L 5.5 0.5" />

                        <!-- Bottom/Right/RightTip-OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" StrokeThickness="1.0" Data="M 5.5 0.5 L 6 0.5 L 10.5 5.5 L 10.5 22.5 L 0 22.5" />

                        <!-- LeftTip/Left-InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="1.0" Data="M 1.5 21.5 L 1.5 5.5 L 5 1.5 L 5.5 1.5" />

                        <!-- Bottom/Right/RightTip-InnerLine-->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" StrokeThickness="1.0" Data="M 5.5 1.5 L 6 1.5 L 9.5 5.5 L 9.5 21.5 L 1.0 21.5" />
                    </Canvas>

                    <Canvas x:Name="NoTipBackground" Visibility="Visible">
                    <!-- Fill Background Area including base border -->
                    <Path Fill="{TemplateBinding Background}" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 0.5 1.5 L 0.5 22.5 L 10.5 22.5 L 10.5 1.5 z" />

                    <!-- Right/Bottom OuterLine -->
                    <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" StrokeThickness="1.0" Data="M 10.5 1 L 10.5 22.5 L 0 22.5" />

                    <!-- Right/Bottom InnerLine -->
                    <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" StrokeThickness="1.0" Data="M 9.5 2 L 9.5 21.5 L 1 21.5" />

                    <!-- Top/Left InnerLine -->
                    <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="1.0" Data="M 9 2.5 L 1.5 2.5 L 1.5 21" />
                    </Canvas>
                </Canvas>
            </Border>

            <ControlTemplate.Triggers>

            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
            <Setter TargetName="TipUpBackground" Property="Visibility" Value="Visible" />
            <Setter TargetName="NoTipBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
            <Setter TargetName="TipDownBackground" Property="Visibility" Value="Visible" />
            <Setter TargetName="NoTipBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsDragging" Value="true">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </Trigger>
            </Style.Triggers>
        </Style>


        <!--
            **************************
            * HorizontalSlider Style *
            **************************
        -->
        <Style x:Key="{x:Type Slider}" TargetType="{x:Type Slider}">
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="MinWidth" Value="11" />
            <Setter Property="MinHeight" Value="24" />
            <Setter Property="Width" Value="104" />
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Slider}">
                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Width="{TemplateBinding Width}">
                    <Grid ClipToBounds="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" MinHeight="{TemplateBinding Slider.MinHeight}" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>

                        <!--
                            #
                            # Top TickMark: Will be shown only when Slider.TickPlacement = TopLeft or Both
                            #
                        -->
                        <TickBar x:Name="TopTick" Placement="Top" Fill="{TemplateBinding Foreground}" Height="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualWidth}" />

                        <!--
                            #
                            # Slider TrackBackground
                            #
                            # Draw Track Background. Usually, the track image is smaller than the size of
                            # the channel. So, we need to put the background at center of the channel.
                            #
                        -->
                        <Border Height="4" BorderThickness="0,0,1,1" Grid.Row="1" VerticalAlignment="Center" Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                        <Border Height="2" BorderThickness="0,0,1,1" Margin="1,0,1,0" Grid.Row="1" VerticalAlignment="Center" Background="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                        <Canvas Grid.Row="1" VerticalAlignment="Center" Height="4">
                            <!--
                                #
                                # SelectionRangeElement
                                #
                            -->
                            <Rectangle x:Name="SliderSelectionMark" Slider.IsSelectionRangeElement="true" Canvas.Top="1" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Height="2.0" Visibility="Hidden" />
                        </Canvas>

                        <!--
                            #
                            # MainPartsPanel
                            # ==============
                            #   This is a panel that hold 2 transparent RepeatButtons and Thumb.
                            #   This part usually lay on top of the Track background.
                            #
                            # Styling
                            # =======
                            #   When Slider calculates its RepeatButton sizes, it needs to know
                            #   the size of the panel that contains the buttons.
                            #   By setting IsTrack to 'true' will tells Slider to use this
                            #   panel's size as a reference for calculation.
                            #
                        -->
                        <Track Grid.Row="1" Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderDecreaseButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{DynamicResource PFThemeHorizontalSliderThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderIncreaseButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                        </Track>

                        <!--
                            #
                            # Bottom TickMark: Will be shown only when Slider.TickPlacement = BottomRight or Both
                            #
                        -->
                        <TickBar x:Name="BottomTick" Fill="{TemplateBinding Foreground}" Placement="Bottom" Height="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualWidth}" Grid.Row="2" />
                    </Grid> <!-- #### Main Grid: Contains Ticks & Track #### -->
                </Border>
            <ControlTemplate.Triggers>

            <!-- ShowTickMarkBands and Reposition the Track-->
            <Trigger Property="TickPlacement" Value="TopLeft">
            <Setter TargetName="TopTick" Property="Height" Value="4" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="BottomRight">
            <Setter TargetName="BottomTick" Property="Height" Value="4" />
            </Trigger>
            <Trigger Property="TickPlacement" Value="Both">
            <Setter TargetName="TopTick" Property="Height" Value="4" />
            <Setter TargetName="BottomTick" Property="Height" Value="4" />
            </Trigger>
            <!-- Display SelectionRange background -->
            <Trigger Property="IsSelectionRangeEnabled" Value="true">
            <Setter TargetName="SliderSelectionMark" Property="Visibility" Value="Visible" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>

            ***************************************
            * VerticalSlider DecreaseButton Style *
            ***************************************
        -->
        <Style x:Key="PFThemeVerticalSliderDecreaseButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Command" Value="Slider.DecreaseLarge" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Background="Transparent" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            *****************************************
            * VerticalSlider IncreaseButton Style *
            *****************************************
        -->
        <Style x:Key="PFThemeVerticalSliderIncreaseButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Command" Value="Slider.IncreaseLarge" />
            <Setter Property="IsTabStop" Value="false" />
            <Setter Property="Focusable" Value="false" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Background="Transparent" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            ******************************
            * VerticalSlider Thumb Style *
            ******************************
        -->
        <Style x:Key="PFThemeVerticalSliderThumbStyle" TargetType="{x:Type Thumb}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="BorderThickness" Value="0,0,0,0" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="Width" Value="24" />
            <Setter Property="Height" Value="11" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Thumb}">
            <Border Background="Transparent" BorderThickness="{TemplateBinding BorderThickness}">
                <Canvas>
                    <!-- Right Tip Background -->
                    <Canvas x:Name="TipRightBackground" Visibility="Collapsed">
                        <!-- Fill Background Area including base border -->
                        <Path Fill="{TemplateBinding Background}" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 1.5 10.5 L 1.5 0.5 L 18.5 0.5 L 23 5 L 23 6 L 18 10.5 z" />

                        <!-- Left/Top/TopTip OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 1.5 9.5 L 1.5 0.5 L 18.5 0.5 L 23.5 5.5 L 23.5 6 " />

                        <!-- Bottom/BottomTip OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" StrokeThickness="1.0" Data="M 23.5 6 L 23.5 6.5 L 18.5 10.5 L 1 10.5 " />

                        <!-- Left/Top/TopTip InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="1.0" Data="M 2.5 9.5 L 2.5 1.5 L 17.5 1.5 L 18.5 1.5 L 22.5 5.5 L 22.5 6 " />

                        <!-- Bottom/BottomTip InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" StrokeThickness="1.0" Data="M 22.5 6 L 22.5 6.5 L 18.5 9.5 L 2 9.5 " />
                    </Canvas>

                    <!-- Left Tip Background -->
                    <Canvas x:Name="TipLeftBackground" Visibility="Collapsed">
                        <!-- Fill Background Area including base border -->
                        <Path Fill="{TemplateBinding Background}" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 22 10.5 L 22 0.5 L 5.5 0.5 L 1 5 L 1 6 L 6 10.5 z" />

                        <!-- TopTip/Top OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 22.5 0.5 L 5.5 0.5 L 0.5 5 L 0.5 5.5 " />

                        <!-- Right/Bottom/BottomTip OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" StrokeThickness="1.0" Data="M 0.5 5.5 L 0.5 6 L 5.5 10.5 L 22.5 10.5 L 22.5 0 " />

                        <!-- TopTip/Top InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="1.0" Data="M 21.5 1.5 L 5.5 1.5 L 1.5 5 L 1.5 5.5 " />

                        <!-- Right/Bottom/BottomTip InnerLine-->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" StrokeThickness="1.0" Data="M 1.5 5.5 L 1.5 6 L 5.5 9.5 L 21.5 9.5 L 21.5 1.0 " />
                    </Canvas>

                    <!-- No Tip Background (Default) -->
                    <Canvas x:Name="NoTipBackground" Visibility="Visible">
                        <!-- Fill Background Area including base border -->
                        <Path Fill="{TemplateBinding Background}" Stroke="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" StrokeThickness="1.0" Data="M 1.5 0.5 L 22.5 0.5 L 22.5 10.5 L 1.5 10.5 z" />

                        <!-- Right/Bottom OuterLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" StrokeThickness="1.0" Data="M 1 10.5 L 22.5 10.5 L 22.5 0 " />

                        <!-- Right/Bottom InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" StrokeThickness="1.0" Data="M 2 9.5 L 21.5 9.5 L 21.5 1 " />

                        <!-- Top/Left InnerLine -->
                        <Path Stroke="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" StrokeThickness="1.0" Data="M 2.5 9 L 2.5 1.5 L 21 1.5 " />

                    </Canvas>
                </Canvas>
            </Border>

            <ControlTemplate.Triggers>

            <Trigger Property="Slider.TickPlacement" Value="TopLeft">
            <Setter TargetName="TipLeftBackground" Property="Visibility" Value="Visible" />
            <Setter TargetName="NoTipBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Slider.TickPlacement" Value="BottomRight">
            <Setter TargetName="TipRightBackground" Property="Visibility" Value="Visible" />
            <Setter TargetName="NoTipBackground" Property="Visibility" Value="Collapsed" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsDragging" Value="true">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            </Trigger>
            </Style.Triggers>
        </Style>


    <!--
        ************************
        * VerticalSlider Style *
        ************************
    -->
 rip   <Style x:Key="{x:Type Slider}" TargetType="{x:Type Slider}">
                <Style.Triggers>
                <Trigger Property="Orientation" Value="Vertical">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="MinHeight" Value="11" />
        <Setter Property="Height" Value="104" />
        <Setter Property="MinWidth" Value="24" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Slider}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Height="{TemplateBinding Height}">
                <Grid ClipToBounds="False">
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" MinWidth="{TemplateBinding Slider.MinWidth}" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    </Grid.RowDefinitions>

                    <!--
                        #
                        # Left TickMark: Will be shown only when Slider.TickPlacement = TopLeft or Both
                        #
                    -->
                    <TickBar x:Name="LeftTick" Placement="Left" Fill="{TemplateBinding Foreground}" Width="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualHeight}" />

                    <!--
                        #
                        # Slider Track Background
                        #
                        # Draw Track Background. Usually, the track image is smaller than the size of
                        # the channel. So, we need to put the background at center of the channel.
                        #
                    -->
                    <Border Width="4" BorderThickness="0,0,1,1" Grid.Column="1" HorizontalAlignment="Center" Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                    <Border Width="2" BorderThickness="0,0,1,1" Margin="0,1,0,1" Grid.Column="1" Background="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                    <Canvas Grid.Column="1" HorizontalAlignment="Center" Width="4">
                        <!--
                            #
                            # SelectionRangeElement
                            #
                        -->
                        <Rectangle x:Name="SliderSelectionMark" Slider.IsSelectionRangeElement="true" Canvas.Left="1" Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" Width="2.0" Visibility="Hidden" />
                    </Canvas>
                    <!--
                        #
                        # MainPartsPanel
                        # ==============
                        #   This is a panel that hold 2 transparent RepeatButtons and Thumb.
                        #   This part usually lay on top of the Track background.
                        #
                        # Styling
                        # =======
                        #   When Slider calculates its RepeatButton sizes, it needs to know
                        #   the size of the panel that contains the buttons.
                        #   By setting IsTrack to 'true' will tells Slider to use this
                        #   panel's size as a reference for calculation.
                        #
                    -->
                    <Track Grid.Row="1" Name="PART_Track">
                        <Track.DecreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderDecreaseButtonStyle}" />
                        </Track.DecreaseRepeatButton>
                        <Track.Thumb>
                            <Thumb Style="{DynamicResource PFThemeHorizontalSliderThumbStyle}" />
                        </Track.Thumb>
                        <Track.IncreaseRepeatButton>
                            <RepeatButton Style="{DynamicResource PFThemeHorizontalSliderIncreaseButtonStyle}" />
                        </Track.IncreaseRepeatButton>						
                    </Track >
                    <!--
                        #
                        # Right TickMark: Will be shown only when Slider.TickPlacement = BottomRight or Both
                        #
                    -->
                    <TickBar x:Name="RightTick" Fill="{TemplateBinding Foreground}" Placement="Right" Width="0.0" Ticks="{TemplateBinding Slider.Ticks}" TickFrequency="{TemplateBinding TickFrequency}" IsSelectionRangeEnabled="{TemplateBinding IsSelectionRangeEnabled}" SelectionStart="{TemplateBinding SelectionStart}" SelectionEnd="{TemplateBinding SelectionEnd}" Minimum="{TemplateBinding Minimum}" Maximum="{TemplateBinding Maximum}" IsOrientationInverted="{TemplateBinding IsOrientationInverted}" ReservedSpace="{Binding ElementName=SliderThumb, Path=ActualHeight}" Grid.Column="2" Grid.RowSpan="3" />
                </Grid> <!-- #### Main Grid: Contains Ticks & Track #### -->
            </Border>
        <ControlTemplate.Triggers>

        <!-- ShowTickMarkBands and Reposition the Track-->
        <Trigger Property="TickPlacement" Value="TopLeft">
        <Setter TargetName="LeftTick" Property="Width" Value="4" />
        </Trigger>
        <Trigger Property="TickPlacement" Value="BottomRight">
        <Setter TargetName="RightTick" Property="Width" Value="4" />
        </Trigger>
        <Trigger Property="TickPlacement" Value="Both">
        <Setter TargetName="LeftTick" Property="Width" Value="4" />
        <Setter TargetName="RightTick" Property="Width" Value="4" />
        </Trigger>
        <!-- Display SelectionRange background -->
        <Trigger Property="IsSelectionRangeEnabled" Value="true">
        <Setter TargetName="SliderSelectionMark" Property="Visibility" Value="Visible" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
            </Trigger>
            </Style.Triggers>

    </Style>
    <!-- End HorizontalSlider & VerticalSlider Style -->

    <!--
        **************************************************
        *                                                *
        * HorizontalScrollBar & VerticalScrollBar Styles *
        *                                                *
        **************************************************
    -->

        <!--
             *******************************************************************
             * Default ContextMenu for VerticalScrollBar & HorizontalScrollBar *
             *******************************************************************
        -->

        <ContextMenu x:Key="PFThemeHorizontalScrollBarDefaultContextMenu" x:Shared="false">
            <MenuItem Header="Scroll Here" Command="ScrollBar.ScrollHereCommand" />
            <Separator />
            <MenuItem Header="Left Edge" Command="ScrollBar.ScrollToLeftEndCommand" />
            <MenuItem Header="Right Edge" Command="ScrollBar.ScrollToRightEndCommand" />
            <Separator />
            <MenuItem Header="Page Left" Command="ScrollBar.PageLeftCommand" />
            <MenuItem Header="Page Right" Command="ScrollBar.PageRightCommand" />
            <Separator />
            <MenuItem Header="Scroll Left" Command="ScrollBar.LineLeftCommand" />
            <MenuItem Header="Scroll Right" Command="ScrollBar.LineRightCommand" />
        </ContextMenu>

        <ContextMenu x:Key="PFThemeVerticalScrollBarDefaultContextMenu" x:Shared="false">
            <MenuItem Header="Scroll Here" Command="ScrollBar.ScrollHereCommand" />
            <Separator />
            <MenuItem Header="Top" Command="ScrollBar.ScrollToTopCommand" />
            <MenuItem Header="Bottom" Command="ScrollBar.ScrollToBottomCommand" />
            <Separator />
            <MenuItem Header="Page Up" Command="ScrollBar.PageUpCommand" />
            <MenuItem Header="Page Down" Command="ScrollBar.PageDownCommand" />
            <Separator />
            <MenuItem Header="Scroll Up" Command="ScrollBar.LineUpCommand" />
            <MenuItem Header="Scroll Down" Command="ScrollBar.LineDownCommand" />
        </ContextMenu>

        <!--
            **************************************************************
            * Base style for HorizontalScrollBar LineLeft/Right buttons  *
            * and VerticalScrollBar LineUp/Down button                   *
            **************************************************************
        -->
        <SolidColorBrush x:Key="PFThemeScrollBarPageButtonBrush" Color="{StaticResource {x:Static SystemColors.ControlLightColorKey}}" Opacity="0.5" />

        <Style x:Key="PFThemeScrollBarLineButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="0" />
            <Setter Property="MinWidth" Value="0" />
            <Setter Property="MinHeight" Value="0" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
                        <!-- Draw Edge -->
                        <Border BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />

                        <Border BorderThickness="0,0,1,1" BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Margin="1,1,1,1" />

                        <Border x:Name="ContentBorder" BorderThickness="2,2,2,2" BorderBrush="Transparent" Background="{TemplateBinding Background}">

                            <Path HorizontalAlignment="Center" VerticalAlignment="Center" x:Name="ContentSite" Fill="{TemplateBinding Foreground}" Data="{Binding Path=Content,RelativeSource={RelativeSource TemplatedParent}}" />

                        </Border>
                    </Grid>
                </Border>
            <ControlTemplate.Triggers>

            <Trigger Property="IsPressed" Value="true">
            <Setter Property="BorderThickness" Value="1,1,1,1" TargetName="ContentBorder" />
            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="ContentBorder" />
            <Setter Property="RenderTransform" Value="translate(1,1)" TargetName="ContentSite" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
            <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" />
            </Trigger>
            </Style.Triggers>
        </Style>


        <!--
            ********************************************
            * HorizontalScrollBar LineLeftButton Style *
            ********************************************
        -->
        <Style x:Key="PFThemeHorizontalScrollBarLineLeftButtonStyle" BasedOn="{StaticResource PFThemeScrollBarLineButtonStyle}" TargetType="{x:Type RepeatButton}">
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
            <Setter Property="Command" Value="ScrollBar.LineLeftCommand" />
            <Setter Property="Content" Value="M 0 4 L 4 8 L 4 0 Z" />
        </Style>

        <!--
            *********************************************
            * HorizontalScrollBar LineRightButton Style *
            *********************************************
        -->
        <Style x:Key="PFThemeHorizontalScrollBarLineRightButtonStyle" BasedOn="{StaticResource PFThemeScrollBarLineButtonStyle}" TargetType="{x:Type RepeatButton}">
            <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
            <Setter Property="Command" Value="ScrollBar.LineRightCommand" />
            <Setter Property="Content" Value="M 0 0 L 0 8 L 4 4 Z" />
        </Style>

        <!--
            ****************************************
            * VerticalScrollBar LineUpButton Style *
            ****************************************
        -->
        <Style x:Key="PFThemeVerticalScrollBarLineUpButtonStyle" BasedOn="{StaticResource PFThemeScrollBarLineButtonStyle}" TargetType="{x:Type RepeatButton}">
            <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
            <Setter Property="Command" Value="ScrollBar.LineUpCommand" />
            <Setter Property="Content" Value="M 0 4 L 7 4 L 3.5 0 Z" />
        </Style>


        <!--
            ******************************************
            * VerticalScrollBar LineDownButton Style *
            ******************************************
        -->
        <Style x:Key="PFThemeVerticalScrollBarLineDownButtonStyle" BasedOn="{StaticResource PFThemeScrollBarLineButtonStyle}" TargetType="{x:Type RepeatButton}">
            <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
            <Setter Property="Command" Value="ScrollBar.LineDownCommand" />
            <Setter Property="Content" Value="M 0 0 L 3.5 4 L 7 0 Z" />
        </Style>

        <!--
            ********************************************
            * HorizontalScrollBar PageLeftButton Style *
            ********************************************
        -->
        <Style x:Key="PFThemeHorizontalScrollBarPageLeftButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle x:Name="PageButtonBackground" Fill="{DynamicResource PFThemeScrollBarPageButtonBrush}" />
            <ControlTemplate.Triggers>

            <Trigger Property="IsPressed" Value="true">
            <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="PageButtonBackground" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            *********************************************
            * HorizontalScrollBar PageRightButton Style *
            *********************************************
        -->
        <Style x:Key="PFThemeHorizontalScrollBarPageRightButtonStyle" BasedOn="{x:Null}" TargetType="{x:Type RepeatButton}">
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle x:Name="PageButtonBackground" Fill="{DynamicResource PFThemeScrollBarPageButtonBrush}" />
            <ControlTemplate.Triggers>

            <Trigger Property="IsPressed" Value="true">
            <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="PageButtonBackground" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            ******************************************
            * VerticalScrollBar PageUpButton Style *
            ******************************************
        -->

        <Style x:Key="PFThemeVerticalScrollBarPageUpButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle x:Name="PageButtonBackground" Fill="{DynamicResource PFThemeScrollBarPageButtonBrush}" />
            <ControlTemplate.Triggers>

            <Trigger Property="IsPressed" Value="true">
            <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="PageButtonBackground" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>

        <!--
            *******************************************
            * VerticalScrollBar PageDownButton Style *
            *******************************************
        -->
        <Style x:Key="PFThemeVerticalScrollBarPageDownButtonStyle" TargetType="{x:Type RepeatButton}">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Focusable" Value="False" />
            <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
            <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type RepeatButton}">
                <Rectangle x:Name="PageButtonBackground" Fill="{DynamicResource PFThemeScrollBarPageButtonBrush}" />
            <ControlTemplate.Triggers>

            <Trigger Property="IsPressed" Value="true">
            <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="PageButtonBackground" />
            </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style>


       <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
        <Setter Property="ContextMenu" Value="{DynamicResource PFThemeVerticalScrollBarDefaultContextMenu}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollBar}">
                   <Grid Background="{TemplateBinding Background}">
                        <Grid.RowDefinitions>
                        <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        <RowDefinition Height="0.00001*"/>
                        <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Viewbox Stretch="Fill">

                    <RepeatButton x:Name="VerticalScrollBarLineUpButton" Style="{DynamicResource PFThemeVerticalScrollBarLineUpButtonStyle}" />
                        </Viewbox>
                       <Track Grid.Row="1" Name="PART_Track"
                                           IsDirectionReversed="true">
                           <Track.DecreaseRepeatButton>
                               <RepeatButton Style="{DynamicResource PFThemeVerticalScrollBarPageUpButtonStyle}" />
                           </Track.DecreaseRepeatButton>
                           <Track.Thumb>
                               <Thumb Style="{DynamicResource PFThemeVerticalScrollBarThumbStyle}" />
                           </Track.Thumb>
                           <Track.IncreaseRepeatButton>
                               <RepeatButton Style="{DynamicResource PFThemeVerticalScrollBarPageDownButtonStyle}" />
                           </Track.IncreaseRepeatButton>
                       </Track >
                        <Viewbox Stretch="Fill" Grid.Row="2">
                    <RepeatButton x:Name="VerticalScrollBarLineDownButton" Style="{DynamicResource PFThemeVerticalScrollBarLineDownButtonStyle}" />
                                        </Viewbox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="MinWidth" Value="0" />
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}" />
                <Setter Property="ContextMenu" Value="{DynamicResource PFThemeHorizontalScrollBarDefaultContextMenu}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                <ColumnDefinition Width="0.00001*"/>
                                <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Viewbox Stretch="Fill">
                                    <RepeatButton x:Name="HorizontalScrollBarLineLeftButton" Style="{DynamicResource PFThemeHorizontalScrollBarLineLeftButtonStyle}"/>
                                </Viewbox>
                                <Track Grid.Column="1" Name="PART_Track">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{DynamicResource PFThemeHorizontalScrollBarPageLeftButtonStyle}" />
                                    </Track.DecreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource PFThemeHorizontalScrollBarThumbStyle}" />
                                    </Track.Thumb>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{DynamicResource PFThemeHorizontalScrollBarPageRightButtonStyle}" />
                                    </Track.IncreaseRepeatButton>									
                                </Track >
                                <Viewbox Stretch="Fill" Grid.Column="2">
                                    <RepeatButton x:Name="HorizontalScrollBarLineRightButton" Style="{DynamicResource PFThemeHorizontalScrollBarLineRightButtonStyle}"/>
                                </Viewbox>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--
         **********************************************************
         * PageFunctionBase style                                 *
         **********************************************************
    -->
    <Style x:Key="{x:Type PageFunctionBase}" TargetType="{x:Type PageFunctionBase}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type PageFunctionBase}">
            <ContentPresenter Content="{TemplateBinding PageFunctionBase.Child}" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         **********************************************************
         * Page style                                             *
         **********************************************************
    -->
    <Style x:Key="{x:Type Page}" TargetType="{x:Type Page}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Page}">
            <ContentPresenter ClipToBounds="true" Content="{TemplateBinding Page.Child}" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         **********************************************************
         * Window/NavigationWindow style                          *
         **********************************************************
    -->
    <Style x:Key="{x:Type Window}" TargetType="{x:Type Window}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Window}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <AdornerDecorator Grid.Row="0" Grid.Column="0">
                        <ContentPresenter Content="{TemplateBinding Window.Content}" />
                    </AdornerDecorator>

                    <!-- ResizeGrip's Width should be SystemParameters.VerticalScrollBarWidthKey -->
                    <!-- Its Height should be SystemParameters.HorizontalScrollBarHeightKey -->
                    <!-- But we can't use them right now because the ResizeGrip's visual tree hard coded positions of dots on canvas-->
                    <!-- Opened work item #22121 to clean up its visual tree and move its style to theme file too-->
                    <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" HorizontalAlignment="Right" VerticalAlignment="Bottom" Height="23" Width="14" Foreground="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="Transparent" Visibility="Collapsed" IsTabStop="false" />
                </Grid>
            </Border>
        <ControlTemplate.Triggers>

        <MultiTrigger>
        <!-- There may be perf implications b/c of the following conditions.  We may cause
                     an extra layout to happen when WindowState changes to Minimized and ResizeMode
                     is set to CanResizeWithGrip -->
        <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                    <Condition Property="Window.WindowState" Value="Normal" />
                </MultiTrigger.Conditions>
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

   <!-- Navigation Window back/fwd button Drop Down style-->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonJournalEntryStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="Header" Value="{Binding Path=Name}" />
        <Setter Property="Command" Value="NavigationCommands.NavigateJournal" />
    </Style>

    <!-- Navigation Window Back Button Style -->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonBackButtonStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="54" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseBack" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="10" />
                </Grid.RowDefinitions>

                <!--right --> <Rectangle Grid.RowSpan="2" Margin="0,0,0,0" HorizontalAlignment="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom--> <Rectangle Grid.RowSpan="2" Margin="0,0,1,0" VerticalAlignment="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  --> <Rectangle Grid.RowSpan="2" Margin="0,0,1,1" HorizontalAlignment="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   --> <Rectangle Grid.RowSpan="2" Margin="0,1,1,1" VerticalAlignment="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <!-- Circle -->
                <Path StrokeThickness="0.4" Grid.Column="0" Grid.Row="0" x:Name="Circle" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="VerticalGradient #C4C4BB white" Stroke="#C4C4BB"><Path.Data><EllipseGeometry Center="16 16" RadiusX="16" RadiusY="16" /></Path.Data></Path>
                <!-- shadow -->
                <Path Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M -0,13 l 10,10 a 2 2 0 1,0 2.83,-2.83  l -5.17,-5.17 15.4,0 a 2,2 0 1,0 0,-4 l -15.4,0 l 5.17,-5.17 a 2,2 0 1,0 -2.83,-2.83z" Fill="#AA777777" />
                <!-- arrow -->
                <Path Grid.Column="0" Grid.Row="0" x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 3,16 l 10,10 a 2 2 0 1,0 2.8,-2.8  l -5.2,-5.2 15.4,0 a 2,2 0 1,0 0,-4 l -15.4,0 l 5.2,-5.2 a 2,2 0 1,0 -2.8,-2.8z" Stroke="#BBBBBB" StrokeThickness="1" Fill="VerticalGradient lightblue darkblue" />

                <Path Grid.Column="0" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />

                <Menu Grid.Column="0" Grid.Row="1" Background="Transparent" Padding="0,0,0,0">
                    <MenuItem x:Name="NavWinMenu" Width="50" Height="10" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=BackStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                </Menu>
            </Grid>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Fill" Value="VerticalGradient white gray" TargetName="Arrow" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Fill" Value="VerticalGradient #AAAAAA white" TargetName="Circle" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- Navigation Window Fwd Button Style -->
    <!-- It has the same visual tree as the Back Button. But we can't share them because visual triggers are different-->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonForwardButtonStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Width" Value="50" />
        <Setter Property="Height" Value="54" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseForward" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
            <Grid Background="Transparent">
                <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="10" />
                </Grid.RowDefinitions>

                <!--right --> <Rectangle Grid.RowSpan="2" Margin="0,0,0,0" HorizontalAlignment="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--bottom--> <Rectangle Grid.RowSpan="2" Margin="0,0,1,0" VerticalAlignment="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                <!--left  --> <Rectangle Grid.RowSpan="2" Margin="0,0,1,1" HorizontalAlignment="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                <!--top   --> <Rectangle Grid.RowSpan="2" Margin="0,1,1,1" VerticalAlignment="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

                <!-- Circle -->
                <Path StrokeThickness="0.4" Grid.Column="0" Grid.Row="0" x:Name="Circle" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="VerticalGradient #C4C4BB white" Stroke="#C4C4BB"><Path.Data><EllipseGeometry Center="16 16" RadiusX="16" RadiusY="16" /></Path.Data></Path>
                <!-- Shadow -->
                <Path Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 26,13 l -10,10 a 2 2 0 0,1 -2.8,-2.8  l 5.2,-5.2 -15.4,0 a 2,2 0 0,1 0,-4 l 15.4,0 l -5.2,-5.2 a 2,2 0 0,1 2.8,-2.8z" Fill="#AA777777" />
                <!-- Arrow -->
                <Path Grid.Column="0" Grid.Row="0" x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 29,16 l -10,10 a 2 2 0 0,1 -2.8,-2.8  l 5.2,-5.2 -15.4,0 a 2,2 0 0,1 0,-4 l 15.4,0 l -5.2,-5.2 a 2,2 0 0,1 2.8,-2.8z" Stroke="#D5D5D5" StrokeThickness="1" Fill="VerticalGradient darkblue lightblue" />

                <Path Grid.Column="0" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />

                <Menu Grid.Column="0" Grid.Row="1" Background="Transparent" Padding="0,0,0,0">
                    <MenuItem x:Name="NavWinMenu" Width="50" Height="10" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=ForwardStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" IsSubmenuOpen="{Binding Path=(MenuItem.IsSubmenuOpen),Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
                </Menu>
            </Grid>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Fill" Value="VerticalGradient gray white" TargetName="Arrow" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter Property="Fill" Value="VerticalGradient #AAAAAA white" TargetName="Circle" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- NavigationWindow Style-->
    <Style x:Key="{x:Type NavigationWindow}" TargetType="{x:Type NavigationWindow}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type NavigationWindow}">
            <!-- We are using this Border's Name to identify whether our Framelet style has been applied -->
            <!-- HuWang TODO We need to turn off the system icon, title and contextmenu when it is using our style.
                 The plan is to have a property on Window to turn it on and off. EnsureVisual and the Name will be removed when we do that.
                 This is tracked in task #12401-->
            <Border Name="NavigationBarRoot" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" ClipToBounds="true">
                <DockPanel>
                    <Border x:Name="NavigationBarBackground" DockPanel.Dock="Top" Background="HorizontalGradient silver white">
                        <DockPanel>
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonBackButtonStyle}" DockPanel.Dock="left" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoBack}" />
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonForwardButtonStyle}" DockPanel.Dock="left" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoForward}" />
                            <!-- We will need to find out FontSize from system resources -->
                            <!-- Opened work item #22122 to track this-->
                            <TextBlock Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}" FontSize="16" Margin="8,0,0,0" VerticalAlignment="Center" TextBlock.Text="{TemplateBinding Window.Text}" />
                        </DockPanel>
                    </Border>

                    <Grid>
                        <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ScrollViewer Grid.Row="0" Grid.Column="0" HorizontalScrollBarVisibility="{TemplateBinding NavigationWindow.HorizontalScrollBarVisibility}" VerticalScrollBarVisibility="{TemplateBinding NavigationWindow.VerticalScrollBarVisibility}">
                            <ContentPresenter ClipToBounds="true" Content="{TemplateBinding Window.Content}" />
                        </ScrollViewer>

                        <!-- ResizeGrip's Width should be SystemParameters.VerticalScrollBarWidthKey -->
                        <!-- Its Height should be SystemParameters.HorizontalScrollBarHeightKey -->
                        <!-- But we can't use them right now because the ResizeGrip's visual tree hard coded positions of dots on canvas-->
                        <!-- Opened work item #22121 to clean up its visual tree and move its style to theme file too-->
                        <ResizeGrip x:Name="WindowResizeGrip" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2" HorizontalAlignment="right" VerticalAlignment="bottom" Height="23" Width="14" Foreground="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" Background="Transparent" Visibility="Collapsed" IsTabStop="false" />
                       </Grid>
                  </DockPanel>
            </Border>
        <ControlTemplate.Triggers>

        <MultiTrigger>
        <!-- There may be perf implications b/c of the following conditions.  We may cause
                     an extra layout to happen when WindowState changes to Minimized and ResizeMode
                     is set to CanResizeWithGrip -->
        <MultiTrigger.Conditions>
                    <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                    <Condition Property="Window.WindowState" Value="Normal" />
                </MultiTrigger.Conditions>
        <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
        </MultiTrigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

   <!--
            **********************************************************
            * BrowserWindow Styles                                   *
            **********************************************************
    -->

    <!-- Downlevel Browser Window Back Button Style -->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonBackButtonDownlevelStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseBack" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
        <DockPanel>
            <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
            <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
            <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Viewbox Grid.Column="0" Grid.Row="0">
                        <Grid Width="50" Height="50" Margin="15,0,0,0">
                        <Ellipse StrokeThickness="2" x:Name="EllipseBackground" Opacity="1" Fill="VerticalGradient #B3E2A2 #25B40E " Stroke="VerticalGradient black #ccffffff" />
                        <Ellipse x:Name="EllipseShine" Fill="VerticalGradient #aaffffff transparent" Stroke="transparent" Margin="5,3,5,15" />
                        <Path x:Name="Arrow" RenderTransform="scale 0.65 translate 11.5 10 " Fill="white" Stroke="#086403" Data="M0.5,20.468c0.002,0.34,0.036,0.679,0.102,1.013c0.032,0.162,0.092,0.312,0.139,0.468    c0.052,0.176,0.092,0.355,0.163,0.527c0.076,0.183,0.18,0.349,0.274,0.521c0.073,0.132,0.131,0.27,0.216,0.397    c0.196,0.294,0.418,0.568,0.667,0.817l14.611,14.611c2.083,2.083,5.459,2.083,7.542,0c2.083-2.083,2.083-5.459,0-7.542    l-5.509-5.509h23.791c2.945,0,5.333-2.388,5.333-5.333c0-2.946-2.388-5.333-5.333-5.333H18.732l5.509-5.509    c2.083-2.083,2.083-5.459,0-7.542c-2.083-2.083-5.459-2.083-7.542,0L2.203,16.549c-0.043,0.04-0.095,0.07-0.136,0.111    c-0.002,0.002-0.005,0.003-0.007,0.006c-0.002,0.002-0.003,0.004-0.005,0.006c-0.246,0.247-0.465,0.517-0.659,0.807    c-0.088,0.132-0.149,0.275-0.224,0.413c-0.092,0.167-0.192,0.328-0.266,0.505c-0.072,0.175-0.114,0.357-0.167,0.538    c-0.045,0.153-0.104,0.299-0.135,0.458C0.536,19.732,0.5,20.075,0.5,20.419c0,0.006-0.002,0.012-0.002,0.019    C0.498,20.448,0.5,20.458,0.5,20.468z" />
                        </Grid>
                </Viewbox>

                <Grid Grid.Column="1" Grid.Row="0" Width="10">
                    <Path VerticalAlignment="center" HorizontalAlignment="center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                    <Menu Background="Transparent">
                        <MenuItem x:Name="NavWinMenu" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=BackStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" />
                    </Menu>
                </Grid>
            </Grid>
        </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Path.Fill" Value="VerticalGradient white gray" TargetName="EllipseBackground" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="NavWinMenu" Property="Background" Value="Transparent"></Setter>
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="Arrow" Property="Path.RenderTransform" Value="scale 0.65 translate 10 12" />
        <Setter TargetName="EllipseShine" Property="Path.RenderTransform" Value="translate 0 2" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!-- Downlevel Browser Window Forward Button Style -->
    <Style x:Key="PFThemeNavigationWindowNavigationButtonForwardButtonDownlevelStyle" TargetType="{x:Type Button}">
        <!-- We will need to find out the size of button and menu height from system resources -->
        <!-- Opened work item #22122 to track this-->
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="IsEnabled" Value="false" />
        <Setter Property="Command" Value="NavigationCommands.BrowseForward" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
        <DockPanel>
            <!--right -->    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
            <!--bottom-->    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
            <!--left  -->    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
            <!--top   -->    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" Visibility="Hidden" Fill="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />

            <Grid>
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <Viewbox Grid.Column="0" Grid.Row="0">
                        <Grid Width="50" Height="50" Margin="15,0,0,0">
                            <Ellipse StrokeThickness="2" x:Name="EllipseBackground" Opacity="1" Fill="VerticalGradient #B3E2A2 #25B40E " Stroke="VerticalGradient black #ccffffff" />
                            <Ellipse x:Name="EllipseShine" Fill="VerticalGradient #aaffffff transparent" Stroke="transparent" Margin="5,3,5,15" />
                            <Path x:Name="Arrow" RenderTransform="scale 0.65 translate 8.5 10 " Fill="white" Stroke="#086403" Data="M47.82,20.407c-0.002-0.34-0.036-0.679-0.102-1.013c-0.032-0.162-0.092-0.312-0.139-0.468    c-0.052-0.176-0.092-0.355-0.163-0.527c-0.076-0.183-0.18-0.349-0.274-0.521c-0.073-0.132-0.131-0.27-0.216-0.397    c-0.196-0.294-0.418-0.568-0.667-0.817L31.647,2.053c-2.083-2.083-5.459-2.083-7.542,0c-2.083,2.083-2.083,5.459,0,7.542    l5.509,5.509H5.823c-2.945,0-5.333,2.388-5.333,5.333c0,2.946,2.388,5.333,5.333,5.333h23.765l-5.509,5.509    c-2.083,2.083-2.083,5.459,0,7.542c2.083,2.083,5.459,2.083,7.542,0l14.497-14.497c0.043-0.04,0.095-0.07,0.136-0.111    c0.002-0.002,0.005-0.003,0.007-0.006c0.002-0.002,0.003-0.004,0.005-0.006c0.246-0.247,0.465-0.517,0.659-0.807    c0.088-0.132,0.149-0.275,0.224-0.413c0.092-0.167,0.192-0.328,0.266-0.505c0.072-0.175,0.114-0.357,0.167-0.538    c0.045-0.153,0.104-0.299,0.135-0.458c0.067-0.339,0.103-0.682,0.104-1.026c0-0.006,0.002-0.012,0.002-0.019    C47.823,20.427,47.82,20.417,47.82,20.407z" />
                        </Grid>
                </Viewbox>

                <Grid Grid.Column="1" Grid.Row="0" Width="10">
                    <Path VerticalAlignment="center" HorizontalAlignment="center" Fill="{TemplateBinding Foreground}" Data="M 0 0 L 3.5 4 L 7 0 Z" />
                    <Menu Background="Transparent">
                        <MenuItem x:Name="NavWinMenu" ItemContainerStyle="{DynamicResource PFThemeNavigationWindowNavigationButtonJournalEntryStyle}" ItemsSource="{Binding Path=ForwardStack,Mode=OneTime,RelativeSource={RelativeSource AncestorType={x:Type NavigationWindow}}}" />
                    </Menu>
                </Grid>
            </Grid>
        </DockPanel>
        <ControlTemplate.Triggers>

        <Trigger Property="IsEnabled" Value="false">
        <Setter Property="Path.Fill" Value="VerticalGradient white gray" TargetName="EllipseBackground" />
        </Trigger>
        <Trigger Property="IsMouseOver" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="NavWinMenu" Property="Background" Value="Transparent"></Setter>
        <Setter Property="Visibility" Value="Visible" TargetName="L1" />
        <Setter Property="Visibility" Value="Visible" TargetName="R1" />
        <Setter Property="Visibility" Value="Visible" TargetName="T1" />
        <Setter Property="Visibility" Value="Visible" TargetName="B1" />
        </Trigger>
        <Trigger Property="IsPressed" Value="true">
        <Setter TargetName="EllipseBackground" Property="Path.Fill" Value="VerticalGradient #25B40E #086403" />
        <Setter TargetName="Arrow" Property="Path.RenderTransform" Value="scale 0.65 translate 10 12" />
        <Setter TargetName="EllipseShine" Property="Path.RenderTransform" Value="translate 0 2" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static SystemParameters.NavigationChromeStyleKey}" TargetType="{x:Type NavigationWindow}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type NavigationWindow}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <AdornerDecorator>
                    <ContentPresenter Content="{TemplateBinding Window.Content}" ClipToBounds="true" />
                </AdornerDecorator>
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

     <Style x:Key="{x:Static SystemParameters.NavigationChromeDownlevelStyleKey}" TargetType="{x:Type NavigationWindow}">
         <Setter Property="Template">
         <Setter.Value>
         <ControlTemplate TargetType="{x:Type NavigationWindow}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                <DockPanel>
                    <Border x:Name="NavigationBarBackground" DockPanel.Dock="Top" Height="30" Background="HorizontalGradient silver white">
                        <Grid>
                            <Rectangle Opacity="0.05" Fill="VerticalGradient transparent #99000000" Margin="1,0,1,0" VerticalAlignment="bottom" Height="7" RadiusX="3" RadiusY="3" />
                            <Rectangle Height="1" Fill="#D8D2BD" VerticalAlignment="bottom" />
                            <DockPanel LastChildFill="false">
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonBackButtonDownlevelStyle}" DockPanel.Dock="left" Width="40" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoBack}" />
                            <Button Style="{DynamicResource PFThemeNavigationWindowNavigationButtonForwardButtonDownlevelStyle}" DockPanel.Dock="left" Width="40" Button.IsEnabled="{TemplateBinding NavigationWindow.CanGoForward}" />
                             </DockPanel>
                        </Grid>
                    </Border>
                    <Border>
                        <AdornerDecorator>
                            <ContentPresenter Content="{TemplateBinding Window.Content}" ClipToBounds="true" />
                        </AdornerDecorator>
                    </Border>
                  </DockPanel>
            </Border>
         </ControlTemplate>
         </Setter.Value>
         </Setter>
     </Style>

    <!--
        *****************************************
        * Document Template
        *****************************************
    -->

    <DataTemplate DataType="{x:Type Document}">
        <DocumentViewer Content="{Binding}" />
    </DataTemplate>

   <!--
            **********************************************************
            * DocumentViewer Style                                       *
            **********************************************************
    -->

    <!-- Localizable Strings -->
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipMenu">Menu</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipZoomOut">
        Decrease the size of the content (-)
    </String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipZoom">
        Select a zoom percentage, a predefined zoom setting or type a zoom percent
    </String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipZoomIn">
        Increase the size of the content (+)
    </String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipFind">Find (Ctrl+F)</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipCopy">Copy (Ctrl+C)</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerToolTipPrint">Print (Ctrl+P)</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom400Percent">400%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom250Percent">250%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom150Percent">150%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom100Percent">100%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom75Percent">75%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom50Percent">50%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoom25Percent">25%</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomPageWidth">Page Width</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomWholePage">Whole Page</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomTwoPages">Two Pages</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerZoomThumbnails">Thumbnails</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuCopy">Copy</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuFind">Find</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuPrint">Print</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuZoomIn">Zoom In</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuZoomOut">Zoom Out</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuShowToolbar">Show Toolbar</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuHideToolbar">Hide Toolbar</String>
    <String xmlns="System" x:Key="PFThemeDocumentViewerMenuShowHideToolbar">Show/Hide Toolbar</String>

    <!-- DocumentLayout Style and Collection for the Zoom ComboBox -->
    <DataTemplate x:Key="PFThemeDocumentViewerDocumentLayoutTemplate" DataType="{x:Type DocumentLayout}">
            <TextBlock Text="{Binding Path=Text}" />
    </DataTemplate>

    <!-- Default Style used for most of our toolbar buttons -->
    <DataTemplate x:Key="PFThemeDocumentViewerMenuButtonTemplate">
            <ContentPresenter Content="{DynamicResource PFThemeDocumentViewerMenuButton}" />
    </DataTemplate>

    <!-- Style for the Immersive Menu button -->
    <DataTemplate x:Key="PFThemeDocumentViewerMenuButtonImmersiveTemplate">
        <ContentPresenter Content="{DynamicResource PFThemeDocumentViewerMenuButtonImmersive}" />

    <!-- DataTemplate does not support triggers that target the templated element.  Review with NamitaG.
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Set PropertyPath="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="false">
                <Set PropertyPath="Opacity" Value="0.5" />
            </Trigger>
        </DataTemplate.Triggers>
    -->

    </DataTemplate>

    <!-- Contents of the Menu button -->
    <Canvas x:Key="PFThemeDocumentViewerMenuButton" Width="16px" Height="24px">
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="1" Y="1" Width="14" Height="14" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="Black" StrokeThickness="2" Data="M 3,5 L 13,5 M 3,8 L 13,8 M 3,11 L 13,11" />
    </Canvas>


    <!-- Contents of the Immersive Menu button -->
    <Canvas Width="16px" Height="24px" x:Key="PFThemeDocumentViewerMenuButtonImmersive">
        <Path Stroke="White" StrokeThickness="2">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="1" Y="1" Width="14" Height="14" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="White" StrokeThickness="2" Data="M 3,5 L 13,5 M 3,8 L 13,8 M 3,11 L 13,11" />
    </Canvas>

    <!-- Contents of the Copy button -->
    <Canvas x:Key="PFThemeDocumentViewerCopyButton" Width="16px" Height="16px">
    <Path Stroke="Black" StrokeThickness="2">
        <Path.Data>
            <RectangleGeometry>
                <RectangleGeometry.Rect>
                    <Rect X="7" Y="4" Width="8" Height="11" />
                </RectangleGeometry.Rect>
            </RectangleGeometry>
        </Path.Data>
    </Path>
    <Path Stroke="Black" StrokeThickness="2" Data="M 8,12 L 1,12 L 1,1 L 9,1 L 9,4" />
    </Canvas>

    <!-- Contents of the Print button -->
    <Canvas x:Key="PFThemeDocumentViewerPrintButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="3">
            <Path.Data>
                <RectangleGeometry>
                    <RectangleGeometry.Rect>
                        <Rect X="2" Y="9" Width="12" Height="5" />
                    </RectangleGeometry.Rect>
                </RectangleGeometry>
            </Path.Data>
        </Path>
        <Path Stroke="Black" StrokeThickness="1" Data="M 1,1 L 3,8 M 10,1 L 12,8 M 0,1 L 10,1" />
    </Canvas>

    <!-- Contents of the Zoom In button -->
    <Canvas x:Key="PFThemeDocumentViewerZoomInButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="3" Data="M 6,12 L 2,16" />
        <Path Stroke="Black" StrokeThickness="2" Data="M 6,8 L 14,8 M 10,4 L 10,12" />
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <EllipseGeometry Center="10,8" RadiusX="6" RadiusY="6" />
            </Path.Data>
        </Path>
    </Canvas>

    <!-- Contents of the Zoom Out button -->
    <Canvas x:Key="PFThemeDocumentViewerZoomOutButton" Width="16px" Height="16px">
        <Path Stroke="Black" StrokeThickness="3" Data="M 6,12 L 2,16" />
        <Path Stroke="Black" StrokeThickness="2" Data="M 7,8 L 13,8" />
        <Path Stroke="Black" StrokeThickness="2">
            <Path.Data>
                <EllipseGeometry Center="10,8" RadiusX="6" RadiusY="6" />
            </Path.Data>
        </Path>
    </Canvas>

    <!-- List of options to display in Zoom Combo Box. -->
    <C:ArrayList xmlns:C="Collections" xmlns:D="Documents" x:Key="PFThemeDocumentViewerComboList">
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="100.0" Text="{StaticResource PFThemeDocumentViewerZoom100Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="400.0" Text="{StaticResource PFThemeDocumentViewerZoom400Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="250.0" Text="{StaticResource PFThemeDocumentViewerZoom250Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="150.0" Text="{StaticResource PFThemeDocumentViewerZoom150Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="75.0" Text="{StaticResource PFThemeDocumentViewerZoom75Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="50.0" Text="{StaticResource PFThemeDocumentViewerZoom50Percent}" />
        <D:DocumentLayout DocumentLayoutType="Zoom" Value="25.0" Text="{StaticResource PFThemeDocumentViewerZoom25Percent}" />
        <D:DocumentLayout DocumentLayoutType="FitToWidth" Text="{StaticResource PFThemeDocumentViewerZoomPageWidth}" />
        <D:DocumentLayout DocumentLayoutType="GridColumnCount" Value="1.0" Text="{StaticResource PFThemeDocumentViewerZoomWholePage}" />
        <D:DocumentLayout DocumentLayoutType="GridColumnCount" Value="2.0" Text="{StaticResource PFThemeDocumentViewerZoomTwoPages}" />
        <D:DocumentLayout DocumentLayoutType="ThumbnailView" Text="{StaticResource PFThemeDocumentViewerZoomThumbnails}" />
    </C:ArrayList>

    <ContextMenu x:Key="PFThemeDocumentViewerContextMenu">
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuCopy}" Command="ApplicationCommands.Copy" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuPrint}" Command="ApplicationCommands.Print" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomIn}" Command="DocumentViewer.IncreaseZoom" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomOut}" Command="DocumentViewer.DecreaseZoom" />
        <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuShowHideToolbar}" Command="DocumentViewer.ToggleToolBar" />
    </ContextMenu>

    <!-- Reference to the ZoomPercentageConverter -->
    <ValueConverterSource x:Key="PFThemeDocumentViewerZoomPercentageConverter" TypeName="System.Windows.Documents.ZoomPercentageConverter" />

    <!-- DocumentViewer Style -->
    <Style x:Key="{x:Type DocumentViewer}" BasedOn="{x:Null}" TargetType="{x:Type DocumentViewer}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type DocumentViewer}">
            <Grid Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />    <!-- One column for both the toolbar and the content -->
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />    <!-- Top row, auto height for the Toolbar -->
                <RowDefinition Height="*" />      <!-- Bottom row, full height for the Content area -->
                </Grid.RowDefinitions>

                <!-- DocumentViewer's ToolBar, docked to the Top -->
                <Border Grid.Row="0" Grid.Column="0" Background="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" Visibility="Visible" BorderThickness="1" x:Name="Toolbar" Name="Toolbar">
                    <StackPanel Orientation="Horizontal">
                        <!-- Menu Button -->
                        <Menu VerticalAlignment="Center" Background="Transparent">
                            <MenuItem Height="20px" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" Background="Transparent" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipMenu}" x:Name="ToolMenu" Name="ToolMenu" TabIndex="1" HeaderTemplate="{DynamicResource PFThemeDocumentViewerMenuButtonTemplate}">
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuCopy}" Command="ApplicationCommands.Copy" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuPrint}" Command="ApplicationCommands.Print" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomIn}" Command="DocumentViewer.IncreaseZoom" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomOut}" Command="DocumentViewer.DecreaseZoom" />
                                    <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuHideToolbar}" Command="DocumentViewer.ToggleToolBar" />
                            </MenuItem>
                        </Menu>
                        <!-- Zoom Controls -->
                        <Button Content="{DynamicResource PFThemeDocumentViewerZoomOutButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipZoomOut}" Command="DocumentViewer.DecreaseZoom" Name="ZoomOutButton" x:Name="ZoomOutButton" TabIndex="2" />
                        <ComboBox Width="90px" Height="24px" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipZoom}" IsReadOnly="False" IsEditable="True" SelectedItem="{Binding Path=DocumentLayout,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" ItemTemplate="{DynamicResource PFThemeDocumentViewerDocumentLayoutTemplate}" Name="ZoomComboBox" x:Name="ZoomComboBox" TabIndex="3" ItemsSource="{DynamicResource PFThemeDocumentViewerComboList}" Style="{DynamicResource PFThemeDocumentViewerComboBoxStyle}" />
                        <Button Content="{DynamicResource PFThemeDocumentViewerZoomInButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipZoomIn}" Command="DocumentViewer.IncreaseZoom" Name="ZoomInButton" x:Name="ZoomInButton" TabIndex="4" />
                        <!-- Copy -->
                        <Button Content="{DynamicResource PFThemeDocumentViewerCopyButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipCopy}" Command="ApplicationCommands.Copy" Name="CopyButton" x:Name="CopyButton" TabIndex="6" />
                        <!-- Print -->
                        <Button Content="{DynamicResource PFThemeDocumentViewerPrintButton}" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" VerticalAlignment="Center" ToolTip="{DynamicResource PFThemeDocumentViewerToolTipPrint}" Command="ApplicationCommands.Print" Name="PrintButton" x:Name="PrintButton" TabIndex="7" />
                    </StackPanel>
                </Border>
                <!-- Define the Content area and its paging/scrolling controls inside the Grid -->
                <ScrollViewer Grid.Row="1" Grid.Column="0" HorizontalScrollBarVisibility="Auto" x:Name="PART_ContentHost" Focusable="True" ContextMenu="{DynamicResource PFThemeDocumentViewerContextMenu}" />
                <!-- Immersive Menu Button -->
                <Menu Grid.Row="1" Grid.Column="0" x:Name="FloatingMenuButton" Background="Transparent" BorderThickness="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                    <MenuItem Height="24px" Width="24px" Padding="2,2,2,2" Margin="2,2,2,2" BorderThickness="0" Background="Transparent" Name="ImmersiveToolMenu" x:Name="ImmersiveToolMenu" Focusable="False" HeaderTemplate="{DynamicResource PFThemeDocumentViewerMenuButtonImmersiveTemplate}">
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuCopy}" Command="ApplicationCommands.Copy" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuPrint}" Command="ApplicationCommands.Print" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomIn}" Command="DocumentViewer.IncreaseZoom" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuZoomOut}" Command="DocumentViewer.DecreaseZoom" />
                            <MenuItem Header="{DynamicResource PFThemeDocumentViewerMenuShowToolbar}" Command="DocumentViewer.ToggleToolBar" />
                    </MenuItem>
                </Menu>
            </Grid>
        <ControlTemplate.Triggers>

        <!-- Maximize the Toolbar -->
        <Trigger Property="IsToolBarMaximized" Value="true">
        <Setter TargetName="Toolbar" Property="Visibility" Value="Visible" />
        <Setter TargetName="FloatingMenuButton" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="Toolbar" Property="Focusable" Value="True" />
        <Setter TargetName="ToolMenu" Property="IsKeyboardFocused" Value="True" />
        </Trigger>
        <!-- Minimize the Toolbar -->
        <Trigger Property="IsToolBarMaximized" Value="false">
        <Setter TargetName="Toolbar" Property="Visibility" Value="Collapsed" />
        <Setter TargetName="FloatingMenuButton" Property="Visibility" Value="Visible" />
        <Setter TargetName="ImmersiveToolMenu" Property="Focusable" Value="True" />
        <Setter TargetName="Toolbar" Property="Focusable" Value="False" />
        <Setter TargetName="ImmersiveToolMenu" Property="IsKeyboardFocused" Value="True" />
        </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>


    <!--
         ****************************************
         * Expander Style                       *
         ****************************************
    -->
    <Style x:Key="PFThemeExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                <Border DockPanel.Dock="Left" VerticalAlignment="Center" Margin="5 0 5 0" Focusable="false">
                    <ContentPresenter />
                </Border>
                <DockPanel DockPanel.Dock="Right" VerticalAlignment="Center" Margin="1 1 3 1" Width="18" Height="17">
                    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" />

                    <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" />

                    <Canvas Width="16" Height="15">
                        <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 4,3 L 7,6 L 10,3 M 4,7 L 7,10 L 10,7" />
                    </Canvas>
                </DockPanel>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Data" Value="M 4,6 L 7,3 L 10,6 M 4,10 L 7,7 L 10 10" TargetName="arrow" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T1" />

                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T2" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PFThemeExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                <Border DockPanel.Dock="Left" VerticalAlignment="Center" Margin="5 0 5 0" Focusable="false">
                    <ContentPresenter />
                </Border>
                <DockPanel DockPanel.Dock="Right" VerticalAlignment="Center" Margin="1 1 3 1" Width="18" Height="17">
                    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" />

                    <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" />

                    <Canvas Width="16" Height="15">
                        <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 4,6 L 7,3 L 10,6 M 4,10 L 7,7 L 10 10" />
                    </Canvas>
                </DockPanel>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Data" Value="M 4,3 L 7,6 L 10,3 M 4,7 L 7,10 L 10,7" TargetName="arrow" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T1" />

                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T2" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PFThemeExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                <Border DockPanel.Dock="Top" HorizontalAlignment="Center" Margin="0 5 0 5" Focusable="false">
                    <ContentPresenter />
                </Border>
                <DockPanel DockPanel.Dock="Bottom" HorizontalAlignment="Center" Margin="1 1 1 3" Width="17" Height="18">
                    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" />

                    <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" />

                    <Canvas Width="15" Height="16">
                        <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 6,4 L 3,7 L 6,10 M 10,4 L 7,7 L 10,10" />
                    </Canvas>
                </DockPanel>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Data" Value="M 3,4 L 6,7 L 3,10 M 7,4 L 10,7 L 7,10" TargetName="arrow" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T1" />

                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T2" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PFThemeExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
            <DockPanel LastChildFill="false" Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">
                <Border DockPanel.Dock="Bottom" HorizontalAlignment="Center" Margin="0 5 0 5" Focusable="false">
                    <ContentPresenter />
                </Border>
                <DockPanel DockPanel.Dock="Top" HorizontalAlignment="Center" Margin="1 3 1 1" Width="17" Height="18">
                    <Rectangle DockPanel.Dock="Right" x:Name="R1" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B1" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L1" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T1" Height="1" />

                    <Rectangle DockPanel.Dock="Right" x:Name="R2" Width="1" />
                    <Rectangle DockPanel.Dock="Bottom" x:Name="B2" Height="1" />
                    <Rectangle DockPanel.Dock="Left" x:Name="L2" Width="1" />
                    <Rectangle DockPanel.Dock="Top" x:Name="T2" Height="1" />

                    <Canvas Width="15" Height="16">
                        <Path x:Name="arrow" Stroke="{TemplateBinding Foreground}" StrokeThickness="1" Data="M 3,4 L 6,7 L 3,10 M 7,4 L 10,7 L 7,10" />
                    </Canvas>
                </DockPanel>
            </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Data" Value="M 6,4 L 3,7 L 6,10 M 10,4 L 7,7 L 10,10" TargetName="arrow" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="R1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" TargetName="B1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="L1" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" TargetName="T1" />

                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="R2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" TargetName="B2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="L2" />
                <Setter Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlLightBrushKey}}" TargetName="T2" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type Expander}" TargetType="{x:Type Expander}">
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamily}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Padding" Value="12,2,12,2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
            <Border BorderBrush="{TemplateBinding Background}" BorderThickness="1" ClipToBounds="{TemplateBinding ClipToBounds}">
                <DockPanel>
                    <ToggleButton x:Name="HeaderSite" DockPanel.Dock="Top" Style="{DynamicResource PFThemeExpanderDownHeaderStyle}" IsChecked="{Binding Path=IsExpanded,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Background="{TemplateBinding Background}" />
                    <ContentPresenter x:Name="ExpandSite" Visibility="Collapsed" />
                </DockPanel>
            </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
                <Setter Property="DockPanel.Dock" Value="Left" TargetName="HeaderSite" />
                <Setter Property="Style" Value="{DynamicResource PFThemeExpanderRightHeaderStyle}" TargetName="HeaderSite" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="HeaderSite" />
                <Setter Property="Style" Value="{DynamicResource PFThemeExpanderUpHeaderStyle}" TargetName="HeaderSite" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
                <Setter Property="DockPanel.Dock" Value="Right" TargetName="HeaderSite" />
                <Setter Property="Style" Value="{DynamicResource PFThemeExpanderLeftHeaderStyle}" TargetName="HeaderSite" />
            </Trigger>
        </ControlTemplate.Triggers>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <!--
         ****************************************
         * StatusBar Style                      *
         ****************************************
    -->

    <Style x:Key="{x:Type StatusBar}" TargetType="{x:Type StatusBar}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate><DockPanel /></ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MessageFontFamilyKey}}" />
        <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MessageFontSizeKey}}" />
        <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MessageFontStyleKey}}" />
        <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MessageFontWeightKey}}" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type StatusBar}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                <ItemsPresenter />
            </Border>
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type StatusBarItem}" TargetType="{x:Type StatusBarItem}">
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
        <Setter.Value>
        <ControlTemplate TargetType="{x:Type StatusBarItem}">
            <ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="Center" />
        </ControlTemplate>
        </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
