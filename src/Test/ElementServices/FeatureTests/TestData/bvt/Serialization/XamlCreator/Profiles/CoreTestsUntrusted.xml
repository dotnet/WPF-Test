<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreTestsUntrusted</name>
    </assembly>
    <members>
        <member name="T:Avalon.Test.CoreUI.Events.CustomFrameworkElement">
            <summary>
                The base object for the Frameworks
            </summary>
            <remarks>
                CustomFrameworkElement is the interface between higher-level Framework
                classes and PresentationCore services
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomFrameworkElement.#ctor">
            <summary>
                Default DependencyObject constructor
            </summary>
            <remarks>
                Automatic determination of current UIContext. Use alternative constructor
                that accepts a UIContext for best performance.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomFrameworkElement.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                DependencyObject construction
            </summary>
            <remarks>
                Best performance constructor
            </remarks>
            <param name="context">UIContext to place this instance within</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomFrameworkElement.MSAvalon#Windows#ILogicalTreeNode#OnParentChanged">
            <summary>
                
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomFrameworkElement.MSAvalon#Windows#ILogicalTreeNode#OnNewParent(MSAvalon.Windows.ILogicalTreeNode)">
            <summary>
                Invoked when logical parent is changed
            </summary>
            <param name="newParent">
                New parent that was set
            </param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomFrameworkElement.GetUIParentCore">
            <summary>
                Called to get the UI parent of this element when there is
                no visual parent.
            </summary>
            <returns>
                Returns a non-null value when some framework implementation
                of this method has a non-visual parent connection,
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomFrameworkElement.BuildRouteCore(MSAvalon.Windows.EventRoute,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
                Allows CustomFrameworkElement to augment the 
                <see cref="T:MSAvalon.Windows.EventRoute"/>
            </summary>
            <remarks>
                NOTE: If this instance does not have a 
                visualParent but has a model parent 
                then route is built through the model 
                parent
            </remarks>
            <param name="route">
                The <see cref="T:MSAvalon.Windows.EventRoute"/> to be
                augmented
            </param>
            <param name="args">
                <see cref="T:MSAvalon.Windows.RoutedEventArgs"/> for the
                RoutedEvent to be raised post building 
                the route
            </param>
            <returns>
                Returns a non-null value when a model parent 
                is required to be added to the route in the 
                absence of a visual parent
            </returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CustomFrameworkElement.MSAvalon#Windows#ILogicalTreeNode#Parent">
            <summary> 
                Returns logical parent
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CustomFrameworkElement.MSAvalon#Windows#ILogicalTreeNode#Children">
            <summary> 
                Returns enumerator to logical children
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomContentElement">
            <summary>
                CustomContentElement class is a subclass of FrameworkContentElement
            </summary>
            <ExternalAPI/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomContentElement.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomContentElement
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomContentElement.AppendModelChild(MSAvalon.Windows.ILogicalTreeNode)">
            <summary>
                Appends model child
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomContentHost">
            <summary>
                CustomContentHost class is a subclass of FrameworkElement
            </summary>
            <ExternalAPI/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomContentHost.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomContentHost
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomContentHost.AppendModelChild(MSAvalon.Windows.ILogicalTreeNode)">
            <summary>
                Appends model child
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomContentHost.AppendChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Appends a child.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomContentHost.MSAvalon#Windows#IContentHost#InputHitTest(MSAvalon.Windows.Point)">
            <summary>
                Hit tests to the correct ContentElement 
                within the ContentHost that the mouse 
                is over
            </summary>
            <param name="p">
                Mouse coordinates relative to 
                the ContentHost
            </param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomControl">
            <summary>
                CustomControl class is a subclass of FrameworkElement
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControl.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomControl
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControl.AppendModelChild(MSAvalon.Windows.ILogicalTreeNode)">
            <summary>
                Appends model child
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControl.AppendChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Appends a child.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControl.RemoveChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Remove a child.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomAvalonContentHost">
            <summary>
                CustomAvalonContentHost class is a subclass of FrameworkElement
            </summary>
            <ExternalAPI/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonContentHost.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomAvalonContentHost
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonContentHost.AppendModelChild(MSAvalon.Windows.ILogicalTreeNode)">
            <summary>
                Appends model child
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonContentHost.AppendChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Appends a child.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonContentHost.MSAvalon#Windows#IContentHost#InputHitTest(MSAvalon.Windows.Point)">
            <summary>
                Hit tests to the correct ContentElement 
                within the ContentHost that the mouse 
                is over
            </summary>
            <param name="p">
                Mouse coordinates relative to 
                the ContentHost
            </param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomAvalonControl">
            <summary>
                CustomAvalonControl class is a subclass of FrameworkElement
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonControl.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomAvalonControl
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonControl.AppendModelChild(MSAvalon.Windows.ILogicalTreeNode)">
            <summary>
                Appends model child
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomAvalonControl.AppendChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Appends a child.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomUIElement">
            <summary>
                CustomUIElement class is a subclass of UIElement with functions to append and remove Visual children 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomUIElement.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomControl
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomUIElement.AppendChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Appends a child.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomUIElement.RemoveChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Remove a child.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventHelper">
            <summary>
            Helper class for Event cases 
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  EventHelper.cs
            <para/>
            <ol>Scenarios covered:
            <li>Register two events: RoutedEventID1 and  PreviewRoutedEventID1</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="T:Avalon.Test.CoreUI.TestCase">
            <summary>
            This is the abstract base class for Threading and Eventing test cases.
            </summary>
            <remarks>
            This class provide a several ways to create test cases on a Common way
            <para/>
                
            /////TODO: Add more details about the reason
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.#cctor">
            <summary>
            Static constructor that creates the Array of Contexts and Dispatchers
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.#ctor(Avalon.Test.CoreUI.TestCaseType)">
            <summary>
            Constructor Class
            </summary>
            <remarks>
            This class provide a several ways to create test cases on a Common way
                <para/>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.Helper(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="message"></param>
            <param name="firstParam"></param>
            <param name="secondParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase.Source">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.ValidateThreadInContext(MSAvalon.Threading.UIContext)">
            <summary>
            TODO:
            </summary>
            <param name="Context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase._ExitDispatcherASync(System.Object)">
            <summary>
            TODO:
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.ExitDispatcherASync(System.Object)">
            <summary>
            TODO:
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.ValidateThreadOutContext(MSAvalon.Threading.UIContext)">
            <summary>
            Run all the OwnerShip 
            </summary>
            <param name="Context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.Dispose">
            <summary>
                Free all resources on the test case so there may not be leak problems
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                Abstract method
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.TestCase.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Entry point method for the test case
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase.MainContext">
            <summary>
                This static field is support when the test cases is type ContextSupport
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase.ContextList">
            <summary>
                Contains
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase.DispatcherList">
            <summary>
            TODO:
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase.ExceptionList">
            <summary>
            TODO:
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase.Framework">
            <summary>
            TODO:
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase._testType">
            <summary>
            Holds the reference for the type of the test case
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCase._disposed">
            <summary>
            Holds the reference if the the test case is disposed
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.TestCase.OnDestroyMainWindowEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.TestCase.TestType">
            <summary>
                Return the type of the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventHelper.#cctor">
            <summary>
            Static Constructor. Registers two events (RoutedEventID1 and PreviewRoutedEventID1)
            </summary>    
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventHelper.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventHelper.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Make Entry Point Connnection for the test case
            </summary>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventHelper.VerifyRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Verifies the sender argument and RoutedEventArgs.Source passed
            to a handler.
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventHelper.VerifyRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs,System.Int32)">
            <summary>
            Verifies the order of the called handler, as well as the sender argument 
            and RoutedEventArgs.Source passed to it.
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
            <param name="handlerCount"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs">
            <summary>
                CustomRoutedEventArgs
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
            <summary>
                Invokes the event handler with the
                appropriate arguments
            <param name="genericHandler">
                Generic Handler to be invoked
            </param>
            <param name="genericTarget">
                Target on whom the Handler will be invoked
            </param>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs.#ctor(MSAvalon.Windows.RoutedEventID,System.Object[],System.Object)">
            <summary>
                Constructor for CustomRoutedEventArgs
            </summary>
            <param name="routedEventID"></param>
            <param name="senders">An ordered array of controls that will be in the route.</param>
            <param name="intendedSource"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs.#ctor(MSAvalon.Windows.RoutedEventID,System.Object[],System.Object,System.Boolean)">
            <summary>
                Constructor for CustomRoutedEventArgs
            </summary>
            <param name="routedEventID"></param>
            <param name="senders"></param>
            <param name="intendedSource"></param>
            <param name="handled"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs.HandlersCalledCount">
            <summary>
                Getter and Setter for NumEventsFired
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs.Senders">
            <summary>
                Each item in this array represents a sender that is
                sent automatically to a handler.
            </summary>
            <remarks>
                The sender argument in a handler is the element on which
                the handler was added, not the elements on which
                the event was raised.
            </remarks>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CustomRoutedEventArgs.IntendedSource">
            <summary>
                Returns Intended Source
            </summary>
            <remarks>
                The Source property on RoutedEventArgs is the element
                on which the event was raised, not necessarily the
                element on which the handler was added.
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomRoutedEventHandler">
            <summary>
                CustomRoutedEventHandler Definition
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachTwoEventsToAControl">
            <summary>
            Tests Attaching Bubble and Tunnel Events to a CustomControl
            <para/>
            This is a BVT scenario for attaching bubble and tunnel event to a CustomControl and make sure events fire in order.
            </summary>
            <remarks>
            <para/>
            Area: Events\AttachEvents
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachTwoEventsToAControl.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble and tunnel event</li>
            <li>Add event handlers for bubble and tunnel event</li>
            <li>Raise the bubble and tunnel event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoEventsToAControl.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoEventsToAControl.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent1 method
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoEventsToAControl.OnPreviewRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnPreviewRoutedEvent1 method
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachBubblingEventHandler">
            <summary>
            Tests Attaching Bubble EventHandler to CustomControls
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control2 visual parent of control3. CC1-&gt;CC2-&gt;CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\AttachBubblingEventHandler
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachBubblingEventHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandler.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandler.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandler.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandler">
            <summary>
            Tests Remove Bubble EventHandler from CustomControls
            <para/>
            This is a BVT scenario for removing bubble event from a simple tree with control1 visual parent of control2 visual parent of control3. CC1-&gt;CC2-&gt;CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\RemoveBubblingEventHandler
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  RemoveBubblingEventHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            <li>Remove event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandler.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandler.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandler.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachTwoBubblingEventHandlersToAControl">
            <summary>
            Tests Attaching Two Bubble EventHandlers to a CustomControl
            <para/>
            This is a BVT scenario for attaching two bubble eventhandlers to a customcontrol.
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachTwoBubblingEventHandlersToAControl.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event: BuildRoute and InvokeHandlers</li>
            <li>Raise the bubble event: Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoBubblingEventHandlersToAControl.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoBubblingEventHandlersToAControl.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent1 method: Event fire first.
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoBubblingEventHandlersToAControl.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent2 method: Event fire second
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachBubblingEventHandlersToTwoControls">
            <summary>
            Tests Attaching Bubble EventHandlers to two CustomControls and make sure events fire in order
            <para/>
            This is a BVT scenario for a simple tree with control1 visual parent of controls2. CC2-&gt;CC1: CC1 has E1 and E2, CC2 has E3
            BuildRoute: E3-&gt;E1-&gt;E2
            Bubbling event fire order should be E3, E1, E2
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachBubblingEventHandlersToTwoControls.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event: BuildRoute and InvokeHandlers</li>
            <li>Raise the bubble event: Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandlersToTwoControls.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandlersToTwoControls.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent1 method: Event fire second.
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandlersToTwoControls.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent2 method: Event fire last
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachBubblingEventHandlersToTwoControls.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent2 method: Event fire first
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingBuildRouteInvokeHandlers">
            <summary>
            Tests calling BuildRoute and InvokeHandlers directly.
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control2 visual parent of control3. CC3-&gt;CC2-&gt;CC1
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            Dev: varsham
            <para/>
            <para/>
            FileName:  BubblingBuildRouteInvokeHandlers.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble events by calling BuildRoute and InvokeHandlers directly</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingBuildRouteInvokeHandlers.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingBuildRouteInvokeHandlers.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingBuildRouteInvokeHandlers.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingBuildRouteInvokeHandlers.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRouteAdd">
            <summary>
            Tests calling EventRoute Add directly
            <para/>
            This is a BVT scenario for attaching a bubble event to a simple customcontrol
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRouteAdd.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handler for bubble event</li>
            <li>Raise the bubble event by calling EventRoute Add and InvokeHandlers</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRouteAdd.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRouteAdd.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig41">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomControl, CustomControl, CustomControl
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control2 model parent of control3. 
            star=visual
            line=model
            CC1 ** CC2 -- CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkFig41.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig41.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig41.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig41.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig41.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig42">
            <summary>
            Tests Attaching Bubble EventHandler to CustomControl
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 model parent of control3, and control1 visual parent of control2 visual parent of control3. 
            star=visual
            line=model
            CH1----CC3
             *     *
              *   *
               CE2
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkFig42.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig42.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig42.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig42.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig42.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig43">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomContentHost, CustomContentElement, CustomControl
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with contentHost1 visual parent of control3, and contentHost1 model parent of contentElement2 model parent of control3. 
            star=visual
            line=model
            CH1****CC3
             \     /
              \   /
               CE2
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkFig43.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig43.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig43.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig43.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig43.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig44">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomContentHost, CustomContentElement, CustomControl, CustomControl
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with contentHost1 visual parent of control4 visual parent of control3, 
            and contentHost1 model parent of contentElement2 model parent of control3. 
            star=visual
            line=model
               CH1
              *   \
             *     \
            CC4   CE2
             *     /
              *   /
               CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkFig44.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig44.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig44.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig44.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig44.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig44.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig45">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomControl, CustomControl, CustomControl, CustomControl
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control4 visual parent of control3, 
            and control1 model parent of control2 model parent of control3. 
            star=visual
            line=model
             CC1
             |  *
             |   *
             |   CC2
             |   * |
             |   * |
             |   CC3
             |   *
             |  *
             CC4
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkFig45.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig45.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig45.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig45.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig45.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkFig45.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig41">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomAvalonControl, CustomAvalonControl, CustomAvalonControl to test FrameworkElement
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control2 model parent of control3. 
            star=visual
            line=model
            CC1 ** CC2 -- CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig41.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig41.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig41.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig41.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig41.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig42">
            <summary>
            Tests Attaching Bubble EventHandler to CustomAvalonControl to test FrameworkElement
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 model parent of control3, and control1 visual parent of control2 visual parent of control3. 
            star=visual
            line=model
            CH1----CC3
             *     *
              *   *
               CE2
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig42.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig42.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig42.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig42.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig42.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig43">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomAvalonContentHost, CustomContentElement, CustomAvalonControl to test FrameworkElement
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with contentHost1 visual parent of control3, and contentHost1 model parent of contentElement2 model parent of control3. 
            star=visual
            line=model
            CH1****CC3
             \     /
              \   /
               CE2
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig43.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig43.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig43.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig43.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig43.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig44">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomAvalonContentHost, CustomContentElement, CustomAvalonControl, CustomAvalonControl
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with contentHost1 visual parent of control4 visual parent of control3, 
            and contentHost1 model parent of contentElement2 model parent of control3. 
            star=visual
            line=model
               CH1
              *   \
             *     \
            CC4   CE2
             *     /
              *   /
               CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig44.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig44.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig44.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig44.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig44.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig44.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig45">
            <summary>
            Tests Attaching Bubble EventHandlers to CustomAvalonControl, CustomAvalonControl, CustomAvalonControl, CustomAvalonControl to test FrameworkElement
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control4 visual parent of control3, 
            and control1 model parent of control2 model parent of control3. 
            star=visual
            line=model
             CC1
             |  *
             |   *
             |   CC2
             |   * |
             |   * |
             |   CC3
             |   *
             |  *
             CC4
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig45.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig45.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig45.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig45.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig45.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig45.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig46">
            <summary>
            Tests Attaching Bubble EventHandler to Configuration Fig 46 to test Bubbling
            <para/>
            This is a BVT scenario for attaching bubble event to the follow tree
            star=visual
            line=model
            cc1   cc2
             \     *
              \   *
               cc3
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig46.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig46.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig46.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig46.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig46.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig47">
            <summary>
            Tests Attaching Bubble EventHandler to Configuration Fig 47 to test Bubbling
            <para/>
            This is a BVT scenario for attaching bubble event to the follow tree
            star=visual
            line=model
            cc1   Cc2
             \     *
              \   *
               cc3
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig47.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig47.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig47.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig47.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig47.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48">
            <summary>
            Tests Attaching Bubble EventHandler to Configuration Fig 47 to test Bubbling
            <para/>
            This is a BVT scenario for attaching bubble event to the follow tree
            star=visual
            line=model
            cc1   
             |*
             | ch2
             |  *  \
             | cc3  ce4
             |   *  /
             |   cc5
             | *
            cc6
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig48.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig48.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49">
             <summary>
             Tests Attaching Bubble EventHandler to Configuration Fig 49 to test bubbling
             <para/>
             This is a BVT scenario for attaching Bubble event to the follow tree
             star=visual
             line=model
               
              
                 ch1
                 *  \
                *    \
               cc2  ce3
                *    /
                 *  /
                 cc4
                 * |
                 * |
                 CH5
                *  \
               *    \
              cc6  ce7
               *    /
                *  /
                cc8
            
             </summary>
             <remarks>
             <para/>
             Area: Events\Bubble
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubblingEventRoutingFrameworkAvalonFig49.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create objects for the configuration</li>
             <li>Build the route</li>
             <li>Add event handlers for bubble event</li>
             <li>Raise the Bubble event</li>
             <li>Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig49.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50">
             <summary>
             Tests Attaching Bubble EventHandler to Configuration Fig 50 to test bubbling
             <para/>
             This is a BVT scenario for attaching Bubble event to the follow tree
             star=visual
             line=model
               
              
                 ch1
                 *  \
                *    \
               cc2  ce3
                *    |
                *    |
                *    |
              cc4   ce5
                *    /
                 *  /
                 cc6
            
             </summary>
             <remarks>
             <para/>
             Area: Events\Bubble
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubblingEventRoutingFrameworkAvalonFig50.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create objects for the configuration</li>
             <li>Build the route</li>
             <li>Add event handlers for bubble event</li>
             <li>Raise the Bubble event</li>
             <li>Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRoutingFrameworkAvalonFig50.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.DeleteNodeWhileRaisingEvent">
            <summary>
            Tests Attaching Bubble EventHandler to Configuration Fig 47 to test Bubbling
            <para/>
            This is a BVT scenario for attaching bubble event to the follow tree
            star=visual
            line=model
            cc1   
             |*
             | ch2
             |  *  \
             | cc3  ce4
             |   *  /
             |   cc5
             | *
            cc6
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingEventRoutingFrameworkAvalonFig48.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.DeleteNodeWhileRaisingEvent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.DeleteNodeWhileRaisingEvent.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.DeleteNodeWhileRaisingEvent.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.DeleteNodeWhileRaisingEvent.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.DeleteNodeWhileRaisingEvent.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingSubclassClasshandlersSequence">
            <summary>
            Ensure the classhandlers of subclass are invoked before classhandlers of base class
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingSubclassClasshandlersSequence.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Bubble event</li>
            <li>Register 1 class handler for CustomControl1 and 1 class handler for CustomControl2, CustomControl2 inherit CustomControl1</li>
            <li>Create a new instance of CustomControl2</li>
            <li>Raise the Bubble event</li>
            <li>Ensure that Handler registered for CustomControl2 is invoked before Handler registered for CustomControl1. </li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingSubclassClasshandlersSequence.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingSubclassClasshandlersSequence.BaseHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingSubclassClasshandlersSequence.SubClassHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingEventRouting52">
             <summary>
             Verify the scenario a ContentHost has a visual child and a logical child. Raise event on logical child, visual child will not be affect. 
             <para/>
             This is a BVT scenario for BuildRouteCore
             star=visual
             line=model
                 ch1
                  |  *                       
                  |   cc2
                 ce3 
            
             </summary>
             <remarks>
             <para/>
             Area: Events\Bubble
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubblingEventRouting52.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
             <li>Attach 1 instance handler for each element</li>
             <li>Raise the Bubble event</li>
             <li>Ensure Handlers are called in the correct order, and cc2 didn't get involved</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRouting52.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRouting52.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRouting52.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingEventRouting52.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingAdjustSource">
            <summary>
            Testing the adjust for bubbling
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingAdjustSource.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Bubble event</li>
            <li>Create 3 instances of CustomControl</li>
            <li>Create 2 new instances of CustomControl1 which adjust source</li>
            <li> Contruct the true</li>
            <li>Raise the Bubble event and check the arg to make sure the source has been changed and the sequence is correct</li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSource.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSource.onEventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSource.onEventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSource.onEventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSource.onEventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSource.onEventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds">
            <summary>
            Testing the adjust for bubbling
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingAdjustSourceEnds.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Bubble event</li>
            <li>Create 3 instances of CustomControl</li>
            <li>Create 2 new instances of CustomControl1 which adjust source</li>
            <li> Contruct the tree and put customcontrol1 on the two ends</li>
            <li>Raise the Bubble event and check the arg to make sure the source has been changed and the sequence is correct</li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds.onEventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds.onEventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds.onEventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds.onEventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceEnds.onEventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement">
            <summary>
            Testing the adjust for bubbling
            </summary>
            <remarks>
            <para/>
            Area: Events\Bubble
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BubblingAdjustSourceUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Bubble event</li>
            <li>Create 3 instances of CustomUIElement</li>
            <li>Create 2 new instances of CustomUIElement1 which adjust source</li>
            <li> Contruct the true</li>
            <li>Raise the Bubble event and check the arg to make sure the source has been changed and the sequence is correct</li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement.onEventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement.onEventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement.onEventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement.onEventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubblingAdjustSourceUIElement.onEventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandler">
            <summary>
            Tests Attaching Tunnel EventHandler to CustomControls 
            <para/>
            This is a BVT scenario for attaching tunnel event to a simple tree with control1 visual parent of control2 visual parent of control3. CC1-&gt;CC2-&gt;CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\AttachTunnelingEventHandler
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachTunnelingEventHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandler.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RemoveTunnelingEventHandler">
            <summary>
            Tests Remove Tunnel EventHandler from CustomControls
            <para/>
            This is a BVT scenario for removing tunnel event from a simple tree with control1 visual parent of control2 visual parent of control3. CC1-&gt;CC2-&gt;CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\RemoveTunnelingEventHandler
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  RemoveTunnelingEventHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Remmove event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveTunnelingEventHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveTunnelingEventHandler.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachTwoTunnelingEventHandlersToAControl">
            <summary>
            Tests Attaching Two Tunnel EventHandlers to a CustomControl
            <para/>
            This is a BVT scenario for attaching two tunnel eventhandlers to a customcontrol.
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachTwoTunnelingEventHandlersToAControl.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event: BuildRoute and InvokeHandlers</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoTunnelingEventHandlersToAControl.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoTunnelingEventHandlersToAControl.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent1 method: Event fire second.
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTwoTunnelingEventHandlersToAControl.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent2 method: Event fire first
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandlersToTwoControls">
            <summary>
            Tests Attaching Tunnel EventHandlers to two CustomControls and make sure events fire in order
            <para/>
            This is a BVT scenario for a simple tree with control1 visual parent of controls2. CC2-&gt;CC1: CC1 has E1 and E2, CC2 has E3
            BuildRoute: E3-&gt;E1-&gt;E2
            Tunneling event fire order should be E2, E1, E3
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  AttachTunnelingEventHandlersToTwoControls.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event: BuildRoute and InvokeHandlers</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandlersToTwoControls.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandlersToTwoControls.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent1 method: Event fire second.
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandlersToTwoControls.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent2 method: Event fire first
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AttachTunnelingEventHandlersToTwoControls.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            OnRoutedEvent2 method: Event fire last
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingBuildRouteInvokeHandlers">
            <summary>
            Tests calling BuildRoute and InvokeHandlers directly.
            <para/>
            This is a BVT scenario for attaching bubble event to a simple tree with control1 visual parent of control2 visual parent of control3. CC3-&gt;CC2-&gt;CC1
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingBuildRouteInvokeHandlers.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble events by calling BuildRoute and InvokeHandlers directly</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingBuildRouteInvokeHandlers.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingBuildRouteInvokeHandlers.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingBuildRouteInvokeHandlers.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingBuildRouteInvokeHandlers.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRouteAdd">
            <summary>
            Tests calling EventRoute Add directly
            <para/>
            This is a BVT scenario for attaching a tunnel event to a simple customcontrol
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingEventRouteAdd.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handler for tunnel event</li>
            <li>Raise the tunnel event by calling EventRoute Add and InvokeHandlers</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRouteAdd.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRouteAdd.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig41">
            <summary>
            Tests Attaching Tunnel EventHandlers to CustomControl, CustomControl, CustomControl
            <para/>
            This is a BVT scenario for attaching tunnel event to a simple tree with control1 visual parent of control2 model parent of control3. 
            star=visual
            line=model
            CC1 ** CC2 -- CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig41.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig41.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig41.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig41.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig41.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig42">
            <summary>
            Tests Attaching Tunnel EventHandler to CustomControl
            <para/>
            This is a BVT scenario for attaching tunnel event to a simple tree with control1 model parent of control3, and control1 visual parent of control2 visual parent of control3. 
            star=visual
            line=model
            CH1----CC3
             *     *
              *   *
               CE2
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig42.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig42.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig42.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig42.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig42.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig43">
            <summary>
            Tests Attaching Tunnel EventHandlers to CustomContentHost, CustomContentElement, CustomControl
            <para/>
            This is a BVT scenario for attaching tunnel event to a simple tree with contentHost1 visual parent of control3, and contentHost1 model parent of contentElement2 model parent of control3. 
            star=visual
            line=model
            CH1****CC3
             \     /
              \   /
               CE2
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig43.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig43.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig43.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig43.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig43.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig44">
            <summary>
            Tests Attaching Tunnel EventHandlers to CustomContentHost, CustomContentElement, CustomControl, CustomControl
            <para/>
            This is a BVT scenario for attaching tunnel event to a simple tree with contentHost1 visual parent of control4 visual parent of control3, 
            and contentHost1 model parent of contentElement2 model parent of control3. 
            star=visual
            line=model
               CH1
              *   \
             *     \
            CC4   CE2
             *     /
              *   /
               CC3
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig44.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig44.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig44.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig44.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig44.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig44.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig45">
            <summary>
            Tests Attaching Tunnel EventHandlers to CustomControl, CustomControl, CustomControl, CustomControl
            <para/>
            This is a BVT scenario for attaching tunnel event to a simple tree with control1 visual parent of control4 visual parent of control3, 
            and control1 model parent of control2 model parent of control3. 
            star=visual
            line=model
             CC1
             |  *
             |   *
             |   CC2
             |   * |
             |   * |
             |   CC3
             |   *
             |  *
             CC4
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig45.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig45.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig45.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig45.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig45.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig45.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig46">
            <summary>
            Tests Attaching Tunnel EventHandler to Configuration Fig 46 to test Bubbling
            <para/>
            This is a BVT scenario for attaching tunnel event to the follow tree
            star=visual
            line=model
            cc1   cc2
             *     /
              *   /
               cc3
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig46.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Check that Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig46.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig46.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig46.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig46.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig47">
            <summary>
            Tests Attaching Tunnel EventHandler to Configuration Fig 47 to test Tunneling
            <para/>
            This is a BVT scenario for attaching tunnel event to the follow tree
            star=visual
            line=model
            cc1   Ce2
             *     /
              *   /
               cc3
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig47.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig47.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig47.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig47.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig47.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48">
            <summary>
            Tests Attaching Tunnel EventHandler to Configuration Fig 47 to test Tunneling
            <para/>
            This is a BVT scenario for attaching tunnel event to the follow tree
            star=visual
            line=model
            cc1   
             |*
             | ch2
             |  *  \
             | cc3  ce4
             |   *  /
             |   cc5
             | *
            cc6
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TunnelingEventRoutingFrameworkFig48.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for tunnel event</li>
            <li>Add event handlers for tunnel event</li>
            <li>Raise the tunnel event</li>
            <li>Check that Handlers are called in the correct order</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig48.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49">
             <summary>
             Tests Attaching Tunnel EventHandler to Configuration Fig 49 to test tunneling
             <para/>
             This is a BVT scenario for attaching Tunnel event to the follow tree
             star=visual
             line=model
               
              
                 ch1
                 *  \
                *    \
               cc2  ce3
                *    /
                 *  /
                 cc4
                 * |
                 * |
                 CH5
                *  \
               *    \
              cc6  ce7
               *    /
                *  /
                cc8
            
             </summary>
             <remarks>
             <para/>
             Area: Events\Tunnel
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  TunnelingEventRoutingFrameworkFig49.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Create objects for the configuration</li>
             <li>Build the route</li>
             <li>Add event handlers for tunnel event</li>
             <li>Raise the Tunnel event</li>
             <li>Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig49.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50">
             <summary>
             Tests Attaching Tunnel EventHandler to Configuration Fig 50 to test tunneling
             <para/>
             This is a BVT scenario for attaching Tunnel event to the follow tree
             star=visual
             line=model
               
              
                 ch1
                 *  \
                *    \
               cc2  ce3
                *    |
                *    |
                *    |
              cc4   ce5
                *    /
                 *  /
                 cc6
            
             </summary>
             <remarks>
             <para/>
             Area: Events\Tunnel
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  TunnelingEventRoutingFrameworkFig50.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Create objects for the configuration</li>
             <li>Build the route</li>
             <li>Add event handlers for tunnel event</li>
             <li>Raise the Tunnel event</li>
             <li>Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingEventRoutingFrameworkFig50.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingSubclassClasshandlersSequence">
            <summary>
            Ensure the classhandlers of subclass are invoked before classhandlers of base class
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TunnelingSubclassClasshandlersSequence.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Tunnel event</li>
            <li>Register 1 class handler for CustomControl1 and 1 class handler for CustomControl2, CustomControl2 inherit CustomControl1</li>
            <li>Create a new instance of CustomControl2</li>
            <li>Raise the Tunnel event</li>
            <li>Ensure that Handler registered for CustomControl2 is invoked before Handler registered for CustomControl1. </li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingSubclassClasshandlersSequence.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingSubclassClasshandlersSequence.BaseHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingSubclassClasshandlersSequence.SubClassHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingAdjustSource">
            <summary>
            Testing the adjust for tunneling
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TunnelingAdjustSource.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Tunnel event</li>
            <li>Create 3 instances of CustomControl</li>
            <li>Create 2 new instances of CustomControl1 which adjust source</li>
            <li> Contruct the true</li>
            <li>Raise the Tunnel event and check the arg to make sure the source has been changed and the sequence is correct</li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSource.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSource.onEventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSource.onEventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSource.onEventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSource.onEventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSource.onEventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds">
            <summary>
            Testing the adjust for tunneling
            </summary>
            <remarks>
            <para/>
            Area: Events\Tunnel
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TunnelingAdjustSourceEnds.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Tunnel event</li>
            <li>Create 3 instances of CustomControl</li>
            <li>Create 2 new instances of CustomControl1 which adjust source</li>
            <li> Contruct the tree and put customcontrol1 on the two ends</li>
            <li>Raise the Tunnel event and check the arg to make sure the source has been changed and the sequence is correct</li>
            <li>Ensure the total number of handlers evoked is correct</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds.onEventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds.onEventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds.onEventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds.onEventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelingAdjustSourceEnds.onEventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CheckContentElement4ClassHandler">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from ContentElement, MyContentElement,
            add 2 class handlers, 
            register a event, 
            raise the event and check.
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for varify raising/handle event on content elements/// <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            Reviewed by: Microsoft
            <para/>
            <para/>
            FileName:  CheckContentElement4ClassHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>new a content element</li>
            <li>add a class handler with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=false</li>
            <li>call eventManager.GetRoutedEventIDs</li>
            <li>call eventManager.GetRoutedEventIDsforOwner</li>
            <li>call eventManager.GetRoutedEventIDFromName</li>
            <li>Raise event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CheckContentElement4ClassHandler.#ctor">
            <summary>
            Constructor for class CheckContentElement4ClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CheckContentElement4ClassHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CheckContentElement4ClassHandler.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CheckContentElement4ClassHandler.ExecutedCount">
            <summary>
            Property ExecutecdCount
            </summary>
            <remarks> An integer number to remember how many handlers are invoked
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.MyContentElement">
             <summary>
             MyContentElement
             </summary>
             <remarks>
            A subclass of ContentElement to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MyContentElement.#ctor">
            <summary>
            Constructor for MyContentElement
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AddInstanceBubbleOnContentElement">
            <summary>
            Add instance handler for bubble event onto content element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  AddInstanceBubbleOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the content element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceBubbleOnContentElement.#ctor">
            <summary>
            Constructor for class AddInstanceBubbleOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceBubbleOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AddInstanceTunnelOnContentElement">
            <summary>
            Add instance handler for tunnel event onto content element and Raise the event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  AddInstanceTunnelOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the content element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceTunnelOnContentElement.#ctor">
            <summary>
            Constructor for class AddInstanceTunnelOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceTunnelOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ContentElementClassHandler">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from ContentElement, MyContentElement,
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  ContentElementClassHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>new a content element</li>
            <li>add a class handler with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>Raise event and check the times handler run</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentElementClassHandler.#ctor">
            <summary>
            Constructor for class ContentElementClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentElementClassHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentElementClassHandler.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.ContentElementClassHandler.ExecutedCount">
            <summary>
            Property ExecutecdCount
            </summary>
            <remarks> An integer number to remember how many handlers are invoked
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ContentElementClassHandler.MyContentElement">
             <summary>
             MyContentElement
             </summary>
             <remarks>
            A subclass of ContentElement to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentElementClassHandler.MyContentElement.#ctor">
            <summary>
            Constructor for MyContentElement
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventIDOnContentElement">
            <summary>
            Register and read EventID for non ContentElement 
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for varifying Registering and reading Event ID on ContentElement 
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  EventIDOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a ContentElement object</li>
            Register 2 EventIDs: bubble and tunnel
            <li>call eventManager.GetRoutedEventIDs and compare result</li>
            <li>call eventManager.GetRoutedEventIDsforOwner and compare result</li>
            <li>call eventManager.GetRoutedEventIDFromName and compare result</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnContentElement.#ctor">
            <summary>
            Constructor for class EventIDOnContentElement
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RaiseEventOnContentElement">
            <summary>
            Add instance handler for bubble event onto content element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RaiseEventOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the content element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            <li>Check Argument has been set correctly</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventOnContentElement.#ctor">
            <summary>
            Constructor for class RaiseEventOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RaiseEventCheckArgsOnContentElement">
            <summary>
            Add instance handler for bubble event onto content element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RaiseEventOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the content element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            <li>Check Argument has been set correctly in every handler raised</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventCheckArgsOnContentElement.#ctor">
            <summary>
            Constructor for class RaiseEventOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventCheckArgsOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement">
             <summary>
             Tests Attaching (0, 0) (0, 1) (1,0) (1,1) and (2, 2), eventhanders to 5 ContentElements, where the first
             number in the () represent number of instance handlers and second number represent number of class 
             handler
             <para/>
             This is a BVT scenario for attaching Bubble event to the follow tree
             star=visual
             line=model
               
                 ch1
                  |
                 ce2 (CustomContentElement2 : CustomContentElement) 2 ClassHandlers attached
                  |  
                  |    
                 ce3 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  |    
                  |  
                 ce4 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  | 
                  | 
                 ce5 (CustomContentElement)
                  |
                  |
                 ce6 (CustomContentElement)
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubbleMultipleHandlerOnContentElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Register 1 class handler for CustomContentElement1 and 2 class handlers for CustomContentElement2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for ce4</li>
             <li>Attach 1 instance handler for ce2</li>
             <li>Attach 2 instance handlers for ch1</li>
             <li>Raise the Bubble event</li>
             <li>Ensure Handlers are called in the correct order: Bubble up, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnContentElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement">
             <summary>
             Tests Attaching (0, 0) (0, 1) (1,0) (1,1) and (2, 2), eventhanders to 5 ContentElements, where the first
             number in the () represent number of instance handlers and second number represent number of class 
             handler
             <para/>
             This is a BVT scenario for attaching Tunnel event to the follow tree
             star=visual
             line=model
               
                 ch1
                  |
                 ce2 (CustomContentElement2 : CustomContentElement) 2 ClassHandlers attached
                  |  
                  |    
                 ce3 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  |    
                  |  
                 ce4 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  | 
                  | 
                 ce5 (CustomContentElement)
                  |
                  |
                 ce6 (CustomContentElement)
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  TunnelMultipleHandlerOnContentElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Register 1 class handler for CustomContentElement1 and 2 class handlers for CustomContentElement2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for ce4</li>
             <li>Attach 1 instance handler for ce2</li>
             <li>Attach 2 instance handlers for ch1</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order: Tunnel down, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnContentElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement">
             <summary>
             All ContentElement Bubble Tunnel
             <para/>
             This is a BVT scenario for attaching Tunnel event to the follow tree
             line=model
                 ce1 (CustomContentElement2 : CustomContentElement) 2 ClassHandlers attached
                  |  
                  |    
                 ce2 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  |    
                  |  
                 ce3 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  | 
                  | 
                 ce4 (CustomContentElement)
                  |
                  |
                 ce5 (CustomContentElement)
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  TunnelMultipleHandlerOnPureContentElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Register 1 class handler for CustomContentElement1 and 2 class handlers for CustomContentElement2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for ce4</li>
             <li>Attach 1 instance handler for ce2</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order: Tunnel down, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnPureContentElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement">
             <summary>
             Tests Attaching (0, 0) (0, 1) (1,0) (1,1) and (2, 2), eventhanders to 5 ContentElements, where the first
             number in the () represent number of instance handlers and second number represent number of class 
             handler. The first element is visually linked UIElement. The handler on it has also been invoked.
             <para/>
             This is a BVT scenario for attaching Bubble event to the follow tree
             star=visual
             line=model
                 cc0
                  *
                 ch1
                  |
                 ce2 (CustomContentElement2 : CustomContentElement) 2 ClassHandlers attached
                  |  
                  |    
                 ce3 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  |    
                  |  
                 ce4 (CustomContentElement1 : CustomContentElement) one ClassHandler attached
                  | 
                  | 
                 ce5 (CustomContentElement)
                  |
                  |
                 ce6 (CustomContentElement)
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubbleLineStartFromContentElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Register 1 class handler for CustomContentElement1 and 2 class handlers for CustomContentElement2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for ce4</li>
             <li>Attach 1 instance handler for ce2</li>
             <li>Attach 2 instance handlers for ch1</li>
             <li>Attach 1 instance handlers for cc0</li>
             <li>Raise the Bubble event</li>
             <li>Ensure Handlers are called in the correct order: Bubble up, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent9(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleLineStartFromContentElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.GetRoutedEventIDsContentElement">
            <summary>
            Add an instance handler and an class handler for bubble event and 
            an instance handler and an class handler for tunnel event onto content element and read out event IDs
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  GetRoutedEventIDsContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a 4 RoutedEventIDs, routedEventID1, routedEventID2, routedEventID3, and routedEventId4. The first 2 IDs are for bubble and the last two are for tunnel</li>
            <li>Create a new MyContentElement, a subclass of ContentElement, myContentElement</li>
            <li>Attach a class handler for MyContentElement, with event id: rotedEventID1 </li>
            <li>Attach a class handler for MyContentElement, with event id: rotedEventID3 </li>
            <li>Add a handler onto myContentElement, with event id: rotedEventID2</li>
            <li>Add a handler onto myContentElement, with event id: rotedEventID4</li>
            <li>Call GetRoutedEventIDS for ContentElement</li>
            <li>Check all IDs are there</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsContentElement.#ctor">
            <summary>
            Constructor for class GetRoutedEventIDsContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandlerOnContentElement">
            <summary>
            Tests Remove Bubble EventHandler from ContentElement
            <para/>
            This is a BVT scenario for removing bubble event from a simple tree with ContentElement
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RemoveBubblingEventHandlerOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Add event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            <li>Handlers are called in the correct order</li>
            <li>Remove event handlers for bubble event</li>
            <li>Raise the bubble event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandlerOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandlerOnContentElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandlerOnContentElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveBubblingEventHandlerOnContentElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BuileRouteInvokeHandlersOnContentElement">
            <summary>
            Add instance handler for bubble event onto content element, build the route and invoke handlers
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BuileRouteInvokeHandlersOnContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the content element, HandedEventToo=false</li>
            <li>Create a EventRoute and a RoutedEventArgs</li>
            <li>Initialize the RoutedEventArgs with the RoutedEventID and the content element as source</li>
            <li>Check RoutedEventArgs has been set correctly</li>
            <li>Check the returned EventRoute for PeekBranchNode, PopBranchNode for empty stack</li>
            <li>Build Route</li>
            <li>Check RoutedEventArgs again</li>
            <li>Check the returned EventRoute for PeekBranchNode, PopBranchNode for empty stack</li>
            <li>Push the ContentElement to the stack</li>
            <li>Check the returned EventRoute for PeekBranchNode, PopBranchNode, and make sure the returned value is correct</li>
            <li>Check the returned EventRoute for PeekBranchNode, PopBranchNode for empty stack again</li>
            <li>Raise Event and check the times handle runs</li>
            <li>Check RoutedEventArgs again</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BuileRouteInvokeHandlersOnContentElement.#ctor">
            <summary>
            Constructor for class RaiseEventOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BuileRouteInvokeHandlersOnContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.GetRoutedEventIDsFromContentElement">
            <summary>
            Tests GetRoutedEventIDs() for ContentElement
            <para/>
            This is a BVT scenario reading out RoutedEventIDs for ContentElement
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  GetRoutedEventIDsFromContentElement.cs
            <para/>
            <ol>Scenarios covered:
            <li> create a new ContentElement</li>"
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Call GetRoutedEventIDs and check whether return null</li>
            <li>attach an event handler with the RoutedEventID</li>
            <li>Call GetRoutedEventIDs again</li>
            <li>Check the number of IDs returned and whether the returned ID is what expected</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsFromContentElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsFromContentElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AddInstanceBubbleOnContentHost">
            <summary>
            Add instance handler for bubble event onto ContentHost and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentHost
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  AddInstanceBubbleOnContentHost.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Host</li>
            <li>Add 3 handlers onto the content host, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceBubbleOnContentHost.#ctor">
            <summary>
            Constructor for class AddInstanceBubbleOnContentHost 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceBubbleOnContentHost.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AddInstanceTunnelOnContentHost">
            <summary>
            Add instance handler for tunnel event onto content host and Raise the event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentHost
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  AddInstanceTunnelOnContentHost.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Host</li>
            <li>Add handlers onto the content host, HandedEventToo=false</li>
            <li>Raise Event</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceTunnelOnContentHost.#ctor">
            <summary>
            Constructor for class AddInstanceTunnelOnContentHost 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceTunnelOnContentHost.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ContentHostClassHandler">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from CustomContentHost, MyContentHost,
            add 3 class handlers, 
            register a event, 
            Read out class handler and check by checking HandledEventToo bits and add one more handler fore each 
            handler
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\ContentHost
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  ContentHostClassHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>new a Content Host</li>
            <li>add a class handler with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>Raise event and check the times handler run</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentHostClassHandler.#ctor">
            <summary>
            Constructor for class ContentHostClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentHostClassHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentHostClassHandler.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.ContentHostClassHandler.ExecutedCount">
            <summary>
            Property ExecutecdCount
            </summary>
            <remarks> An integer number to remember how many handlers are invoked
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ContentHostClassHandler.MyContentHost">
             <summary>
             MyContentHost
             </summary>
             <remarks>
            A subclass of ContentHost to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ContentHostClassHandler.MyContentHost.#ctor">
            <summary>
            Constructor for MyContentHost
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomControlClassHandler">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from CustomControl, MyCustomControl,
            add 3 class handlers, 
            register a event, 
            Read out class handler and check by checking HandledEventToo bits and add one more handler fore each 
            handler
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\CustomControl
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  CustomControlClassHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>new a Content Host</li>
            <li>add a class handler with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>Raise event and check the times handler run</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControlClassHandler.#ctor">
            <summary>
            Constructor for class CustomControlClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControlClassHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControlClassHandler.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Events.CustomControlClassHandler.ExecutedCount">
            <summary>
            Property ExecutecdCount
            </summary>
            <remarks> An integer number to remember how many handlers are invoked
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.CustomControlClassHandler.MyCustomControl">
             <summary>
             MyCustomControl
             </summary>
             <remarks>
            A subclass of CustomControl to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.CustomControlClassHandler.MyCustomControl.#ctor">
            <summary>
            Constructor for MyCustomControl
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventIDOnNonDO">
            <summary>
            Register and read EventID for non Dependency Object Type 
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for varifying Registering and reading Event ID on non-dependency object type
            <para/>
            Area: Events\NonDO
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  EventIDOnNonDO.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a Non dependency object type object</li>
            Register 2 EventIDs
            <li>call eventManager.GetRoutedEventIDs and compare result</li>
            <li>call eventManager.GetRoutedEventIDsforOwner and compare result</li>
            <li>call eventManager.GetRoutedEventIDFromName and compare result</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnNonDO.#ctor">
            <summary>
            Constructor for class EventIDOnNonDO
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnNonDO.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventIDOnNonDO.MyObject">
             <summary>
             MyObject
             </summary>
             <remarks>
            A subclass of object to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnNonDO.MyObject.#ctor">
            <summary>
            Constructor for MyObject
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.NonDOClassHandler">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from non Dependency Object, MyObject,
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\NonDO
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  NonDOClassHandler.cs
            <para/>
            <ol>Scenarios covered:
            <li>add a class handler with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            <li>add the same handler for same event with handledEventsToo=true</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.NonDOClassHandler.#ctor">
            <summary>
            Constructor for class NonDOClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.NonDOClassHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.NonDOClassHandler.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.NonDOClassHandler.MyObject">
             <summary>
             MyObject
             </summary>
             <remarks>
            A subclass of Object to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.NonDOClassHandler.MyObject.#ctor">
            <summary>
            Constructor for MyObject
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from non Dependency Object, MyObject,
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\NonDO
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  ClassHandlerWithSubClassNonDO.cs
            <para/>
            <ol>Scenarios covered:
            <li>register a class handler for class MyObject</li>
            <li>register a class handler for class MySubObject, a subclass of MyObject</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO.#ctor">
            <summary>
            Constructor for class NonDOClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO1">
            <summary>
            Tests Attaching Bubble EventHandlers to a class inheriented from non Dependency Object, MyObject,
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\NonDO
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  ClassHandlerWithSubClassNonDO1.cs
            <para/>
            <ol>Scenarios covered:
            <li>register a class handler for class MyObject</li>
            <li>register a class handler for class MySubObject, a subclass of MyObject</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO1.#ctor">
            <summary>
            Constructor for class NonDOClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO1.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO1.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO2">
            <summary>
            Tests Attaching Tunnel EventHandlers to a class inheriented from non Dependency Object, MyObject
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for Class handler
            <para/>
            Area: Events\NonDO
            <para/>
             Microsoft
            Dev: varsham
            <para/>
            <para/>
            FileName:  ClassHandlerWithSubClassNonDO2.cs
            <para/>
            <ol>Scenarios covered:
            <li>register 2 class handlers for class MyObject</li>
            <li>register 2 class handlers for class MySubObject, a subclass of MyObject</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO2.#ctor">
            <summary>
            Constructor for class NonDOClassHandler
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO2.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClassNonDO2.OnRoutedEvent(System.Object,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
            The handler every time a handler is called: increase ExecutecdCount
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RaiseEventOnUIElement">
            <summary>
            Add instance handler for bubble event onto UI element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RaiseEventOnUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new UI Element</li>
            <li>Add 3 handlers onto the UI element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            <li>Check args has been modified correctly</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventOnUIElement.#ctor">
            <summary>
            Constructor for class RaiseEventOnUIElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventOnUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement">
             <summary>
             Tests Attaching (0, 0) (0, 1) (1,0) (1,1) and (2, 2), eventhanders to 5 UIElements, where the first
             number in the () represent number of instance handlers and second number represent number of class 
             handler
             <para/>
             This is a BVT scenario for attaching Bubble event to the follow tree
             star=visual
             line=model
               
              
                 cc1 (CustomControl2 : CustomControl) 2 ClassHandlers attached
                  *  
                  *    
                 cc2 (CustomControl1 : CustomControl) one ClassHandler attached
                  *    
                  *  
                 cc3 (CustomControl1 : CustomControl) one ClassHandler attached
                  * 
                  * 
                 cc4 (CustomControl)
                  *
                  *
                 cc5 (CustomControl)
            
             </summary>
             <remarks>
             <para/>
             Area: Events\UIElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubbleMultipleHandlerOnUIElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Register 1 class handler for CustomControl1 and 2 class handlers for CustomControl2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for cc4</li>
             <li>Attach 1 instance handler for cc2</li>
             <li>Attach 2 instance handlers for cc1</li>
             <li>Raise the Bubble event</li>
             <li>Ensure Handlers are called in the correct order: Bubble up, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleMultipleHandlerOnUIElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement">
             <summary>
             Tests Attaching (0, 0) (0, 1) (1,0) (1,1) and (2, 2), eventhanders to 5 UIElements, where the first
             number in the () represent number of instance handlers and second number represent number of class 
             handler
             <para/>
             This is a BVT scenario for attaching Tunnel event to the follow tree
             star=visual
             line=model
               
              
                 cc1 (CustomControl2 : CustomControl) 2 ClassHandlers attached
                  *  
                  *    
                 cc2 (CustomControl1 : CustomControl) one ClassHandler attached
                  *    
                  *  
                 cc3 (CustomControl1 : CustomControl) one ClassHandler attached
                  * 
                  * 
                 cc4 (CustomControl)
                  *
                  *
                 cc5 (CustomControl)
            
             </summary>
             <remarks>
             <para/>
             Area: Events\UIElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  TunnelMultipleHandlerOnUIElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Register 1 class handler for CustomControl1 and 2 class handlers for CustomControl2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for cc4</li>
             <li>Attach 1 instance handler for cc2</li>
             <li>Attach 2 instance handlers for cc1</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order: tunnel down, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnUIElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RaiseEventCheckArgsOnUIElement">
            <summary>
            Add instance handler for bubble event onto UI element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RaiseEventOnUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new UI Element</li>
            <li>Add 3 handlers onto the UI element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            <li>Check args has been modified correctly in every handler raised</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventCheckArgsOnUIElement.#ctor">
            <summary>
            Constructor for class RaiseEventOnUIElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventCheckArgsOnUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventIDOnUIElement">
            <summary>
            Register and read EventID for  CustomControl 
            </summary>
            <remarks>
            <para/>
            This is a BVT scenario for varifying Registering and reading Event ID on  CustomControl type
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  EventIDOnUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a CustomControl object</li>
            Register 2 EventIDs: bubble and tunnel
            <li>call eventManager.GetRoutedEventIDs and compare result</li>
            <li>call eventManager.GetRoutedEventIDsforOwner and compare result</li>
            <li>call eventManager.GetRoutedEventIDFromName and compare result</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnUIElement.#ctor">
            <summary>
            Constructor for class EventIDOnNonDO
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventIDOnUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.GetRoutedEventIDsUIElement">
            <summary>
            Add an instance handler and an class handler for bubble event and 
            an instance handler and an class handler for tunnel event onto content element and read out event IDs
            </summary>
            <remarks>
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  GetRoutedEventIDsUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a 4 RoutedEventIDs, routedEventID1, routedEventID2, routedEventID3, and routedEventId4. The first 2 IDs are for bubble and the last two are for tunnel</li>
            <li>Create a new MyUIElement, a subclass of UIElement, myUIElement</li>
            <li>Attach a class handler for MyUIElement, with event id: rotedEventID1 </li>
            <li>Attach a class handler for MyUIElement, with event id: rotedEventID3 </li>
            <li>Add a handler onto myUIElement, with event id: rotedEventID2</li>
            <li>Add a handler onto myUIElement, with event id: rotedEventID4</li>
            <li>Call GetRoutedEventIDS for UIElement</li>
            <li>Check all IDs are there</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsUIElement.#ctor">
            <summary>
            Constructor for class GetRoutedEventIDsUIElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNone">
             <summary>
             Verify an UIelement whose BuildRouteCore return a UIElement will not add the returned not effect the route if it has UIParant
             <para/>
             This is a BVT scenario for BuildRouteCore
             star=visual
             line=model
                 cu1
                  *                           cu4
                  *                            *
                 cu2 (BuildRouteCore return)-&gt;cu5
                  *  
                  *    
                 cu3 
            
             </summary>
             <remarks>
             <para/>
             Area: Events\UIElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubbleBuildRouteCoreNoNone.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
             <li>Attach 1 instance handler for each element</li>
             <li>Raise the Bubble event</li>
             <li>Ensure Handlers are called in the correct order, and cu4 and cu5 didn't get involved</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNone.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNone.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNone.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNone.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNone.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop">
             <summary>
             Verify an UIelement whose BuildRouteCore return a UIElement will not add the returned not effect the route if it has UIParant
             <para/>
             This is a BVT scenario for BuildRouteCore, the tree:
             star=visual
             line=model
               
                                              cu4
                                               *
                 cu1 (BuildRouteCore return)-&gt;cu5
                  *  
                  *    
                 cu2
                  * 
                  *
                 cu3 
            
             </summary>
             <remarks>
             <para/>
             Area: Events\UIElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  BubbleBuildRouteCoreNoNoneTop.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
             <li>Attach 1 instance handler for each element</li>
             <li>Raise the Bubble event</li>
             <li>Ensure Handlers are called in the correct order, and cu4 and cu5 get involved</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BubbleBuildRouteCoreNoNoneTop.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BuileRouteInvokeHandlersOnUIElement">
            <summary>
            Add instance handler for bubble event onto Control, build the route and invoke handlers
            </summary>
            <remarks>
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BuileRouteInvokeHandlersOnUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Control</li>
            <li>Add 3 handlers onto the Control, HandedEventToo=false</li>
            <li>Create a EventRoute and a RoutedEventArgs</li>
            <li>Check RoutedEventArgs has been set correctly</li>
            <li>Initialize the RoutedEventArgs with the RoutedEventID and the Control as source</li>
            <li>Build Route</li>
            <li>Check RoutedEventArgs again</li>
            <li>Raise Event and check the times handle runs</li>
            <li>Check RoutedEventArgs again</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BuileRouteInvokeHandlersOnUIElement.#ctor">
            <summary>
            Constructor for class RaiseEventOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BuileRouteInvokeHandlersOnUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.GetRoutedEventIDsFromUIElement">
            <summary>
            Tests GetRoutedEventIDs() for UIElement
            <para/>
            This is a BVT scenario reading out RoutedEventIDs for UIElement
            </summary>
            <remarks>
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  GetRoutedEventIDsFromUIElement.cs
            <para/>
            <ol>Scenarios covered:
            <li> create a new UIElement</li>
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Call GetRoutedEventIDs and check whether return null</li>
            <li>attach an event handler with the RoutedEventID</li>
            <li>Call GetRoutedEventIDs again</li>
            <li>Check the number of IDs returned and whether the returned ID is what expected</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsFromUIElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsFromUIElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.UIElementAdjustEventSource">
            <summary>
            Check the return value of AdjustEventSource for UIElement
            </summary>
            <remarks>
            <para/>
            Area: Events\UIElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  UIElementAdjustEventSource.cs
            <para/>
            <ol>Scenarios covered:
                <li>Create an UIElement</li>
                <li>Check the return value of AdjustEventSource</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.UIElementAdjustEventSource.#ctor">
            <summary>
            Constructor for class UIElementAdjustEventSource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.UIElementAdjustEventSource.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass">
             <summary>
             Test the class eventhandler for subclass
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  ClassHandlerWithSubClass.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Register 1 class handler for CustomContentElement1 and 1 class handlers for CustomContentElement2, where CustomContentElement2 is subclass of CustomContentElement1</li>
             <li>Create a object of class CustomContentElement</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass1">
             <summary>
             Test the class eventhandler for subclass
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  ClassHandlerWithSubClass1.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Register 1 class handler for CustomContentElement1 and 1 class handlers for CustomContentElement2, where CustomContentElement2 is subclass of CustomContentElement1</li>
             <li>Create a object of class CustomContentElement</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass1.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass1.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass1.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass1.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass2">
             <summary>
             Test the class eventhandler for subclass
            
             </summary>
             <remarks>
             <para/>
             Area: Events\ContentElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  ClassHandlerWithSubClass2.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Register 2 class handler for CustomContentElement1 and 2 
             class handlers for CustomContentElement2, 
             where CustomContentElement2 is subclass of CustomContentElement1</li>
             <li>Create a object of class CustomContentElement2</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass2.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass2.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass2.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass2.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClassHandlerWithSubClass2.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement">
             <summary>
             Element implementing IVisual is passed if it is on the route
             <para/>
             This is a BVT scenario for attaching Tunnel event to the follow tree
             star=visual
             line=model
               
              
                 cc1 (CustomControl2 : CustomControl) 2 ClassHandlers attached
                  *  
                  *    
                 cc2 (CustomControl1 : CustomControl) one ClassHandler attached
                  *    
                  *  
                 ve6
                  *
                  *
                 cc3 (CustomControl1 : CustomControl) one ClassHandler attached
                  * 
                  * 
                 cc4 (CustomControl)
                  *
                  *
                 cc5 (CustomControl)
            
              cc#s are CustomControl and ve# is a class inherit RetainedVisual, but not UIElement
             </summary>
             <remarks>
             <para/>
             Area: Events\VisualElement
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  TunnelMultipleHandlerOnVisualElement.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Tunnel event</li>
             <li>Register 1 class handler for CustomControl1 and 2 class handlers for CustomControl2</li>
             <li>Create objects, as shown on the graph above, for the configuration</li>
             <li>Build the route</li>
            
             <li>Attach 1 instance handler for cc4</li>
             <li>Attach 1 instance handler for cc2</li>
             <li>Attach 2 instance handlers for cc1</li>
             <li>Raise the Tunnel event</li>
             <li>Ensure Handlers are called in the correct order: tunnel down, last added last evoked, class handlers are invoked before instance handler</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent7(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent8(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.TunnelMultipleHandlerOnVisualElement.OnRoutedEvent(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.VisualElement">
            <summary>
                VisualElement class is a subclass of RetainedVisual. It implementApependChild and RemoveChild
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.VisualElement.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                Constructor for  CustomControl
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.VisualElement.AppendChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Appends a child.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.VisualElement.RemoveChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            Remove a child.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClasshandlerNotHandledToo">
            <summary>
            Ensure the handled event will not invoke other handlers, which is attached with HandledEventToo bit is false, for this event
            </summary>
            <remarks>
            <para/>
            Area: Events\Handledness
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  ClasshandlerNotHandledToo.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for Bubble event</li>
            <li>Register 1 class handler for CustomControl1 and 1 class handler for CustomControl2, CustomControl2 inherit CustomControl1</li>
            <li>Create a new instance of CustomControl2</li>
            <li>Raise the Bubble event</li>
            <li>Ensure that Handler registered registered for CustomControl1 doesn't get invoked. </li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClasshandlerNotHandledToo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClasshandlerNotHandledToo.BaseHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClasshandlerNotHandledToo.SubClassHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.ClasshandlerHandledToo">
            <summary>
             Ensure the handled event will invoke other handlers, which is attached with HandledEventToo bit is true, for this event
             </summary>
             <remarks>
             <para/>
             Area: Events\Handledness
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  ClasshandlerHandledToo.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Register 1 class handler for CustomControl1 and 1 class handler, HandledEventToo is true, for CustomControl2, CustomControl2 inherit CustomControl1</li>
             <li>Create a new instance of CustomControl2</li>
             <li>Raise the Bubble event</li>
             <li>Ensure that Handler registered registered for CustomControl1 does get invoked. </li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClasshandlerHandledToo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClasshandlerHandledToo.BaseHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.ClasshandlerHandledToo.SubClassHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.InstancehandlerHandledToo">
            <summary>
             Ensure the handled event will invoke other instance handlers, which is attached with HandledEventToo bit is true, for this event
             </summary>
             <remarks>
             <para/>
             Area: Events\Handledness
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  InstancehandlerHandledToo.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create a new CustomControl, myControl</li>
             <li>Register 2 instance handlers, HandledEventToo is true</li>
             <li>Raise the Bubble event</li>
             <li>Ensure that second Handler does get invoked. </li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerHandledToo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerHandledToo.EventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerHandledToo.EventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.InstancehandlerNotHandledToo">
            <summary>
             Ensure the handled event will invoke other instance handlers, which is attached with HandledEventToo bit is true, for this event
             </summary>
             <remarks>
             <para/>
             Area: Events\Handledness
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  InstancehandlerNotHandledToo.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create a new instance of CustomControl, myControl</li>
             <li>Add two instance Listener, HandledEventToo is false</li>
             <li>Raise the Bubble event</li>
             <li>Ensure that Handler registered registered for CustomControl1 does not get invoked. </li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerNotHandledToo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerNotHandledToo.EventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerNotHandledToo.EventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes">
            <summary>
             Eventing Handledness: 3 nodes each with 2 instance handlers, with HandledEventToo are true, false, 
             and mixed respectively. 
             </summary>
             <remarks>
             <para/>
             Area: Events\Handledness
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  InstancehandlerMultipleNodes.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create 3 new instances of CustomControl, myControl1, myControl2, and myControl3</li>
            <li>Construct tree</li>
             <li>Add two instance Listeners to myControl1 HandledEventToo are true</li>
             <li>Add two instance Listeners to myControl2 HandledEventToo are false</li>
             <li>Add two instance Listeners to myControl1 HandledEventToo are mixed</li>
             <li>Raise the Bubble event and Ensure that the sequence and number of handler is correct</li>
             <li>set Handled in args to be true</li>
             <li>Raise the Bubble event and Ensure that the sequence and number of handler is correct</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.EventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.EventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.EventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.EventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.EventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.InstancehandlerMultipleNodes.EventHandler6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes">
            <summary>
             Eventing Handledness: 3 nodes each with 2 instance handlers, with HandledEventToo are true, false, 
             and mixed respectively. 
             </summary>
             <remarks>
             <para/>
             Area: Events\Handledness
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  MixedhandlerMultipleNodes.cs
             <para/>
             <ol>Scenarios covered:
             <li>Fetch RoutedEventID for Bubble event</li>
             <li>Create 3 new instances of MyOwnCustomControl (a subclass of CustomControl), myControl1, myControl2, and myControl3</li>
             <li>Add two instance Listeners to myControl1 HandledEventToo are true</li>
             <li>Add two instance Listeners to myControl2 HandledEventToo are false</li>
             <li>Add two instance Listeners to myControl1 HandledEventToo are mixed</li>
             <li>Register class handler for MyOwnCustomControl</li>
             <li>Raise the Bubble event and Ensure that the sequence and number of handlers, both instance and class, are correct</li>
             <li>Remove all the handlers whose HandledEventToo is true</li>
             <li>Add back the handlers with correct order</li>
             <li>set Handled in args to be true</li>
             <li>Raise the Bubble event and Ensure that the sequence and number of handlers, both instance and class, are correct</li>
             </ol>
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.EventHandler1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.EventHandler2(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.EventHandler3(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.EventHandler4(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.EventHandler5(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.EventHandler6(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MixedhandlerMultipleNodes.myClassHandler(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler for Base Class
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop">
            <summary>
                     Testing a simple Modal Window. This will create a modal window on mouse up on the main window. Single Thread Single Context
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context, mouse is on 0,0 coordinates</li>
                     <li>Create an HwndSource and source a HelloElement</li>
                     <li>On the render of the HelloEleement, we inject a MouseDown and mouse up on the HelloElement</li>
                     <li>On the MouseUp event we create a SimpleModalTestWindow and we source a HelloElement (II) and we call the show() that it will push a frame to the dispatcher</li>
                     <li>On the render of HelloElement (II),  we inject a Mouse Down and Up </li>
                     <li>On the MouseUp on the HelloElement(II) we listen and we set a global varaible that the test passes and we close the window</li>
                     <li>We validate that the PushFrame works correctly.</li>
                 </ol>
                 <filename>SimpleNestedMessageLoop.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.HwndSourceSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.OnRenderFirstElement(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.InjectFirstInput(System.Object)">
            <summary>
            Inject mouse to the main window to Open the Modal dialog. the dialog will be open on MOuseUp
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.SimpleNestedMessageLoop_OnDestroyMainWindowEvent(System.Object,System.EventArgs)">
            <summary>
            When the Main window is close this is called to stop the dispatcher
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.Hello_MouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            During MouseUp event on the MainWindow it will create a ModalWindow that it will be 
            host an WPP window and it call Show, that it will push a frame
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.hello_RenderedSourcedHandlerEvent(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            When the modal window with the Visual is rendered we inject Input over the modal window
            to validate that works. MouseDown and Up
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.InjectSecondInput(System.Object)">
            <summary>
            Inject Mouse Down and Up
            </summary>
            <param name="Source"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.SimpleNestedMessageLoop.hello_MouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            We set a Global varible as true to mark that the test pass and we close the windows. End of the test case
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.HwndDispatcherMultipleThreads">
            <summary>
            </summary>
            <remarks>
                 <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HwndDispatcherMultipleThreads.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HwndDispatcherMultipleThreads.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Quiting the dispatcher from different thread.
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
             </ol>
                <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HwndDispatcherMultipleThreads.AbortingThread(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Aborting the dispatcher on a different thread
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
             </ol>
                <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.Registration.Win32DispatcherMultipleContext">
            <summary>
            </summary>
            <remarks>
                 <filename>ScheduleAbortSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.Win32DispatcherMultipleContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.Win32DispatcherMultipleContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.Win32DispatcherMultipleContext.PassingNull(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Passing Null to RegisterContext and UnRegisterContext and validating the ArgumentNullException
            </summary>
            <remarks>
             <ol>Description Steps:
             <li></li>
             </ol>
                <filename>Win32DispatcherMultipleContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.Win32DispatcherMultipleContext.MultipleContextRegistration(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Register 10 UIContext on Win32Dispatcher and Unregister the 10 of them. Validating the Property Dispatcher on the Context
            </summary>
            <remarks>
             <ol>Description Steps:
             <li></li>
             </ol>
                <filename>Win32DispatcherMultipleContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.Registration.DispatchingOneDispatcherMultipleContext">
            <summary>
            </summary>
            <remarks>
                 <filename>ScheduleAbortSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.DispatchingOneDispatcherMultipleContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.DispatchingOneDispatcherMultipleContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.DispatchingOneDispatcherMultipleContext.MultipleContextDispatching(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Register 10 UIContext on Win32Dispatcher. Posting 20 items to each Context to be dispatched, all on BG priority,
            on the middl of an item dispatched we unregister the dispatched
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
                 <li>Create 10 Context and Register on 1 Dispatcher</li>
                 <li>Post an Item to post the Items async</li>
                 <li>Dispatcher.Run</li>
                 <li>Posting 20 items on BG to each context. on 1 context post a exit on Idle</li>
                 <li>During the items are been dispatched, if it is the first context and it is the 10 items dispatche we unregister the context</li>
                 <li>During the items are been dispatched, if it is the fifth context and it is the 10 items dispatche we unregister the context</li>
                 <li>The dispatcher is stopped</li>
                 <li>Validate 180 items are dispatched.</li>
             </ol>
                <filename>DispatchingOneDispatcherMultipleContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.Registration.DispatchingMultipleDispatchersMultipleContext">
            <summary>
            </summary>
            <remarks>
                 <filename>DispatchingMultipleDispatchersMultipleContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.DispatchingMultipleDispatchersMultipleContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.DispatchingMultipleDispatchersMultipleContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.DispatchingMultipleDispatchersMultipleContext.Dispatching(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Spwan 5 threads, each thread Register 10 UIContext on Win32Dispatcher. Posting 20 items to each Context to be dispatched, all on BG priority,
            on the middle of an item dispatched we unregister the dispatched
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create 5 Threads</li>
                <li>on each thread</li>
                     <li>Create a Win32Dispatcher</li>
                     <li>Create 10 Context and Register on 1 Dispatcher</li>
                     <li>Post an Item to post the Items async</li>
                     <li>Dispatcher.Run</li>
                     <li>Posting 20 items on BG to each context. on 1 context post a exit on Idle</li>
                     <li>During the items are been dispatched, if it is the first context and it is the 10 items dispatche we unregister the context</li>
                     <li>During the items are been dispatched, if it is the fifth context and it is the 10 items dispatche we unregister the context</li>
                     <li>The dispatcher is stopped</li>
                     <li>Validate 180 items are dispatched.</li>
                 <li>Validate  just that there is no expection on any thread</li>        
             </ol>
                <filename>DispatchingMultipleDispatchersMultipleContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.Registration.RegisterTwiceSameContext">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.RegisterTwiceSameContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.RegisterTwiceSameContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.RegisterTwiceSameContext.TwiceSameContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Register the same context twice on the same dispatcher
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a Context and Win32Dispatcher</li>
                <li>Register the context on the dispatcher</li>
                <li>Register the same context on the same dispatcher</li>
                <li>Waiting an exception and Validate the exception was thrown</li>
             </ol>
                <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.RegisterTwiceSameContext.SameContextDifferentDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Register the same UIContext on two different dispatcher. Validating an exception shoud be thrown
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create  1 context and 2 win32Dispatchers</li>
                <li>Register the context on 1 dispatcher</li>
                <li>Register the context on the other dispatcher</li>
                <li>Validating the exception was thrown</li>
             </ol>
                <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Registration.RegisterTwiceSameContext.QuitandPushFrame(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Quitting the dispatcher before start PushFrame
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create  1 context and 1 win32Dispatchers</li>
                <li>Call Dispatcher.Quit</li>
                <li>Post an Exit item to the dispatcher</li>
                <li>Call PushFrame to the Dispatcher</li>
                <li>Validating the dispatcher, dispatches the posted item</li>
             </ol>
                <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedPump">
            <summary>
             This Class contains 2 test cases for UITime
            </summary>
            <remarks>
                 <filename>UITimeFromDateTime.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedPump.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedPump.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedPump.SimpleRun(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Create a Window with a button, click on the button and create a modal dialog, later click onteh modal dialog and to close the windows
            </summary>
            <remarks>
             <ol>Description Steps:
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedNestedPump">
            <summary>
             This Class contains 2 test cases for UITime
            </summary>
            <remarks>
                 <filename>ClickButtonNestedNestedPump.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedNestedPump.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.ClickButtonNestedNestedPump.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Create a Window with a button, click on the button and create a modal dialog, later click onteh modal dialog and to close the windows
            </summary>
            <remarks>
             <ol>Description Steps:
             </ol>
             ClickButtonNestedNestedPump.cs
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Common.TextTreeSamples">
            <summary>
            class for generating sample trees for testing
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.DumpTextTree(MSAvalon.Windows.Documents.TextTree)">
            <summary>
                turns a texttree into a string representation
            </summary>
            <remarks>
                assumes ID implemented on "element" children
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.DumpTextTreeSegment(MSAvalon.Windows.Documents.TextPosition,MSAvalon.Windows.Documents.TextPosition)">
            <summary>
                turns a texttree segment into a string representation
            </summary>
            <remarks>
                assumes ID implemented on an "element" children.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.BuildTreeOne(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Common.CoreLogger,System.Collections.Hashtable)">
            <summary>
                builds a sample test tree for testing - happens to be kinda familiar
            </summary>
            <remarks>
                port of the test tree used in the dotnet branch (original Avalon code) for sequential tree. Builds a tree
                that looks like:
                <root>
                |--- TextA
                |--- <B><B1/><B2/>TextB3</B>
                |--- <C><C1/>TextC2<C3/></C>
                |--- <D>TextD1<D2/>TextD3</D>
                </root>
                of course, I had to cheat and put IDs on everything (see DumpTestTextTree) so it's not exactly the same
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.BuildTreeTwo(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Common.CoreLogger,System.Collections.Hashtable)">
            <summary>
            builds a sample test tree for testing - this is a very simple example
            </summary>
            <remarks>
            Builds a tree that looks like:
                <root/>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.BuildTreeThree(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Common.CoreLogger,System.Collections.Hashtable)">
            <summary>
            builds a sample test tree for testing with a root element and one child
            </summary>
            <remarks>
            Builds a tree that looks like:
                <root>
                |--- <nodeA/>
                </root>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.BuildTreeFour(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Common.CoreLogger,System.Collections.Hashtable)">
            <summary>
            builds a sample test tree for testing with a root element, some text, an embedded object, and a child TextElement
            </summary>
            <remarks>
            Builds a tree that looks like:
                <root>
                    one 
                    <object/>
                    two
                    <nodeA/>
                    three
                </root>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.GetChildCount(MSAvalon.Windows.Documents.TextElement,MSAvalon.Windows.Documents.TextTree)">
            <summary>
                get the number of children for an element in the tree
            </summary>
            <remarks>
                currently returns the "element" children and embedded objects, not text and not descendants
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TextTreeSamples.TreeCloneDelegate(System.Object)">
            <summary>
                callback for Copy, Move, etc. 
            </summary>
            <remarks>
                function exists to handle copying any object in the tree (e.g. a TextElement, an Inline, etc.)
                most tests should be a combination of TestTextElement and some sort of embedded object 
                TODO: figure out what embedded objects we're going to test with. maybe a UIElement?
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Common.TestTextElement">
            <summary>
                test implementation for abstract class TextElement
            </summary>
            <remarks>
                currently just a simple wrapper around TextElement
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TestTextElement.#ctor(MSAvalon.Windows.Documents.TextPosition,MSAvalon.Windows.Documents.TextPosition)">
            <summary>
                public constructor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TestTextElement.#ctor(MSAvalon.Windows.Documents.TextRange)">
            <summary>
                public constructor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.TestTextElement.#ctor">
            <summary>
                public constructor
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.TestCaseType">
            <summary>
            Type of the test case support on the TestCase class constructor
            </summary>	
            <remarks>
            Type of cases:
            <ul>
            <li> None </li>
            <li>ContextSupport</li>
            </ul>
            <para/>
            ContextSupport: It will create a default context.
            This is supportted because it can provide different hosting scenarios with a lot abstraction
            </remarks>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCaseType.None">
            <summary>
            TODO:
            </summary>	
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCaseType.ContextSupport">
            <summary>
            TODO:
            </summary>	
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCaseType.ContextEnteringSupport">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.TestCaseType.HwndSourceSupport">
            <summary>
            This is Context Entering + Creating a HwndSource
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Common.CoreLogicalTreeHelper">
            <summary>
            A little helper class provinding the functionality that we require
            but the System.Windows.LogicalTreeHelper class doesn't provide.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.CoreLogicalTreeHelper.FindNodesWithIDs(MSAvalon.Windows.ILogicalTreeNode,System.Collections.Hashtable)">
            <summary>
            Given a	tree node that implements ILogicalTreeNode and IFrameworkInputElement,
             searches all its descendent nodes in the logical tree for nodes having a non-empty 
             ID property. Puts all those nodes in the provided hashtable with the respective IDs as keys.
            </summary>
            <remarks>
            We're searching	in a depth-first manner.  
            This function is inspired from System.Windows.LogicalTreeHelper.FindLogicalNode
            </remarks>
            <param name="subtreeRoot">Root of the tree to be searched.</param>
            <param name="nodesWithIDs">Hashtable for storing nodes with non-empty IDs.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.CoreLogicalTreeHelper.FindLogicalRoot(MSAvalon.Windows.ILogicalTreeNode)">
             <summary>
             Given a tree node that implements ILogicalTreeNode, walks up the parent
              chain to find the root of the logical tree.
            
             This function is a replica of a function with the same name in 
             class System.Windows.LogicalTreeHelper. I had to do that since the method in 
             LogicalTreeHelper is internal.
             </summary>
             <param name="logicalTreeNode">Given tree node.</param>
        </member>
        <member name="T:Avalon.Test.Host.Controls.SimpleHostControl">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.SimpleHostControl.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.SimpleHostControl.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.Host.Controls.AvalonHostedControl">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostedControl.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostedControl.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostedControl.Click(System.Object,MSAvalon.Windows.Controls.RoutedEventArgs)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonHostedControl.MainWindow">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostedControl.Helper(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="message"></param>
            <param name="firstParam"></param>
            <param name="secondParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.Host.Controls.AvalonHostIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostIsolated.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostIsolated.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonHostIsolated.ev">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonHostIsolated.InternalException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostIsolated.CreateWindowCrossAppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostIsolated.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonHostIsolated.evStop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonHostIsolated.Helper(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="message"></param>
            <param name="firstParam"></param>
            <param name="secondParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.Host.Controls.AvalonVisualHostIsolated">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.ev">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.InternalException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.CreateWindowCrossAppDomain">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.evStop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.AvalonVisualHostIsolated.Helper(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="window"></param>
            <param name="message"></param>
            <param name="firstParam"></param>
            <param name="secondParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.Host.Controls.CrossAppPointer">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.CrossAppPointer.#ctor(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Host.Controls.CrossAppPointer.#ctor(Avalon.Test.Host.Controls.CrossAppPointer)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.Host.Controls.CrossAppPointer.Handler">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.IHasText">
            <summary>
            Interface exposing a class with text.
            </summary>
            <remarks>
            Implemented by content panel classes.
            Hosts use classes with this interface to do their work.
            </remarks>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.IHasText.Text">
            <summary>
            Text for this class.
            </summary>
            <value>UI-visible string of text.</value>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel">
            <summary>
            This class represents an instrumented panel control (InstrPanel).
            An InstrPanel is a UIElement that contains other UIElements or ContentElements.
            It also contains debug-mode instrumentation showing what events are passing throught it.
            </summary>
            <example>
            This example fragment shows how to initialize a window source with an InstrPanel as the root element.
            <code>
            UIContext context = new UIContext();
            
            using(context.Access()) {
              HwndSource source = CreateStandardSource(10, 10, 100, 100);
              UIElement rootElement = new InstrPanel();
              Visual v = rootElement;
              source.RootVisual = v;
            }
            </code>
            </example>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.#ctor">
            <summary>
            Construct an instrumented panel.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Construct an instrumented panel in a context.
            </summary>
            <param name="context">UI context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Override to render an instrumented element.
            </summary>
            <param name="ctx">Drawing context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.OnKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.OnKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.OnMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse-move event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.OnQueryCursor(MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard query cursor event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.HitTestCore(MSAvalon.Windows.Media.PointHitTestParameters)">
            <summary>
            Determine hit test result for this control.
            </summary>
            <param name="hitTestParams">Hit test argument package.</param>
        </member>
        <member name="E:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrPanel.Rendered">
            <summary>
            Fires when the control has completely rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.RenderEventHandler">
            <summary>
            Delegate for Rendered event.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel">
            <summary>
            This class represents an instrumented content element (InstrContentPanel).
            An InstrContentPanel is a content element that contains nothing but text.
            On a left-button down, it requests focus and capture.
            On a left-button up, it releases any previous capture.
            It also contains debug-mode instrumentation showing what events are passing through it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.#ctor">
            <summary>
            Construct a content panel.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.#ctor(System.String,System.String)">
            <summary>
            Construct a content panel with a specified name and text, and attach it to a host.
            </summary>
            <param name="name">Text name for this element.</param>
            <param name="text">Text contents for this element.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.#ctor(System.String,System.String,Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost)">
            <summary>
            Construct a content panel with a specified name and attach it to a host.
            </summary>
            <param name="name">Text name for this element.</param>
            <param name="text">Text contents for this element.</param>
            <param name="parent">A valid InstrContentPanelHost.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseMove handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseMove handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseEnter(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseEnter handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseEnter(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseEnter handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseLeave(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseLeave handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseLeave(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseLeave handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseDown handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseDown handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseUp handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseUp handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseLeftButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseLeftButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseLeftButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseLeftButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseLeftButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseLeftButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseRightButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseRightButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseRightButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseRightButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseRightButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseRightButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseRightButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseRightButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewMouseWheel(MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard PreviewMouseWheel handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnMouseWheel(MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard MouseWheel handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnGotMouseCapture(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard GotMouseCapture handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnLostMouseCapture(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard LostMouseCapture handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard PreviewKeyDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard KeyDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard PreviewKeyUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard KeyUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard PreviewGotFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard GotFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard PreviewLostFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard LostFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnPreviewTextInput(MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard PreviewTextInput handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnTextInput(MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard TextInput handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.OnQueryCursor(MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard QueryCursor handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel._text">
            <summary>
            Textual contents of this element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel._name">
            <summary>
            String identifier for this element (useful for debugging)
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanel.Text">
            <summary>
            Text belonging to this element.
            </summary>
            <value>A string of text.</value>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost">
            <summary>
            This class represents an instrumented host for instrumented content panels (InstrContentPanel, InstrFrameworkContentPanel).
            An InstrContentPanelHost stores any number of content panels as children.
            It changes its background color on a mouse over. 
            Any input event directed to it is passed through to its child content element.
            It also contains debug-mode instrumentation showing what events are passing through it.
            </summary>
            <remarks>
            We assume there is at least one child element of type InstrContentPanel or InstrFrameworkContentPanel.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.#ctor">
            <summary>
            Construct a InstrContentPanelHost.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.#ctor(System.String)">
            <summary>
            Construct a InstrContentPanelHost with a named identifier and add a starter child to it.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
            Add child to this host.
            </summary>
            <param name="o">Content element.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
            Add string to this host.
            </summary>
            <param name="s">Not used.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.MSAvalon#Windows#IContentHost#InputHitTest(MSAvalon.Windows.Point)">
            <summary>
            Hit test for the element from a given point.
            </summary>
            <param name="p">Point to hit test against.</param>
            <returns>An element inside this host that accepts input.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.MeasureCore(MSAvalon.Windows.Size)">
            <summary>
            Decide on how to measure our element.
            </summary>
            <param name="constraint">Constraint given to us.</param>
            <returns>Constraint to return.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.ArrangeCore(MSAvalon.Windows.Size)">
            <summary>
            Decide on how to arrange our element.
            </summary>
            <param name="arrangeBounds">Constraint given to us.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Decide on how to render our element.
            </summary>
            <param name="ctx">Drawing context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnIsMouseOverChanged(MSAvalon.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Standard IsMouseOverChanged handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnIsFocusWithinChanged(MSAvalon.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Standard IsFocusWithinChanged handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseMove handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseMove handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseEnter(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseEnter handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseEnter(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseEnter handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseLeave(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseLeave handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseLeave(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseLeave handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseDown handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseDown handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseUp handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseUp handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseLeftButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseLeftButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseLeftButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseLeftButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseLeftButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseLeftButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseRightButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseRightButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseRightButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseRightButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseRightButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseRightButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseRightButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseRightButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewMouseWheel(MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard PreviewMouseWheel handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnMouseWheel(MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard MouseWheel handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnGotMouseCapture(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard GotMouseCapture handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnLostMouseCapture(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard LostMouseCapture handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard PreviewKeyDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard KeyDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard PreviewKeyUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard KeyUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard PreviewGotFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard GotFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard PreviewLostFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard LostFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnPreviewTextInput(MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard PreviewTextInput handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnTextInput(MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard TextInput handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.OnQueryCursor(MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard QueryCursor handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.Caption">
            <summary>
            Caption belonging to our element.
            </summary>
            <value>String of text.</value>
            <remarks>This string is taken from the underlying content element.</remarks>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.Background">
            <summary>
            Visual background for our element.
            </summary>
            <value>A brush object.</value>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost.MSAvalon#Windows#ILogicalTreeNode#Children">
            <summary>
            Collection of children on the host.
            </summary>
            <value>An enumerator.</value>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel">
            <summary>
            This class represents an instrumented panel based on a framework Control (InstrControlPanel).
            An InstrControlPanel is a UIElement that contains other UIElements or ContentElements.
            It also contains debug-mode instrumentation showing what events are passing throught it.
            </summary>
            <example>
            This example fragment shows how to initialize a window source with an InstrPanel as the root element.
            <code>
            UIContext context = new UIContext();
            
            using(context.Access()) {
              HwndSource source = CreateStandardSource(10, 10, 100, 100);
              UIElement rootElement = new InstrControlPanel();
              Visual v = rootElement;
              source.RootVisual = v;
            }
            </code>
            </example>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.#ctor">
            <summary>
            Construct an instrumented panel.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Construct an instrumented panel in a context.
            </summary>
            <param name="context">UI context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Override to render an instrumented element.
            </summary>
            <param name="ctx">Drawing context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.HitTestCore(MSAvalon.Windows.Media.PointHitTestParameters)">
            <summary>
            Determine hit test result for this control.
            </summary>
            <param name="hitTestParams">Hit test argument package.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.OnMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse-move event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.OnKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.OnKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.OnQueryCursor(MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard query cursor event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="E:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrControlPanel.Rendered">
            <summary>
            Fires when the control has completely rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel">
            <summary>
            This class represents an instrumented framework content element (InstrFrameworkContentPanel).
            An InstrFrameworkContentPanel is a content element that contains nothing but text.
            On a left-button down, it requests focus and capture.
            On a left-button up, it releases any previous capture.
            It also contains debug-mode instrumentation showing what events are passing through it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.#ctor">
            <summary>
            Construct a content panel.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.#ctor(System.String,System.String)">
            <summary>
            Construct a content panel with a specified name and text, and attach it to a host.
            </summary>
            <param name="name">Text name for this element.</param>
            <param name="text">Text contents for this element.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.#ctor(System.String,System.String,Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrContentPanelHost)">
            <summary>
            Construct a content panel with a specified name and attach it to a host.
            </summary>
            <param name="name">Text name for this element.</param>
            <param name="text">Text contents for this element.</param>
            <param name="parent">A valid InstrContentPanelHost.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseMove handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseMove(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseMove handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseEnter(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseEnter handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseEnter(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseEnter handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseLeave(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard PreviewMouseLeave handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseLeave(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard MouseLeave handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseDown handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseDown handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseUp handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseUp handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseLeftButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseLeftButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseLeftButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseLeftButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseLeftButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseLeftButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseRightButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseRightButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseRightButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseRightButtonDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseRightButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard PreviewMouseRightButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseRightButtonUp(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard MouseRightButtonUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewMouseWheel(MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard PreviewMouseWheel handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnMouseWheel(MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard MouseWheel handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnGotMouseCapture(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard GotMouseCapture handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnLostMouseCapture(MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard LostMouseCapture handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard PreviewKeyDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard KeyDown handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard PreviewKeyUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard KeyUp handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard PreviewGotFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard GotFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard PreviewLostFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard LostFocus handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnPreviewTextInput(MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard PreviewTextInput handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnTextInput(MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard TextInput handler.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.OnQueryCursor(MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard QueryCursor handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel._text">
            <summary>
            Textual contents of this element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel._name">
            <summary>
            String identifier for this element (useful for debugging)
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkContentPanel.Text">
            <summary>
            Text belonging to this element.
            </summary>
            <value>A string of text.</value>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel">
            <summary>
            This class represents an instrumented panel framework element (InstrFrameworkPanel).
            An InstrFrameworkPanel is a FrameworkElement that contains other FrameworkElements or FrameworkContentElements.
            It also contains debug-mode instrumentation showing what events are passing throught it.
            </summary>
            <example>
            This example fragment shows how to initialize a window source with an InstrFrameworkPanel as the root element.
            <code>
                   Window _win = new Window();
                   _win.Content = new InstrFrameworkPanel();
            </code>
            </example>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.#ctor">
            <summary>
            Construct an instrumented panel.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Construct an instrumented panel in a context.
            </summary>
            <param name="context">UI context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Override to render an instrumented element.
            </summary>
            <param name="ctx">Drawing context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.HitTestCore(MSAvalon.Windows.Media.PointHitTestParameters)">
            <summary>
            Determine hit test result for this control.
            </summary>
            <param name="hitTestParams">Hit test argument package.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnKeyDown(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnKeyUp(MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnGotFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnLostFocus(MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnMouseLeftButtonDown(MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard left mouse button event handler. 
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.OnQueryCursor(MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard query cursor event handler.
            </summary>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.Controls.InstrFrameworkPanel.Color">
            <summary>
            This element's color.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication">
            <summary>
            Base class for framework test application.
            </summary>
            <remarks>
            A framework test app deals with Window and Application classes, not HwndSource or UIDispatcher classes.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.#ctor">
            <summary>
            Construct our app.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.OnExit(MSAvalon.Windows.ExitEventArgs)">
            <summary>
            Perform various operations when shutting down.
            </summary>
            <param name="e">Event arguments package.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.Close">
            <summary>
            Close the application.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication._closeApp">
            <summary>
            What method closes the test application?
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.Framework">
            <summary>
            Automation framework.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.TestPassed">
            <summary>
            Did this test app pass?
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.RunTestHandler">
            <summary>
            What method runs our test?
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.BaseTestApplication.ValidateTestHandler">
            <summary>
            What method verifies the result of our test?
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.TestApp">
            <summary>
            A lite test application framework.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.#ctor">
            <summary>
            Things every app needs.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.Run">
            <summary>
            Run our test.
            </summary>
            <remarks>
            We set and get the TestPassed property within this method. 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.CreateStandardSource(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an HwndSource based on a standard Win32 window.
            </summary>
            <param name="x">x position of window (screen coordinates).</param>
            <param name="y">y position of window (screen coordinates).</param>
            <param name="w">Width of window (pixels).</param>
            <param name="h">Height of window (pixels).</param>
            <returns>HwndSource object.</returns>
            <remarks>TODO: relocate to a standard library.</remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.DoSetup(System.Object)">
            <summary>
            Set up our test. 
            </summary>
            <param name="arg">User-defined argument.</param>
            <returns>Null object.</returns>
            <remarks>
            Override this in your derived app to do custom setup like window creation and initialization.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations against the window.</returns>
            <remarks>
            Override this in your derived app to define the input you want to send to the app.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.DoExecute(System.Object)">
            <summary>
            Execute the test.
            </summary>
            <param name="arg">User-defined argument.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.ExecuteTestOperations">
            <summary>
            Execute the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.InputCompleteHandler(System.Object,System.EventArgs)">
            <summary>
            This is called when the last InputReport is processed as a result
            of the test operation, or when no test operations need to be run.
            </summary>
            <param name="sender">Not used.</param>
            <param name="e">Not used.</param>
            <remarks>
            This handler will post the validation and cleanup routines with Background priority,
            so other input events should have plenty of time to execute.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.DoValidate(System.Object)">
            <summary>
            Validate our test.
            </summary>
            <param name="sender">User-defined argument.</param>
            <returns>Null object.</returns>
            <remarks>
            Override this in your derived app to validate your executed test.
            If your test results are as expected, set TestPassed=true within your override.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.DoTearDown(System.Object)">
            <summary>
            Tear down our test.
            </summary>
            <param name="sender">User-defined argument.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.TestApp._dispatcher">
            <summary>
            Default dispatcher for app.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.TestApp._context">
            <summary>
            Default UI Context for app.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.TestApp._hwnd">
            <summary>
            Handle to app window.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.TestApp._rootElement">
            <summary>
            The root element in the app window.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp.Quit(System.Object)">
            <summary>
            Stop the application.
            </summary>
            <param name="disp">Active application dispatcher.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestApp._OnPostNotifyInput(System.Object,MSAvalon.Windows.Input.NotifyInputEventArgs)">
            <summary>
            Default handler for the PostNotifyInput event.
            </summary>
            <param name="sender">Input manager.</param>
            <param name="args">Event-specific arguments.</param>
            <remarks>
            This is an informational event handler, not to be used for any test operations.
            </remarks>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestApp.Framework">
            <summary>
            Automation logger object.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestApp.VerboseTrace">
            <summary>
            Do we do a verbose trace of our output?
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestApp.QuitAfterRun">
            <summary>
            Do we quit after the test is run?
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestApp.TestPassed">
            <summary>
            Did our test pass?
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.Controls.TestDependencyInputObject">
            <summary>
            A dependency object that is also an input element (IInputElement).
            </summary>
            <remarks>
            By design, an object of this class cannot actually be used for input.
            Therefore, it is a good class to use for negative testing of input APIs that accept IInputElement.
            All interface members are implemented, but stubbed out.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.TestDependencyInputObject.BuildRoute(MSAvalon.Windows.EventRoute,MSAvalon.Windows.RoutedEventArgs)">
            <summary>
                Builds the event route
            </summary>
            <param name="route">
                The <see cref="T:MSAvalon.Windows.EventRoute"/> being
                built
            </param>
            <param name="args">
                <see cref="T:MSAvalon.Windows.RoutedEventArgs"/> for the RoutedEvent to be raised
                post building the route.
            </param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.TestDependencyInputObject.AddHandler(MSAvalon.Windows.RoutedEventID,System.Delegate)">
            <summary>
                Add an instance handler for the given RoutedEventID
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.TestDependencyInputObject.RemoveHandler(MSAvalon.Windows.RoutedEventID,System.Delegate)">
            <summary>
                Remove all instances of the given 
                handler for the given RoutedEventID
            </summary>
            <param name="routedEventID"/>
            <param name="handler"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.Controls.TestDependencyInputObject.GetRoutedEventsWithHandlers">
            <summary>
                Get RoutedEventIDs with handlers
            </summary>
            <remarks>
                Used by XamlSerializer to serialize Events
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.TestHwndSource">
            <summary>
            A lite test source.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestHwndSource.#ctor">
            <summary>
            Hide objects from being inserted into collections.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestHwndSource.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create an HwndSource based on a standard Win32 window.
            </summary>
            <param name="x">x position of window (screen coordinates).</param>
            <param name="y">y position of window (screen coordinates).</param>
            <param name="w">Width of window (pixels).</param>
            <param name="h">Height of window (pixels).</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestHwndSource.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Application hook to handle incoming Windows messages.
            </summary>
            <param name="hwnd">Window handle.</param>
            <param name="msg">Message sent to the window.</param>
            <param name="wParam">WPARAM value of the message.</param>
            <param name="lParam">LPARAM value of the message.</param>
            <param name="handled">Handled-ness of the message.</param>
            <returns>0 if everything is OK, non-zero otherwise.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestHwndSource.Quit(System.Object)">
            <summary>
            Stop the application.
            </summary>
            <param name="disp">Active application dispatcher.</param>
            <returns>Null object.</returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestHwndSource.Source">
            <summary>
            The underlying HWND source.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.ISubject">
            <summary>
            This interface describes a subject in the Observer Pattern.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.ISubject.Attach(Avalon.Test.CoreUI.CoreInput.Common.IObserver)">
            <summary>
            Add a listener to the operation.
            </summary>
            <param name="o">Listener.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.ISubject.Detach(Avalon.Test.CoreUI.CoreInput.Common.IObserver)">
            <summary>
            Remove a listener from the operation.
            </summary>
            <param name="o">Listener.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.ISubject.Notify">
            <summary>
            Notify all listeners of a state change in the operation.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.TestOp">
            <summary>
            Generalized test operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOp.Start">
            <summary>
            Start test operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOp.Attach(Avalon.Test.CoreUI.CoreInput.Common.IObserver)">
            <summary>
            Add a listener to the test operation.
            </summary>
            <param name="testOpListener">Listener.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOp.Detach(Avalon.Test.CoreUI.CoreInput.Common.IObserver)">
            <summary>
            Remove a listener from the operation.
            </summary>
            <param name="testOpListener">Listener.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOp.Notify">
            <summary>
            Notify all listeners of a state change in the operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOp.InvokeInput(MSAvalon.Threading.UIContextOperationCallback,System.Object)">
            <summary>
            Post an input handler to the queue
            </summary>
            <param name="handler">handler</param>
            <param name="arg">arg</param>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestOp.Complete">
            <summary>
            Has this test operation completed?
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.IObserver">
            <summary>
            This interface describes an observer in the Observer Pattern.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.IObserver.Update">
            <summary>
            Update observer state based on the state of the subject.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener">
            <summary>
            This class observes test operations.
            </summary>
            <remarks>
            Based on observer pattern code:
            http://www.dofactory.com/patterns/PatternObserver.aspx
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener.#ctor(Avalon.Test.CoreUI.CoreInput.Common.TestOp)">
            <summary>
            Construct a listener to the desired test operation.
            </summary>
            <param name="op">Test operation.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener.Update">
            <summary>
            Update listener state.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener.FireEventHandler(System.Object)">
            <summary>
            Execute an event handler if it exists.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener._currentState">
            <summary>
            Current state of test operation.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener._desiredState">
            <summary>
            Desired state of test operation.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener.Operation">
            <summary>
            Associated test operation.
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.CoreInput.Common.TestOpListener.InputComplete">
            <summary>
            Fires when the associated input operation completes.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.TestOpRunner">
            <summary>
            This class runs a series of test operations in order.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpRunner.#ctor(Avalon.Test.CoreUI.CoreInput.Common.TestOp[],System.EventHandler)">
            <summary>
            Construct a runner for the desired test operations.
            </summary>
            <param name="ops">Test operation.</param>
            <param name="handler">Event handler to run once the sequence is complete.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpRunner.Start">
            <summary>
            Run the operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpRunner.OnComplete(System.Object,System.EventArgs)">
            <summary>
            Fires when all test operations are complete.
            </summary>
            <param name="o">Not used.</param>
            <param name="args">Not used.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.TestOpRunner.OnHandler(System.Object)">
            <summary>
            Execute a handler once the sequence is complete.
            </summary>
            <param name="handlerObject">Event Handler.</param>
            <returns>Null.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp">
            <summary>
            Test operation simulating a key being pressed.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.KeyOp">
            <summary>
            Abstract test operation involving keyboard keys.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyOp.#ctor">
            <summary>
            Every key operation does this.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Construct abstract key operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyOp.#ctor(MSAvalon.Windows.Window,System.Byte)">
            <summary>
            Construct abstract key operation.
            </summary>
            <param name="w">Window</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyOp.Start">
            <summary>
            Start abstract key operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyOp.OnKey(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Override this to do what you want with the key.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="key">Key byte (VK constant)</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.KeyOp._hwnd">
            <summary>
            Window handle.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.CoreInput.Common.KeyOp.Key">
            <summary>
            Key associated with this operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Construct key press operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp.#ctor(MSAvalon.Windows.Window,System.Byte)">
            <summary>
            Construct key press operation.
            </summary>
            <param name="w">Window</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp.#ctor(System.Runtime.InteropServices.HandleRef,MSAvalon.Windows.Input.Key)">
            <summary>
            Construct key press operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp.#ctor(MSAvalon.Windows.Window,MSAvalon.Windows.Input.Key)">
            <summary>
            Construct key press operation.
            </summary>
            <param name="w">Window</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp.OnKey(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Press a key.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="key">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyDownOp.SendNext(System.Object)">
            <summary>
            Moves the mouse to the next point in the series of interpolated points.
            </summary>
            <param name="iPoint">Next index in the series.</param>
            <returns>null</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp">
            <summary>
            Test operation simulating a key being released.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Construct key release operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp.#ctor(MSAvalon.Windows.Window,System.Byte)">
            <summary>
            Construct key release operation.
            </summary>
            <param name="w">Window</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp.#ctor(System.Runtime.InteropServices.HandleRef,MSAvalon.Windows.Input.Key)">
            <summary>
            Construct key release operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp.#ctor(MSAvalon.Windows.Window,MSAvalon.Windows.Input.Key)">
            <summary>
            Construct key release operation.
            </summary>
            <param name="w">Window</param>
            <param name="k">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp.OnKey(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Release a key.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="key">Key byte (VK constant)</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.KeyUpOp.SendNext(System.Object)">
            <summary>
            Perform next operation.
            </summary>
            <param name="iPoint">Not used.</param>
            <returns>null</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp">
            <summary>
            Test operation simulating a mouse button being clicked.
            </summary>
            <remarks>
            A "click" consists of one or more consecutive mouse-down / mouse-up operations.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Byte,System.Int32)">
            <summary>
            Construct mouse-click operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="btn">Button</param>
            <param name="nClicks">Number of clicks</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp.#ctor(MSAvalon.Windows.Window,System.Byte,System.Int32)">
            <summary>
            Construct mouse-click operation.
            </summary>
            <param name="w">Window</param>
            <param name="btn">Button</param>
            <param name="nClicks">Number of clicks</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp.Start">
            <summary>
            Start mouse-click operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp.SendNext(System.Object)">
            <summary>
            Moves the mouse to the next point in the series of interpolated points.
            </summary>
            <param name="iPoint">Next index in the series.</param>
            <returns>null</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp._nClicksRequested">
            <summary>
            How many clicks have been requested by the caller?
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseClickOp._nClicksReported">
            <summary>
            How many clicks have been reported to the input manager?
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.MouseDownOp">
            <summary>
            Test operation simulating a mouse button being pressed.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseDownOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Construct mousedown operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="btn">Button</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseDownOp.#ctor(MSAvalon.Windows.Window,System.Byte)">
            <summary>
            Construct mousedown operation.
            </summary>
            <param name="w">Window</param>
            <param name="btn">Button</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseDownOp.Start">
            <summary>
            Start mouse-click operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseDownOp.SendNext(System.Object)">
            <summary>
            Moves the mouse to the next point in the series of interpolated points.
            </summary>
            <param name="iPoint">Next index in the series.</param>
            <returns>null</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.MouseUpOp">
            <summary>
            Test operation simulating a mouse button being released.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseUpOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Byte)">
            <summary>
            Construct mousedown operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="btn">Button</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseUpOp.#ctor(MSAvalon.Windows.Window,System.Byte)">
            <summary>
            Construct mousedown operation.
            </summary>
            <param name="w">Window</param>
            <param name="btn">Button</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseUpOp.Start">
            <summary>
            Start mouse-click operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseUpOp.SendNext(System.Object)">
            <summary>
            Moves the mouse to the next point in the series of interpolated points.
            </summary>
            <param name="iPoint">Next index in the series.</param>
            <returns>null</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveStrategy">
            <summary>
            How do you want the mouse to move?
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveStrategy.Immediate">
            <summary>
            Move immediately to the target point.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveStrategy.Smooth">
            <summary>
            Move to the target point while hitting all points in between.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp">
            <summary>
            Mouse move operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,Avalon.Test.CoreUI.CoreInput.Common.MouseMoveStrategy)">
            <summary>
            Construct mouse move operation.
            </summary>
            <param name="hwnd">Win32 window (if any) to use as coordinate base.</param>
            <param name="x">x position to move to.</param>
            <param name="y">x position to move to.</param>
            <param name="strategy">Mouse moving strategy to use.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp.#ctor(MSAvalon.Windows.Window,System.Int32,System.Int32,Avalon.Test.CoreUI.CoreInput.Common.MouseMoveStrategy)">
            <summary>
            Construct mouse move operation.
            </summary>
            <param name="w">Window to use as coordinate base.</param>
            <param name="x">x position to move to.</param>
            <param name="y">x position to move to.</param>
            <param name="strategy">Mouse moving strategy to use.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp.Start">
            <summary>
            Start mouse-move operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp.SendNext(System.Object)">
            <summary>
            Moves the mouse to the next point in the series of interpolated points.
            </summary>
            <param name="iPoint">Next index in the series.</param>
            <returns>null</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp.GetInterpolatedPoints(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a list of points between a start point and an end point.
            </summary>
            <param name="x1">x coordinate of start point.</param>
            <param name="y1">y coordinate of start point.</param>
            <param name="x2">x coordinate of end point.</param>
            <param name="y2">y coordinate of end point.</param>
            <returns>An array of points between (x1,y1) and (x2,y2).</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp._hwnd">
            <summary>
            Window handle.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp._x">
            <summary>
            x coordinate to go to.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp._y">
            <summary>
            y coordinate to go to.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.MouseMoveOp._strategy">
            <summary>
            Mouse move strategy to use.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp">
            <summary>
            Test operation simulating a mouse wheel being moved.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp.#ctor(System.Runtime.InteropServices.HandleRef,System.Int32)">
            <summary>
            Construct MouseWheel operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="wheelDelta">Wheel delta</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp.#ctor(MSAvalon.Windows.Window,System.Int32)">
            <summary>
            Construct MouseWheel operation.
            </summary>
            <param name="w">Window handle</param>
            <param name="wheelDelta">Wheel delta</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp.#ctor(System.Runtime.InteropServices.HandleRef,Avalon.Test.Automation.MouseWheelDirection,System.Int32)">
            <summary>
            Construct MouseWheel operation.
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="direction">Direction of mouse wheel.</param>
            <param name="notchCount">How many notches moved?</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp.#ctor(MSAvalon.Windows.Window,Avalon.Test.Automation.MouseWheelDirection,System.Int32)">
            <summary>
            Construct MouseWheel operation.
            </summary>
            <param name="w">Window</param>
            <param name="direction">Direction of mouse wheel.</param>
            <param name="notchCount">How many notches moved?</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp.Start">
            <summary>
            Start mouse wheel operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.MouseWheelOp.SendNext(System.Object)">
            <summary>
            Send the wheel input.
            </summary>
            <param name="iPoint">Next index in the series.</param>
            <returns>null</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.TestOpVoidHandler">
            <summary>
            A delegate to be used with VoidOp. 
            The method used must have no arguments, and return nothing.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.Common.VoidOp">
            <summary>
            Generic void-method operation.
            </summary>
            <remarks>
            Use this operation to put an arbitrary user-defined void method into the queue. 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.VoidOp.#ctor(Avalon.Test.CoreUI.CoreInput.Common.TestOpVoidHandler)">
            <summary>
            Construct void operation.
            </summary>
            <param name="handler">Handler to run.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.VoidOp.Start">
            <summary>
            Start operation.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.Common.VoidOp.SendNext(System.Object)">
            <summary>
            Run user-defined handler.
            </summary>
            <param name="iPoint">Not used.</param>
            <returns>null</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.Common.VoidOp._handler">
            <summary>
            Method handler.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.MouseUtility">
            <summary>
            Summary description for MouseUtility.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.BlockInput">
            <summary>
            This method it will block the External input that can interfiere with the Test Case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.UnBlockInput">
            <summary>
            This method it will block the External input that can interfiere with the Test Case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.AbsoluteMouseMove(System.Int32,System.Int32)">
            <summary>
            Specifies that the x and y parameters contain normalized absolute coordinates.
            </summary>
            <param name="x">Horizontal</param>
            <param name="y">Vertical</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.MouseMove(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Specifies that the x and y parameters contain relative coordinates.
            </summary>
            <param name="Source">Window to bring to foreground</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="SetForegroundWindow">If you want to the the window to the foreground</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.MouseMoveRelative2Window(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Specifies that the x and y parameters contain relative coordinates.
            </summary>
            <param name="Source">Window to bring to foreground</param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="SetForegroundWindow">If you want to the the window to the foreground</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.MouseLeftButtonClick(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Source"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="SetForegroundWindow"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.MouseLeftButtonClickonElement(MSAvalon.Windows.UIElement,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.GetElementRect(MSAvalon.Windows.UIElement,System.IntPtr)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.GetElementRect(MSAvalon.Windows.UIElement)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.GetWindowHandleFromElement(MSAvalon.Windows.UIElement)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.CalculateBoundingPoints(MSAvalon.Windows.Point[],MSAvalon.Windows.Point@,MSAvalon.Windows.Point@)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.MouseUtility.GetTopLevelClientRelativeRect(MSAvalon.Windows.UIElement)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext">
            <summary>
            TypeDescriptorContext class used for describing Types.
            It contains a ParserContext that others can retrieve via GetService.
            </summary>
            <remarks>
            Based on implementation of internal class TypeConvertContext.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.#ctor(MSAvalon.Windows.Serialization.ParserContext)">
            <summary>
            Construct a TestTypeDescriptorContext based on a supplied parser context.
            </summary>
            <param name="parserContext">Valid parser context.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.OnComponentChanged">
            <summary>
            ITypeDescriptorContext OnComponentChange
            </summary>
            <remarks>
            member is public only because base class has
            this public member declared
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.OnComponentChanging">
            <summary>
            ITypeDescriptorContext OnComponentChanging
            </summary>
            <remarks>
            member is public only because base class has
            this public member declared
            </remarks>
            <returns>
            false
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.GetService(System.Type)">
            <summary>
            IServiceProvider GetService implementation
            </summary>
            <param name="serviceType">
            Type of Service to be returned
            </param>
            <remarks>
            Currently returns the ParserContext itself or as a UriContext.
            </remarks>
            <returns>
            Service object, or null if service is not found
            </returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.Container">
            <summary>
            ITypeDescriptorContext Container property
            </summary> 
            <remarks>
            property is public only because base class has
            this public property declared
            </remarks>
            <returns>
            null
            </returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.Instance">
            <summary>ITypeDescriptorContext Instance property</summary> 
            <remarks>
            property is public only because base class has
            this public property declared
            </remarks>
            <returns>
            null
            </returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Common.TestTypeDescriptorContext.PropertyDescriptor">
            <summary>ITypeDescriptorContext PropertyDescriptor</summary> 
            <remarks>
            property is public only because base class has
            this public property declared
            </remarks>
            <returns>
            null
            </returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.BamlHelper">
            <summary>
            Contains convenience methods for handling BAML files.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlHelper.ReadBaml(System.String,Avalon.Test.CoreUI.Parser.BamlHelper.BamlNodeCallback)">
            <summary>
            Reads an existing BAML using BamlReader. After reading each node, it calls the given 
            callback function, providing the function with the data in the node just read.
            </summary>
            <param name="bamlIn">Path of the BAML to read</param>
            <param name="callback">Function to be called after reading each node</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlHelper.CopyBaml(System.String,System.String)">
            <summary>
            Reads an existing BAML using BamlReader and writes the same contents to a new BAML
            using BamlWriter
            </summary>
            <param name="bamlIn">Path of the Original BAML</param>
            <param name="bamlOut">Path of the BAML to be written</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlHelper.EditBaml(System.String,System.String,Avalon.Test.CoreUI.Parser.BamlHelper.BamlNodeCallback)">
             <summary>
             Reads an existing BAML using BamlReader, allows editing of the contents
             and writes the (possibly modified) contents to a new BAML using BamlWriter.
            
             After each node is read from the BamlReader, it calls the given callback function,
             passing the data in the node just read. The callback function can then modify the
             data. These modified contents will then be written into the new BAML.
             </summary>
             <param name="bamlIn">Path of the Original BAML</param>
             <param name="bamlOut">Path of the BAML to be written</param>
             <param name="callback">EditBamlNode callback. Can be null.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlHelper.PrintBamlNode(MSAvalon.Windows.Serialization.BamlReader)">
            <summary>
            Prints a set of fields from a BamlReader
            </summary>
            <param name="reader">BamlReader to print</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlHelper.PopulateBamlNodeData(MSAvalon.Windows.Serialization.BamlReader,Avalon.Test.CoreUI.Parser.BamlNodeData)">
            <summary>
            Copy fields from BamlReader to the corresponding fields of BamlNodeData.
            </summary>
            <param name="reader">Source BamlReader</param>
            <param name="nodeData">Destination nodeData where fields are to be copied.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlHelper.CompareBamlNodes(Avalon.Test.CoreUI.Parser.BamlNodeData,Avalon.Test.CoreUI.Parser.BamlNodeData)">
            <summary>
            A function that compares the actual field values of a BamlNodeData with those expected,
            and throws an exception at the first mis-match.
            </summary>
            <param name="actualData">Actual data</param>
            <param name="expectedData">Expected data</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.BamlHelper.BamlNodeCallback">
            <summary>
            Callback delegate used by methods like ReadBaml, EditBaml, etc. in this class.
            Please see the documentation of these methods for further information.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.BamlNodeData">
            <summary>
            This class holds a subset of BamlReader fields, but they are read-write here,
            as opposed to BamlReader.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.NodeType">
            <summary>
            The type of node, be it element, property, etc.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.AssemblyName">
            <summary>
            AssemblyName
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.Prefix">
            <summary>
            Prefix
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.XmlNamespace">
            <summary>
            XmlNamespace
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.ClrNamespace">
            <summary>
            ClrNamespace
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.LocalName">
            <summary>
            LocalName
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.BamlNodeData.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CustomControl">
            <summary>Custom Control adding IAddChild for Core Parser Test.</summary>
            <remarks>
            Create custom control to implement IAddChild for Parser Test.
            <para>
                Contains Custom control
                        - PanelFlow 
                        - CustomControl
                        - Item
                        - Label
                        - ClrParseLiteral
            </para> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomControl.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.PanelFlow">
            <summary>Custom Control adding IAddChild for Core Parser Test.</summary>
            <remarks>
            Create custom control to implement IAddChild for Parser Test.
            <para>
                Contains Custom control
                        - PanelFlow 
                        - CustomControl
                        - Item
                        - Label
                        - ClrParseLiteral
            </para> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.PanelFlow.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.PanelFlow.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.PanelFlow.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
             Add a text string to this control
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.PanelFlow.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
             Add an object child to this control
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.PanelFlow.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Create Event Handler when Render is called.
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.PanelFlow._logicalChildren">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.PanelFlow.RenderCalledEvent">
            <summary>
            Create Event Handler when Render is called.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.PanelFlow.Children">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Item">
            <summary>
            Item custom control to add in PanelFlow for Parser Testing
            Custom Control adding IAddChild for Core Parser Test.</summary>
            <remarks>
            Create custom control to implement IAddChild for Parser Test.
            <para>
                Contains Custom control
                        - PanelFlow 
                        - CustomControl
                        - Item
                        - Label
                        - ClrParseLiteral
            </para> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Item.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Item.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Item.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Item.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
             Add a text string to this control
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Item.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
             Add an object child to this control
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item.ColorProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item.CCWidthProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item.CCHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item.BorderBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item.BackgroundBrushProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item.GradientBackgroundBrushProperty">
            <summary>
              Gradient brush for Changeable pattern testing
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Item._logicalChildren">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.Content">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.CCWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.CCHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.BorderBrush">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.BackgroundBrush">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Item.GradientBackgroundBrush">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Label">
            <summary>Custom Control adding IAddChild for Core Parser Test.</summary>
            <remarks>
            Create custom control to implement IAddChild for Parser Test.
            <para>
                Contains Custom control
                        - PanelFlow 
                        - CustomControl
                        - Item
                        - Label
                        - ClrParseLiteral
            </para> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.OnMouseTestEnter(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Event OnMouseEnter
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
             Add a text string to this control
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
             Add an object child to this control
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label.TextProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label._textCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label._textCacheValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.OnTextInvalidated(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.TextCachingAccessor(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label.FakeFontSizeProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label._fontSizeCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label._fontSizeCacheValid">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.OnFakeFontSizeInvalidated(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.FakeFontSizeCachingAccessor(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label.ForegroundProperty">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label._foregroundCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.OnForegroundInvalidated(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Label.ForegroundCachingAccessor(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Label._logicalChildren">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Label.Children">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Label.Text">
            <summary>
            The Text property
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Label.FakeFontSize">
            <summary>
            The FakeFontSize property describes the desired size of the text.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Label.Foreground">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ClrParseLiteralClass">
            <summary>Custom Control adding IAddChild for Core Parser Test.</summary>
            <remarks>
            Create custom control to implement IAddChild for Parser Test.
            <para>
                Contains Custom control
                        - PanelFlow 
                        - CustomControl
                        - Item
                        - Label
                        - ClrParseLiteral
            </para> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ClrParseLiteralClass.Parse(System.Xml.XmlTextReader,MSAvalon.Windows.Serialization.ParserContext)">
            <summary>
            For the ultimate in control over markup, a component can implement IParseLiteralContent.  This interface gives the component complete control over parsing of children.
            The component itself, and attributes on the components tag, are not part of the literal content and are parsed by the usual Avalon parsing logic.
            </summary>
            <param name="textReader"></param>
            <param name="parserContext"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrParseLiteralClass._literalString">
            <summary>
            literalstring
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrParseLiteralClass.LiteralString">
            <summary>
            Property LiteralString
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ClrObject1">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrObject1._prop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrObject1._testprop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrObject1._testpro">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrObject1._testint">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrObject1.Prop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrObject1.TestProp">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrObject1.TestPro">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrObject1.TestInt">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ClrPrivate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ClrPrivate.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrPrivate._prop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrPrivate.Prop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ClrInternal">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ClrInternal.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrInternal._prop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrInternal.Prop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ClrProtected">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ClrProtected.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ClrProtected._prop">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ClrProtected.Prop">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.FakeBrush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.FakeBrush.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.FakeBrush.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="opacity"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.FakeBrush._opacity">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.FakeBrush.Opacity">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.FakeSolidColorBrush">
            <summary>
            Simple, flat example resource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.FakeSolidColorBrush.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.FakeSolidColorBrush.#ctor(System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="opacity"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.FakeSolidColorBrush._color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.FakeSolidColorBrush.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush">
            <summary>
            More complex hierarchical resource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.#ctor(Avalon.Test.CoreUI.Parser.FakeGradientStop,Avalon.Test.CoreUI.Parser.FakeGradientStop,Avalon.Test.CoreUI.Parser.CCLinearGradientBrush,System.Double)">
            <summary>
            
            </summary>
            <param name="stop1"></param>
            <param name="stop2"></param>
            <param name="innerBrush"></param>
            <param name="opacity"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.Stop1">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.Stop2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.CCLinearGradientBrush.InnerBrush">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.FakeGradientStop">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.FakeGradientStop.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.FakeGradientStop.#ctor(System.String,System.Single)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <param name="location"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.FakeGradientStop._color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.FakeGradientStop.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.FakeGradientStop.Location">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ILoadControl">
            <summary>
            ILoadControl for testing async test.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ILoadControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ILoadControl.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ILoadControl.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
             Add a text string to this control
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ILoadControl.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
             Add an object child to this control
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ChangeableTest">
            <summary>
            Instantiating of Changeable used for resource test
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.ChangeableTest._isChangeTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ChangeableTest.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="theValue"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ChangeableTest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ChangeableTest.CloneCore(System.Boolean)">
            <summary>
            
            </summary>
            <param name="shallowClone"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.ChangeableTest.IsChangeTest">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.OpenTextTag">
            <summary>
            For Testing parsing unsecure tag.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.OpenTextTag.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.TestDataBind">
            <summary>
            A data item, used as a source for databinding in the Parser Test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestDataBind.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestDataBind.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="color"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestDataBind.ChangeAll(System.String)">
            <summary>
            
            </summary>
            <param name="newString"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestDataBind.RaisePropertyChangedEvent(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.TestDataBind.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.TestDataBind.String">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.TestDataBind.Color">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Human">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Human.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Human.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="Name"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Human.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.Human.Friends">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CoreTestCompiler">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.Run(Avalon.Test.CoreUI.Common.CoreLogger,System.String,System.String)">
            <summary>
            This is the equivalent of the Main method. 
            </summary>
            <param name="frm">The automation framework instance. </param>
            <param name="xamlFile"></param>
            <param name="projectType">Project Type. Could be BAML or CAML</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.Run(Avalon.Test.CoreUI.Common.CoreLogger,System.String,System.String,System.String)">
            <summary>
            This is the equivalent of the Main method. 
            </summary>
            <param name="frm">The automation framework instance. </param>
            <param name="xamlFile"></param>
            <param name="projectType">Project Type. Could be BAML or CAML</param>
            <param name="targetType">Target type. Could be Application, Document or Library.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.FindTargetFile(System.String)">
            <summary>
            Returns the target file needed by MSBuild
            </summary>
            <param name="targetType">Target type</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.FindMSBuild(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.FindWCPBin(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.GenerateProjFile(Avalon.Test.CoreUI.Common.CoreLogger,System.String,System.String,System.String,System.String)">
            <summary>
            Generate the project file
            </summary>
            <param name="frm">Logger</param>
            <param name="projectFileName"></param>
            <param name="xamlFile"></param>
            <param name="projectType">Could be BAML or CAML</param>
            <param name="targetType">Could be Application, Document or Library</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.GenerateAppdef(System.String,System.String)">
            <summary>
            Generate the Appdef file
            </summary>
            <param name="appdefFileName"></param>
            <param name="xamlFile"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.GenerateProject(Avalon.Test.CoreUI.Common.CoreLogger,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <param name="xamlFile"></param>
            <param name="projectType">Could be BAML or CAML</param>
            <param name="targetType">Could be Application, Document or Library</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.CompileProject(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Compile the Avalon project we have generated for the test case.
            </summary>
            <param name="frm"></param>
            <param name="projectName">The filename of the Proj file</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.CleanUpCompilation(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CoreTestCompiler.CheckCompileResult(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.IMyCustomPanel">
            <summary>
            Define contract for access panel
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.IMyCustomPanel.InvokeAfterRender(System.Object)">
            <summary>
             Method to call after Render. Verify will be called here. Should be called in OnRender()
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.IMyCustomPanel.RenderedEvent">
            <summary>
             Event Handler 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyDockPanel">
            <summary>
            MyDockPanel is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyDockPanel.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyDockPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyDockPanel.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyDockPanel.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyDockPanel.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyDockPanel.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyFixedPanel">
            <summary>
            MyFixedPanel is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyFixedPanel.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyFixedPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyFixedPanel.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyFixedPanel.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyFixedPanel.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyFixedPanel.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyCanvas">
            <summary>
            MyCanvas is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyCanvas.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCanvas.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCanvas.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCanvas.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyCanvas.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyCanvas.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyFlowPanel">
            <summary>
            MyFlowPanel is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyFlowPanel.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyFlowPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyFlowPanel.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyFlowPanel.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyFlowPanel.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyFlowPanel.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyGridPanel">
            <summary>
            MyGridPanel is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyGridPanel.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyGridPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyGridPanel.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyGridPanel.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyGridPanel.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyGridPanel.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyTextPanel">
            <summary>
            MyTextPanel is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyTextPanel.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyTextPanel.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyTextPanel.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyTextPanel.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyTextPanel.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyTextPanel.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyClass">
            <summary>
            This class defines custom attached properties and a custom attached event that 
            can be used with other dependency objects.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyTransparencyProperty">
            <summary>
            DependencyProperty for the attached MyTransparency property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.GetMyTransparency(MSAvalon.Windows.DependencyObject)">
            <summary>
            Reads the attached property MyTransparency from the given element.
            </summary>
            <param name="e">The element from which to read the attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.SetMyTransparency(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            Writes the attached property MyTransparency to the given element.
            </summary>
            <param name="e">The element to which to write the attached property.</param>
            <param name="myTransparency">The property value to set</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyColorProperty">
            <summary>
            DependencyProperty for the attached MyColor property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.GetMyColor(MSAvalon.Windows.DependencyObject)">
            <summary>
            Reads the attached property MyColor from the given element.
            </summary>
            <param name="e">The element from which to read the attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.SetMyColor(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Parser.MyColor)">
            <summary>
            Writes the attached property MyColor to the given element.
            </summary>
            <param name="e">The element to which to write the attached property.</param>
            <param name="myColor">The property value to set</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyChildrenProperty">
            <summary>
            DependencyProperty for the attached MyChildren property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.GetMyChildren(MSAvalon.Windows.DependencyObject)">
            <summary>
            Reads the attached property MyChildren from the given element.
            </summary>
            <param name="e">The element from which to read the attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.SetMyChildren(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Parser.MyChildren)">
            <summary>
            Writes the attached property MyChildren to the given element.
            </summary>
            <param name="e">The element to which to write the attached property.</param>
            <param name="myChildren">The property value to set</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyTextProperty">
            <summary>
            DependencyProperty for the attached MyText property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.GetMyText(MSAvalon.Windows.DependencyObject)">
            <summary>
            Reads the attached property MyText from the given element.
            </summary>
            <param name="e">The element from which to read the attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.SetMyText(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Parser.MyText)">
            <summary>
            Writes the attached property MyText to the given element.
            </summary>
            <param name="e">The element to which to write the attached property.</param>
            <param name="myText">The property value to set</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyBrushesProperty">
            <summary>
            DependencyProperty for the attached MyBrushes property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.GetMyBrushes(MSAvalon.Windows.DependencyObject)">
            <summary>
            Reads the attached property MyBrushes from the given element.
            </summary>
            <param name="e">The element from which to read the attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.SetMyBrushes(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.Media.Brush[])">
            <summary>
            Writes the attached property MyBrushes to the given element.
            </summary>
            <param name="e">The element to which to write the attached property.</param>
            <param name="myBrushes">The property value to set</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyColorSetProperty">
            <summary>
            DependencyProperty for the attached MyColorSet property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.GetMyColorSet(MSAvalon.Windows.DependencyObject)">
            <summary>
            Reads the attached property MyColorSet from the given element.
            </summary>
            <param name="e">The element from which to read the attached property.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.SetMyColorSet(MSAvalon.Windows.DependencyObject,Avalon.Test.CoreUI.Parser.MyColorSet)">
            <summary>
            Writes the attached property MyColorSet to the given element.
            </summary>
            <param name="e">The element to which to write the attached property.</param>
            <param name="MyColorSet">The property value to set</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyRoutedEventID">
            <summary>
            Custom event.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyClass.FireMyClrEvent">
            <summary>
            Fires the MyClr event with EventArgs.Empty
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyClass.MyClrEventReached">
            <summary>
            This flag denotes that a handler received MyClrEvent. 
            We clear it in the FireMyClrEvent() function above, before firing the event. 
            We set it in a handler function, so that we can verify that the event was properly fired.
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyClass.MyClrEvent">
            <summary>
            Custom CLR Event 
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyClass.MyClrHandlersAdded">
            <summary>
            Informs whether there are event handlers currently added for MyClrEvent
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyClass.MyRoutedEventHandler">
            <summary>
                This delegate must used by handlers of the MyRoutedEvent event.
            </summary>
            <param name="sender">The current element along the event's route.</param>
            <param name="e">The event arguments containing additional information about the event.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyClass.MyClrEventHandler">
            <summary>
            Delegate for the event.
            </summary>
            <param name="source">Source of the event</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyColor">
            <summary>
            The type of MyClass's MyColor property
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyColor.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyColor.Color">
            <summary>
            Color property
            </summary>
            <value>Value of the color string to set.</value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyChildren">
            <summary>
            The type of MyClass's MyChildren property
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyChildren.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyChildren.AddChild(System.Object)">
            <summary>
            Add a child.
            </summary>
            <param name="o">Child to be added</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyChildren.AddText(System.String)">
            <summary>
            Add a text child
            </summary>
            <param name="s">Text to be added as child</param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyChildren.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyText">
            <summary>
            The type of MyClass's MyText property
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyColorConverter">
            <summary>
            Typeconverter for MyColor class.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertFrom - Returns whether or not MyColor can convert from a given type.
            </summary>
            <returns>
            bool - True if the provided type is string, false if not.
            </returns>
            <param name="typeDescriptorContext"> The ITypeDescriptorContext for this call. </param>
            <param name="sourceType"> The Type being queried for support. </param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertTo - Returns whether or not MyColor can convert to a given type.
            </summary>
            <returns>
            bool - True if the provided type is string, false if not.
            </returns>
            <param name="typeDescriptorContext"> The ITypeDescriptorContext for this call. </param>
            <param name="destinationType"> The Type being queried for support. </param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertFrom - Attempt to convert to a MyColor from the given object
            </summary>
            <param name="typeDescriptorContext"> The ITypeDescriptorContext for this call. </param>
            <param name="cultureInfo"> The CultureInfo which is respected when converting. </param>
            <param name="value"> The object to convert to a MyColor. </param>
            <returns>The MyColor object created.</returns>
            <exception>
            An ArgumentException is thrown if the example object is not null and is not a valid type
            which can be converted to a MyColor.
            </exception>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            ConvertTo - Attempt to convert from a given object (should be MyColor) to an object of the given type
            </summary>
            <param name="typeDescriptorContext"> The ITypeDescriptorContext for this call. </param>
            <param name="cultureInfo"> The CultureInfo which is respected when converting. </param>
            <param name="value"> The object given to convert. Should be MyColor</param>
            <param name="destinationType"> The type to which this will convert the given object. </param>
            <returns>The object that was created.</returns>
            <exception>
            An ArgumentException is thrown if the example object is not null and is not a MyColor,
            or if the destinationType isn't one of the valid destination types.
            </exception>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyColorSet">
            <summary>
            The type of MyClass's MyColorSet property
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyColorSet.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyColorSet.Item(System.Int32)">
            <summary>
            Indexers
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyBorder">
            <summary>
            MyBorder is written to allow for element tree verifications.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyBorder.VerifierProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyBorder.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Event callback for render event.
            </summary>
            <param name="dc"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyBorder.InvokeAfterRender(System.Object)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyBorder.CloseTheWindow(System.Object)">
            <summary>
            Close the window
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.MyBorder.Verifier">
            <summary>
            
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Parser.MyBorder.RenderedEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ParserVerifier">
            <summary>
            Holds verification routines for various XAML files.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.GenericVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Default verification routine.  Does not real verification.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.Assert(System.Boolean,System.String)">
            <summary>
            Throws an exception with the given error message, if the condition is false.
            </summary>
            <param name="condition">Given condition</param>
            <param name="errorMesg">Error message for the exception to be thrown</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.ClrPropertyVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify the properties of the button.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.TextRecordVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify the text in the button.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.ComplexPropertyVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify complex properties.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.CustomPropEventsVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify custom properties and events.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.CustomPropertyVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify custom properties.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.PropertyAliasInStyleVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify alias properties in styles.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.PropertyIListVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify IList properties.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.CompactSyntaxVerify1(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verify the element tree for CompactDatabinding2.xaml.
            </summary>
            <param name="uie">Root of the tree.</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserVerifier.LiteralSimpleVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie">UIElement to verify</param>
            <param name="IDedObjects">Objects in the tree having an "ID" property</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_Clr">
            <summary>
            Custom CLR object
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_Clr_With_IAddChild">
            <summary>
            Custom CLR with IAddChild
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_Clr_With_IList">
            <summary>
            Custom CLR with IList. ArrayList implements IList.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_Clr_With_IAddChild_IList">
            <summary>
            Custom CLR with IAddChild and IList.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_DO">
            <summary>
            Custom DO
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_DO_With_IAddChild">
            <summary>
            Custom DO with IAddChild
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_DO_With_IList">
            <summary>
            Custom DO with IList. Uses an internal ArrayList to implement IList.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Custom_DO_With_IList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Custom_DO_With_IAddChild_IList">
            <summary>
            Custom DO with both IAddChild and IList.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationBaseCase">
             <summary>
             A base class to handle serialization and its verification.
             <para/>
             </summary>
             <remarks>
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  SerializationBaseCase.cs
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.RunTestCase(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            The main entry for the harness to call for a xaml file to be use to test 
            the serialization.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
             </summary> 
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.SaveAsXml(System.Object,MSAvalon.Windows.Serialization.XamlDesigner)">
            <summary>
            
            </summary>
            <param name="sourceTree"></param>
            <param name="designerHelper"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.ConstructObjectTree(System.String,Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
              Construct an object tree from a xaml file
             </summary>
             <param name="xamlFilename">Xaml File Name</param>
            <param name="framework">logger</param>
             <returns>Root of the resulted object tree</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.SerializeObjectTree(System.Object,System.String,MSAvalon.Windows.Serialization.XamlDesigner)">
            <summary>
            Serialize object tree to a temporary xaml file
            </summary>
            <param name="originalRoot"></param>
            <param name="filename"></param>
            <param name="helper"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.ParserObjectTree(System.String,System.Object@,Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Parse an xaml file and get an object tree. 
             </summary>
             <param name="fileName">File name for the file read from</param>
             <param name="parsedRoot">The root of the Object Tree</param>
            <param name="framework">logger</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.RunApplication(MSAvalon.Windows.UIElement)">
            <summary>
            Run Application
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.OnRendered(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationBaseCase.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.SerializationBaseCase._frmwk">
            <summary>
             Framework
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.SerializationBaseCase._tempXamlFileName">
            <summary>
             Name of Temperary xamle file 
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.SerializationBaseCase._uiContext">
            <summary>
            UIContext
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.SerializationBaseCase._dispatcher">
            <summary>
            dispatcher
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyXamlSerializer">
            <summary>
             A Public class for serialization
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.AllTypesCase">
             <summary>
             A class to create xamlfiles for all types in a assembly and 
             run serialization round trip for each one, log failed types
             <para />
             </summary>
             <remarks>
             <para />
              Microsoft
             <para />
             <para />
             FileName:  AllTypesCase.cs
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AllTypesCase.RunTestCase(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="frmwk"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AllTypesCase.DoTheTest(System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AllTypesCase.ConstructObjectTree(System.String,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="xamlStr"></param>
            <param name="framework"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AllTypesCase.ParserObjectTree(System.String,System.Object@,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="xamlStr"></param>
            <param name="parsedRoot"></param>
            <param name="framework"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.AllTypesCase._frmwk">
            <summary>
             Framework
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.AllTypesCase._uiContext">
            <summary>
            UIContext
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationXmlDiff">
            <summary>
            Diffs the two XAML trees
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationXmlDiff.Compare(System.String,System.String)">
            <summary>
            This is modified from Avalon.Test.CoreUI.Parser.XmlDiff
            Diffs the two XML trees. for now only validates structure
             Will eventually check tag names, attributes, whitespace, etc. and
             also have flags to specify which of these to check for
             If the xmlDiff we throw an exception so it can be logged to avPad.
             for generate IL code the first tag is a subclass of the original 
             so it is okay for it to be different.
            </summary> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.XMLDiffException">
            <summary>
            creating exception for different.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.XMLDiffException.#ctor(System.String,System.Xml.XmlTextReader,System.Xml.XmlTextReader,System.Exception)">
            <summary>
            output different exception with linenumber and info.
            </summary>
            <param name="Message"></param>
            <param name="original"></param>
            <param name="current"></param>
            <param name="InnerException"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.XMLDiffException.LineNumberDiffMessage">
            <summary>
            Get LineNumber that have different
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.TreeCompare">
            <summary>
            A class providing a static method to compare two object tree by 
            comparing node by node and property by property.
            
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TreeCompare.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TreeCompare.CompareObjectTree(Avalon.Test.CoreUI.Common.CoreLogger,System.Object,System.Object,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
            <summary>
            Compare two object tree. If all the child nodes follow logical link 
            are the same, return true, otherwise, return false.
            Method: compare each event and properties for the node. If the 
                    property is a complex property, treat it as another node.
            </summary>
            <param name="framework">CoreLogger</param>
            <param name="firstTree">The root for the first tree to be compared</param>
            <param name="secondTree">The root for the second tree to be compared</param>
            <param name="helper">Designer Helper to translate event handler</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TreeCompare.CompareTreeEvents(Avalon.Test.CoreUI.Common.CoreLogger,System.Object,System.Object,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
             Compare events for two node. If all the events  
             are the same, return true, otherwise, return false.
             Todo: right now, only compare the name. Should compare 
                   there value as well. Anyway, delegates are not allow to 
                   get although we can get them right now.
                   Another possible approach is to compare a string translated
                   with MyXamlSerializer. 
             </summary>
             <param name="framework">CoreLogger</param>
             <param name="firstNode">The first node</param>
             <param name="secondNode">The second node to be compared</param>
            <param name="helper">Designer Helper to translate event handler</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TreeCompare.FindSameEvent(MSAvalon.Windows.RoutedEventID,System.Object,System.Collections.ArrayList,System.Object,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
            <summary>
            Compare event. For a RoutedEventID, find whether the quivalent event exist in the
            Array of RoutedEventIDs. If one is find there, the instance is removed from that 
            list and true is returned. Otherwise return false
            </summary>
            <param name="toFind">The RoutedEventID event to find</param>
            <param name="owner1">owner for the event to find</param>
            <param name="findFrom">The RoutedEventID array to search from</param>
            <param name="owner2">The owner for the RoutedEventID array to search from</param>
            <param name="helper">Designer Helper to translate event handler</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TreeCompare.CompareEventValue(MSAvalon.Windows.RoutedEventID,System.Object,MSAvalon.Windows.RoutedEventID,System.Object,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
            todo: to compare the string value
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TreeCompare.CompareObjectProperties(Avalon.Test.CoreUI.Common.CoreLogger,System.Object,System.Object,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
             Compare Properties for two node. If all the properties for the first node
             exist for the second node with the same value, return true. Otherwise, return false.
            
             </summary>
             <param name="framework">CoreLogger</param>
             <param name="firstNode">The first node</param>
             <param name="secondNode">The second node to be compared</param>
             <param name="helper"> Designer</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TreeCompare.ShouldSerializeDependencyProperty(System.Object,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Modified From XamlSerializerUtil.cs
            </summary>
            <param name="owner"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializerTypeConvertContext.OnComponentChanged">
            <summary>
             OnComponentChange
            </summary>
            <internalonly>
             member is public only because base class has
             this public member declared
            </internalonly>
            <returns>
             void
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializerTypeConvertContext.OnComponentChanging">
            <summary>
             OnComponentChanging
            </summary>
            <internalonly>
             member is public only because base class has
             this public member declared
            </internalonly>
            <returns>
             void
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializerTypeConvertContext.GetService(System.Type)">
            <summary>
             IServiceProvider GetService implementation
            </summary>
            <param name="serviceType">
             Type of Service to be returned
            </param>
            <internalonly>
             member is public only because base class has
             this public member declared
            </internalonly>
            <returns>
             null
            </returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.SerializerTypeConvertContext.Container">
            <summary>Container property</summary> 
            <internalonly>
             property is public only because base class has
             this public property declared
            </internalonly>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.SerializerTypeConvertContext.Instance">
            <summary>Instance property</summary> 
            <internalonly>
             property is public only because base class has
             this public property declared
            </internalonly>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.SerializerTypeConvertContext.PropertyDescriptor">
            <summary>Propert Descriptor</summary> 
            <internalonly>
             property is public only because base class has
             this public property declared
            </internalonly>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.VerifyElement">
            <summary>
            Verification methods for some common element
             Microsoft
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyDouble(MSAvalon.Windows.Length,MSAvalon.Windows.Length,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify two lengthes equal
            </summary>
            <param name="length1"></param>
            <param name="length2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyDouble(MSAvalon.Windows.Length,System.Int32,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify two lengthes equal
            </summary>
            <param name="length1"></param>
            <param name="length2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyThickness(MSAvalon.Windows.Thickness,MSAvalon.Windows.Thickness,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify two thicknesses equal
            </summary>
            <param name="thickness1"></param>
            <param name="thinkness2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyColor(MSAvalon.Windows.Media.Color,MSAvalon.Windows.Media.Color,Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Verify  two color is the same
            
             </summary>
             <param name="color1"></param>
             <param name="color2"></param>
             <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyString(System.String,System.String,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify strings
            </summary>
            <param name="string1"></param>
            <param name="string2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyDock(MSAvalon.Windows.Controls.Dock,MSAvalon.Windows.Controls.Dock,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Verify two docks are the same
            </summary>
            <param name="dock1"></param>
            <param name="dock2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyInt(System.Int32,System.Int32,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyBool(System.Boolean,System.Boolean,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyFloat(System.Single,System.Single,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyDouble(System.Double,System.Double,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="b1"></param>
            <param name="b2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyTime(MSAvalon.Windows.Media.Animation.Time,MSAvalon.Windows.Media.Animation.Time,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyImageSource(MSAvalon.Windows.Media.ImageSource,System.String,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="i1"></param>
            <param name="i2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyRect(MSAvalon.Windows.Rect,MSAvalon.Windows.Rect,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifyPoint(MSAvalon.Windows.Point,MSAvalon.Windows.Point,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="logger"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.VerifyElement.VerifySize(MSAvalon.Windows.Size,MSAvalon.Windows.Size,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="logger"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties">
            <summary>
            This class defines custom clr class with various custom properties
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyHiddenDPProperty">
            <summary>
            DependencyProperty for the attached MyHiddenDP property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.GetMyHiddenDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.SetMyHiddenDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyContentDPProperty">
            <summary>
            DependencyProperty for the attached MyContentDP property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.GetMyContentDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.SetMyContentDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyShouldDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.GetMyShouldDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.SetMyShouldDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.ShouldSerializeMyShouldDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyShouldNotDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.GetMyShouldNotDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.SetMyShouldNotDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.ShouldSerializeMyShouldNotDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.ShouldSerializeMyShouldNotSerializeClrColor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyHiddenClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyDefaultClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyContentClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyShouldSerializeClrColor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.MyShouldNotSerializeClrColor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyClrClassWithCustomProperties.IListProp">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties">
            <summary>
            This class defines custom clr class with various custom properties
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyHiddenDPProperty">
            <summary>
            DependencyProperty for the attached MyHiddenDP property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.GetMyHiddenDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.SetMyHiddenDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyContentDPProperty">
            <summary>
            DependencyProperty for the attached MyContentDP property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.GetMyContentDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.SetMyContentDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyShouldDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.GetMyShouldDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.SetMyShouldDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.ShouldSerializeMyShouldDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyShouldNotDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.GetMyShouldNotDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.SetMyShouldNotDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.ShouldSerializeMyShouldNotDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.ShouldSerializeMyShouldNotSerializeClrColor">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.IListDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyHiddenClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyDefaultClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyContentClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyShouldSerializeClrColor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.MyShouldNotSerializeClrColor">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.IListProp">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithCustomProperties.IListDP">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp">
            <summary>
            This class defines custom clr class with various custom properties
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp.IListDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp.GetIListDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp.SetIListDP(MSAvalon.Windows.DependencyObject,System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="myProperty"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.FrameworkElementWithIListProp.IListProp">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties">
            <summary>
            This class defines custom class with various readonly properties
             Microsoft
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyReadOnlyDPProperty">
            <summary>
            DependencyProperty for the attached MyReadOnlyDP property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.GetMyReadOnlyDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyContentDPProperty">
            <summary>
            DependencyProperty for the attached MyContentDP property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.GetMyContentDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyShouldDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.GetMyShouldDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.ShouldSerializeMyShouldDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyShouldNotDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.GetMyShouldNotDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.ShouldSerializeMyShouldNotDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.ShouldSerializeMyShouldNotSerialized">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyClrDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyReadOnlyProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyContentClrProperty">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyShouldSerialized">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyShouldNotSerialized">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyUIElementWithReadOnlyProperties.MyClrDP">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.Resources.TestHelper">
            <summary>Base class of all *Helper classes.</summary>
            <remarks>
            The Helper classes are formed in a derivation chain since 
            multiple inheritance isn't possible in C#.  The hierarchy 
            looks like this:
            <para>
            + <see cref="T:Avalon.Test.Resources.TestHelper">TestHelper</see>
             + <see cref="T:Avalon.Test.Resources.GenericTestCase">GenericTestCase</see>
              
            </para>	
            </remarks>
        </member>
        <member name="F:Avalon.Test.Resources.TestHelper.framework">
            <summary>
            The Avalon framework
            </summary>
        </member>
        <member name="M:Avalon.Test.Resources.TestHelper.CheckResults(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Checks the condition, and throws a <see cref="T:Microsoft.Test.TestValidationException">Microsoft.Test.TestValidationException</see>
            if the condition == false.
            </summary>
            <param name="condition"></param>
            <param name="comment">comment to add if the test fails</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:Avalon.Test.Resources.TestHelper.CheckResults(System.Boolean,System.String,System.Int32,System.Int32)">
            <summary>
            Checks the condition, and throws a <see cref="T:Microsoft.Test.TestValidationException">Microsoft.Test.TestValidationException</see>
            if the condition == false.
            </summary>
            <param name="condition"></param>
            <param name="comment">comment to add if the test fails</param>
            <param name="expected"></param>
            <param name="actual"></param>
        </member>
        <member name="M:Avalon.Test.Resources.TestHelper.Init(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="frm"></param>
        </member>
        <member name="T:Avalon.Test.Resources.ResourceDictionaryHelper">
            <summary>
            This is the TestResouceDictionaty class which can create ResouceDictionaries
            </summary>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.#ctor">
            <summary>
            Constructor for TestResourceDictionary
            </summary>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateVerticalAlignments">
            <summary>
            Create ResourceDictionary for VerticalAlignment
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for VericalAlignment
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateSolidColorBrushes">
            <summary>
            Create ResourceDictionary for Brushes
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for Brushes - red,green,blue,white,black
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateBrushesFontWeights">
            <summary>
            Create ResourceDictionary for Brushes+FontWeights
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for Brushes - red,green,blue,white,black and FontWeight - bold, medium, thin
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateFontWeightsStyles">
            <summary>
            Create ResourceDictionary for FontWeights, FontStyles
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for FontWeight - bold, medium, thin
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateTempFontWeights">
            <summary>
            Create ResourceDictionary for FontWeights with different pairs for testing invalidation, search
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for FontWeight - bold, medium, thin
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateGreetings">
            <summary>
            Create ResourceDictionary for Greeting
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for greeting
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateNumbers">
            <summary>
            Create ResourceDictionary for Numbers
            </summary>
            <remarks>
            return a ResourceDictionary Object which has vlaues set for Numbers 1,2,3
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.ResourceDictionaryHelper.CreateCharacterCase">
            <summary>
            Create ResourceDictionary for CharacterCase
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.Resources.GenericTestCase">
            <summary>
            This is abstract implementation of a Property System test case.
            This implementation comes with lots of goodies as it inherits from the helper.
            </summary>
            <remarks>
            This calss impelemnts the generic test case ,
            It is derived from the Helper
            <para>
            	<see cref="T:Avalon.Test.Resources.TestHelper">Helper</see>
            </para>	
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.GenericTestCase.Test">
            <summary>
            Abstact function that must be implemented by every concrete test case.
            </summary>
        </member>
        <member name="F:Avalon.Test.Resources.GenericTestCase.Context">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Resources.GenericTestCase.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Calls <see cref="M:Avalon.Test.Resources.GenericTestCase.Test">Test</see> after initializing a UIContext.
            This is always the entry point of the test suit 
            </summary>
            <remarks>
             note that it uses UIContextAccess and all creation and deletion of the UIelements must happen bewteen the rented access 
            </remarks>
            <param name="frm"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Common.SimpleModalTestWindow">
            <summary>
            This class implements a fake modal window.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the window with a given parent at a given location.
            </summary>
            <param name="HwndParent"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.#ctor(System.IntPtr)">
            <summary>
            Create the window with a given parent and default coordinates.
            </summary>
            <param name="HwndParent"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.Show">
            <summary>
            Show this window. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.Destroy">
            <summary>
            Destroy this window.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleModalTestWindow._ModalTestWindow(System.IntPtr)">
            <summary>
            This method actually creates the window.
            </summary>
            <param name="HwndParent"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.Helper(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            This helper listens for WM_ messages.
            </summary>
            <param name="window"></param>
            <param name="message"></param>
            <param name="firstParam"></param>
            <param name="secondParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.Source">
            <summary>
            HwndSource where the window is rendered.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Common.SimpleModalTestWindow.RootVisual">
            <summary>
            Visual that you want to render on the window.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow">
            <summary>
            This class implements a fake non-modal window.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the window with a given parent at a given location.
            </summary>
            <param name="HwndParent"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.#ctor(System.IntPtr)">
            <summary>
            Create the window with a given parent and default coordinates.
            </summary>
            <param name="HwndParent"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create the window with given coordinates.
            </summary>
            <remarks>
            Desktop window is used as the "parent".
            </remarks>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.#ctor">
            <summary>
            Create the window with a default parent.
            </summary>
            <remarks>
            Desktop window is used as the "parent".
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.Show">
            <summary>
            Show this window. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.Destroy">
            <summary>
            Destroy this window.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow._NonModalTestWindow(System.IntPtr)">
            <summary>
            This method actually creates the window.
            </summary>
            <param name="HwndParent"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.Helper(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            This helper listens for WM_ messages.
            </summary>
            <param name="window"></param>
            <param name="message"></param>
            <param name="firstParam"></param>
            <param name="secondParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.Source">
            <summary>
            HwndSource where the window is rendered.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Common.SimpleNonModalTestWindow.RootVisual">
            <summary>
            Visual that you want to render on the window.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ParserBVT">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML using Custom Control under \common\parser\customcontrol.cs
             Test cases are:
                     - LoadXml with StreamParser
                     - LoadXml with StreamParser, ParserContext
                     - FragmentLoadXml with TextReader
                     - FragmentLoadXml with TextReader, ParserContext
                     - XML Dictionary look up prefix
                     - XML Dictionary look up namespace
                     - XML Dictionary count prefix and namespace
                     - parse a XAML file with literal content
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestStreamParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStreamParser for PARSERXAML case
            Scenario:
            - Creating Context and Access Context
            - LoadXML using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.StreamParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            StreamParser is used in TestStreamParser to Parse LoadXml using Stream.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestParserContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ParserBVT for StreamParserContext case
            Scenario:
            - Creating Context and Access Context
            - LoadXML using Stream, ParserContext
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.ParserContext(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            ParserContext is used in TestParserContext to Parse LoadXml using Stream, ParserContext.
            for the parser class to open a xaml file
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestFragmentTextReader(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ParserBVT for FragmentTextReader case
            Scenario:
            - Creating Context and Access Context
            - LoadXml using FragmentTextReader stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.FragmentTextReader(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            FragmentTextReader is used in TestFragmentTextReader to Parse FragmentLoadXml using TextReaderStream.
            for the parser class to open a xaml file
            </summary>
            <param name="frm"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestFragmentTextReaderParserContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ParserBVT for FragmentTextReaderParserContext case
            Scenario:
            - Creating Context and Access Context
            - LoadXml using FragmentTextReader stream + Parser Context
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.FragmentTextReaderParserContext(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            FragmentTextReaderParserContext is used in TestFragmentTextReaderParserContext to Parse FragmentLoadXml using TextReaderStream, ParserContext.
            for the parser class to open a xaml file
            </summary>
            <param name="frm"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestXmlDicop(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ParserBVT for Xml Dicop case
            Scenario:
            - Creating Context and Access Context
            - XmlnsDictionary maps XML namespace prefixes
            Verify:
            - Parse without error.
            - Compare prefix name "cc" with LookupPrefix to verify.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestXmldicons(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ParserBVT for Xml Dicons case
            Scenario:
            - Creating Context and Access Context
            - XmlnsDictionary maps XML namespace prefixes
            Verify:
            - Parse without error.
            - Compare namespace name "ccns" with LookupNamespace to verify.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestXmldiconsc(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ParserBVT for Diconsc case
            Scenario:
            - Creating Context and Access Context
            - Counting the nubmer of namespaces and prefixes
            Verify:
            - Parse without error.
            - Compare total number of namespace to verify.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.TestLiteral(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            parse a XAML file with literal content
            Scenario:
            - Creating Context and Access Context
            - Looking for correct element (ClrParseLiteralClass)
            Verify:
            - Parse without error.
            - LiteralString parse correct value.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserBVT.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Validation">
             <summary>
             XamlParseException Test
             </summary>
             <remarks>
             This is parser BVT Validation test that parse XAML using Invalid XAML format to test parsing validation.
             Test cases are:
                     - Parse XAML with Tag misplaced XAML format.
                     - Parse XAML with No closing tag XAML format.
                     - Parse XAML with missing quotes XAML format.
                     - Parse XAML with No opening tag XAML format.
                     - Parse XAML with No namespace XAML format.
                     - Parse XAML with wrong namespace XAML format.
                     - Parse XAML with misspell namespace XAML format.
                     - Parse XAML with misspell property XAML format.
                     - Parse XAML with misspell tag XAML format.
                     - Parse XAML with wrong comment position XAML format.
                     - Parse XAML with space XAML format.
                     - Parse XAML with invalid XAML to get Line Position and Line Number in Exception.
                     - Recovery from XamlParseException by re parsing valid xaml again.
                     - Parse XAML with invalid Dependency Property.
                     - Parse XAML with invalid Clr Property.
                     - Parse XAML with unknown tag in a style
                     - Parse XAML with unknown attribute in a style
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.#ctor">
            <summary>
            test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.RunTests(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Loading XAML in stream and Parsing XAML 
            </summary>
            <param name="frm"></param>
            <param name="filename"></param>
            <returns>UIElement</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestTagMisplaced(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with Tag misplaced XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestTagNotClosed(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with No closing tag XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestQuotesMissing(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with missing quotes XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestTagNotOpened(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with No opening tag XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestNoNamespace(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with No namespace XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestWrongNamespace(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with wrong namespace XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestMispellNamespace(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with misspell namespace XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestMispellProp(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with misspell property XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestUnknownTagInStyle(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Parse XAML with unknown tag in a style.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is thrown.
            </summary>
            <param name="frm"></param>
            <param name="filename">Filename to be parsed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestUnknownAttributeInStyle(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Parse XAML with unknown attribute in a style.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is thrown.
            </summary>
            <param name="frm"></param>
            <param name="filename">Filename to be parsed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestMispellTag(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with misspell tag XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestCommentsWrong(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with wrong comment position XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestSpace(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with space XAML format.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestLine(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with invalid XAML to get Line Position and Line Number in Exception.
            Catch the correct line and position number for the exception
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XAMLParseException is throw.
                - Verify Exception LineNumber and LinePosition
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestRecovery(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Recovery from XamlParseException by re parsing valid xaml again.
            Recovery: exception should not prevent parser from going on
            Scenario:
                - Open XAML in Stream
                - Parse XAML
                - Catch Exception
            Verify:
                - XAMLParseException is throw.
                - Verify Exception LineNumber and LinePosition
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestDependencyProperty(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with invalid Dependency Property.
            Catch the correct exception
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XamlParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.TestClrProperty(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parse XAML with invalid Clr Property.
            Catch the correct exception.
            Scenario:
                - Open XAML in Stream
                - Parse XAML
            Verify:
                - XamlParseException is throw.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Validation.LogParserException(Avalon.Test.CoreUI.Common.CoreLogger,System.Exception)">
            <summary>
            Log Logging exception for XamlParseException test.
            </summary>
            <param name="frm"></param>
            <param name="exp"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.XmlAttrTest">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML using Custom Control under \common\parser\customcontrol.cs
             Test cases are:
                     - Load xaml and examine XmlAttributes on one element
                     - Load xaml and namespace XmlAttributes on one element
                     - Load xaml and check XmlDictionary on one element is not null
                     - Load xaml and check XmlDictionary.Count on one element
                     - Load xaml and check XmlDictionary  on one element for IDictionary properties
                     - Load xaml and check XmlDictionary  on one element for ICollection properties
                     - Load xaml and check XmlDictionary.Count on a copy of the XmlDictionary object
                     - Test XmlDictionary.Add(object, object)
                     - Test XmlDictionary.Clear() method
                     - Test XmlDictionary.Contains( object ) method
                     - Test XmlDictionary.Remove( string ) method
                     - Test XmlDictionary enumerators
                     - Test XmlDictionary.CopyTo method
                     - Load xaml and test XmlDictionary.LookupNamespace on one element
                     - Load xaml and test XmlDictionary.LookupPrefix on one element
                     - Load xaml and test XmlDictionary.DefaultNamespace on one element
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlAttrBVT1(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and examine XmlAttributes on one element
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlAttributes with expected values.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlAttrBVT2(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and namespace XmlAttributes on one element
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlAttributes with expected values.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT1(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and check XmlDictionary on one element is not null
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlDictionary for null.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT2(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and check XmlDictionary.Count on one element
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlDictionary.Count for expected value.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT3(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and check XmlDictionary  on one element for IDictionary properties
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlDictionary IDictionary properties for expected value.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT4(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and check XmlDictionary  on one element for ICollection properties
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlDictionary ICollection properties for expected value.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT5(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and check XmlDictionary.Count on a copy of the XmlDictionary object
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the XmlDictionary.Count is the same when copying XmlnsDictionary
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT6(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Test XmlDictionary.Add(object, object)
            
                 Validation is done, by checking if the dictionary contains the element.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT7(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Test XmlDictionary.Clear() method
            
                 Validation is done, by checking if the dictionary is empty.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT8(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Test XmlDictionary.Contains( object ) method
            
                 Validation is done, by checking inserting a test element and checking the contains 
                 method before and after insertion.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT9(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Test XmlDictionary.Remove( string ) method
            
                 Validation is done, by invoking Remove, before and after insertion of a test element, then
                 checking the Count to make sure element has been removed.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT10(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Test XmlDictionary enumerators
            
                 Validation is done, by checking enumerator iteration counts.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT11(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Test XmlDictionary.CopyTo method
            
                 Validation is done, by invoking CopyTo and verifying all 
                 entries were copied correctly
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT12(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and test XmlDictionary.LookupNamespace on one element
            
                 Validation is done by comparing result with expected value
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT13(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and test XmlDictionary.LookupPrefix on one element
            
                 Validation is done by comparing result with expected value
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.XmlDictBVT14(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Load xaml and test XmlDictionary.DefaultNamespace on one element
            
                 Validation is done by comparing result with expected value
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.GetXmlnsDictionary(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open XAML, and Parse XAML, Get XmlnsDictionay
            </summary>
            <param name="frm"></param>
            <returns>XmlnsDictionary</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlAttrTest.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.NamespaceMapTest">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML using Custom Control under \common\parser\customcontrol.cs
             Test cases are:
                     - Create custom namespace map to map "http://test/URI" to the current assembly using MappingPI
                     - Create custom namespace map to map "http://test/URI" to the current assembly using NamespaceMap set properties
                     - Create a mapper and add our assembly to the list of default assemblies.
            
             Description:
                  Test custom NamespaceMaps
             
             Scenario:
                  Create custom namespace map to map "http://test/URI" to the current assembly.
                     Validation is done, by checking the number of elements in the tree
                     and verifying the type of the element.
             </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.#ctor">
            <summary>
            TODO:
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.NamspMapBVT1(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Create custom namespace map to map "http://test/URI" to the current assembly using MappingPI
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the type of the element.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.NamspMapBVT2(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Create custom namespace map to map "http://test/URI" to the current assembly using NamespaceMap set properties
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the type of the element.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.AsmListBVT1(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Scenario:
                 Create a mapper and add our assembly to the list of default assemblies.
            
                 Validation is done, by checking the number of elements in the tree
             and verifying the type of the element.
             </summary>
             <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NamespaceMapTest.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ParserSerialize">
            <summary>
            Parser Serialization - SaveAsXml - simple
            </summary>
            <remarks>
            This is Serialize BVT test that parse XAML using Custom Control under \common\parser\customcontrol.cs
            and create outerxml using SaveAsXml.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.TestSerialize(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser Serialization - SaveAsXml - simple
            scenario:
                - Load serialize.xaml
                - check element count
                - SaveAsXml to create from serialize.xaml root
            Verify:
                - TempGetOuterXml.xaml is created.
                - Correct element count.
                - Display Output file.
                - make sure rendering occur.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.CreateFiles(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            TestSerialize
            scenario:
                - Load serialize.xaml
                - check element count
                - GetOuterXml to create from serialize.xaml root
            </summary>
            <param name="frm"></param>
            <param name="filename"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.TotalElementCount(MSAvalon.Windows.UIElement)">
            <summary>
            Count Child element from input element.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserSerialize.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.XmlDiff">
            <summary>
            Diffs the two XAML trees
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XmlDiff.Compare(System.IO.Stream,System.IO.TextReader)">
            <summary>Diffs the two XML trees. for now only validates structure
             Will eventually check tag names, attributes, whitespace, etc. and
             also have flags to specify which of these to check for
             If the xmlDiff we throw an exception so it can be logged to avPad.
             for generate IL code the first tag is a subclass of the original 
             so it is okay for it to be different.
            </summary> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.XMLDiffException">
            <summary>
            creating exception for different.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.XMLDiffException.#ctor(System.String,System.Xml.XmlTextReader,System.Xml.XmlTextReader,System.Exception)">
            <summary>
            output different exception with linenumber and info.
            </summary>
            <param name="Message"></param>
            <param name="original"></param>
            <param name="current"></param>
            <param name="InnerException"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.XMLDiffException.LineNumberDiffMessage">
            <summary>
            Get LineNumber that have different
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Persistence">
            <summary>
            Test controls persistence.
                - FixedPage
                - <Disable >TextPanel</Disable>
                - <Disable >Text</Disable>
                - Button
                - <Disable >RadioButton</Disable>
                - HyperLink
                - <Disable >Frame</Disable>
                - <Disable >ListBox</Disable>
                - CheckBox
                - SimpleText <!-- SimpleText is being replaced with Text --> 
                - <Disable >Menu</Disable>
                - <Disable >TextBox</Disable>
                - <Disable >ComboBox</Disable>
                - <Disable >ScrollViewer</Disable>
                - <Disable >Image</Disable>
                - <Disable >GridPanel</Disable>
                - Thumb
                - Popup
                - RepeatButton
                - ScrollBar
                - Slider
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlFixedPage(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: FixedPage
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Compare correctly between two xaml.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlTextPanel(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: TextPanel
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Compare correctly between two xaml.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlText(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Text
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Compare correctly between two xaml.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlButton(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Button
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Compare correctly between two xaml.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlRadioButton(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: RadioButton
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlHyperLink(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: HyperLink
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlFrame(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Frame
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlListBox(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: ListBox
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlCheckBox(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: CheckBox
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlMenu(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Menu
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlTextBox(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: TextBox
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlComboBox(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: ComboBox
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlScrollViewer(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: ScrollViewer
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlImage(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Image
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlGridPanel(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: GridPanel
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlThumb(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Thumb
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlPopup(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Popup
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlRepeatButton(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: RepeatButton
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlScrollBar(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: ScrollBar
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.TestInnerXmlSlider(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test controls persistence: Slider
            Scenario:
                - Create Temp file from input xaml string.
                - SaveAsXml from temp file.
                - Compare Original Xaml file with the file that just created.
            Verify:
                - Content is correctly serialized.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.CreateFiles(Avalon.Test.CoreUI.Common.CoreLogger,System.String,System.String)">
            <summary>
            - Create New file for Comparison from input xaml string
            - SaveAsXml from the file that just created
            - Compare from original file.
            </summary>
            <param name="frm">AutomationFramwork</param>
            <param name="filename">Filename</param>
            <param name="xaml">xaml</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.Persistence.InnerXmlFixedPage">
            <summary>
            predefine the xaml files as strings here for
            the logging methods second arguments
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Persistence.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyType">
            <summary>
              MyType class defines new type. The [] statement associates 
              MyTypeCvt class as a CLR TypeConverter for MyType.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.MyType.myString">
            <summary>
            This string is used to check the final result.
            At the end of the test the main program examines the element 
            property and thecks this string for the value "fine"
            
            All problems detected by the type converter class will be 
            reported into this variable.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyTypeCvt">
            <summary>
            The type converter class used in this test.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyTypeCvt.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            To define type converter class we are required to override this 
            method
            </summary>
            <param name="tpx">
            Provides link with the Mapper and XmlParserContext objects used
            by the parser via GetService call.
            </param>
            <param name="culture">CultureInfo supplied</param>
            <param name="obj">The value to be converted</param>
            <returns>
            Returns an instance of MyType object with myString set depending on
            success of the parameter test.
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyTypeCvt.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="tdc"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.TypeCvtTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TypeCvtTest.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.TypeCvtTest.TestPropertyDP">
            <summary>
            TypeCvtTest Property - string
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.TypeCvtTest._testproperty">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.TypeCvtTest.TestProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CvtTestBVT">
            <summary>
            This class contains the main testcase code in the CvtTest method.
            In addition it defines new DinamicProperty TestProperty to be
            used for this test.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CvtTestBVT.CvtTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Main test method
            </summary>
            <param name="frm">Reference to the CoreLogger object</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CvtTestBVT.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CvtTestBVT.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CvtTestBVT.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CvtTestBVT.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.TestCustomDesigner">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.#ctor">
            <summary>
            TODO:
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            The main entry point for the application.
            Test Custom Designer
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.TestCustomParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Custom Designer
            Scenario:
            - Creating Context and Access Context
            - GetOuterxml with CustomDesigner
            Verify:
            - GetOuterXml return correct value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.TestCustomLoader(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Custom Designer
            Scenario:
            - Creating Context and Access Context
            - GetOuterxml with CustomDesigner
            Verify:
            - LoadXml return correct value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.TestCustomDesigner.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CustomDesignerSaver">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesignerSaver.OnSaveNode(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.EntityContext,MSAvalon.Windows.Serialization.XamlNodeType)">
            <summary>
            This is called prior to writing out the passed token.  The designer has the ability to
            inject markup using the passed writer, or direct the action of the serializer by 
            returning a SerializationAction.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesignerSaver.OnSaveEvent(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.EventContext,System.String,System.String@)">
            <summary>
            Called prior to saving a routed event.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesignerSaver.OnSaveProperty(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.PropertyContext,System.String,System.String@)">
            <summary>
            Called prior to saving a property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesignerSaver.OnError(MSAvalon.Windows.Serialization.XamlParseException)">
            <summary>
            Called when a save error occurs.  Crack the exception to get more details, and
            respond telling the serializer to ignore this error, stop saving, or 
            raise the exception
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CustomDesigner">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesigner.LoadNode(System.Xml.XmlReader,MSAvalon.Windows.Serialization.XamlNode)">
            <summary>
            Called by parser after it determines what node type for
            the XML Node and has tokenized the xml node content. 
            </summary>
            <remarks>
            Node types are Resources, Code: Element Object, properties, events etc.
            The return value is a SerializationAction value which indicates if the parser
            should: continue normal processing; skip this node and any children; 
            parse but don't call the designer;
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesigner.LoadRoutedEvent(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.RoutedEventID,System.String)">
            <summary>
            Callback for a DynamicEvent. Designer is responsible for storing the
            event data for serialization.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesigner.LoadDependencyProperty(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty,System.String,System.Object,System.Object@)">
            <summary>
            Called before a property is being set on an object.  Both the original string
            from the xaml file and the object that will be set is passed.  These may be stored
            by designer for later use in serialization
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CustomDesigner.ReportError(MSAvalon.Windows.Serialization.XamlParseException)">
            <summary>
            
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.CustomDesigner.GotYahoo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.EStates">
            <summary>
            Enum to track the test case state
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.EStates.eStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.EStates.eFirst">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.EStates.eSecond">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.EStates.eThird">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.EStates.eLoadXmlFinish">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.EStates.eQuit">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.AsyncElement">
            <summary>
            Helper element class to track element construction
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncElement.#ctor">
            <summary>
            Helper element class to track element construction
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.AsyncBVT1">
            <summary>
            Main test class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.AsyncBVT1.state">
            <summary>
            test case state
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.AsyncBVTtest1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Main test code
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.AsyncBVT2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Main test code
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.AsyncBVT3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Testing ILoad event
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.OnLoaded(System.Object,System.EventArgs)">
            <summary>
            ILoad Event.
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.IsSubTreeLoaded(MSAvalon.Windows.Media.Visual)">
            <summary>
            
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.AsyncBVT1._loadedCount">
            <summary>
            Fields used to tests Loaded event
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.AsyncBVT1._eventTargets">
            <summary>
            Fields used to tests Loaded event
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AsyncBVT1.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.AsyncBVT1.State">
            <summary>
            we need public property, so the AsyncElement can also set the state
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.AsyncBVT1.BVTclass">
            <summary>
            Use singelton for AsyncElement to locate the instance of AsyncBVT1 class
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ResourceBVT">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML using Resource and Styling.
             Test cases are:
                     - LoadXml with Resource
                     - LoadXml with Style
                     - LoadXml with Style Visual Tree
                     - LoadXml with Style Property Trigger
                     - LoadXml Resource Tag
                     - LoadXml with Resource and Style tag.
                     - Testing Resource and Resource Dictionary.
                     - Parsing Implicit Resource Styling.
                     - Parsing Explicit Resource Styling.
                     - Parsing Resource and Style with Comment tag inside.
                     - Parsing Style BasedOn
                     - Parsing Style *typeof
                     - Parsing Style *Alias
                     - Style parser should enforce a TargetType for Styles.
                     - Loading External Resources and Styling.
                     - Loading Custom controls in Styles.
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceParser for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestStyleParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStyleParser for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource/Style tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestStyleVisualParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStyleVisualParser for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource/Style tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestStylePropVisualTrigger(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStylePropVisualTrigger for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource/Style tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResource(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResource for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceStyle(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceStyle for ResourceBVT case
            Resource Parsing impliclit name for style resource
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource + Style tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceSerialized(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceSerialized for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            - Serialize XAML (resourcetest.xaml).
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceDic(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceDic for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceImp(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceImp for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceExp(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceExp for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestResourceComment(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResourceComment for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestStyleBasedOn(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStyleBasedOn for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestStyleTypeof(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStyleTypeof for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestStyleAlias(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestStyleAlias for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>

        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.TestExternalStyle(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Loading External Resources and Styling
            scenario:
                - Load ExternalStyle.xaml
                - Load ResourceExternal.xaml
                - use ResourceExternal on ExternalStyle
            Verify:
                - Resource and Style applied.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.CustomControlStyle(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            CustomControlStyle for ResourceBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Resource/Style tag) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.CreateTempFile(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.VerifyPageResources(MSAvalon.Windows.Controls.DockPanel)">
            <summary>
            
            </summary>
            <param name="dp"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.StreamParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            StreamParser is used to LoadXml(xaml).
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ResourceBVT.OnIdle(System.Object)">
            <summary>
            When OnIdle is called, quit Dispatcher.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Encoding">
            <summary>
            Test the encoding support in parser.
            </summary>
            <remarks>
            This is Parser BVT test that tries to parse files encoded with different encodings like
            UTF-7, UTF-8, UTF-16, UTF-32, local encodings, etc. and tries to make sure that parser should
            behave the way it is supposed to.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Encoding.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Encoding.TestSuccessfulParsing(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Passes the test if the passed XAML file parses without an exception.
            </summary>
            <param name="frm"></param>
            <param name="filename">XAML filename</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Encoding.TestFailedParsing(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Passes the test if the passed XAML file throws an exception during parsing.
            </summary>
            <param name="frm"></param>
            <param name="filename">XAML filename</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Encoding.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ComplexParser">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML for Compact Syntax and Complex Properties.
             Test cases are:
                     - LoadXml with Complex property
                     - LoadXml with Compact Syntax
                     - Serialize Complex Properties
                     - Serialize Compact syntax
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.TestComplexParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestComplexParser for ComplexParser case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Complex Properties) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.TestCompactParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestCompactParser for ComplexParser case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Compact Syntax) using Stream
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.TestComplexSerialized(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestComplexParser for ComplexParser case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Complex Properties) using Stream
            - Serialize XAML (complextest.xaml).
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.TestCompactSerialized(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestComplexParser for ComplexParser case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Complex Properties) using Stream
            - Serialize XAML
            Verify:
            - Parse without error.
            - Render Control using OnRender Event to verify.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.CreateTempFile(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.StreamParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            StreamParser is used to LoadXml(xaml).
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.RenderHandler(System.Object,System.EventArgs)">
            <summary>
            EventHandler action when OnRender is called.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ComplexParser.OnIdle(System.Object)">
            <summary>
            When OnIdle is called, quit Dispatcher.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyCustomSerializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCustomSerializer.OnSaveNode(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.EntityContext,MSAvalon.Windows.Serialization.XamlNodeType)">
            <summary>
            This is called prior to writing out the passed token.  The designer has the ability to
            inject markup using the passed writer, or direct the action of the serializer by 
            returning a SerializationAction.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCustomSerializer.OnSaveEvent(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.EventContext,System.String,System.String@)">
            <summary>
            Called prior to saving a routed event.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCustomSerializer.OnSaveProperty(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.PropertyContext,System.String,System.String@)">
            <summary>
            Called prior to saving a property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyCustomSerializer.OnError(MSAvalon.Windows.Serialization.XamlParseException)">
            <summary>
            Called when a save error occurs.  Crack the exception to get more details, and
            respond telling the serializer to ignore this error, stop saving, or 
            raise the exception
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.CLRObjectParser">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML for CLR objects
             Test cases are:
                     - LoadXml with public CLR Object
                     - LoadXml with public CLR Object with IParseLiteral
                     - LoadXml with protected CLR Object
                     - LoadXml with private CLR Object
                     - LoadXml with internal CLR Object
                     - LoadXml with internal CLR Property
                     - LoadXml with private CLR Property
                     - LoadXml with protected CLR Property
                     - LoadXml with UnSecure CLR Object (which try to open a file).
                     - LoadXml with Window tag with permission and without.
                     - CLR events on the CLR object.
                     - Parser will add children to objects that implement IList
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestClrObjParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestClrObjParser for public CLR Object
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse without error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestClrParseLiteralParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestClrParseLiteralParser for CLr Parse Literal
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Clr Parse Literal) using Stream
            Verify:
            - Parse without error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestProtectedObjParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestProtectedObjParser for protected CLR Object
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestPrivateObjParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestPrivateObjParser for private CLR Object
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestInternalObjParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestInternalObjParser for internal CLR Object
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestInternalPropParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestInternalPropParser for internal CLR Property
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestPrivatePropParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestPrivatePropParser for private CLR Property
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestProtectedPropParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestProtectedPropParser for protected CLR Property
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestUnSecureTag(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestUnSecureTag for unsecure CLR object
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestWindowTag(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestWindowTag for unsecure CLR object
            Scenario:
            - Creating Context and Access Context
            - LoadXML(CLCR Object) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestIList(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser will add children to objects that implement IList
            Scenario:
            From Spec
            http://avalon/coreUI/specs/Parser spec -- design.htm
            Children or subobjects(both tags and text)
            can be added to classes that support one of three interfaces:
            IAddChild: IList: IDictionary:
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.TestClrEvents(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify that handlers for CLR events on CLR objects are being hooked up properly.
            Also make sure that the handler function gets called when the event is fired.
            It performs the following steps:
            1. Compiles the test case XAML into an application. This generates a subclass of the root element,
               which is Avalon.Test.CoreUI.Parser.MyClass
            2. Gets an instance of this root element from the exe generated, using reflection.
            3. Make sure that a handler has been attached to the event.
            4. Fire the event.
            5. Make sure that the handling function gets called.
            </summary>
            <param name="frm">Logger</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.CLRObjectParser.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.EventTestBVT">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML for Event testing.
             Test cases are:
                     - LoadXml with Event
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.TestEventParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestEventParser for EventTestBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(Event) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.CreateTempFile(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.StreamParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            StreamParser is used to LoadXml(xaml).
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.EventTestBVT.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.AppDefBVT">
             <summary>
             Parser Test
             </summary>
             <remarks>
             This is parser BVT test that parse XAML for AppDef testing.
             Test cases are:
                     - LoadXml with AppDef file.
                     - LoadXml with AppDef + Resource.
                     - Loading external styles + resources
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.#ctor">
            <summary>
             
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.TestAppDefParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestAppDefParser for AppDefBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(AppDef) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.TestAppDefResParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestAppDefResParser for AppDefBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(AppDef + Resource) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.TestResExternalParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            TestResExternalParser for AppDefBVT case
            Scenario:
            - Creating Context and Access Context
            - LoadXML(AppDef + Resource) using Stream
            Verify:
            - Parse with error.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.VerifyAppResources">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.VerifyPageResources(System.Boolean)">
            <summary>
            
            </summary>
            <param name="bRedBrush"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.AppDefBVT.OnLoadCompletedFired(System.Object,MSAvalon.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Close Application When is Idle
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ParserCDATA">
            <summary>
            Parser cdata xaml simple
            </summary>
            <remarks>
            This is Parser BVT test that parse XAML using CDATA tag, and UIBinding.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.TestCDATAParse(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser BVT parsing CDATA tag inside Button.
            scenario:
                - Load cdata.xaml
            Verify:
                - Button Content value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.TestUIBind(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser BVT parsing TestUIBind tag.
            scenario:
                - Load DataBindTest.xaml
            Verify:
                - Text Text Value
                - Text Text Value
                - Button Background value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.TestCompactSyntax(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser BVT parsing TestCompactSyntax tag.
            scenario:
                - Load CompactBinding.xaml
            Verify:
                - Text Text Value
                - Button Background value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.DoChangeSourceValue">
            <summary>
            Change source values (one-way binding, DataTransfer event)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.StreamParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            StreamParser is used to LoadXml(xaml).
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserCDATA.OnIdle(System.Object)">
            <summary>
            When OnIdle is called, quit Dispatcher.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ParserAnimation">
            <summary>
            Parser cdata xaml simple
            </summary>
            <remarks>
            This is Parser BVT test that parse Animation XAML.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.TestAniParse(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser BVT parsing Animation.
            scenario:
                - Load Animation xaml
            Verify:
                - Button Content value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.TestAniSerialize(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Parser BVT parsing Animation.
            scenario:
                - Load Animation xaml
            Verify:
                - Button Content value
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.CreateTempFile(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Serialization File.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.StreamParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            StreamParser is used to LoadXml(xaml).
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.DisposeContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing UIContext here
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Intercept window messages looking for a close.  If found, stop the dispatcher,
            causing the process to stop
            </summary>
            <param name="hwnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <param name="handled"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.Quit(System.Object)">
            <summary>
            Delegate called to stop the dispatcher
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.DisplayXAML(Avalon.Test.CoreUI.Common.CoreLogger,MSAvalon.Windows.UIElement)">
            <summary>
            Display XAML in HWNDSRC to use for verify OnRender Event.
            and Close Dispatcher when OnRender is called.
            </summary>
            <param name="frm"></param>
            <param name="root"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ParserAnimation.OnIdle(System.Object)">
            <summary>
            When OnIdle is called, quit Dispatcher.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.MapperGetRoutedEventID">
            <summary>
            Test Mapper.GetRoutedEventID().
             This function is not used anywhere in developer's code.
            </summary>
            <remarks>
            <para/>
            Area: Parser\Mapper
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  MapperGetRoutedEventID.cs
            <para/>
            <ol>Scenarios covered:
                checking null for mapper(string[])
                checking null args for Mapper.GetRoutedEventID(string[])
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MapperGetRoutedEventID.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.MapperGetRoutedEventID.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.BamlReaderTest">
            <summary>
            Read a Baml file using BamlReader and verify the contents of various nodes.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlReaderTest.BamlReader1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlReaderTest.ReadBamlNodes(Avalon.Test.CoreUI.Parser.BamlNodeData)">
            <summary>
            Callback function for receiving Baml node information.
            We do all the validations in this function, and throw an exception
            if something doesn't validate.
            </summary>
            <param name="actualData"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.BamlReaderTest.CompareBamlNodes(Avalon.Test.CoreUI.Parser.BamlNodeData,Avalon.Test.CoreUI.Parser.BamlNodeData)">
            <summary>
            A function that compares the actual field values of a BamlNodeData with those expected,
            and throws an exception at the first mis-match.
            </summary>
            <param name="actualData">Actual data</param>
            <param name="expectedData">Expected data</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.DefUidTest">
            <summary>
            A class to test the handling of Def:Uid attributes (PS #12392)
            </summary>
            <remarks>
            This class checks that Def:Uid are honored for UIElements and discarded for others.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.CheckXaml(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check that x:Uid properties are handled correctly when LoadXml() is used 
            to create the tree. 
            This means:
            1. DefinitionProperties.UidProperty is set properly on derivatives of UIElement
            2. DefinitionProperties.UidProperty is not set (returns default value) on others
            </summary>
            <param name="frm">Logger</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.CheckBaml(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Compile the XAML into BAML,
            and check that x:Uid properties are present in BAML.
            This is because according to RogerCh, x:Uids are handled when tree is created 
            from BAML, not when BAML is created from XAML. 
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.ReadBamlNodes(Avalon.Test.CoreUI.Parser.BamlNodeData)">
            <summary>
            Callback function for receiving Baml node information.
            When a particular Def:Uid is found, we set one of the above flags
            accordingly.
            </summary>
            <param name="nodeData">BAML node data received</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.CheckLiteralContent(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify that *all* the x:Uids are removed from literal content.
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.CheckStyle(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Verify that styles having x:Uids load fine.  
            </summary>
            <param name="frm"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.Assert(System.Boolean,System.String)">
            <summary>
            Throws an exception with the given error message, if the condition is false.
            </summary>
            <param name="condition">Given condition</param>
            <param name="errorMesg">Error message for the exception to be thrown</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.ParseXamlFile(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            ParseXamlFile is used to LoadXml(xaml).
            </summary>
            <param name="filename">File to be parsed</param>
            <param name="frm">Logger</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.DefUidTest.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.MyLiteralContent">
            <summary>
            A custom class that manages its own markup, by implementing IParseLiteralContent.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.MyLiteralContent.Parse(System.Xml.XmlTextReader,MSAvalon.Windows.Serialization.ParserContext)">
            <summary>
            Parse the markup passed to us by the Avalon parser.
            Make sure that it doesn't have any Def:Uids
            </summary>
            <param name="reader">XML reader</param>
            <param name="parserContext"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ErrorTest">
            <summary>
            Parser error testing
            </summary>
            <remarks>
            This class parses a set of XAML files with one error in each of them.
            It verifies the error message, line number and position from the exception thrown
            in each case, against the expected values stored in a pre-populated XML file.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ErrorTest.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
            <param name="frm">Logger</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ErrorTest.TestErrors(Avalon.Test.CoreUI.Common.CoreLogger,System.Boolean)">
            <summary>
            Main method that does all the work
            </summary>
            <param name="frm">Logger</param>
            <param name="manual">Manual mode</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.ErrorTest.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.ErrorData">
            <summary>
            Error record
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.Basic">
            <summary>
            Basic parser testing
            </summary>
            <remarks>
            This class has a very basic method that parses a specified XAML file,
            and expects success. 
            If success, it passes the test and fails the test otherwise.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Basic.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case Entry point
            </summary>
            <param name="frm">Logger</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Basic.TestParser(Avalon.Test.CoreUI.Common.CoreLogger,System.String)">
            <summary>
            Main method that does all the work
            </summary>
            <param name="frm">Logger</param>
            <param name="filename">File to be parsed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.Basic.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.NodeWithLiteralContent">
            <summary>Custom Control to parse literal content</summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NodeWithLiteralContent.Parse(System.Xml.XmlTextReader,MSAvalon.Windows.Serialization.ParserContext)">
            <summary>
            For the ultimate in control over markup, a component can 
            implement IParseLiteralContent.  This interface gives the component 
            complete control over parsing of children.
            The component itself, and attributes on the components tag, 
            are not part of the literal content and are parsed by the usual 
            Avalon parsing logic.
            </summary>
            <param name="textReader"></param>
            <param name="parserContext"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.NodeWithLiteralContent._literalString">
            <summary>
            literalstring
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.NodeWithLiteralContent.LiteralString">
            <summary>
            Property LiteralString
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.LiteralSimpleSerializer">
            <summary>
               Serializes an instance of CustomControl.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LiteralSimpleSerializer.#ctor">
            <summary>
                Constructor for LiteralSimpleSerializer
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LiteralSimpleSerializer.#ctor(MSAvalon.Windows.Serialization.XamlDesignerSerializationManager)">
            <summary>
                Constructor for LiteralSimpleSerializer
            </summary>
            <param name="manager">
                Serialization Manager
            </param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LiteralSimpleSerializer.SerializeObjectCore">
            <summary>
                Serialize the properties for the 
                given current object to xaml markup.
            </summary>
            <remarks>
                Method follows these steps
                1. Serializes the instance as string content 
                    if is not meant to be a complex value. Else ...
                2. Serialize Events as attributes
                3. Serialize Properties as attributes
                4. Emit xmlns declarations as attributes
                5. Serialize Complex Properties as separate tags
                Also this is the virtual to override if you want to 
                serialize custom attributes or contents 
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LiteralSimpleSerializer.SerializeProperties">
            <summary>
                Called to serialize the properties
                for the given element.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationDatabindingCase">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationDatabindingCase.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationIncludeTagCase">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationIncludeTagCase.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.DefTagCode">
            <summary>
            Def tag verification
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.DefTagCode.Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CellResources">
            <summary>
            Cell resources verification
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CellResources.Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Parser.NodeForLiteralwithResources">
            <summary>Custom Control to parse literal content</summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Parser.NodeForLiteralwithResources.Parse(System.Xml.XmlTextReader,MSAvalon.Windows.Serialization.ParserContext)">
            <summary>
            For the ultimate in control over markup, a component can 
            implement IParseLiteralContent.  This interface gives the component 
            complete control over parsing of children.
            The component itself, and attributes on the components tag, 
            are not part of the literal content and are parsed by the usual 
            Avalon parsing logic.
            </summary>
            <param name="textReader"></param>
            <param name="parserContext"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Parser.NodeForLiteralwithResources._text">
            <summary>
            literalstring
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Parser.NodeForLiteralwithResources.MyText">
            <summary>
            Property LiteralString
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.LiteralwithResourcesVerifier">
            <summary>
            Holds verification routines for LiteralwithResources.xaml.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LiteralwithResourcesVerifier.Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomDPOnAvalonComponent">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomDPOnAvalonComponent.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomDPOnAvalonComponent2">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomDPOnAvalonComponent2.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.ReadonlyCustomPropertySerialization">
            <summary>
            A class to handle serialization and its verification for Read Only propertyies
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  ReadonlyCustomPropertySerialization.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ReadonlyCustomPropertySerialization.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomClrPropertyOnCustomControl">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomClrPropertyOnCustomControl.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomDPOnCustomControl">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomDPOnCustomControl.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyCustomControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyCustomControl.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyCustomControl.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationEvent">
             <summary>
             A class to verify serialization of Events
             <para/>
             </summary>
             <remarks>
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  SerializationEvent.cs
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationEvent.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomItem1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.OnNormalEvent(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.NormalREEventID">
            <summary>
                This tests if a normal Routed 
                Event gets serialized correctly
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.OnAttachedEvent(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.OnNoWrapperAttachedEvent(System.Object,System.EventArgs)">
            <summary>
                This tests if an attached Routed 
                Event without a Clr wrapper 
                gets serialized correctly
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.ShouldSerializeIntValueProp">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.AliasDPProperty">
            <summary>
            DependencyProperty for <see cref="P:Avalon.Test.CoreUI.Serialization.CustomItem1.AliasDP"/> property.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.StringNormalDPProperty">
            <summary>
                This tests that a dependency property 
                value does get serialized normally
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.StringHiddenDP1Property">
            <summary>
                This tests that a dependency property 
                value does not get serialized when hidden
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.StringHiddenDP2Property">
            <summary>
                This tests that a dependency property 
                value does not get serialized when hidden
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.IntDefaultDP1Property">
            <summary>
                This tests that a dependency property 
                with default value and not locally set 
                does not get serialized
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.IntDefaultDP2Property">
            <summary>
                This tests that a dependency property locally set but 
                with default value does note get serialized
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.IntValueDP1Property">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.ShouldSerializeIntValueDP1(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.IntValueDP2Property">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.ShouldSerializeIntValueDP2">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.IntReadOnlyDP1Property">
            <summary>
                This tests that a readonly dependency property 
                does not get serialized
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.IntReadOnlyDP2Property">
            <summary>
                This tests that a dependency property with a 
                gettor only clr wrapper does not get serialized
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.ListDP1Property">
            <summary>
                This tests that an IList dependency property 
                value gets serialized even though the property 
                is readonly when marked as Content
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.ListDP2Property">
            <summary>
                This tests that an IList dependency property 
                value gets serialized even though the property 
                is readonly when marked as Content
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.DictionaryDP1Property">
            <summary>
                This tests that an IDictionary dependency property 
                value gets serialized even though the property 
                is readonly when marked as Content
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.DictionaryDP2Property">
            <summary>
                This tests that an IDictionary dependency property 
                value gets serialized even though the property 
                is readonly when marked as Content
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.OnSkipEvent(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem1.OnNoCallbackEvent(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.ResourceRefDP1Property">
            <summary>
                This tests that a dependency property 
                value that is a resource reference 
                gets serialized correctly as "{resourceName}"
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.ResourceRefDP2Property">
            <summary>
                This tests that a dependency property 
                value that is a resource reference 
                gets serialized correctly as "{*typeof(resourceName)}"
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem1.CustomExprDPProperty">
            <summary>
                This tests that a dependency property 
                value that is set to a custom expression
                gets serialized correctly as "[identity]"
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Serialization.CustomItem1.NormalEvent">
            <summary>
                This tests if a normal Clr 
                Event gets serialized correctly
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Serialization.CustomItem1.NormalRE">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Avalon.Test.CoreUI.Serialization.CustomItem1.AttachedRE">
            <summary>
                This tests if an attached Routed 
                Event with a Clr wrapper gets serialized correctly
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.StringNormalProp">
            <summary>
                This tests that property value does 
                get serialized normally
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.StringHiddenProp">
            <summary>
                This tests that property value does 
                not get serialized due to hidden attribute
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntDefaultProp">
            <summary>
                This tests that property with default 
                value does not get serialized
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntValueProp">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ListProp">
            <summary>
                This tests that an IList property value gets 
                serialized even though the property is readonly
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.DictionaryProp">
            <summary>
                This tests that an IDictionary property value gets 
                serialized even though the property is readonly
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.AliasDP">
            <summary>
            The AliasDP property specifies the name of font family.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.StringNormalDP">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.StringHiddenDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.StringHiddenDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntDefaultDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntDefaultDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntValueDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntValueDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntReadOnlyDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntReadOnlyDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ListDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ListDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.DictionaryDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.DictionaryDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="E:Avalon.Test.CoreUI.Serialization.CustomItem1.SkipEvent">
            <summary>
                This tests if a serializable Clr 
                Event is skipped by designer action
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Serialization.CustomItem1.NoCallbackEvent">
            <summary>
                This tests if a serializable Clr 
                Event callbacks are avoided by designer action
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntSkipProp">
            <summary>
                This tests if a serializable property attribute 
                is being skipped by designer action
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ArraySkipProp">
            <summary>
                This tests if a serializable complex property 
                and its contents are being skipped by 
                designer action
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.IntNoCallbackProp">
            <summary>
                This tests if a serializable property attribute 
                callbacks are avoided by designer action
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ArrayNoCallbackProp">
            <summary>
                This tests if a serializable complex property 
                and its contents callbacks are being avoided by 
                designer action
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ResourceRefDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.ResourceRefDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomItem1.CustomExprDP">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomItem2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem2.AttachedREEventID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem2.NoWrapperAttachedREEventID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem2.IntNoWrapperAttachedDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.GetIntNoWrapperAttachedDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.SetIntNoWrapperAttachedDP(MSAvalon.Windows.DependencyObject,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem2.IntHiddenAttachedDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.GetIntHiddenAttachedDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.SetIntHiddenAttachedDP(MSAvalon.Windows.DependencyObject,System.Int32)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.ShouldSerializeIntHiddenAttachedDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.CustomItem2.AliasDPProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.GetAliasDP(MSAvalon.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomItem2.SetAliasDP(MSAvalon.Windows.DependencyObject,System.String)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="value"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.TestDesignerSerializeHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TestDesignerSerializeHelper.OnSaveNode(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.EntityContext,MSAvalon.Windows.Serialization.XamlNodeType)">
            <summary>
                This is called prior to writing out the tag for a node.  The designer has the ability to
                inject markup using the passed writer, or direct the action of the serializer by 
                returning a SerializationAction.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TestDesignerSerializeHelper.OnSaveEvent(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.EventContext,System.String,System.String@)">
            <summary>
                Called prior to saving a clr event.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TestDesignerSerializeHelper.OnSaveProperty(System.Xml.XmlWriter,MSAvalon.Windows.Serialization.PropertyContext,System.String,System.String@)">
            <summary>
                Called prior to saving a clr property.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TestDesignerSerializeHelper.OnError(MSAvalon.Windows.Serialization.XamlParseException)">
            <summary>
                Called when a save error occurs.  Crack the exception to get more details, and
                respond telling the serializer to ignore this error, stop saving, or 
                raise the exception
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.ExpressionElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ExpressionElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.ExpressionElement.CustomExprDPProperty">
            <summary>
                This tests that a dependency property 
                value that is set to a custom expression
                gets serialized correctly as "[identity]"
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.ExpressionElement.CustomExprDP">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.ResourceReferenceExpressionElement">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ResourceReferenceExpressionElement.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.ResourceReferenceExpressionElement.ResourceRefDP1Property">
            <summary>
                This tests that a dependency property 
                value that is a resource reference 
                gets serialized correctly as "{resourceName}"
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Serialization.ResourceReferenceExpressionElement.ResourceRefDP2Property">
            <summary>
                This tests that a dependency property 
                value that is a resource reference 
                gets serialized correctly as "{*typeof(resourceName)}"
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.ResourceReferenceExpressionElement.ResourceRefDP1">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.ResourceReferenceExpressionElement.ResourceRefDP2">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationResourceReferenceExpression">
             <summary>
             A class to verify serialization of Events
             <para/>
             </summary>
             <remarks>
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  SerializationEvent.cs
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationResourceReferenceExpression.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.BamlizedThemeTest">
            <summary>
            Cell resources verification
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.BamlizedThemeTest.Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.AliasPropertyRepro">
            <summary>
            A class to handle serialization and its verification for compact syntax and databinding
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  SerializationDataBindingCase.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AliasPropertyRepro.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.BugRepro11">
            <summary>
            A class to repro bug 11
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  BugRepro11.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.BugRepro11.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyIEnumerable">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIEnumerable.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIEnumerable.MSAvalon#Windows#Serialization#IAddChild#AddText(System.String)">
            <summary>
             Add a text string to this control
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIEnumerable.MSAvalon#Windows#Serialization#IAddChild#AddChild(System.Object)">
            <summary>
             Add an object child to this control
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIEnumerable.stringprop">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.MyIDictionary">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="val"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Keys">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#Values">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#ICollection#Count">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.MyIDictionary.PropStr">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.NodeForIDictionary">
            <summary>
            This class defines custom clr class with various custom properties
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.NodeForIDictionary.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.NodeForIDictionary.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIDictionary.dictionary1">
            <summary>
             
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIDictionary.dictionary2">
            <summary>
             
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIDictionary.dictionary3">
            <summary>
             
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIDictionary.dictionary4">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable">
            <summary>
            This class defines custom clr class with various custom properties
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable.enumerable1">
            <summary>
             
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable.enumerable2">
            <summary>
             
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable.enumerable3">
            <summary>
             
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.NodeForIEnumerable.enumerable4">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomExpression">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomExpression.#ctor(System.Object)">
            <summary>
                Expression construction
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomExpression.GetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
                Called to evaluate the Expression value
            </summary>
            <param name="d">
                DependencyObject being queried
            </param>
            <param name="dp">
                Property being queried
            </param>
            <returns>
                Computed value. Unset if unavailable.
            </returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Serialization.CustomExpression.Identity">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.CustomExpressionConverter">
            <summary>
                TypeConverter for a resource value expression
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                TypeConverter method override.
            </summary>
            <param name="context">
                ITypeDescriptorContext
            </param>
            <param name="sourceType">
                Type to convert from
            </param>
            <returns>
                true if conversion is possible
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
                TypeConverter method override.
            </summary>
            <remarks>
                For avalon serialization this converter 
                returns true for string types only if the 
                target element with the resource 
                dictionary for the current resource 
                reference is also being serialized. Else 
                it returns false and the serialization 
                engine must serialize the evaluated 
                value of the expression.
            </remarks>
            <param name="context">
                ITypeDescriptorContext
            </param>
            <param name="destinationType">
                Type to convert to
            </param>
            <returns>
                true if conversion is possible
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
                TypeConverter method implementation.
            </summary>
            <param name="context">
                ITypeDescriptorContext
            </param>
            <param name="culture">
                current culture (see CLR specs)
            </param>
            <param name="value">
                value to convert from
            </param>
            <returns>
                value that is result of conversion
            </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.CustomExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
                TypeConverter method implementation.
            </summary>
            <param name="context">
                ITypeDescriptorContext
            </param>
            <param name="culture">
                current culture (see CLR specs)
            </param>
            <param name="value">
                value to convert from
            </param>
            <param name="destinationType">
                Type to convert to
            </param>
            <returns>
                converted value
            </returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationExpressionDeep">
             <summary>
             A class to verify serialization of Events
             <para/>
             </summary>
             <remarks>
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  SerializationEvent.cs
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationExpressionDeep.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.SerializationExpressionShallow">
             <summary>
             A class to verify serialization of Events
             <para/>
             </summary>
             <remarks>
             <para/>
              Microsoft
             <para/>
             <para/>
             FileName:  SerializationEvent.cs
             </remarks>
             <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.SerializationExpressionShallow.DoTheTest(System.String,Avalon.Test.CoreUI.Serialization.MyXamlSerializer)">
             <summary>
            
             </summary>
             <param name="filename">xaml file name</param>
            <param name="helper">MyXamlSerializer for serialization</param> 
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.ICollectionSerializationVerifier">
            <summary>
            Verify xaml files for Animation
            Verification method for Dockpanel.xaml from Animation group
             Microsoft
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ICollectionSerializationVerifier.Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.TextHostSerializerTest">
            <summary>
            A test case to test default constructor for XamlTextHostSerializer, as well as illegal parameter for SerializObject
            <para/>
            </summary>
            <remarks>
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  TextHostSerializerTest.cs
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.TextHostSerializerTest.RunThis(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers">
            <summary>
            Cell resources verification
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.BorderVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.CanvasVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.DockPanelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for Dockpanel.xaml from layout group
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.FlowPanelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.LayoutImageVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.LayoutGridPanelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.LayoutTableVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.LayoutTextPanelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
             Verifier for LayoutTextPanel.xaml
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.LayoutXamlVerifiers.LayoutTextPanelSimpleVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
             Verifier for LayoutTextPanelSimple.xaml
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.UISXamlVerifiers">
            <summary>
            Cell resources verification
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.UISXamlVerifiers.FormPadWindowVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.UISXamlVerifiers.MessageBoxWindowVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.UISXamlVerifiers.NotepadWindowVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for Dockpanel.xaml from layout group
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.UISXamlVerifiers.TestserviceconverterVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.UISXamlVerifiers.EditPadFrameVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:EditPad.EditPad">
            <summary>
            
            </summary>
        </member>
        <member name="M:EditPad.EditPad.Main(System.String[])">
            <summary>Application entry point.</summary>
        </member>
        <member name="M:EditPad.EditPad.DoMain(System.String[])">
            <summary>
            Runs the application.
            </summary>
            <remarks>
            From this point on, any exceptions thrown can be allowed to bubble
            up and they will be dumped and the DRT made to fail.
            </remarks>
        </member>
        <member name="M:EditPad.EditPad.SetCommandHandler(System.String,MSAvalon.Windows.Controls.RoutedEventHandler)">
            <summary>
            Sets the handler for a command - on button or on menu item.
            </summary>
            <param name="id">
            String identifying a button or menu item element in the EditPad frame.
            </param>
            <param name="handler">
            Command handler for this command.
            </param>
        </member>
        <member name="M:EditPad.EditPad.FindElement(MSAvalon.Windows.FrameworkElement,System.String)">
            <summary>
            Finds the first element in the given scope with the specified id.
            </summary>
            <param name='scope'>Scope from which to begin search.</param>
            <param name='id'>ID of framework element.</param>
            <returns>The element found, null otherwise.</returns>
        </member>
        <member name="T:EditPad.XamlViewer">
            <summary>
            
            </summary>
        </member>
        <member name="M:EditPad.XamlViewer.RefreshText">
            <summary>
            
            </summary>
        </member>
        <member name="P:EditPad.XamlViewer.Format">
             <summary>
             
            
             </summary>
             <value></value>
        </member>
        <member name="P:EditPad.XamlViewer.Source">
            <summary>
            A link to some framework element whose content should be viewed
            by this XamlViewer.
            </summary>
            <value></value>
        </member>
        <member name="T:EditPad.ParameterizedCommandInvokeEventArgs">
            <summary>
            Command Arguments
            </summary>
        </member>
        <member name="M:EditPad.ParameterizedCommandInvokeEventArgs.#ctor(MSAvalon.Windows.Commands.Command,System.Object)">
            <summary>
            ParameterizedCommandInvokeEventArgs
            </summary>
            <param name="command"></param>
            <param name="parameter"></param>
        </member>
        <member name="P:EditPad.ParameterizedCommandInvokeEventArgs.Parameter">
            <summary>
            Argument
            </summary>
        </member>
        <member name="T:EditPad.ComboBoxCommand">
            <summary>
            
            </summary>
        </member>
        <member name="F:EditPad.ComboBoxCommand.CommandProperty">
            <summary>
                The DependencyProperty for Command property
            </summary>
        </member>
        <member name="M:EditPad.ComboBoxCommand.OnSelectionChanged(MSAvalon.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            A virtual function that is called when the selection is changed. Default behavior
            is to raise a SelectionChangedEvent
            </summary>
            <param name="args">The inputs for this event. Can be raised (default behavior) or processed
              in some other way.</param>
        </member>
        <member name="P:EditPad.ComboBoxCommand.Command">
            <summary>
            Get or set Command property
            </summary>
        </member>
        <member name="T:EditPad.ComboBoxCommandItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:EditPad.ComboBoxCommandItem.Parameter">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:EditPad.RichTextBox">
            <summary>
            A prototype for flexible text editing surface.
            It is a surface containing rich text content
            in form of Text OM, and allowing text editing for this content.
            The content may be switched between various Text OM 
            implementations: Text, TextPanel, CustomText, ...
            </summary>
            <remarks>
            The design goal of this class is to give the simplest
            possible example of text content manipulations.
            It is not intended to be a prototype for real stock editing
            controls, such as TextBox or RichTextBox. They would
            require much more sophisticated OM to expose.
            </remarks>
        </member>
        <member name="M:EditPad.RichTextBox.#ctor">
            <summary>
            Creates a new instance of RichTextBox.
            By default instantiates TextBox as a content Scope for
            an editable text.
            </summary>
        </member>
        <member name="M:EditPad.RichTextBox.SetContentType(System.Type)">
            <summary>
            Creates new element for text content
            </summary>
            <param name="contentType">
            Any of subclasses of FrameworkElement implementing 
            TextView class.
            </param>
        </member>
        <member name="M:EditPad.RichTextBox.NewDocument">
            <summary>
            Sets up a new document in the design area.
            </summary>
        </member>
        <member name="M:EditPad.RichTextBox.LoadFromFile(System.String)">
            <summary>
            Loads contents into the design area from the specified file.
            </summary>
            <param name='fileName'>Name of file to load.</param>
        </member>
        <member name="M:EditPad.RichTextBox.SaveToFile(System.String)">
            <summary>
            Saves contents from the design area to the specified file.
            </summary>
            <param name='fileName'>Name of file to save to.</param>
        </member>
        <member name="F:EditPad.RichTextBox._textScope">
            <summary>
            An element containing an editable text.
            Text OM is expected to be implemented on this element
            and exposed via TextView object.
            </summary>
        </member>
        <member name="F:EditPad.RichTextBox._textView">
            <summary>
            Text content provided by _textScope element.
            Extracted from it via TextView object.
            </summary>
        </member>
        <member name="F:EditPad.RichTextBox._fileName">
            <summary>
            Name of the file being edited.
            </summary>
        </member>
        <member name="P:EditPad.RichTextBox.TextRange">
            <summary>
            An element containing an editable text.
            Text OM is expected to be implemented on this element
            and exposed via TextView class.
            </summary>
        </member>
        <member name="P:EditPad.RichTextBox.Selection">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.Filter">
            <summary>
            Gets the file name filter string for the designed contents, which
            determines the choices that appear in the "Save as file type"
            or "Files of type" box in dialog boxes.
            </summary>
        </member>
        <member name="P:EditPad.RichTextBox.FileName">
            <summary>
            Gets or sets the name of the file being edited.
            </summary>
        </member>
        <member name="P:EditPad.RichTextBox.FontSizeCommand">
            <summary>
            </summary>
        </member>
        <member name="P:EditPad.RichTextBox.FontFamilyCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ForegroundCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.BackgroundCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphBoldCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphItalicCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphUnderlineCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphFontSizeCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphFontFamilyCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphForegroundCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.ParagraphBackgroundCommand">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="P:EditPad.RichTextBox.Content">
            <summary>
            
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.AnimationVerifiers">
            <summary>
            Verify xaml files for Animation
            Verification method for Dockpanel.xaml from Animation group
             Microsoft
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AnimationVerifiers.ColorLengthShape_Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AnimationVerifiers.LengthControlKeyspline_Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for Dockpanel.xaml from layout group
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AnimationVerifiers.LengthDubleContorl_Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.AnimationVerifiers.PointLengthShape_Verify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers">
            <summary>
            Verify xaml files for Animation
            Verification method for Dockpanel.xaml from Animation group
             Microsoft
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.ImageBrushesVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.NineGridBrushesVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.DrawingBrushesVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.SolidColorBrushesVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.GradientBrushesVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.GeometryCollectionVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for GeometryCollection in graphics
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.PathGeometryVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for GeometryCollection in graphics
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.RectangleGeometryVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for RectangleGeometry in graphics
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.EllipseGeometryVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for EllipseGeometry in graphics
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.LineGeometryVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            Verification method for LineGeometry in graphics
             Microsoft
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.ShapesVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.PathStrokeVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.LineStrokeVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.PolygonStrokeVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.TransformDecoratorStrokeVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.SkewTransformVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.ScalingTransformVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.RotateTransformVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.TranslatingTransformVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.TransformCollectionTransformVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.GraphicsVerifiers.MatrixTransformVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers">
            <summary>
            Verify xaml files for Animation
            Verification method for xaml files from ComponentModel team
             Microsoft
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers.ButtonComponentModelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers.CheckBoxComponentModelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers.ComboBoxComponentModelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers.HyperLinkComponentModelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers.ListBoxComponentModelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ComponentModelVerifiers.RadioButtonListComponentModelVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Serialization.ConnectedDataVerifiers">
            <summary>
            Verify xaml files for Animation
            Verification method for xaml files from ComponentModel team
             Microsoft
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Serialization.ConnectedDataVerifiers.XmlDataSourceVerify(MSAvalon.Windows.UIElement,System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="uie"></param>
            <param name="IDedObjects"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PEHelper.ZBHelper">
            <summary>
            Helper class contains internal static helper methods
            Pet stands for property engine testing. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.#ctor">
            <summary>
            This class cannot be instaniated
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.Assert(System.Boolean,System.String)">
            <summary>
            Used to check that the condition is true. If not, NewTestValidationException
            is thrown and this test case would Fail
            </summary>
            <param name="condition">true to prevents test from failing. False otherwise.</param>
            <param name="message">Used to notify what error has caused test to fail. Also passed in as exception message</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.NewTestValidationException(System.String)">
            <summary>
            Exception builder method for Microsoft.Test.TestValidationException
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.ExpectedExceptionNotReceived">
            <summary>
            Helper method to throw ExpectedExceptionNotReceived error condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.ExpectedExceptionReceived(System.Exception)">
            <summary>
            Helper funtion to show the expected exception message
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.SetCoreLoggerObject(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Set automationFramework instance, to be used by PrintStatus, etc
            </summary>
            <param name="automationFramework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.SetAutomationFrameworkObject(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Set automationFramework instance, to be used by PrintStatus, etc
            </summary>
            <param name="automationFramework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintStatus(System.String)">
            <summary>
            Print out status message
            </summary>
            <param name="message">message to be printed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintStatus(System.String,System.ConsoleColor)">
            <summary>
            Print out status with color
            </summary>
            <param name="message">message to be printed</param>
            <param name="foreColor">color to be printed in</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintTitle(System.String)">
            <summary>
            Add format to make title more visible
            </summary>
            <param name="title">Title to be printed out</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintDependencyProperty(MSAvalon.Windows.DependencyProperty)">
            <summary>
            Given a property engine, displays its GlobalIndex, name, uri, type and default value
            </summary>
            <param name="dp"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.DependencyObjectTypeTag(MSAvalon.Windows.DependencyObjectType)">
            <summary>
            Return a string that consists of ID, name and SystemType of the given
            DependencyObjectType
            </summary>
            <param name="dType">DependencyObjectType of interest</param>
            <returns>a string that consists of ID, name and SystemType </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintDependencyObjectType(MSAvalon.Windows.DependencyObjectType)">
            <summary>
            Print out information about the given DependencyObjectType. Also
            show BaseType chain.
            </summary>
            <param name="dType">DependencyObjectType of interest</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintPropertyMetadata(MSAvalon.Windows.PropertyMetadata)">
            <summary>
            Print out information for PropertyMetadata
            </summary>
            <param name="metadata">PropertyMetadata to show infowith</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintFrameworkPropertyMetadata(MSAvalon.Windows.FrameworkPropertyMetadata)">
            <summary>
            Print out information for FrameworkPropertyMetadata
            </summary>
            <param name="meta">FrameworkPropertyMetadata to show infowith</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintFrameworkElementFactory(MSAvalon.Windows.FrameworkElementFactory)">
            <summary>
            Print out information on FrameworkElementFactory
            </summary>
            <param name="factory">The FrameworkElementFactory to display</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.EnableRunAll(System.String)">
            <summary>
            Provde more support for refreshed test cases
            </summary>
            <param name="testGroup">name of the test group</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintStringArray(System.String[])">
            <summary>
            Print out string array information
            </summary>
            <param name="array">the array to print out</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.PrintNamespaceMap(MSAvalon.Windows.Serialization.NamespaceMap)">
            <summary>
            Print out NameSpaceMap instance information
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.FromXamlToElement(System.String)">
            <summary>
            From Xmal string to UIElement
            </summary>
            <param name="xmal">complete xaml file as string</param>
            <returns>DependencyObject as the result of Serialization.Parser.LoadXml</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PEHelper.ZBHelper.FromElementToXaml(MSAvalon.Windows.DependencyObject)">
            <summary>
            From Element to Xaml string
            </summary>
            <param name="element">Element that is to be serialized</param>
            <returns>Xaml string as the result of Serialization.Parser.GetOuterXml</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.PETestCase">
            <summary>
            Last Sync with Changelist 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshTestDependencyObjectType.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            Loader: None
            Script Command: *\Client\WCPTests\Core\CoreTests\CoreTests.exe
            Script Switch:  /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll"
            Supp Files: *\Client\WCPTests\Core\CoreTests\CoreTests*.dll;
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType">
            <summary>
            This class is used to test MSAvalon.Windows.DependnencyObjectType API
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType.TestMisc">
            <summary>
            No.1
            Misc Tests.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType.TestFromSystemType">
            <summary>
            no.2
            Test API DependnencyObjectType.FromSystemType(Type systemType)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType.TestIsInstanceOfType">
            <summary>
            No. 3
            Test API DependnencyObjectType.IsInstanceOf(DependencyObject d)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType.TestIsSubclassOf">
            <summary>
            No. 4
            Test API DependnencyObjectType.IsSubclassOf(DependencyObjectType dType)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType.TestGetHashCode">
            <summary>
            No. 5
            Test API DependnencyObjectType.GetHashCode()
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDependencyObjectType.TestCompareTo">
            <summary>
            No. 6
            Test API DependnencyObjectType.CompareTo()
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDoD1">
            <summary>
            TestDoD1 is derived from DependencyObject
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDoD1.#ctor(System.String)">
            <summary>
            Constructor of TestDoD1
            </summary>
            <param name="tag">the tag</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDoD2">
            <summary>
            TestDoD2 is derived from TestDoD1
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDoD2.#ctor(System.String,System.Int32)">
            <summary>
            TestDoD2 constructor
            </summary>
            <param name="tag">The tag</param>
            <param name="secret">its secret</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDoD3">
            <summary>
            TestDoD3 is derived from TestDoD2
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestDoD3.#ctor(System.String,System.Int32,System.String)">
            <summary>
            TestDoD3 Constructor
            </summary>
            <param name="tag">The Tag</param>
            <param name="secret">its secret</param>
            <param name="state">its state</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClass">
            <summary>
            A test class (derived from object)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClass.#ctor(System.String,System.Decimal)">
            <summary>
            TestClass constructor
            </summary>
            <param name="name">name</param>
            <param name="salary">the salary</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClass.name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClass.salary">
            <summary>
            the salary
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClassD1">
            <summary>
            TestClassD1 is derived from TestClass
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClassD1.#ctor(System.String,System.Decimal,System.Int32)">
            <summary>
            Constructor of TestClassD1
            </summary>
            <param name="name">name</param>
            <param name="salary">the salary</param>
            <param name="building">the building</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClassD1.building">
            <summary>
            The building
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClassD2">
            <summary>
            TestClassD2 is derived from TestClassD1
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClassD2.#ctor(System.String,System.Decimal,System.Int32)">
            <summary>
            Constructor of TestClassD2
            </summary>
            <param name="name">name</param>
            <param name="salary">the salary</param>
            <param name="building">building</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshDependencyObjectTypeTest.TestClassD2.toRetire">
            <summary>
            to retire or not
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PETestCase">
            <summary>
            Last Sync with Changelist 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.TestMisc">
            <summary>
            No.1 to test type information
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.TestCtorAttachDetachReuseAbility">
            <summary>
            No.2 Test Constructors and the ability to attach/detach/reuse
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.TestOnExpressionItself">
            <summary>
             No.3 Tests on MonthPlusDayExpression without using DO or DP. This Expression is a constant expression.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.TestWithDoAndDp">
            <summary>
             No.4 Tests on MonthPlusDayExpression with DO or DP
             Attach and Detach expressions
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.TestWithAverageExpression">
            <summary>
             No.5 Tests on Average Expression which takes dependency on Sources
             All positive test cases
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.NegativeTests">
            <summary>
            Negative test cases for Expression
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.AllProperties">
            <summary>
            Used exclusively for No.6: TestWithAverageExpression
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.AllProperties.AverageProperty">
            <summary>
            This is Dp for AverageProperty
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.AllProperties.LuckyNumberProperty">
            <summary>
            This is Dp for one Number
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.AllProperties.MagicNumberProperty">
            <summary>
            This is Dp for another number
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.MyWinBar">
            <summary>
            Used exclusivelyu for No. 6: TestWithAverageExpression
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.TestExpression.MyCommandBar">
            <summary>
            Used exclusivelyu for No. 6: TestWithAverageExpression
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression">
            <summary>
            Like Constant Expression, it returns the sum of Month and Day
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.MonthPlusDay">
            <summary>
            The expression is constent on any given day
            </summary>
            <returns>For October 15, the return value is 10+15=25</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.#ctor">
            <summary>
            Unlike most expressions, this expression returns today's Month+Day
            so there is dependency on the time but no dependency on other dp.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.GetSourcesCalled">
            <summary>
            Counter for the number of method call for GetSources
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.GetSources">
            <summary>
            Override Expression Virtual Function
            </summary>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.GetValueCalled">
            <summary>
            Counter for the number of method call for GetValue
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.GetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.OnAttachCalled">
            <summary>
            Counter for the number of method call for OnAttach
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.OnAttach(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.OnDetachCalled">
            <summary>
            Counter for the number of method call for OnDetach
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.OnDetach(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.SetValueCalled">
            <summary>
            Counter for the number of method call for SetValue
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.SetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty,System.Object)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.MonthPlusDayExpression.ResetCalledCounters">
            <summary>
            Reset counters
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AccessButton">
            <summary>
            Provide a DependencyObject-derived class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AccessButton.SecretSeedProperty">
            <summary>
            A DP used with MonthPlusDayExpression test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AccessButton.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Public ctor
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PropertySet">
            <summary>
            DependencyPropery can be defined by any class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PropertySet.NumberOneProperty">
            <summary>
            Dp1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PropertySet.NumberTwoProperty">
            <summary>
            Dp2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PropertySet.NumberThreeProperty">
            <summary>
            Dp3
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.PropertySet.NumberAverageProperty">
            <summary>
            Dp4
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression">
            <summary>
            This expression returns the average of all dependent dp values
            This expression provides local cache
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.#ctor(MSAvalon.Windows.ExpressionOptions)">
            <summary>
            Ctor with options
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.AddOne(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Add one associated dependencyObject and DependencyProperty
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.GetSources">
            <summary>
            Get all sources
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.SetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty,System.Object)">
            <summary>
            This is required for twoway datainding and does not apply here
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.GetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Get Value
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.OnAttach(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            OnAttach
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.OnDetach(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            OnDetach
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshExpressionTest.AverageExpression.OnPropertyInvalidation(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.PETestCase">
            <summary>
            Last Sync 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestMisc">
            <summary>
            Test FrameworkELementFactory type
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestConstructor">
            <summary>
            Test Constructors
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestType">
            <summary>
            Test 'Type' property, Also: IsSealed Property
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestStyleId">
            <summary>
            Test property StyleID. Its type is string. It is Read/Write
            Also test: IsSealed property
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestAppendChild">
            <summary>
            Test method AppendChild (Add a factory child to this factory)
            Also test property Parent, FirstChild and NextSibling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestSetValue">
            <summary>
            Test 'SetValue' method
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestSetBinding">
            <summary>
            Test 'SetBinding' method. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestAliasProperty">
            <summary>
            Test 'AliasProperty' method
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshFrameworkElementFactoryTest.TestFrameworkElementFactory.TestSealNegativeCases">
            <summary>
            Negative tests cases when FraeworkElementFactory is sealed
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.PETestCase">
            <summary>
            Last Sync 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            Only new APIs are covered here. They include
            (1) DependencyProperty.Register methods:
                Register(name, propertyType, ownerType)
                Register(name, propertyType, ownerType, typeMetadata)
                Register(name, propertyType, ownerType, typeMetadata, validateValueCallback)
            (2) new overload of AddOwner. It is a convenience method that will automatically OverrideMetadata on your behalf:
                AddOwner(ownerType, typeMetadata)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttached">
            <summary></summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttached.MyOwnProperty">
            <summary>
            One Dp
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttached.TestMisc">
            <summary>
            Not used in this test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttached.TestAddOwner">
            <summary>
            Test AddOwner() method
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.AvalonObject">
            <summary>
            Helper class for TestOnDpRegisterWithWithoutAttached
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.AvalonObject.AvalonProperty">
            <summary>
            Used to test DP.Register
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.AvalonObject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.AvalonObject.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            This constructor has better performance
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.AvalonObject.AddOwnerFailure">
            <summary>
            This method is called by TestAddOwner to provide a failure example
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.AvalonObject.AddOwnerSuccess">
            <summary>
            This method is called by TestAddOwner to provide a success example
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttachedPass2">
            <summary>
            Add a new class that is derived from DependencyObject
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttachedPass2.TestRegister">
            <summary>
            Test Register() Methods
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnDpRegisterWithWithoutAttachedTest.TestOnDpRegisterWithWithoutAttachedPass2.validateCase3(System.Object)">
            <summary>
            value can only be between 10 and 20
            </summary>
            <param name="obj">integer to validate</param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.PETestCase">
            <summary>
            Last Sync 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.TestOnExternalValueValidation">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.TestOnExternalValueValidation.TestMisc">
            <summary>
            Not used in this test file.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.TestOnExternalValueValidation.TestWithCustomClass">
            <summary>
            Custom class AvalonDependencyObject derives directly from 
            DependencyObject
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.TestOnExternalValueValidation.TestWithFrameworkClass">
             <summary>
             At the time of test code writing, the following Avalon code has provided ValidateValueCallback
            
             When property type is an enum
             Button.ClickModeProperty, CheckBox.CheckStateProperty, ListBox.SelectionModeProperty
             MenuItem.MenuItemBehaviorProperty, PopUp.PlacementProperty, PopUp.CloseModeProperty
             ScrollViewer.HorizontalScrollBarVisibilityProperty, ScrollViewer.VerticalScrollBarVisibilityProperty
             
             When proeprty type is an int.
             RepeatButton.DelayProperty, RepeatButton.IntervalProperty
             
             Do not like name choice in Popup.cs (Actually in PlacementType.cs, CloseModeType.cs)
             </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.Strategy">
            <summary>
            Different strategy enum
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.Strategy.HurryUp">
            <summary>
            Hurry up. Time is flying away.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.Strategy.TakeTime">
            <summary>
            Take your time for best result
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.Strategy.NoAction">
            <summary>
            Do nothing at all.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.Strategy.AnyAction">
            <summary>
            Do whatever
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.AvalonDependencyObject">
            <summary>
            Custon class derives directly from DependencyObject. 
            ValidateValueCallback works at core level.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.AvalonDependencyObject.MagicNumberProperty">
            <summary>
            For MagicNumberProperty, it should be between 0 and 100, inclusive
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.RefreshOnExternalValueValidationTest.AvalonDependencyObject.StrategyProperty">
            <summary>
            For StrategyProperty, it takes valid enum 'Strategy'
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.PETestCase">
            <summary>
            Last Sync 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.TestUIContextObject">
            <summary>Test UIContextObject</summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.TestUIContextObject.TestMisc">
            <summary>
            Test Type of UIContextObject
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.TestUIContextObject.TestConstructorAndContext">
            <summary>
            Test 2 Constructors and property 'Context' getter
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.TestUIContextObject.TestChangeContext">
            <summary>
            Test public method ChangeContext(context). 
            Seven (7) different scenarios will be tested
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.AvalonUIContextObject">
            <summary>
            Both UIContextObject Ctors are protected. Expose them from 
            class AvalonUIContextObject that derives from UIContextObject
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.AvalonUIContextObject.#ctor">
            <summary>
            Ctor that take no parameter
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.AvalonUIContextObject.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Parameter that is more performant
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.AvalonUIContextObject.ChangeContextCore(MSAvalon.Threading.UIContext)">
            <summary>
            Return true to allow context change, false otherwise.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.AvalonUIContextObject.ChangeContextCorePositive">
            <summary>
            Control what bool value to return for ChangeContextCore
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.RefreshUIContextObjectTest.AvalonUIContextObject.UseBaseImplementation">
            <summary>
            Control if we use base implementation of ChangeContextCore or not
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.PETestCase">
            <summary>
            Last Sync 
            coretests.exe /Class=Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.PETestCase  /Method=LabRunAll /Assembly="CoreTestsUntrusted.dll" /NoLabTools="true" /SEELevel=InSecure
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.PETestCase.RunAll">
            <summary>
            Used by MainFuncNCI
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.PETestCase.LabRunAll(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Used by the Test Engine
            </summary>
            <param name="framework">Framework to be passed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.PETestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework">The framework we are not going to use</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.PETestCase.#ctor">
            <summary>
            Ctor that is not used.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.TestUIPropertyMetadata">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.TestUIPropertyMetadata.TestMisc">
            <summary>
            Type Checkup
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.TestUIPropertyMetadata.TestConstructors">
            <summary>
            Test 11 Constrcutors
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.AvalonObject">
            <summary>
            DependencyObject used in test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.AvalonObject.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RefreshUIPropertyMetadataTest.AvalonObject.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Ctor more performant
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.PetHelper">
            <summary>
            Helper class contains internal static helper methods
            Pet stands for property engine testing. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.#ctor">
            <summary>
            This class cannot be instaniated
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.Assert(System.Boolean,System.String)">
            <summary>
            Used to check that the condition is true. If not, NewTestValidationException
            is thrown and this test case would Fail
            </summary>
            <param name="condition">true to prevents test from failing. False otherwise.</param>
            <param name="message">Used to notify what error has caused test to fail. Also passed in as exception message</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.NewTestValidationException(System.String)">
            <summary>
            Exception builder method for Microsoft.Test.TestValidationException
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.ExpectedExceptionNotReceived">
            <summary>
            Helper method to throw ExpectedExceptionNotReceived error condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.ExpectedExceptionReceived(System.Exception)">
            <summary>
            Helper funtion to show the expected exception message
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.SetCoreLoggerObject(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Set automationFramework instance, to be used by PrintStatus, etc
            </summary>
            <param name="automationFramework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.SetAutomationFrameworkObject(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Set automationFramework instance, to be used by PrintStatus, etc
            </summary>
            <param name="automationFramework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintStatus(System.String)">
            <summary>
            Print out status message
            </summary>
            <param name="message">message to be printed</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintTitle(System.String)">
            <summary>
            Add format to make title more visible
            </summary>
            <param name="title">Title to be printed out</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintDependencyProperty(MSAvalon.Windows.DependencyProperty)">
            <summary>
            Given a property engine, displays its GlobalIndex, name, uri, type and default value
            </summary>
            <param name="dp"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.DependencyObjectTypeTag(MSAvalon.Windows.DependencyObjectType)">
            <summary>
            Return a string that consists of ID, name and SystemType of the given
            DependencyObjectType
            </summary>
            <param name="dType">DependencyObjectType of interest</param>
            <returns>a string that consists of ID, name and SystemType </returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintDependencyObjectType(MSAvalon.Windows.DependencyObjectType)">
            <summary>
            Print out information about the given DependencyObjectType. Also
            show BaseType chain.
            </summary>
            <param name="dType">DependencyObjectType of interest</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintPropertyMetadata(MSAvalon.Windows.PropertyMetadata)">
            <summary>
            Print out information for PropertyMetadata
            </summary>
            <param name="metadata">PropertyMetadata to show infowith</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintFrameworkPropertyMetadata(MSAvalon.Windows.FrameworkPropertyMetadata)">
            <summary>
            Print out information for FrameworkPropertyMetadata
            </summary>
            <param name="meta">FrameworkPropertyMetadata to show infowith</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintFrameworkElementFactory(MSAvalon.Windows.FrameworkElementFactory)">
            <summary>
            Print out information on FrameworkElementFactory
            </summary>
            <param name="factory">The FrameworkElementFactory to display</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintStringArray(System.String[])">
            <summary>
            Print out string array information
            </summary>
            <param name="array">the array to print out</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PetHelper.PrintNamespaceMap(MSAvalon.Windows.Serialization.NamespaceMap)">
            <summary>
            Print out NameSpaceMap instance information
            </summary>
            <param name="map"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestStruct">
            <summary>
            A structure is of value type. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestStruct.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for TestStruct. 
            </summary>
            <param name="startCount"></param>
            <param name="endCount"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.TestStruct.StartCount">
            <summary>
            Readonly property to get the startCount
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.TestStruct.EndCount">
            <summary>
            Readonly property to get the endcount
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestEnum">
            <summary>
            A enum is of value type
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestEnum.Building8">
            <summary>
            Building 8
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestEnum.Building9">
            <summary>
            Building 9
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestEnum.Building10">
            <summary>
            Building 10
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestEnum.Building50">
            <summary>
            Building 50
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestClass">
            <summary>
            A test class (derived from object)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestClass.#ctor(System.String,System.Decimal)">
            <summary>
            TestClass constructor
            </summary>
            <param name="name">name</param>
            <param name="salary">the salary</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestClass.name">
            <summary>
            name
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestClass.salary">
            <summary>
            the salary
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestClassD1">
            <summary>
            TestClassD1 is derived from TestClass
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestClassD1.#ctor(System.String,System.Decimal,Avalon.Test.CoreUI.PropertyEngine.TestEnum)">
            <summary>
            Constructor of TestClassD1
            </summary>
            <param name="name">name</param>
            <param name="salary">the salary</param>
            <param name="building">the building</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestClassD1.building">
            <summary>
            The building
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestClassD2">
            <summary>
            TestClassD2 is derived from TestClassD1
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestClassD2.#ctor(System.String,System.Decimal,Avalon.Test.CoreUI.PropertyEngine.TestEnum)">
            <summary>
            Constructor of TestClassD2
            </summary>
            <param name="name">name</param>
            <param name="salary">the salary</param>
            <param name="building">building</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestClassD2.toRetire">
            <summary>
            to retire or not
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestDoD1">
            <summary>
            TestDoD1 is derived from DependencyObject
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDoD1.#ctor(System.String)">
            <summary>
            Constructor of TestDoD1
            </summary>
            <param name="tag">the tag</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestDoD2">
            <summary>
            TestDoD2 is derived from TestDoD1
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDoD2.#ctor(System.String,System.Int32)">
            <summary>
            TestDoD2 constructor
            </summary>
            <param name="tag">The tag</param>
            <param name="secret">its secret</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestDoD3">
            <summary>
            TestDoD3 is derived from TestDoD2
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDoD3.#ctor(System.String,System.Int32,System.String)">
            <summary>
            TestDoD3 Constructor
            </summary>
            <param name="tag">The Tag</param>
            <param name="secret">its secret</param>
            <param name="state">its state</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.RegisterDependencyProperty">
            <summary>
            This class is used to test DependencyProperty Registration
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RegisterDependencyProperty.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RegisterDependencyProperty.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RegisterDependencyProperty.RegisterClrValueTypeProperties(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Dependency Property registration when its PropertyType are CLR value type
            </summary>
            <remarks>
                 <ol>Scenarios tested:
                     <li>register dependency properties</li>
                     <li>DependencyProperty.FromName</li>
                     <li>DependencyProperty.IsValidType</li>
                 </ol>
                 <filename>RegisterProperty.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RegisterDependencyProperty.RegisterClrReferenceTypeProperties(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Dependency Property registration when its PropertyType are CLR reference type
            </summary>
            <remarks>
                 <ol>Scenarios tested:
                     <li>register dependency properties</li>
                     <li>DependencyProperty.FromName</li>
                     <li>DependencyProperty.IsValidType</li>
                 </ol>
                 <filename>RegisterProperty.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.RegisterDependencyProperty.RegisterPropertiesNegativeMiscCases(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 negative and misc test cases on dependency property registration
            </summary>
            <remarks>
                 <ol>Scenarios tested:
                     <li>Null argument is provided</li>
                     <li>DependencyProperty.FromName from non-existant interned name</li>
                     <li>name conflict (to do)</li>
                 </ol>
                 <filename>RegisterProperty.cs</filename>
            </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType">
            <summary>
            This class is used to test MSAvalon.Windows.DependnencyObjectType API
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.TestFromSystemType(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test API DependnencyObjectType.FromSystemType(Type systemType)
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.TestIsInstanceOfType(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test API DependnencyObjectType.IsInstanceOf(DependencyObject d)
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.TestIsSubclassOf(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test API DependnencyObjectType.IsSubclassOf(DependencyObjectType dType)
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.TestGetHashCode(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test API DependnencyObjectType.GetHashCode()
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestDependencyObjectType.TestCompareTo(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test API DependnencyObjectType.CompareTo()
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.GetSetClear">
            <summary>
            This class is used to test generic property value accessors for 
            DependencyProperty. they include
            GetValue, SetValue, ClearValue and GetLocalValue
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.GetSetClear.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.GetSetClear.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.GetSetClear.GetSetClearSimpleDirect(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            GetValue, SetValue, ClearValue and GetLocalValue on 
            DependencyObject directly with no CLR accessors or 
            native cache support
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.GetSetClear.GetSetClearSimpleDirectButSetDefaultValueWithMetadata(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            GetValue, SetValue, ClearValue and GetLocalValue on 
            DependencyObject directly with no CLR accessors or 
            native cache support. However, defaultValue is specifically 
            provided via Metadata
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>TestDependencyObjectType.cs</filename>
            </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.PropertyMetadata_Test1">
            <summary>
            This class is used to execute MSAvalon.Windows.PropertyMetadata API simple test cases
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PropertyMetadata_Test1.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PropertyMetadata_Test1.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Must implement inherited abstract member
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PropertyMetadata_Test1.TestConstructors(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Constructors
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>PropertyMetadata_Test1.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PropertyMetadata_Test1.TestPublicProperties(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Public Properties setter
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>PropertyMetadata_Test1.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.PropertyMetadata_Test1.TestPublicPropertiesWhileSealed(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Public Properties setter/getter when PropertyMetadata is sealed
            </summary>
            <remarks>
                 <ol>Scenarios covered:
                     <li></li>
                     <li></li>
                     <li></li>
                 </ol>
                 <filename>PropertyMetadata_Test1.cs</filename>
            </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimple">
            <summary>
            No Cache and No property
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimple.ValueTypeProperty">
            <summary>
            A dependencyProperty whose type if decimal
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimple.ReferenceTypeProperty">
            <summary>
            A DependencyProperty whose type is string
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimple.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimpleWithDefaultValue">
            <summary>
            Provide DefaultValue metadata
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimpleWithDefaultValue.ValueTypeProperty">
            <summary>
            A dependencyProperty whose type if decimal
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimpleWithDefaultValue.ReferenceTypeProperty">
            <summary>
            A DependencyProperty whose type is string
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPlainSimpleWithDefaultValue.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestMercury">
            <summary>
            Based on the sample class from spec, TestMercury
            class uses native cache to optimize property value access
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercury.DeltaProperty">
            <summary>
                The dependency property for the DeltaProperty.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.TestMercury.Delta">
            <summary>
            Just delta
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPropertyMetadataSealed">
            <summary>
            Seal the associated PropertyMetadate
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPropertyMetadataSealed.ValueTypeProperty">
            <summary>
            A dependencyProperty whose type if decimal
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPropertyMetadataSealed.ReferenceTypeProperty">
            <summary>
            A dependencyProperty whose type is string
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPropertyMetadataSealed.meta1">
            <summary>
            MetaData meant for ValueTypeProperty
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPropertyMetadataSealed.meta2">
            <summary>
            MetaData meant for ReferenceTypeProperty
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.TestMercuryPropertyMetadataSealed.#ctor">
            <summary>
            The constructor that does nothing
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.TestUIElement">
            <summary>
            Test class derived from DependencyObject
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestUIElement.IsMouseCapturedProperty">
            <summary>
                The dependency property for the IsMouseCaptured.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.TestUIElement.GetSetClearGetLocalValueTestAgeProperty">
            <summary>
            Used to test GetValue, SetValue, ClearValue and GetLocalValue of DependencyObject
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.TestUIElement.NoLocalCacheIsMouseCaptured">
            <summary>
            WIth no Cache, get or set IsMouseCaptured
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.TestUIElement.IsMouseCaptured">
            <summary>
                A property indicating if the mouse is captured to this element or not.
                IsMouseCaptured provides local cache
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.AccessButton">
            <summary>
            Used by SealedPropertySetter
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.AccessButton.AccessMeta">
            <summary>
             Used by SealedPropertySetter
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.AccessButton.SealedByProperty">
            <summary>
            SealedPropertySetter
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton">
            <summary>
            Used by DpRegister (DependencyProtocol.Register), both positive and negative cases
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.OneAProperty">
            <summary>
            Register without providing defaultMetadata
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.OneBProperty">
            <summary>
            Register and provide defaultMetadata
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.ScenarioA">
            <summary>
            when name is null 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.ScenarioB">
            <summary>
            when propertyType is null 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.ScenarioC">
            <summary>
            when ownerType is null 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.ScenarioD">
            <summary>
            when same property name is already registered for same owner type
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.ExcelButton.ScenarioE">
            <summary>
            when defaultMetadata.DefaultValue type does not match DepedenyProperty.PropertyType 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontpageButton">
            <summary>
            Used for OverrideMetadataPositive
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontpageButton.FirstProperty">
            <summary>
            (1) Register and OverrideMetadata in the same class 
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontpageButton.SecondProperty">
            <summary>
            (2) Register only in base class, OverrideMetadata in immediately derived class 
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontpageButton.thirdProperty">
            <summary>
            (3) Register only in base class, OverrideMetadata in derived class removed by more than 2
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontpageButtonDeriveA">
            <summary>
            Used for OverrideMetadataPositive
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontpageButtonDeriveA.FourthProperty">
            <summary>
            (4) Register only in immediately derived class and OverrideMetadata in base class 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontPageButtonDeriveBB">
            <summary>
            Used for OverrideMetadataPositive
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontPageButtonDeriveCCC">
            <summary>
            Used for OverrideMetadataPositive
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontPageButtonDeriveCCC.FifthProperty">
            <summary>
            5) Register only in derived class removed by more than 2, Override metadata in base class (
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.FrontPageButtonDeriveCCC.AddOwnerForFifthProperty">
            <summary>
            First called by FromNameAddOwner for AddOwner positive case
            Second call should throw exception but we have not (Bug)
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.InfoPathButton">
            <summary>
            Used for OverrideMetadataPositive.
            This class does not derive from DependencyObject. It is
            used to define a DependencyPropery SixthProperty
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.InfoPathButton.SixthProperty">
            <summary>
            (6) Register in a class (no need to derive from DependencyObject), OverrideMetadata in another class (that has derived classes) 
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.InfoPathButton.SeventhProperty">
            <summary>
            Register in a class, OverrideMetadata is another class (that has base classes). 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton">
            <summary>
            This class does not derive from DependencyObject, so it cannot 
            register metadata or override metadata
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton.ClickModeProperty">
            <summary>
            ClickModeProperty is used far more frequently than NameProperty
            and WidthProperty
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton.NameProperty">
            <summary>
            Note NameProperty has the same "string" type as ClickModeProperty,
            a PropertyMetadata may be used for either of them. But not both 
            of them because once it is used, it will be sealed. (Scenario C).
            It is also used in scenario F (After scenario C, it is already registered)
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton.WidthProperty">
            <summary>
            WidthProperty does not have the same type as CLickModeProperty
            So PropertyMetadata for WidthProperty is not suitable for ClickModeProperty
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton.AddressProperty">
            <summary>
            AddressProperty is used to test one invalid scenario for
            DependencyProperty.OverrideMetadata. To be specific, it is for 
            scenario d:forType is not derived from DependencyObject class
            static method TryScenarioD is called for this purpose only
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton.DotnetFrameworkVersionProperty">
            <summary>
            DotnetFrameworkVersionProperty is used to test one invalid scenario for
            DependencyProperty.OverrideMetadata. To be specific, it is for scenario H:
            Incorrect metadata type (overriding metadata is the same type or 
            derived type from the base matadata). 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.VisioButton.TryScenarioD">
            <summary>
            Read the comment for AddressProperty for more detail
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButton">
            <summary>
            Used for OverrideMetadata negative tests
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButton.CopyrightProperty">
            <summary>
            Used for scenario G
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButton.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButton.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Ctor that has better performance
            </summary>
            <param name="context">UiContext</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA">
            <summary>
            Used for OverrideMetadata negative tests
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.#ctor">
            <summary>
            Default Ctor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Ctor that has better performance
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioA">
            <summary>
            [Scenario A]: forType is null
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioB">
            <summary>
            [Scenario B]: metadata is null
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioC">
            <summary>
            [Scenario C]: metadata is sealed
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioD">
            <summary>
            Scenario D: forType is not derived from DependencyObject class
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioE">
            <summary>
            This is test against bug 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioF">
            <summary>
            Scenario F: Type Metadata already registered. Scequence is important
            that ScenarioC is run first before F
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioG">
            <summary>
            Scenario G: metadata.Readonly is false but its base already set it to be true
            Cannot run due to bug
            Bug is not 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.WordButtonDeriveA.ScenarioH">
            <summary>
            Scenario H: Incorrect metadata type (overriding metadata is the same type or derived type from the base matadata). 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.MetadataCtors(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Test all PropertyMetadata constructors 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.PropertySetter(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test PropertyMetadata public property setter of 
            (1) DefaultValue (2)PropertyInvalidatedCallBack (3)GetValueOverride 
            (4) Readonly should throw InvalidOperationException.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.SealedPropertySetter(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            When PropertyMetadata is sealed, property setter for (
            (1) DefaultValue (2)PropertyInvalidatedCallBack (3)GetValueOverride 
            (4) Readonly should throw InvalidOperationException.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.DpRegister(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Straightforward DependencyProperty.RegisterAttached 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.OverrideMetadataPositive(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Positive DependencyProperty.OverrideMetadata. In seven scenarios.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.OverrideMetadataNegative(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Negative DependencyProperty.OverrideMetadata. In eight scenarios.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.GetMetadata(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             DependencyProperty.GetMetadata should always return non-null PropertyMetadata 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtMetadata.TestDriver.FromNameAddOwner(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            DependencyProperty.FromName and AddOwner. 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.AccessCanvas">
            <summary>
            Used in AccessButton
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.AccessCanvas.LeftProperty">
            <summary>
            Dependency Property for Left position. A related one is Top
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.AccessCanvas.TopProperty">
            <summary>
            Dependency Property for top position. A related one is Left
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.AccessButton">
            <summary>
            Access Button
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.AccessButton.BackgroundProperty">
            <summary>
            Background property
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.AccessButton.Style">
            <summary>
            Read-only for Style
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.ExcelCanvas">
            <summary>
            Used in ExcelButton
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.ExcelCanvas.LeftProperty">
            <summary>
            Dependency Property for Left position. A related one is Top
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.ExcelCanvas.TopProperty">
            <summary>
            Dependency Property for top position. A related one is Left
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.ExcelButton">
            <summary>
            Excelbutton is derived from FrameworkElement
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.ExcelButton.BackgroundProperty">
            <summary>
            Background property
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.ExcelButton.#ctor">
            <summary>
            Public Ctor
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtFrameworkElementFactory.TestDriver.BvtTestCases(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             FrameworkElementFactory BVT test cases so far. Needs LH machine to run
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.AccessElement">
            <summary>
            AccessElement
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.AccessElement.MyLengthProperty">
            <summary>
            //scenario 1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.AccessElement.MyHeightProperty">
            <summary>
            scenario 2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.AccessElement.MyWidthProperty">
            <summary>
            //Scenario 6
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.ExcelElement">
            <summary>
            ExcelElement
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.ExcelElement.MyTextProperty">
            <summary>
            //Scenario 3
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.ExcelElement.MyAlternativeTextProperty">
            <summary>
            //Scenario 4
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.FrontpageElement">
            <summary>
            Frontpage Element
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.FrontpageElement.MyPageHeightProperty">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.InfoPathElement">
            <summary>
            InfoPath Element
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.InfoPathElement.MeasureCore(MSAvalon.Windows.Size)">
            <summary>
            
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.InfoPathElement.ArrangeCore(MSAvalon.Windows.Size)">
            <summary>
            
            </summary>
            <param name="finalSize"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.OneNoteElement">
            <summary>
            One Note Element
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.OneNoteElement.Test1">
            <summary>
            Cover bug 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.OneNoteElement.Test2">
            <summary>
            SetValue on Visual tree with invalid data
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.OneNoteElement.Test3">
            <summary>
            SetValue on Visual when it is sealed
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.OneNoteElement.Test4">
            <summary>
            Change style's visual tree after style is sealed
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.TestDriver.Scenario1To6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Scenario 1 to 6 of VirtualTree BVT
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.TestDriver.Scenario7tox(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            To be completed
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtVisualTree.TestDriver.NegativeTestCases(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            All negative test cases
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtContainerBindings1.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtContainerBindings1.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtContainerBindings1.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtContainerBindings1.TestDriver.Demo(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            demo. Not used
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtContainerBindings1.TestDriver.TestOnFrameworkElementFactoryDirectly(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test on FrameworkElementFactory Directly
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.Framework.PropertyEngine.PropertyEngineTest1">
            <summary>
            </summary>       
            <remarks>
                 <filename>InheritanceReadChildValueNativeCache.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.PropertyEngine.PropertyEngineTest1.#ctor">
            <summary>
            Constructor.  
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.PropertyEngine.PropertyEngineTest1.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             </ol>
                <filename>InheritanceReadChildValueNativeCache.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.PropertyEngine.PropertyEngineTest1.RunTestOne">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.PropertyEngine.TestOneElement">
            <summary>
             Thie Element Register
            </summary>
        </member>
        <member name="F:Avalon.Test.Framework.PropertyEngine.TestOneElement.TestProperty">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.PropertyEngine.TestOneElement.#cctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.PropertyEngine.TestOneElement.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.PropertyEngine.TestOneElement.AddChild(MSAvalon.Windows.Media.Visual)">
            <summary>
            </summary>
        </member>
        <member name="P:Avalon.Test.Framework.PropertyEngine.TestOneElement.Delta">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression">
            <summary>
            Like Constant Expression, it returns the sum of Month and Day
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.MonthPlusDay">
            <summary>
            The expression is constent on any given day
            </summary>
            <returns>For October 15, the return value is 10+15=25</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.#ctor">
            <summary>
            Unlike most expressions, this expression returns today's Month+Day
            so there is dependency on the time but no dependency on other dp.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.GetSourcesCalled">
            <summary>
            Counter for the number of method call for GetSources
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.GetSources">
            <summary>
            Override Expression Virtual Function
            </summary>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.GetValueCalled">
            <summary>
            Counter for the number of method call for GetValue
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.GetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.OnAttachCalled">
            <summary>
            Counter for the number of method call for OnAttach
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.OnAttach(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.OnDetachCalled">
            <summary>
            Counter for the number of method call for OnDetach
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.OnDetach(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.SetValueCalled">
            <summary>
            Counter for the number of method call for SetValue
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.SetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty,System.Object)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.MonthPlusDayExpression.ResetCalledCounters">
            <summary>
            Reset counters
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AccessButton">
            <summary>
            Provide a DependencyObject-derived class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AccessButton.SecretSeedProperty">
            <summary>
            A DP used with MonthPlusDayExpression test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AccessButton.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Public ctor
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.PropertySet">
            <summary>
            DependencyPropery can be defined by any class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.PropertySet.NumberOneProperty">
            <summary>
            Dp1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.PropertySet.NumberTwoProperty">
            <summary>
            Dp2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.PropertySet.NumberThreeProperty">
            <summary>
            Dp3
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.PropertySet.NumberAverageProperty">
            <summary>
            Dp4
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AverageExpression">
            <summary>
            This expression returns the average of all dependent dp values
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AverageExpression.#ctor(MSAvalon.Windows.DependencySource[])">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="sources"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AverageExpression.GetSources">
            <summary>
            Override Expression Virtual Function
            </summary>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.AverageExpression.GetValue(MSAvalon.Windows.DependencyObject,MSAvalon.Windows.DependencyProperty)">
            <summary>
            Override Expression Virtual Function
            </summary>
            <param name="d"></param>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver.TestOnExpressionItself(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Tests on MonthPlusDayExpression without using DO or DP 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver.TestWithDoAndDp(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Tests on MonthPlusDayExpression with DO or DP
             Attach and Detach expressions
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver.TestWithAverageExpression(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Tests on Average Expression which takes dependency on Sources
             All positive test cases
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtExpression.TestDriver.NegativeTests(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Negative test cases for Expression
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.AccessButton">
            <summary>
            Provide a DependencyObject-derived class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.AccessButton.SecretSeedProperty">
            <summary>
            A DP used with MonthPlusDayExpression test
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.AccessButton.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Public ctor
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet">
            <summary>
            DependencyPropery can be defined by any class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.NumberOneProperty">
            <summary>
            Dp1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.NumberTwoProperty">
            <summary>
            Dp2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.NumberThreeProperty">
            <summary>
            Dp3
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.NumberAverageProperty">
            <summary>
            Dp4
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.NumberNegativeProperty">
            <summary>
            This Dp contains PropertyMetadata, instead of FrameworkPropertyMetadata
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.NumberNoneProperty">
            <summary>
            This Dp does not contain any metadata
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.PropertySet.SecretGroupPropert">
            <summary>
            This will be used as a Group Dp
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MySecretGroup">
            <summary>
            Used for grouping test
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MySecretGroup.numberOne">
            <summary>
            the dirst number
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MySecretGroup.numberTwo">
            <summary>
            The second number
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MySecretGroup.numberThree">
            <summary>
            The third number
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MySecretGroup.ReadGroup(MSAvalon.Windows.DependencyObject)">
            <summary>
            Call back
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MySecretGroup.ToString">
            <summary>
            For easy testing
            </summary>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement">
            <summary>
            My FrameworkElement
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement.#ctor">
            <summary>
            Ctor (less performant)
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Ctor (more performant)
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement.NumberOne">
            <summary>
            Property for the first number
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement.NumberTwo">
            <summary>
            Property for the second property
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement.NumberThree">
            <summary>
            Proeprty for the 3rd number
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.MyFrameworkElement.SecretGroup">
            <summary>
            property for the grouping property
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.TestDriver.TestGroupMetadata(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Windows.GroupMetadata is derived from FrameworkPropertyMetadata
            This set of tests are exercrising this class in an isolated manner.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtGrouping.TestDriver.TestGrouping(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Fully use Grouping in property engine
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject">
            <summary>
            Provide a DependencyObject-derived class
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumberProperty1">
            <summary>
            Magic Number 1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumberProperty2">
            <summary>
            Magic Number 2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumberProperty3">
            <summary>
            Magic Number 3
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumberProperty4">
            <summary>
            Magic Number 4
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetvalue1Count">
            <summary>
            Count CallbackSetvalue1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetvalue2Count">
            <summary>
            Count CallbackSetvalue2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetvalue3Count">
            <summary>
            Count CallbackSetvalue3
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetvalue4Count">
            <summary>
            Count CallbackSetvalue4
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackGetvalue1Count">
            <summary>
            Count CallbackGetvalue1
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackGetvalue2Count">
            <summary>
            Count CallbackGetvalue2
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackGetvalue3Count">
            <summary>
            Count CallbackGetvalue3
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.ResetAllCount">
            <summary>
            Reset counter to zero
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackPropertyInvalidated1(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty1 is invalidated
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackPropertyInvalidated2(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty2 is invalidated
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackPropertyInvalidated3(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty3 is invalidated
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackPropertyInvalidated4(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty4 is invalidated
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetValue1(MSAvalon.Windows.DependencyObject,System.Object)">
            <summary>
            Callback when MagicNumberProperty1 is set
            </summary>
            <param name="o"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetValue2(MSAvalon.Windows.DependencyObject,System.Object)">
            <summary>
            Callback when MagicNumberProperty2 is set
            </summary>
            <param name="o"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetValue3(MSAvalon.Windows.DependencyObject,System.Object)">
            <summary>
            Callback when MagicNumberProperty3 is set
            </summary>
            <param name="o"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackSetValue4(MSAvalon.Windows.DependencyObject,System.Object)">
            <summary>
            Callback when MagicNumberProperty4 is set
            </summary>
            <param name="o"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackGetValue1(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty2 is got
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackGetValue2(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty3 is got
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.CallbackGetValue3(MSAvalon.Windows.DependencyObject)">
            <summary>
            Callback when MagicNumberProperty4 is got
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumber1">
            <summary>
            CLR Property for Magic Number1
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumber2">
            <summary>
            CLR Property for Magic Number1 2
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumber3">
            <summary>
            CLR Property for Magic Number3
            </summary>
            <value></value>
        </member>
        <member name="P:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.AccessObject.MagicNumber4">
            <summary>
            CLR Property for Magic Number4
            </summary>
            <value></value>
        </member>
        <member name="T:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.TestDriver">
            <summary></summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.TestDriver.#ctor">
            <summary>The constructor that does nothing </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.TestDriver.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>Must implement inherited abstract member</summary><param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.PropertyEngine.BvtSetValueOverride.TestDriver.TestOnExcelObject(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Test On AccessObject that is derived from DependencyObject
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerCodeonButton">
            <summary>
            </summary>"
            <remarks>
                 <filename>PropertyTriggerCodeonButton.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerCodeonButton.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerCodeonButton.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerCodeonButton.OnXaml(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating a CheckButton (all the tree on code) and adding a property trigger for CheckState
            </summary>
            <remarks>
             <ol>Description Steps:
                <li></li>
             </ol>
                <filename>PropertyTriggerCodeonButton.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerCodeonButton.OnCode(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating a CheckButton (all the tree on code) and adding a property trigger for CheckState
            </summary>
            <remarks>
             <ol>Description Steps:
                <li></li>
             </ol>
                <filename>PropertyTriggerCodeonButton.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Triggers.Properties.MultiplePropertyTriggersSimple">
            <summary>
            </summary>"
            <remarks>
                 <filename>MultiplePropertyTriggersSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.MultiplePropertyTriggersSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.MultiplePropertyTriggersSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.MultiplePropertyTriggersSimple.OnCode(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating a CheckButton (all the tree on code) and adding a property trigger for CheckState
            </summary>
            <remarks>
             <ol>Description Steps:
                <li></li>
             </ol>
                <filename>MultiplePropertyTriggersSimple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerMultipleSetSimple">
            <summary>
            </summary>"
            <remarks>
                 <filename>PropertyTriggerMultipleSetSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerMultipleSetSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerMultipleSetSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerMultipleSetSimple.OnXaml(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Adds 1 Trigger to a Checkbutton to change two different properties Background and ForeGround on a Xaml usiing Parser.Load
            </summary>
            <remarks>
             <ol>Description Steps:
                <li></li>
             </ol>
                <filename>PropertyTriggerMultipleSetSimple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.PropertyTriggerMultipleSetSimple.OnCode(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Adds 1 Trigger to a Checkbutton to change two different properties Background and ForeGround on Code
            </summary>
            <remarks>
             <ol>Description Steps:
                <li></li>
             </ol>
                <filename>PropertyTriggerMultipleSetSimple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Triggers.Properties.MultipleVisualTriggerSimple">
            <summary>
            </summary>"
            <remarks>
                 <filename>MultipleVisualTriggerSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.MultipleVisualTriggerSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.MultipleVisualTriggerSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Triggers.Properties.MultipleVisualTriggerSimple.OnCode(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Add a MultiTrigger to a checkbutton... the trigger looks for Checked and ForeGround porperty.. After it is set both (validation)
            this test case change the background to Indigo color.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li></li>
             </ol>
                <filename>MultipleVisualTriggerSimple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream">
            <summary>
            test class for Container BVT_FileStream BVT cases
            These functions test the Container filestream buffer's ability to 
            read, write, seek, and get its length.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.#ctor">
            <summary>
            construtor for Container.BVT_FileStream class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Basic container Read/Write test. Writes 1024 bytes to a stream and then reads and verifies the content.
            </summary>
            <param name="framework">automation framework</param>
            <remarks>
            The test passes if each byte of the stream is what was written to it and the stream has the expected length.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Read/Write test with offset. Writes 1024-50 bytes to a stream and then
            reads and verifies the content. Use offset 50 in the buffer when call Stream.Write
            </summary>
            <param name="framework">automation framework</param>
            <remarks>
            Test passes if the first 50 bytes are not altered and the remaining bytes are correctly written
            My first port! t-mtung
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Seek from beginning test. Writes 1024 bytes to a stream and then
            Seeks to offset 50 and reads and verifies the content.
            </summary>
            <param name="framework">automation framework</param>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Seek from end test. Writes 1024 bytes to a stream and then
            Seeks to offset 50 and reads and verifies the content.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Seek from current position. Writes 1024 bytes to a stream and then
            Seeks to offset 50 and reads and verifies the content.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Set Position property test. Writes 1024 bytes to a stream and then
            Sets the Position to 50 and reads and verifies the content.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Get Position property test. Writes 1024 bytes to a stream, then
            Seeks to offset 50 and verifies the position.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Get Length property test. Writes 1024 bytes to a stream, then
            Gets the Length property and verifies the value.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test container close befor closing the stream. 
            Writes 1024 bytes to a stream, then closes the container.
            Closes the stream then gets the Length property and verifies the value.
            This is a repro for bug: 
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream10(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Basic container Read/Write test. Writes 1024 bytes to a stream and then
            reads and verifies the content. Uses read and write with non zero offset (24).
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream11(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Write with non zero offset. Use offset equal to the buffer size.
            Validation is done by checking the lenght of the stream written.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream12(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Write with non zero offset. Use offset equal to the buffer size 
            and negative length. Validation is done by checking that exception occured
            Review with Roger Cheng Should Container write allow negative seek?
            ANSWER: by-design new behavior. Negative numbers used to be accepted with 
            disastrous results
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_FileStream.FileStream13(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Container Read test. Writes 1024 bytes to a stream and then
            reads and verifies the content. Uses read with offset equals the 
            size fo the stream. Verify the buffer was intact.
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot">
            <summary>
            test class for Container BVT_StorageRoot BVT cases
            TODO: fill in more data about Container
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.#ctor">
            <summary>
            construtor for Container.BVT_StorageRoot class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Simplest BVT of all: create a container
            very basic validation is done: code checks if the actual 
            file is created
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            create a New container
            very basic validation is done: code checks if the actual 
            file is created
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            create new container when file exists
            This is expected to fail, code catches and verifyes the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Default parameters
            Basic validation is done to check if the file exists.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container. Container is created beforhead with one stream inside.
            Validation code checks if the stream is present.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a existing container with OpenOrCreate. Container is created 
            beforhead with one stream inside. Validation code checks if the stream 
            is present.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a non existing container. This is expected to fail.
            Validation code Catches and validates the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open with OpenOrCreate and no container. 
            This is expected to create a new container.
            Validation code checks if the file is there.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Open existing container, readonly
            Validation is done by trying to create a stream, which is 
            expected to fail, since the dile is opened only for read.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot10(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Open existing container with OpenOrCreate, readonly
            Validation is done by trying to create a stream, which is 
            expected to fail, since the dile is opened only for read.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot11(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Open new container with OpenOrCreate, readonly
            This is an invalid call, Create with ReadOnly is not compatible.
            </summary>
            <param name="framework"></param>
            <remarks>StorageRoot.open no longer accepts the invalid combination
            rogerch says that this is no longer allowed. it causes non-intuitive error
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot12(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Open new container with OpenOrCreate, WriteOnly
            Basic validation is done to check if the file exists.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot13(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container with FileShare.None.
            Container is created beforhead with one stream inside.
            Validation code checks if the stream is present.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot14(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test close the container twice. 
            Validation code verifiyes no exception is thrown. 
            All exceptions are catched by the test framework and are treeted as errors, 
            so no real   catch is necesery.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot15(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open an invalid file. A filename "b:\container.xmf" is passed to the call.
            Usually B drive does not exist so the call should fail.
            This is expected to fail. Validation is done by catching the exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot16(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container with FileShare.Inheritable parameter.
            Container file is created beforhead.
            This is expected to fail. The appropriate exception is catched.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot17(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container with FileMode.Append parameter.
            Container file is created beforhead.
            This is expected to fail. The appropriate exception is catched.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot18(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container with FileMode.Truncate parameter.
            Container file is created beforhead.
            This is expected to fail. The appropriate exception is catched.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot19(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container with invalid FileMode parameter.
            Container file is created beforhead.
            This is expected to fail. The appropriate exception is catched.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot20(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the value of StorageInfo.Exists property on existing Root sorage.
            Validation is done by comparing the value of the property with expected value - true
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot21(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the value of StorageInfo.Exists property on non existing Root sorage.
            To simulate this, a container is opened, then closed and the file is deleted.
            Validation is done by comparing the value of the property with expected value - true
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot22(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try to open a container passing a null string.
            Validation is done catching the appropriate exception. This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRoot.StorageRoot23(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container with invalid flags. Repro for bug 
            Validation code Catches and validates the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo">
            <summary>
            test class for Container BVT_StorageInfo BVT cases
            TODO: fill in more data about Container
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.#ctor">
            <summary>
            construtor for Container.BVT_StorageInfo class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create storage using StorageInfo::Create. 
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework">automation framework</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create storage using StorageInfo::CreateSubStorage. 
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete existing storage using StorageInfo::Delete().
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete existing empty storage using StorageInfo::Delete(false).
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete existing non empty storage using StorageInfo::Delete(false).
            A sub storage is created in the test storage to test non empty storage deletion.
            Validation is done by catching the exception. The call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete existing non empty storage using StorageInfo::Delete(true).
            A sub storage is created in the test storage to test non empty storage deletion.
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete existing non empty storage using StorageInfo::Delete(false).
            A stream is created in the test storage to test non empty storage deletion.
            Validation is done by catching the exception. The call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete existing non empty storage using StorageInfo::Delete(true).
            A stream is created in the test storage to test non empty storage deletion.
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the value of StorageInfo.Exists property on an empty container.
            Validation is done by comparing the value of the property with expected value - false
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo10(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the value of StorageInfo.Exists property on a non empty container.
            Validation is done bu comparing the value of the property with expected value - true
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo11(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Test GetEnumerator method on an empty container.
            * Validation is done by catching the exception. This call is expected to fail.
             </summary>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo12(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Test GetEnumerator method on existing storage.
            Validation is done by checking the returned value and counting and verifying the elements
            in the enumerator.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo13(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test GetEnumerator method on existing storage with one sub storage and one stream.
            Validation is done by checking the returned value and counting and verifying the elements
            in the enumerator.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo14(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check bug 
            no validation is nesecery if no exception is thorwn test passes.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo15(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test MoveTo method. Rename a storage.
            Validation is done by checking if the old and the new storage Exists.
            </summary>
            <param name="framework"></param>
            <remarks>
            rogerch says about strInfo.MoveTo(strInfo.Parent, "TestNewName") 
            this never worked. Not sure why this would be in an old container test
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo16(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test CLSID property on existing storage.
            Validation is done by setting the value then reopening the container and trying 
            to get it.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo17(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test CreationTime property on existing storage.
            Validation is done by checking if the value is less than 25 seconds away
            from the current time.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo18(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test FullName property on existing storage.
            Validation is done by comparing the result with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo19(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test LastAccessTime property on existing storage.
            Validation is done by checking if the value is less than 25 seconds away
            from the current time.
            </summary>
            <remarks>Time does not work</remarks>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo20(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test LastWriteTime property on existing storage.
            Validation is done by checking if the value is less than 25 seconds away
            from the current time.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo21(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Name property on existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo22(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Parent property on existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo23(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Root property on existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo24(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test State property on existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo25(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test CLSID property on non existing storage.
            Validation is done by checking if the old and the new storage Exists.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo26(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test CreationTime property on non existing storage.
            Validation is done by catching the exception - this call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo27(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test FullName property on non existing storage.
            Validation is done by comparing the result with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo28(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test LastAccessTime property on non existing storage.
            Validation is done by catching the exception - this call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo29(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test LastWriteTime property on non existing storage.
            Validation is done by catching the exception - this call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo30(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Name property on non existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo31(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Parent property on non existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo32(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Test Root property on non existing storage.
            Validation is done by comparing the value with expected result.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo33(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Test State property on non existing storage.
            * Validation is done by catching the exception - this call is expected to fail.
             </summary>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo34(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test storage constructor which takes path array.
             Validation is done by checking if storage exists.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo35(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try to create storage with the same name as existing stream.
            Validation is done by catching the exception - this call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo36(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test set State property on existing storage.
            Validation is done by reopening the container and getting 
            the value then comaring the two.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo37(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create storage using StorageInfo::Create, when parrent storage does not exist. 
            Validation is done via checking StorageInfo.Exists property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo38(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete non existing storage using StorageInfo::Delete().
            Validation is done by catching the exception. The call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo39(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Exist property, when parrent storage does not exist. 
            Validation is comparing with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo40(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test GetEnumerator(StorageInfo) method on existing storage with one 
            sub storage and one stream.
            Validation is done by checking the returned value and counting 
            and verifying the elements in the enumerator.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo41(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test GetEnumerator(StreamInfo) method on existing storage with one 
            sub storage and one stream.
            Validation is done by checking the returned value and counting 
            and verifying the elements in the enumerator.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageInfo.StorageInfo42(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test GetEnumerator(object) method on existing storage with one 
            sub storage and one stream.
            Validation is done catching the corresponting exception. 
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo">
             <summary>
             Description:
             BVT tests for container code. Cases are executed via generic.exe.
            	Cases for the StreamInfo class
            
             Contacts:
            		Dev: rogerch; Test: venef; PM: ilans
            
             Binary:
            		ContainerBVT.dll
             </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.#ctor">
            <summary>
            construtor for Container.BVT_StorageInfo class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Simplest BVT - create a stream. Validation is done by trying to create 
            the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream via Open with Create. 
            Validation is done by trying to create the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create new stream via Open with CreateNew. 
            Validation is done by trying to create the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream via Open. A container with one stream is created beforehead.
            Validation is done by catching exception and checking return object for null.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing stream with CreateNew - should fail. 
            Validation is done by catching the exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open with no stream - should fail. 
            Validation is done by catching the exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing stream with OpenOrCreate. A container is created beforehead 
            with a stream in which "This is a test" is written.
            Validation is done by verifying the stream content. Stream should be preserver 
            and not overriden.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open an existing stream, readonly. 
            Validation is done by catching exception, checking return object for null and
            trying to write to the stream.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Storage property
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo10(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the StorageName property
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo11(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Name property
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo12(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Create. Validation is done by trying to create 
            the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo13(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Append. This is invalid mode and is expected 
            to fail. Validation is done by cathing and verifying the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo14(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Create, FileAccess.Read. Validation is done 
            by trying to create the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo15(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Create, FileAccess.ReadWrite, dataspece=null. 
            Validation is done by trying to create the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo16(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Create, FileAccess=0.
            FileAccess = 0 is invalid argument, this call is expected to fail.
            Validation is done, by checking and verifying the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo17(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open an existing stream with FileAccess.Write. 
            Validation is done by catching exception, checking return object for null and
            trying to read from the stream.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo18(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Open, FileAccess=0.
            FileAccess = 0 is invalid argument, this call is expected to fail.
            Validation is done, by checking and verifying the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo19(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Simplest BVT - create a stream. Validation is done by trying to create 
            the stream again, which should fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo20(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete a stream. A container with one stream is created beforehead.
            Validation is done checking the Exists property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo21(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the FullName property
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo22(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream on a parent storage which does not exist.
            Validation is done by checking the Exists property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo23(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Length property on existing stream. A container with one stream 
            is created beforehand.
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo24(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Length property on existing open stream. A container with one stream 
            is created beforehand.
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo25(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Length property on non existing stream. An empty container 
            is created beforehand.
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo26(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with null dataSpace label. 
            Validation is done by checking the Exists property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo27(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with a stream still open. 
            Validation is done by checking the Length property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo28(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.CreateNew while another stream is still open.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo29(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Open. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo30(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Append. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo31(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.OpenOrCreate. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo32(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Truncate. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo33(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with invalid FileMode. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo34(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Exists property while a stream is still open. 
            Validation is done by comparing with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo35(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Exists property on existing stream. 
            Validation is done by comparing with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo36(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the Exists property on non existing stream. 
            Validation is done by comparing with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo37(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke the constructor which accepts array of strings. Try to create the
            stream. 
            Validation is done by checking the Exists property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo38(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with the same name as existing Storage. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo39(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Append. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo40(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Truncate. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo41(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with invalid FileMode. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo42(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Create while a stream is still open. 
            Validation is done by checking the Length property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo43(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.CreateNew while another stream is still open.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo44(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Create on Readonly container.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo45(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.CreateNew on Readonly container.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo46(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Open and FileAccess.ReadWrite on Readonly container.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo47(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.OpenOrCreate and FileAccess.ReadWrite on 
            Readonly container where there is Existing stream.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo48(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.Open while a stream is still open. 
            Validation is done by checking the Position property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo49(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream with FileMode.OpenOrCreate while a stream is still open. 
            Validation is done by checking the Position property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo50(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke the constructor which accepts array of strings. Supply empty array.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo50a(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke the constructor which accepts array of strings. Supply empty array.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo50b(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke the constructor which accepts array of strings. Supply empty array.
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo51(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete a stream while a stream is still open. 
            Validation is done by checking the Exists property.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo52(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete a stream from a Read only container. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo53(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream in a Read only container. This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo54(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.CreateNew in a Read only container. 
            This is expected to fail.
            Validation is done by catching the appropriate exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo55(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete a stream which does not exist.
            No validation is nesecery, this should simply not fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo56(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the OpenAccess property, on stream which does not exist
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo57(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the OpenAccess property, on stream which does exist
            Validation is done by comparing the property with expected value
            You cannot create a read-only stream, exception expected
            </summary>
            <param name="framework"></param>
            <remarks>you are no longer able to create a read-only stream</remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo58(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the DataSpace property, on stream which does not exist
            Validation is done by catching the corresponding exception. 
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo59(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Check the DataSpace property, on stream which does exist
            Validation is done by comparing the property with expected value
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo60(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a stream via Open with default parameters, when the container is open readonly.
            A container with one stream is created beforehead.
            Validation is done by checking the returned stream object for null.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo61(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a stream with FileMode.Create, FileAccess.Write
            Validation is done by checking streams CanRead and CanWrite properties.
            UPDATE: write-only mode not supported. Expect failure.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StreamInfo.StreamInfo62(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the MimeType property on a stream
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.ThemeParkUtils">
            <summary>
            Required utility classes for StorageRootThemePark Tests
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.ThemeParkUtils.GetIsolatedFileStream(System.String,System.IO.FileMode)">
            <summary>
            get the isolatedfilestream from isolatedstoragefile
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.ThemeParkUtils.GetIsolatedFileStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            get the isolatedfilestream from isolatedstoragefile
            </summary>
            <param name="path"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.ThemeParkUtils.CleanStorage">
            <summary>
            Deletes IsolatedStorageFile
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.ThemeParkUtils.ContainerFileExists">
            <summary>
            Checks to see if the container file exists
            </summary>
            <returns>true if it exists</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark">
            <summary>
            test class for Container BVT_StorageRootThemePark BVT cases
            TODO: fill in more data about Container
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.#ctor">
            <summary>
            construtor for Container.BVT_StorageRootThemePark class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Simplest BVT of all: create a container
            very basic validation is done: code checks if the actual 
            file is created
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            create new container when file exists
            This is expected to fail, code catches and verifyes the exception thrown.
            UPDATE: This is not expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container. Container is created beforhead with one stream inside.
            Validation code checks if the stream is present.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open an invalid stream as container. This is expected to fail.
            Validation code catches and validates the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Create container on closed stream. This is expected to fail.
            Validation code catches and validates the exception thrown.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Open a container. Open existing container, readonly
            Validation is done by trying to create a stream, which is 
            expected to fail, since the dile is opened only for read.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Open a new container with Create, on readonly stream
            This is an invalid call, Create with ReadOnly is not compatible.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container. Open a new container with Create, on writeonly stream
            This is an invalid call, Create with WriteOnly is not compatible.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.StorageRootThemePark8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open existing container with FileMode.Append parameter.
            Container file is created beforhead.
            This is expected to fail. The appropriate exception is catched.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_StorageRootThemePark.BVT1010(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container passing null as Stream
            This is an invalid call, Create with ReadOnly is not compatible.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.Feedback">
            <summary>
            A class implementing Singelton, for exchanging feedback between classes.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Container.BVT.Feedback._feedback">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.Feedback.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.Feedback.FeedbackStr">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.InvalidTransform1">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.InvalidTransform2">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.InvalidTransform2.#ctor(MSAvalon.IO.CompoundFile.TransformEnvironment)">
            <summary>
            
            </summary>
            <param name="te"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.TestTransform1">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.TestTransform1.#ctor(MSAvalon.IO.CompoundFile.TransformEnvironment)">
            <summary>
            
            </summary>
            <param name="te"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.TestTransform1.GetTransformedStream(System.IO.Stream,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="encodedStream"></param>
            <param name="transformContext"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestTransform1.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestTransform1.FixedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestTransform1.TransformIdentifierType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestTransform1.TransformIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform.#ctor(MSAvalon.IO.CompoundFile.TransformEnvironment)">
            <summary>
            
            </summary>
            <param name="te"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform.GetTransformedStream(System.IO.Stream,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="encodedStream"></param>
            <param name="transformContext"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform.FixedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform.TransformIdentifierType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.NotReadyTransform.TransformIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform">
            <summary>
            Test Transform Env
            </summary>
            <remarks>StorageInfo can not be created! check removed.</remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform.#ctor(MSAvalon.IO.CompoundFile.TransformEnvironment)">
            <summary>
            
            </summary>
            <param name="te"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform.GetTransformedStream(System.IO.Stream,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="encodedStream"></param>
            <param name="transformContext"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform.FixedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform.TransformIdentifierType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.CheckTransformEnvTransform.TransformIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.EncryptStream">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.#ctor(System.IO.Stream,System.Byte)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="key"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Flush">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.SetLength(System.Int64)">
            <summary>
            
            </summary>
            <param name="length"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.EncryptStream.CanRead">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.EncryptStream.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.EncryptStream.CanSeek">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Length">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.EncryptStream.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.bTransformReady">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.transformEnv">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.#ctor(MSAvalon.IO.CompoundFile.TransformEnvironment)">
            <summary>
            
            </summary>
            <param name="te"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.GetTransformedStream(System.IO.Stream,System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="encodedStream"></param>
            <param name="transformContext"></param>
            <returns></returns>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.IsReady">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.FixedSettings">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.TransformIdentifierType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Container.BVT.TestStorageTransform.TransformIdentifier">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms">
            <summary>
            test class for Container BVT_DataspaceTransforms BVT cases
            TODO: fill in more data about Container
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.#ctor">
            <summary>
            construtor for Container.BVT_DataspaceTransforms class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a dataspace manager. Very basic validation is done. Code checks the returned object for null
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Get the Count property on an empty dataspace manager
            Validation is done by comparing with expected value.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a dataspace manager, when container is closed.
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineDataSpace with null for transformStack
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineDataSpace with non existing transformation
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineTransform with non existing transformation
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineTransform with non invalid transformation class
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineTransform with non invalid transformation class, which implements the proper constructor
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineTransform with invalid label
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform10(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Invoke DefineTransform with valid transformation class.
            Validation is done by checking the returned label.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform11(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Define Transform twice.
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform12(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Define Transform with valid transformation class and specify name.
            No validation is done. Not throwing an exception serves as validation.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform13(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke UndefineTransform with non existing transformation label.
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform14(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke Define Transform and check the TransformEnvironment object passed 
            to the transform constructor.
            The global Feedback object is checked for the expected value "fine".
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform15(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke Define Transform and check the TransformEnvironment object passed 
            to the transform constructor, when the container is ReadOnly.
            The global Feedback object is checked for the expected value "fine".
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform16(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke Define Transform with transform which is "Not Ready" and 
            check Event handler parameters.
            The Event handled verifies the TransformInitializationEventArgs object
            The global Feedback object is checked for the expected value "fine".
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform17(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineDataSpace with invalid transformation
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform18(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Invoke DefineDataSpace with invalid label
            Validation is done by catching the appropriate exception.
            This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform19(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Define a data space
            Validation is done by checking the returned label for null.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform20(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Define a data space twice
            Validation is done catching the exception generated. This call is expected to fail.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.DataspaceTransform21(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Read/Write from/to transformed stream.
            Validation is done by checking the data read from the stream.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_DataspaceTransforms.Scenario422(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Read/Write from/to transformed stream.
            Validation is done by checking the data read from the stream.
            A non trivial transofrmation is used. The transofrm "data" stream is 
            also verified.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport">
             <summary>
             Description:
             BVT tests for long name support in container code. 
            	Currently cover streams and storages. 
            	TODO: Support for dataspace and transform names to be added.
            
             Contacts:
            		Dev: rogerch; Test: Microsoft; PM: nkramer
            
             Binary:
            		CoreTestsUntrusted.dll
             </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.#ctor">
            <summary>
            Construtor for Container.BVT_LongNameSupport class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, 
            we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.CreateLongNamedElements(System.String,System.String,System.Boolean)">
            <summary>
            This function is shared by many test cases. 
            Depending on the parameters passed, it creates a structure of storages and streams,
            inside a new container.
            It then performs a number of validations based on this structure.
            </summary>
            <param name="storageName">Name for the test storage to be created.</param>
            <param name="streamName">Name for the test stream to be created.</param>
            <param name="createAtRootLevel">Whether to create the test storage at root level or a level below that.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.DeleteFile(System.String)">
            <summary>
             Internal utility function to delete the file specified by the given path.
            </summary>
            <param name="filePath">Full path of the file to be deleted.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.LongNameSupport1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Long names for storages, short names for streams.
            </summary>
            <remarks>
            Streams of a constant short name are created under storages of different test names. 
            Many validations are performed, such as property names and stream I/O.
            </remarks>
            <param name="frameWork"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.LongNameSupport2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Short names for storages, long names for streams.
            </summary>
            <remarks>
            Streams of different test names are created under storages of a constant short name. 
            Many validations are performed, such as property names and stream I/O.
            </remarks>
            <param name="frameWork"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_LongNameSupport.LongNameSupport3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Long names for storages, long names for streams.
            </summary>
            <remarks>
            Streams of different test names are created under storages of the same test name. 
            Many validations are performed, such as property names and stream I/O.
            </remarks>
            <param name="frameWork"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata">
            <summary>
            Test class for Container metadata cases.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container and get the metadata dictionary for the root.
            Then try writing properties, and reading them back.
            Validation is done by comparing the two property values.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, a new storage inside that and 
            get the metadata dictionary for the storage.
            Then try writing properties, and reading them back.
            Validation is done by comparing the two property values.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, a new stream inside that and 
            get the metadata dictionary for the stream.
            Then try writing properties, and reading them back.
            Validation is done by comparing the two property values.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata4(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, a new storage inside that on the second level and 
            get the metadata dictionary for the storage.
            Then try writing properties, and reading them back.
            Validation is done by comparing the two property values.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata5(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, a new stream inside that on the second level and 
            get the metadata dictionary for the stream.
            Then try writing properties, and reading them back.
            Validation is done by comparing the two property values.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata6(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open an existing container, and 
            get the metadata dictionary for the root.
            Validation is done by testing that the dictionary is non-null and empty
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata7(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open an existing container, get to an existing stream inside that and 
            get the metadata dictionary for the stream.
            Validation is done by testing that the dictionary is non-null and empty
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata8(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, get a handle to a not-yet-created stream inside that and 
            get the metadata dictionary for the stream.
            Validation is done by testing that this fails.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata9(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, get a handle to a not-yet-created storage inside that and 
            get the metadata dictionary for the storage.
            Validation is done by testing that this fails.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata10(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new container, close it and get the metadata dictionary for the root.
            Validation is done by testing that this fails
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata11(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a new stream inside a container, close it and 
            get the metadata dictionary for the stream.
            Validation is done by testing that this works
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata12(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete a stream inside a container, and then
            get the metadata dictionary for the stream.
            Validation is done by testing that this fails
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata13(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Delete a storage inside a container, a stream inside storage, and then
            get the metadata dictionary for the storage and the stream.
            Validation is done by testing that this fails
            TODO: Enable this test case after 927574 is fixed.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata14(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Get the metadata for a storage that has a long name 
            with special characters in it. Write, read-back and compare a property
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata15(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try to mess up with the internal reserved streams and storages used for metadata
            This should not affect the metadata manipulation
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata16(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Open a container in read-only mode and get the metadata dictionary for the root.
            Check if IsReadOnly and IsFixedSize are true for that dictionary.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata17(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try using different interfaces to add and remove properties.
            Also try duplicate properties. The semantics offered should be same as a IDictionary
            i.e. if you use the indexer to set duplicate property, the existing one should be 
            replaced. If you use Add(), it should throw an exception.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata18(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try adding a key that's not of type CompoundFileMetadataKey. Should throw an exception.
            Try adding a value that's not a string. Should throw an exception
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata19(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try adding a null key. Should throw an exception.
            Try adding a null value. This should actually be allowed.  
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata20(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try adding a duplicate key differing only in case.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata21(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Try getting two instances of metadata table.
            Actually, the same instance should be returned,
            and we should have 2 references to that itself.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata22(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test Flush()
            This is done by checking the contents of the internal
            stream used for metadata.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata23(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Assign a key that will not make well-formed XML when written in the
            form specified in the spec. 
            This should throw an exception.
            TODO: Not currently throwing an exception, but it will after 927502 is fixed.
            Enable this case then. 
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata24(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Assign a value that is not well-formed XML. 
            This should throw an exception.
            TODO: Right now it throws a System.Xml.XmlException,
            as received directly from .NET code.
            It should throw an ArgumentException, once 
            Then enable this test case.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Container.BVT.BVT_Metadata.Metadata25(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test that the MimeType of the metadata stream is text/xml
            TODO: Enable after 932233 is fixed.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertFromApp">
            <summary>
            Verify CursorTypeConverter CanConvertFrom method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
            <bug  product="Windows OS Bugs" />
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertToApp">
            <summary>
            Verify CursorTypeConverter CanConvertTo method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterCanConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertFromApp">
            <summary>
            Verify CursorTypeConverter ConvertFrom method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertToApp">
            <summary>
            Verify CursorTypeConverter ConvertTo method with current culture.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CursorTypeConverterConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp">
            <summary>
            Verify Keyboard Focus returns to focused element after dismissing modal window.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp.OnLostFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp.OnGotFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusAfterModalWindowApp._modalWindow">
            <summary>
            Store reference to our test window.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp">
            <summary>
            Verify Keyboard Focus returns to focused element after dismissing modeless window.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp.OnLostFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp.OnGotFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusAfterNonModalWindowApp._nonModalWindow">
            <summary>
            Store reference to our test window.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FrameworkContentElementCursorApp">
            <summary>
            Verify setting FrameworkContentElement Cursor works for content.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkContentElementCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkContentElementCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkContentElementCursorApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkContentElementCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FrameworkContentElementCursorApp._frameworkContentElement">
            <summary>
            Store content element on our canvas.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MostRecentInputDeviceApp">
            <summary>
            Verify InputManager MostRecentInputDevice property on a mouse move.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MostRecentInputDeviceApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MostRecentInputDeviceApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MostRecentInputDeviceApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MostRecentInputDeviceApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ForceCursorApp">
            <summary>
            Verify setting FrameworkElement ForceCursor overrides Cursor on child element.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ForceCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ForceCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ForceCursorApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ForceCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ForceCursorApp._bOriginalForceCursor">
            <summary>
            Stores original ForceCursor value.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertFromApp">
            <summary>
            Verify KeyTypeConverter CanConvertFrom method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertToApp">
            <summary>
            Verify KeyTypeConverter CanConvertTo method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterCanConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp">
            <summary>
            Verify KeyTypeConverter ConvertFrom method for standard keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromApp.ValidKeyStrings">
            <summary>
            Strings representing valid Key enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp">
            <summary>
            Verify KeyTypeConverter ConvertTo method for standard keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToApp.KeysAndExpectedStrings">
            <summary>
            Strings representing valid Key and expected string enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertFromApp">
            <summary>
            Verify ModifierKeysTypeConverter CanConvertFrom method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertToApp">
            <summary>
            Verify ModifierKeysTypeConverter CanConvertTo method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterCanConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp">
            <summary>
            Verify ModifierKeysTypeConverter ConvertFrom method for standard keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromApp.ValidKeyStrings">
            <summary>
            Strings representing valid Key enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp">
            <summary>
            Verify ModifierKeysTypeConverter ConvertTo method.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToApp.KeysAndExpectedStrings">
            <summary>
            Strings representing valid Key and expected string enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp">
            <summary>
            Verify MouseEventArgs and MouseButtonEventArgs button properties on ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp._buttonLog">
            <summary>
            Store record of our fired buttons.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseButtonApp._stateLog">
            <summary>
            Store record of our fired states.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseButtonApp">
            <summary>
            Verify MouseEventArgs and MouseButtonEventArgs button properties.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseButtonApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseButtonApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseButtonApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseButtonApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseButtonApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseButtonApp._buttonLog">
            <summary>
            Store record of our fired buttons.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseButtonApp._stateLog">
            <summary>
            Store record of our fired states.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.MouseCapturedApp">
            <summary>
            Verify Mouse.Captured property is set properly after various actions.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Mouse Move event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseCapturedApp.OnCaptureStateChange(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseCursorApp">
            <summary>
            Verify Mouse cursor on a mouse move.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseCursorNoneApp">
            <summary>
            Verify Mouse cursor is missing on a mouse move if Cursor=None.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorNoneApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorNoneApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorNoneApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorNoneApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseCursorRightBorderApp">
            <summary>
            Verify Mouse cursor on a mouse move.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorRightBorderApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorRightBorderApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorRightBorderApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorRightBorderApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringApp">
            <summary>
            Verify Mouse ToString() method returns non-empty string.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp">
            <summary>
            Verify MouseDoubleClick event fires on a double-click.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp.OnMouseClick(System.Object,MSAvalon.Windows.Input.MouseDoubleClickEventArgs)">
            <summary>
            Standard mouse double-click event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp._buttonLog">
            <summary>
            Store record of our fired buttons.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseDoubleClickApp._stateLog">
            <summary>
            Store record of our fired states.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementIsFocusWithinApp">
            <summary>
            Verify IFrameworkInputElement IsFocusWithin for a FrameworkContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsFocusWithinApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsFocusWithinApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsFocusWithinApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsFocusWithinApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementIsFocusWithinApp._frameworkContentElement">
            <summary>
            Store content element on our canvas.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.IsFocusWithinApp">
            <summary>
            Verify IFrameworkInputElement IsFocusWithin for a FrameworkElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.IsFocusWithinApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.IsFocusWithinApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.IsFocusWithinApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.IsFocusWithinApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.IsFocusWithinApp._panel">
            <summary>
            Store collection of panel elements on our canvas.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp">
            <summary>
            Verify MouseEnter, MouseLeave, and Preview events fire on a mouse over / mouse out for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
            <priority>0</priority>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp.OnMouse(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp.OnPreviewMouse(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard preview mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseEnterApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseEnterApp">
            <summary>
            Verify MouseEnter, MouseLeave, and Preview events fire on a mouse over / mouse out.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
            <priority>0</priority>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseEnterApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseEnterApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseEnterApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseEnterApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseEnterApp.OnMouse(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseEnterApp.OnPreviewMouse(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard preview mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseEnterApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp">
            <summary>
            Verify Mouse DirectlyOver property on a mouse move.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseDirectlyOverApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp">
            <summary>
            Verify animation forces MouseLeave to fire when element shrinks away from mouse cursor.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp.OnAnimationEnded(System.Object,System.EventArgs)">
            <summary>
            Event handler to run when an animation has ended.
            </summary>
            <param name="sender">Animation sending the event.</param>
            <param name="e">Not used.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MouseLeaveLengthAnimationApp.OnMouseLeave(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Event handler to run when mouse has left an element.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp">
            <summary>
            Verify MouseMove event fires on a mouse move for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseMoveApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseMoveApp">
            <summary>
            Verify MouseMove event fires on a mouse move.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseMoveApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseMoveApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseMoveApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseMoveApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseMoveApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseMoveApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp">
            <summary>
            Verify Mouse cursor on a mouse move.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseSetCursorApp._cursorSet">
            <summary>
            Was the cursor set?
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp">
            <summary>
            Verify MouseButtonEventArgs ClickCount on a mouse triple-click.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp.OnMouse(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse button event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp._buttonLog">
            <summary>
            Store record of our fired buttons.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp._stateLog">
            <summary>
            Store record of our fired states.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseTripleClickApp._countLog">
            <summary>
            Store record of our fired click counts.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp">
            <summary>
            Verify KeyDown event fires on a key down for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp.OnPreviewKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard preview key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyDownApp">
            <summary>
            Verify KeyDown event fires on a key down.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.KeyboardFocusedApp">
            <summary>
            Verify Keyboard.Focused property is set properly after various actions.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.KeyboardFocusedApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.KeyboardFocusedApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.KeyboardFocusedApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.KeyboardFocusedApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.KeyboardFocusedApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp">
            <summary>
            Verify keyboard state properties via GetKeyboardState.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp._oldKeyState">
            <summary>
            Store record of our key's previous state.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyboardStateApp._newKeyState">
            <summary>
            Store record of our key's current state.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyStateApp">
            <summary>
            Verify KeyEventArgs key state properties.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyStateApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyStateApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyStateApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyStateApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyStateApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyStateApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._buttonLog">
            <summary>
            Store record of our fired buttons.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._oldKeyState">
            <summary>
            Store record of our key's previous state.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._newKeyState">
            <summary>
            Store record of our key's current state.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._oldIsDown">
            <summary>
            Store record of our key's previous is-down-ness.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._newIsDown">
            <summary>
            Store record of our key's current is-down-ness.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._oldIsUp">
            <summary>
            Store record of our key's previous is-up-ness.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._newIsUp">
            <summary>
            Store record of our key's current is-up-ness.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._oldIsToggled">
            <summary>
            Store record of our key's previous toggled-ness.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyStateApp._newIsToggled">
            <summary>
            Store record of our key's current toggled-ness.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.InputManagerEventsApp">
            <summary>
            Verify InputManager notification events fire on no input.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerEventsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerEventsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerEventsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerEventsApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp">
            <summary>
            Verify Text event fires on an alphanumeric key down for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp.OnPreviewText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard preview text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementTextInputApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.TextInputApp">
            <summary>
            Verify Text event fires on an alphanumeric key down.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputApp.OnPreviewText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard preview text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.TextInputApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp">
            <summary>
            Verify ContentElement Focus works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp._bFocusAPI">
            <summary>
            Stores result of Focus API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementFocusApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp">
            <summary>
            Verify UIElement Focus works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp._bFocusAPI">
            <summary>
            Stores result of Focus API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementFocusApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp">
            <summary>
            Verify ContentElement LostFocus works to cancel focus element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp._bFocusAPI">
            <summary>
            Stores result of Focus API call on first element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp._bNewFocusAPI">
            <summary>
            Stores result of Focus API call on second element.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementLostFocusApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp">
            <summary>
            Verify UIElement LostFocus works to cancel focus element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp._bFocusAPI">
            <summary>
            Stores result of Focus API call on first element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp._bNewFocusAPI">
            <summary>
            Stores result of Focus API call on second element.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementLostFocusApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementMouseCursorOverrideApp">
            <summary>
            Verify Mouse cursor on a mouse move for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMouseCursorOverrideApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMouseCursorOverrideApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMouseCursorOverrideApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMouseCursorOverrideApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMouseCursorOverrideApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp">
            <summary>
            Verify ContentElement PreviewGotFocus works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp._bFocusAPI">
            <summary>
            Stores result of Focus API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementPreviewFocusApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp">
            <summary>
            Verify UIElement PreviewGotFocus works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp._bFocusAPI">
            <summary>
            Stores result of Focus API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementPreviewFocusApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp">
            <summary>
            Verify OnQueryCursor raises query cursor event on ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp.OnQuery(System.Object,MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard query cursor event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementQueryCursorApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp">
            <summary>
            Verify OnQueryCursor raises query cursor event on UIElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp.OnQuery(System.Object,MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard query cursor event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementQueryCursorApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp">
            <summary>
            Verify ContentElement Capture works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp">
            <summary>
            Verify UIElement Capture works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp">
            <summary>
            Verify ContentElement Capture works for subtree in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp">
            <summary>
            Verify UIElement Capture works for subtree in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp">
            <summary>
            Verify ContentElement Capture works for subtree in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            Windows bug  was fixed but masked the larger problem.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementCaptureToSubtreeMouseClickApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp">
            <summary>
            Verify UIElement Capture works for subtree in window on mouse input.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse button event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeMouseClickApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp">
            <summary>
            Verify ContentElement ReleaseMouseCapture works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp.OnLostCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard LostCapture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementReleaseMouseCaptureApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp">
            <summary>
            Verify UIElement ReleaseMouseCapture works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp.OnLostCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard LostCapture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp">
            <summary>
            Verify KeyDown and KeyUp events on multiple keypresses for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Keyboard</area>
            <author>Microsoft</author>
            <priority>0</priority>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.OnKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp.OnPreviewKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMultiKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp">
            <summary>
            Verify KeyDown and KeyUp events on multiple keypresses.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Keyboard</area>
            <author>Microsoft</author>
            <priority>0</priority>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MultiKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseDownApp">
            <summary>
            Verify MouseDown and MouseUp events fire on a mouse click.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
            <priority>0</priority>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseDownApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp">
            <summary>
            Verify MouseRightButtonDown and MouseRightButtonUp events fire on a mouse click for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp.OnPreviewMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard preview mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseLeftButtonDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp">
            <summary>
            Verify MouseRightButtonDown and MouseRightButtonUp events fire on a mouse click for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp.OnPreviewMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard preview mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseRightButtonDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp">
            <summary>
            Verify MouseRightButtonDown and MouseRightButtonUp events fire on a mouse click.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp.OnPreviewMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard preview mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseRightButtonDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp">
            <summary>
            Verify MouseWheel events fire on a mouse wheel for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp.OnMouseWheel(System.Object,MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard mouse wheel event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp.OnPreviewMouseWheel(System.Object,MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard preview mouse wheel event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMouseWheelApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseWheelApp">
            <summary>
            Verify MouseWheel events fire on a mouse wheel.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseWheelApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseWheelApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseWheelApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseWheelApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseWheelApp.OnMouseWheel(System.Object,MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard mouse wheel event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseWheelApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.MultiWindowFocusApp">
            <summary>
            Verify focus works for elements in multiple windows.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestApp">
            <summary>
            Verify UIElement InputHitTest works for UIElement in window.
            </summary>
            <description>
            This is part of a collection of unit tests for core input.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestApp._hitEl">
            <summary>
            Stores results of InputHitTest.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestContentHostApp">
            <summary>
            Verify UIElement InputHitTest works for content-host element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for core input.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestContentHostApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestContentHostApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestContentHostApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestContentHostApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementInputHitTestContentHostApp._hitEl">
            <summary>
            Stores results of InputHitTest.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestDisabledApp">
            <summary>
            Verify FrameworkElement InputHitTest works for disabled FrameworkElement in window.
            </summary>
            <description>
            This is part of a collection of unit tests for core input.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestDisabledApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestDisabledApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestDisabledApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestDisabledApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestDisabledApp._hitEl">
            <summary>
            Stores results of InputHitTest.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp">
            <summary>
            Verify FrameworkElement InputHitTest works for invisible FrameworkElement in window.
            </summary>
            <description>
            This is part of a collection of unit tests for core input.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows Client Task List" />
            <remarks>
            WCTL task 14963 does not need to be resolved for this case to run, therefore it is enabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp.DoBeforeExecute">
            <summary>
            Execute stuff.
            </summary>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FrameworkElementInputHitTestInvisibleApp._hitEl">
            <summary>
            Stores results of InputHitTest.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.MultiCursorApp">
            <summary>
            Verify multiple cursors in an application.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
            <remarks>
            Until UI Automation difficulties are resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiCursorApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiCursorApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiCursorApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp">
            <summary>
            Verify UIElement ForwardCommandsTo works for element in window with KeyBinding.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementForwardCommandsToApp._newCommandTarget">
            <summary>
            Element commands are forwarded to.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp">
            <summary>
            Verify UIElement PreviewQueryStatus event is raised to cancel QueryStatus event for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp._bQueryStatusRaised">
            <summary>
            Stores result of API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.OnPreviewQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementPreviewQueryStatusApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp">
            <summary>
            Verify UIElement RaiseCommand works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp._bCommandRaised">
            <summary>
            Stores result of API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementRaiseCommandApp._status">
            <summary>
            Stores result of query status.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp">
            <summary>
            Verify UIElement RaiseQueryStatus works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp._bQueryStatusRaised">
            <summary>
            Stores result of API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.UIElementRaiseQueryStatusApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromApp">
            <summary>
            Verify CommandConverter ConvertFrom method for standard commands.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandConverterConvertToApp">
            <summary>
            Verify CommandConverter ConvertTo method for standard commands.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandConverterConvertToApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp">
            <summary>
            Verify UIElement CommandLink Enabled works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp._bWasCommandLinkEnabled">
            <summary>
            Store enabled-ness of command link.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkEnabledApp._mouseBinding">
            <summary>
            Store mouse binding for our command link.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp">
            <summary>
            Verify UIElement CommandLink KeyBinding works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandSerializeApp">
            <summary>
            Verify Command from StandardCommands can be serialized from a UIElement.
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Windows bug  was found with custom commands. The standard commands version should work.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandSerializeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandSerializeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandSerializeApp.SampleCommandProperty">
            <summary>
            Sample command property.
            </summary>
            <remarks>
            Needed for command serialization to work.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandSerializeApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandSerializeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandSerializeApp._sampleCommand">
            <summary>
            Stores sample command object.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp">
            <summary>
            Verify CommandLinkCollection Clear works for element with multiple CommandLinks to same Command.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionClearApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp">
            <summary>
            Verify CommandLinkCollection Contains works for element with multiple CommandLinks to same Command
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionContainsApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp">
            <summary>
            Verify CommandLinkCollection CopyTo works for element with multiple CommandLinks to same Command.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCopyToApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp">
            <summary>
            Verify CommandLinkCollection Count works for element with multiple CommandLinks to same Command
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp">
            <summary>
            Verify ReadOnlyCommandLinkCollection Count works in a command's Defaults collection.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionCountFromDefaultsApp._sampleCommand">
            <summary>
            Our sample command.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp">
            <summary>
            Verify CommandLinkCollection Remove works for element with multiple CommandLinks to same Command.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp">
            <summary>
            Verify UIElement CommandLink MouseBinding works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkPenBindingApp">
            <summary>
            Verify UIElement CommandLink PenBinding works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkPenBindingApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkPenBindingApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkPenBindingApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkPenBindingApp._penBinding">
            <summary>
            Store record of our pen binding.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkSealApp">
            <summary>
            Verify UIElement CommandLink Seal and IsSealed works for element.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSealApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSealApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSealApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSealApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSealApp._wasSealed">
            <summary>
            Store record of our previous sealing state.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp">
            <summary>
            Verify CommandLink can be serialized from a UIElement.
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp._sampleCommand">
            <summary>
            Stores sample command object.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp._sampleCommandLink">
            <summary>
            Stores sample command link for the sample command.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp._saveKeyBinding">
            <summary>
            Key binding to be used as an indexer into the collection of command links.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp._saveMouseBinding">
            <summary>
            Mouse binding to be used as an indexer into the collection of command links.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSerializeApp._savePenBinding">
            <summary>
            Pen binding to be used as an indexer into the collection of command links.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkUseDefaultsApp">
            <summary>
            Verify CommandLink UseDefaults property can be set to disable binding retrieval from Defaults.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkUseDefaultsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkUseDefaultsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkUseDefaultsApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkUseDefaultsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkUseDefaultsApp._sampleCommand">
            <summary>
            Stores sample command object.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp">
            <summary>
            Verify CommandManager suggest requery works for element in window.
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <remarks>
            This test app works via command-enabling a regular element during the setup phase.
            A more typical scenario is to just use a command-aware element (usually a control) instead of a regular element.
            </remarks>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.OnKey(System.Object,MSAvalon.Windows.Input.InputEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.OnRequerySuggested(System.Object,System.EventArgs)">
            <summary>
            If we are in this handler, someone is suggesting a requery!
            </summary>
            <param name="sender">Element that is the sender of the event.</param>
            <param name="e">Arguments pertaining to the event.</param>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, a command has been invoked.
            </summary>
            <param name="sender">Element that is the sender of the event.</param>
            <param name="e">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <remarks>
            Strategy: For our desired command, enable the appropriate link on the queried element.
            </remarks>
            <param name="sender">Element that is the sender of the event.</param>
            <param name="e">Arguments pertaining to the command event.</param>
        </member>
        <member name="P:Avalon.Test.Framework.Commanding.CommandManagerSuggestRequeryApp.SampleCommand">
            <summary>
            Sample command belonging to this class.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandEmptyStringApp">
            <summary>
            Verify Command can be created with an empty string ("")
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandEmptyStringApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandEmptyStringApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandEmptyStringApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandNullStringApp">
            <summary>
            Verify Command can be created with a null string (null)
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandNullStringApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandNullStringApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandNullStringApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkBindingsFromDefaultsApp">
            <summary>
            Verify UIElement CommandLink bindings can be retrieved from defaults collection.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkBindingsFromDefaultsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkBindingsFromDefaultsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkBindingsFromDefaultsApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkBindingsFromDefaultsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkBindingsFromDefaultsApp._sampleCommand">
            <summary>
            Stores sample command object.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CompareTo">
            <summary>
            test class for TextNavigator CompareTo BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CompareTo.#ctor">
            <summary>
            constructor for TextNavigator_CompareTo class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CompareTo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CompareTo.TextNavigator_CompareTo1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that two equal TextNavigators compare identically
            </summary>
            <remarks>
            the test passes if CompareTo returns 0
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CompareTo.TextNavigator_CompareTo2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that two equal TextNavigators compare identically (when one is cast to an object)
            </summary>
            <remarks>
            the test passes if CompareTo returns 0
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreateNavigator">
            <summary>
            test class for TextNavigator CreateNavigator BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreateNavigator.#ctor">
            <summary>
            constructor for TextNavigator_CreateNavigator class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreateNavigator.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreateNavigator.TextNavigator_CreateNavigator1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextNavigator
            </summary>
            <remarks>
            the test passes if the TextNavigator is successfully created and lives at the same position
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreateNavigator.TextNavigator_CreateNavigator2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextNavigator at a distance of 0 (same position)
            </summary>
            <remarks>
            the test passes if the TextNavigator is successfully created and is equal to the first one
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreatePosition">
            <summary>
            test class for TextNavigator CreatePosition BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreatePosition.#ctor">
            <summary>
            constructor for TextNavigator_CreatePosition class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreatePosition.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreatePosition.TextNavigator_CreatePosition1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextPosition from a TextNavigator
            </summary>
            <remarks>
            the test passes if the TextPosition is created and the position and gravity match
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreatePosition.TextNavigator_CreatePosition2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextPosition with the same gravity from a TextNavigator
            </summary>
            <remarks>
            the test passes if the TextNavigator is created and the position and gravity match
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_CreatePosition.TextNavigator_CreatePosition3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextPosition with the same position and gravity from a TextNavigator
            </summary>
            <remarks>
            the test passes if the TextPosition is created and the position and gravity match
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetDistanceTo">
            <summary>
            test class for TextNavigator GetDistanceTo BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetDistanceTo.#ctor">
            <summary>
            constructor for TextNavigator_GetDistanceTo class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetDistanceTo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetDistanceTo.TextNavigator_GetDistanceTo1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            testto make sure that two identical TPs have a distance of 0 between them
            </summary>
            <remarks>
            the test passes if the method returns 0
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equal">
            <summary>
            test class for TextNavigator Equal BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equal.#ctor">
            <summary>
            constructor for TextNavigator_Equal class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equal.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equal.TextNavigator_Equal1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if two identical TextNavigators are equal
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equal.TextNavigator_Equal2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if two non-identical TextNavigators are not equal
            </summary>
            <remarks>
            the test passes if the test returns false
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equal.TextNavigator_Equal3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if a TextNavigator is equal to itself
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equals">
            <summary>
            test class for TextNavigator Equals BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equals.#ctor">
            <summary>
            constructor for TextNavigator_Equals class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equals.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Equals.TextNavigator_Equals1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that a TextNavigator and an equivalent TextPosition are equal
            </summary>
            <remarks>
            the test passes if the method returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElement">
            <summary>
            test class for TextNavigator GetElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElement.#ctor">
            <summary>
            constructor for TextNavigator_GetElement class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElement.TextNavigator_GetElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if GetElement() returns the parent DependencyObject
            </summary>
            <remarks>
            the test passes if nodeB is returned as the parent
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElement.TextNavigator_GetElement2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if GetElement(LogicalDirection) returns the element in the correct direction
            </summary>
            <remarks>
            the test passes if nodeB is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElementType">
            <summary>
            test class for TextNavigator GetElementType BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElementType.#ctor">
            <summary>
            constructor for TextNavigator_GetElementType class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElementType.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetElementType.TextNavigator_GetElementType1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test the element type for a TextElement in the tree
            </summary>
            <remarks>
            the test passes if the element type is returned as TextElement
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetEmbeddedObject">
            <summary>
            test class for TextNavigator GetEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetEmbeddedObject.#ctor">
            <summary>
            constructor for TextNavigator_GetEmbeddedObject class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetEmbeddedObject.TextNavigator_GetEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if we can retrieve an embedded object in the text tree
            </summary>
            <remarks>
            the test passes if the object is successfully retrieved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetHashCode">
            <summary>
            test class for TextNavigator GetHashCode BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetHashCode.#ctor">
            <summary>
            constructor for TextNavigator_GetHashCode class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetHashCode.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetHashCode.TextNavigator_GetHashCode1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that a hash code is returned for a TextNavigator
            </summary>
            <remarks>
            the test passes if anything is returned. The code indicates that TextNavigator hashcodes are essentially meaningless 
            because they are based on object identity: their equality relationship is mutable even for immutable positions 
            because the content can change around them.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetLocalValueEnumerator">
            <summary>
            test class for TextNavigator GetLocalValueEnumerator BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetLocalValueEnumerator.#ctor">
            <summary>
            constructor for TextNavigator_GetLocalValueEnumerator class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetLocalValueEnumerator.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetLocalValueEnumerator.TextNavigator_GetLocalValueEnumerator1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we return a LocalValueEnumerator for a scoped TextNavigator
            </summary>
            <remarks>
            the test passes if a LocalValueEnumerator is returned with a count > 0
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetSymbolType">
            <summary>
            test class for TextNavigator GetSymbolType BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetSymbolType.#ctor">
            <summary>
            constructor for TextNavigator_GetSymbolType class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetSymbolType.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetSymbolType.TextNavigator_GetSymbolType1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test the run type for a ElementEnd in the tree
            </summary>
            <remarks>
            the test passes if the run type is returned as ElementEnd
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetText">
            <summary>
            test class for TextNavigator GetText BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetText.#ctor">
            <summary>
            constructor for TextNavigator_GetText class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetText.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetText.TextNavigator_GetText1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure we can get existing text forward of the TextPosition
            </summary>
            <remarks>
            the test passes if the text is successfully retrieved
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetText.TextNavigator_GetText2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure we can read some of the existing text forward of the TextPosition
            </summary>
            <remarks>
            the test passes if the first three characters are successfully retrieved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetTextLength">
            <summary>
            test class for TextNavigator GetTextLength BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetTextLength.#ctor">
            <summary>
            constructor for TextNavigator_GetTextLength class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetTextLength.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetTextLength.TextNavigator_GetTextLength1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can retrieve the text length for existing text in a forward direction
            </summary>
            <remarks>
            the test passes if we count 5 chars
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetValue">
            <summary>
            test class for TextNavigator GetValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetValue.#ctor">
            <summary>
            constructor for TextNavigator_GetValue class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GetValue.TextNavigator_GetValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can retrieve an existing property value
            </summary>
            <remarks>
            the test passes if an object is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Gravity">
            <summary>
            test class for TextNavigator Gravity BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Gravity.#ctor">
            <summary>
            constructor for TextNavigator_Gravity class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Gravity.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Gravity.TextNavigator_Gravity1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that the gravity property is correct
            </summary>
            <remarks>
            the test passes if the default for the TextNavigator is LogicalDirection.Backward
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThan">
            <summary>
            test class for TextNavigator GreaterThan BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThan.#ctor">
            <summary>
            constructor for TextNavigator_GreaterThan class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThan.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThan.TextNavigator_GreaterThan1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that a TextNavigator later in the tree is "greater than" one earlier in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThanOrEqual">
            <summary>
            test class for TextNavigator GreaterThanOrEqual BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThanOrEqual.#ctor">
            <summary>
            constructor for TextNavigator_GreaterThanOrEqual class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThanOrEqual.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_GreaterThanOrEqual.TextNavigator_GreaterThanOrEqual1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextNavigator at the end of the tree is "greater than or equal" to one at the beginning.
            </summary>
            <remarks>
            the test passes if it is greater than or equal to both the navigator at the beginning and an identical position.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_HasEqualScope">
            <summary>
            test class for TextNavigator HasEqualScope BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_HasEqualScope.#ctor">
            <summary>
            constructor for TextNavigator_HasEqualScope class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_HasEqualScope.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_HasEqualScope.TextNavigator_HasEqualScope1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that two TextNavigators at the beginning of the tree have the same scope.
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_IsAtCaretUnitBoundary">
            <summary>
            test class for TextNavigator IsAtCaretUnitBoundary BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_IsAtCaretUnitBoundary.#ctor">
            <summary>
            constructor for TextNavigator_IsAtCaretUnitBoundary class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_IsAtCaretUnitBoundary.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_IsAtCaretUnitBoundary.TextNavigator_IsAtCaretUnitBoundary1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify IsAtCaretUnitBoundary for a TextNavigator looking forward into existing text
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThan">
            <summary>
            test class for TextNavigator LessThan BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThan.#ctor">
            <summary>
            constructor for TextNavigator_LessThan class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThan.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThan.TextNavigator_LessThan1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextNavigator earlier in the tree is "less than" one later in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThanOrEqual">
            <summary>
            test class for TextNavigator LessThanOrEqual BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThanOrEqual.#ctor">
            <summary>
            constructor for TextNavigator_LessThanOrEqual class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThanOrEqual.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_LessThanOrEqual.TextNavigator_LessThanOrEqual1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextNavigator at the beginning of the tree is "less than or equal" to both one at the end and to 
            one at the same position in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Max">
            <summary>
            test class for TextNavigator Max BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Max.#ctor">
            <summary>
            constructor for TextNavigator_Max class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Max.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Max.TextNavigator_Max1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that max returns a later TextNavigator in the tree when the TextNavigators are not equal
            </summary>
            <remarks>
            the test passes if the later TextNavigator is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Min">
            <summary>
            test class for TextNavigator Min BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Min.#ctor">
            <summary>
            constructor for TextNavigator_Min class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Min.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Min.TextNavigator_Min1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that Min returns an earlier TextNavigator in the tree when the TextNavigators are not equal
            </summary>
            <remarks>
            the test passes if the earlier TextNavigator is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Move">
            <summary>
            test class for TextNavigator Move BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Move.#ctor">
            <summary>
            constructor for TextNavigator_Move class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Move.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_Move.TextNavigator_Move1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can move over an element in the tree
            </summary>
            <remarks>
            the test passes if the TextNavigator is successfully moved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToElementEdge">
            <summary>
            test class for TextNavigator MoveToElementEdge BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToElementEdge.#ctor">
            <summary>
            constructor for TextNavigator_MoveToElementEdge class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToElementEdge.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToElementEdge.TextNavigator_MoveToElementEdge1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextNavigator can be positioned on an element edge
            </summary>
            <remarks>
            the test passes if the TextNavigator is correctly positioned.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToElementEdge.TextNavigator_MoveToElementEdge2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextNavigator can be positioned on the scoping element's edge
            </summary>
            <remarks>
            the test passes if the TextNavigator is correctly positioned.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToPosition">
            <summary>
            test class for TextNavigator MoveToPosition BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToPosition.#ctor">
            <summary>
            constructor for TextNavigator_MoveToPosition class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToPosition.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToPosition.TextNavigator_MoveToPosition1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can move a TextNavigator to a known TextPosition
            </summary>
            <remarks>
            the test passes if the TextNavigator is moved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToUnit">
            <summary>
            test class for TextNavigator MoveToUnit BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToUnit.#ctor">
            <summary>
            constructor for TextNavigator_MoveToUnit class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToUnit.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_MoveToUnit.TextNavigator_MoveToUnit1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if we can advance across a few existing characters
            </summary>
            <remarks>
            the test passes if the TextNavigator is moved successfully
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_ReadLocalValue">
            <summary>
            test class for TextNavigator ReadLocalValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_ReadLocalValue.#ctor">
            <summary>
            constructor for TextNavigator_ReadLocalValue class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_ReadLocalValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_ReadLocalValue.TextNavigator_ReadLocalValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can read a local property value
            </summary>
            <remarks>
            the test passes if the method returns an Object
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_SetGravity">
            <summary>
            test class for TextNavigator SetGravity BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_SetGravity.#ctor">
            <summary>
            constructor for TextNavigator_SetGravity class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_SetGravity.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_SetGravity.TextNavigator_SetGravity1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can set the value of a TextNavigator's gravity
            </summary>
            <remarks>
            the test passes if the TextNavigator's gravity is set to Forward
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_TextContainer">
            <summary>
            test class for TextNavigator TextContainer BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_TextContainer.#ctor">
            <summary>
            constructor for TextNavigator_TextContainer class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_TextContainer.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextNavigatorTests.BVT.TextNavigator_TextContainer.TextNavigator_TextContainer1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that the TextContainer property returns the TextTree
            </summary>
            <remarks>
            the test passes if the correct tree is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CompareTo">
            <summary>
            test class for TextPosition CompareTo BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CompareTo.#ctor">
            <summary>
            constructor for TextPosition_CompareTo class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CompareTo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CompareTo.TextPosition_CompareTo1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that two equal TextPositions compare identically
            </summary>
            <remarks>
            the test passes if CompareTo returns 0
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CompareTo.TextPosition_CompareTo2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that two equal TextPositions compare identically (when one is cast to an object)
            </summary>
            <remarks>
            the test passes if CompareTo returns 0
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreateNavigator">
            <summary>
            test class for TextPosition CreateNavigator BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreateNavigator.#ctor">
            <summary>
            constructor for TextPosition_CreateNavigator class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreateNavigator.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreateNavigator.TextPosition_CreateNavigator1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextNavigator
            </summary>
            <remarks>
            the test passes if the TN is successfully created and lives at the same position
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreateNavigator.TextPosition_CreateNavigator2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TextNavigator at a distance of 0 (same position)
            </summary>
            <remarks>
            the test passes if the TN is successfully created and is equal to the first one
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreatePosition">
            <summary>
            test class for TextPosition CreatePosition BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreatePosition.#ctor">
            <summary>
            constructor for TextPosition_CreatePosition class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreatePosition.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreatePosition.TextPosition_CreatePosition1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TP
            </summary>
            <remarks>
            the test passes if the TP is created and the position and gravity match
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreatePosition.TextPosition_CreatePosition2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TP with the same gravity
            </summary>
            <remarks>
            the test passes if the TP is created and the position and gravity match
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_CreatePosition.TextPosition_CreatePosition3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can create a TP with the same position and gravity
            </summary>
            <remarks>
            the test passes if the TP is created and the position and gravity match
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_DistanceTo">
            <summary>
            test class for TextPosition DistanceTo BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_DistanceTo.#ctor">
            <summary>
            constructor for TextPosition_DistanceTo class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_DistanceTo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_DistanceTo.TextPosition_DistanceTo1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            testto make sure that two identical TPs have a distance of 0 between them
            </summary>
            <remarks>
            the test passes if the method returns 0
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equal">
            <summary>
            test class for TextPosition Equal BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equal.#ctor">
            <summary>
            constructor for TextPosition_Equal class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equal.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equal.TextPosition_Equal1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if two identical TPs are equal
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equal.TextPosition_Equal2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if two non-identical TPs are not equal
            </summary>
            <remarks>
            the test passes if the test returns false
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equal.TextPosition_Equal3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if a TPs is equal to itself
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equals">
            <summary>
            test class for TextPosition Equals BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equals.#ctor">
            <summary>
            constructor for TextPosition_Equals class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equals.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Equals.TextPosition_Equals1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that a TP and an equivalent TN are equal
            </summary>
            <remarks>
            the test passes if the method returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetElementType">
            <summary>
            test class for TextPosition GetElementType BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetElementType.#ctor">
            <summary>
            constructor for TextPosition_GetElementType class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetElementType.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetElementType.TextPosition_GetElementType1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test the element type for a TextElement in the tree
            </summary>
            <remarks>
            the test passes if the element type is returned as TextElement
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetEmbeddedObject">
            <summary>
            test class for TextPosition GetEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetEmbeddedObject.#ctor">
            <summary>
            constructor for TextPosition_GetEmbeddedObject class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetEmbeddedObject.TextPosition_GetEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if we can retrieve an embedded object in the text tree
            </summary>
            <remarks>
            the test passes if the object is successfully retrieved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetHashCode">
            <summary>
            test class for TextPosition GetHashCode BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetHashCode.#ctor">
            <summary>
            constructor for TextPosition_GetHashCode class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetHashCode.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetHashCode.TextPosition_GetHashCode1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that a hash code is returned for the textposition
            </summary>
            <remarks>
            the test passes if anything is returned. The code indicates that TP hashcodes are essentially meaningless because 
            they are based on object identity: their equality relationship is mutable even for immutable positions because
            the content can change around them.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetLocalValueEnumerator">
            <summary>
            test class for TextPosition GetLocalValueEnumerator BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetLocalValueEnumerator.#ctor">
            <summary>
            constructor for TextPosition_GetLocalValueEnumerator class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetLocalValueEnumerator.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetLocalValueEnumerator.TextPosition_GetLocalValueEnumerator1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we return a LocalValueEnumerator for a scoped TextPosition
            </summary>
            <remarks>
            the test passes if a LocalValueEnumerator is returned with a count > 0
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetSymbolType">
            <summary>
            test class for TextPosition GetSymbolType BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetSymbolType.#ctor">
            <summary>
            constructor for TextPosition_GetSymbolType class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetSymbolType.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetSymbolType.TextPosition_GetSymbolType1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test the run type for a ElementEnd in the tree
            </summary>
            <remarks>
            the test passes if the run type is returned as ElementEnd
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetText">
            <summary>
            test class for TextPosition GetText BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetText.#ctor">
            <summary>
            constructor for TextPosition_GetText class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetText.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetText.TextPosition_GetText1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure we can get existing text forward of the TextPosition
            </summary>
            <remarks>
            the test passes if the text is successfully retrieved
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetText.TextPosition_GetText2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure we can read some of the existing text forward of the TextPosition
            </summary>
            <remarks>
            the test passes if the first three characters are successfully retrieved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetTextLength">
            <summary>
            test class for TextPosition GetTextLength BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetTextLength.#ctor">
            <summary>
            constructor for TextPosition_GetTextLength class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetTextLength.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetTextLength.TextPosition_GetTextLength1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can retrieve the text length for existing text in a forward direction
            </summary>
            <remarks>
            the test passes if we count 5 chars
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetValue">
            <summary>
            test class for TextPosition GetValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetValue.#ctor">
            <summary>
            constructor for TextPosition_GetValue class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GetValue.TextPosition_GetValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can retrieve an existing property value
            </summary>
            <remarks>
            the test passes if an object is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Gravity">
            <summary>
            test class for TextPosition Gravity BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Gravity.#ctor">
            <summary>
            constructor for TextPosition_Gravity class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Gravity.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Gravity.TextPosition_Gravity1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that the gravity property is correct
            </summary>
            <remarks>
            the test passes if the default for the TextPosition is LogicalDirection.Backward
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThan">
            <summary>
            test class for TextPosition GreaterThan BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThan.#ctor">
            <summary>
            constructor for TextPosition_GreaterThan class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThan.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThan.TextPosition_GreaterThan1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that a TextPosition later in the tree is "greater than" one earlier in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThanOrEqual">
            <summary>
            test class for TextPosition GreaterThanOrEqual BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThanOrEqual.#ctor">
            <summary>
            constructor for TextPosition_GreaterThanOrEqual class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThanOrEqual.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_GreaterThanOrEqual.TextPosition_GreaterThanOrEqual1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextPosition at the end of the tree is "greater than or equal" to one at the beginning.
            </summary>
            <remarks>
            the test passes if it is greater than or equal to both the position at the beginning and an identical position.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_HasEqualScope">
            <summary>
            test class for TextPosition HasEqualScope BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_HasEqualScope.#ctor">
            <summary>
            constructor for TextPosition_HasEqualScope class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_HasEqualScope.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_HasEqualScope.TextPosition_HasEqualScope1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that two TextPositions at the beginning of the tree have the same scope.
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_IsAtCaretUnitBoundary">
            <summary>
            test class for TextPosition IsAtCaretUnitBoundary BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_IsAtCaretUnitBoundary.#ctor">
            <summary>
            constructor for TextPosition_IsAtCaretUnitBoundary class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_IsAtCaretUnitBoundary.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_IsAtCaretUnitBoundary.TextPosition_IsAtCaretUnitBoundary1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify IsAtCaretUnitBoundary for a TextPosition looking forward into existing text
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThan">
            <summary>
            test class for TextPosition LessThan BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThan.#ctor">
            <summary>
            constructor for TextPosition_LessThan class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThan.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThan.TextPosition_LessThan1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextPosition earlier in the tree is "less than" one later in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThanOrEqual">
            <summary>
            test class for TextPosition LessThanOrEqual BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThanOrEqual.#ctor">
            <summary>
            constructor for TextPosition_LessThanOrEqual class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThanOrEqual.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_LessThanOrEqual.TextPosition_LessThanOrEqual1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextPosition at the beginning of the tree is "less than or equal" to both one at the end and to 
            one at the same position in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Max">
            <summary>
            test class for TextPosition Max BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Max.#ctor">
            <summary>
            constructor for TextPosition_Max class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Max.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Max.TextPosition_Max1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that max returns a later TextPosition in the tree when the TPs are not equal
            </summary>
            <remarks>
            the test passes if the later TextPosition is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Min">
            <summary>
            test class for TextPosition Min BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Min.#ctor">
            <summary>
            constructor for TextPosition_Min class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Min.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_Min.TextPosition_Min1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that Min returns an earlier TextPosition in the tree when the TPs are not equal
            </summary>
            <remarks>
            the test passes if the earlier TextPosition is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_ReadLocalValue">
            <summary>
            test class for TextPosition ReadLocalValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_ReadLocalValue.#ctor">
            <summary>
            constructor for TextPosition_ReadLocalValue class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_ReadLocalValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_ReadLocalValue.TextPosition_ReadLocalValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can read a local property value
            </summary>
            <remarks>
            the test passes if the method returns an Object
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_TextContainer">
            <summary>
            test class for TextPosition TextContainer BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_TextContainer.#ctor">
            <summary>
            constructor for TextPosition_TextContainer class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_TextContainer.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextPositionTests.BVT.TextPosition_TextContainer.TextPosition_TextContainer1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that the TextContainer property returns the TextTree
            </summary>
            <remarks>
            the test passes if the correct tree is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendElement">
            <summary>
            test class for TextRange AppendElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendElement.#ctor">
            <summary>
            constructor for TextRange_AppendElement class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendElement.TextRange_AppendElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can append a TextElement to a TextRange
            </summary>
            <remarks>
            the test passes if the Element is appended and the TextRange is moved accordingly.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendEmbeddedObject">
            <summary>
            test class for TextRange AppendEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendEmbeddedObject.#ctor">
            <summary>
            constructor for TextRange_AppendEmbeddedObject class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendEmbeddedObject.TextRange_AppendEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can append an embedded object to a TextRange
            </summary>
            <remarks>
            the test passes if the object is inserted correctly.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendString">
            <summary>
            test class for TextRange AppendString BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendString.#ctor">
            <summary>
            constructor for TextRange_AppendString class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendString.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_AppendString.TextRange_AppendString1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can append a string at the end of a TextRange
            </summary>
            <remarks>
            the test passes if the text is correctly inserted and that the end of 
            the textrange is moved appropriately
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Apply">
            <summary>
            test class for TextRange Apply BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Apply.#ctor">
            <summary>
            constructor for TextRange_Apply class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Apply.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Apply.TextRange_Apply1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if a property can be applied to a single TextElement in a TextRange
            </summary>
            <remarks>
            the test passes if the property is successfully set and read back
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Apply.TextRange_Apply2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if a LocalValueEnumerator with multiple properties can be applied to 
            a single TextElement in a TextRange
            </summary>
            <remarks>
            the test passes if the properties are successfully set and read back
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Apply.TextRange_Apply3(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if a property can be applied to a single TextElement in a TextRange
            </summary>
            <remarks>
            the test passes if the property is successfully set and read back
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendElement">
            <summary>
            test class for TextRange CanAppendElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendElement.#ctor">
            <summary>
            constructor for TextRange_CanAppendElement class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendElement.TextRange_CanAppendElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if we can append an element to a TextRange
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendEmbeddedObject">
            <summary>
            test class for TextRange CanAppendEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendEmbeddedObject.#ctor">
            <summary>
            constructor for TextRange_CanAppendEmbeddedObject class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendEmbeddedObject.TextRange_CanAppendEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can append an embedded object to a TextRange
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendString">
            <summary>
            test class for TextRange CanAppendString BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendString.#ctor">
            <summary>
            constructor for TextRange_CanAppendString class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendString.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanAppendString.TextRange_CanAppendString1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can append a string at the end of a TextRange
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanApply">
            <summary>
            test class for TextRange CanApply BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanApply.#ctor">
            <summary>
            constructor for TextRange_CanApply class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanApply.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanApply.TextRange_CanApply1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanDeleteContent">
            <summary>
            test class for TextRange CanDeleteContent BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanDeleteContent.#ctor">
            <summary>
            constructor for TextRange_CanDeleteContent class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanDeleteContent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanDeleteContent.TextRange_CanDeleteContent1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanGetInnerXML">
            <summary>
            test class for TextRange CanGetInnerXML BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanGetInnerXML.#ctor">
            <summary>
            constructor for TextRange_CanGetInnerXML class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanGetInnerXML.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanGetInnerXML.TextRange_CanGetInnerXML1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertBreak">
            <summary>
            test class for TextRange CanInsertBreak BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertBreak.#ctor">
            <summary>
            constructor for TextRange_CanInsertBreak class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertBreak.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertBreak.TextRange_CanInsertBreak1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertElement">
            <summary>
            test class for TextRange CanInsertElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertElement.#ctor">
            <summary>
            constructor for TextRange_CanInsertElement class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanInsertElement.TextRange_CanInsertElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanMoveContent">
            <summary>
            test class for TextRange CanMoveContent BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanMoveContent.#ctor">
            <summary>
            constructor for TextRange_CanMoveContent class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanMoveContent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanMoveContent.TextRange_CanMoveContent1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanPaste">
            <summary>
            test class for TextRange CanPaste BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanPaste.#ctor">
            <summary>
            constructor for TextRange_CanPaste class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanPaste.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanPaste.TextRange_CanPaste1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanRemoveBreak">
            <summary>
            test class for TextRange CanRemoveBreak BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanRemoveBreak.#ctor">
            <summary>
            constructor for TextRange_CanRemoveBreak class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanRemoveBreak.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanRemoveBreak.TextRange_CanRemoveBreak1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanSetInnerXML">
            <summary>
            test class for TextRange CanSetInnerXML BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanSetInnerXML.#ctor">
            <summary>
            constructor for TextRange_CanSetInnerXML class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanSetInnerXML.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_CanSetInnerXML.TextRange_CanSetInnerXML1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Clear">
            <summary>
            test class for TextRange Clear BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Clear.#ctor">
            <summary>
            constructor for TextRange_Clear class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Clear.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Clear.TextRange_Clear1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Contains">
            <summary>
            test class for TextRange Contains BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Contains.#ctor">
            <summary>
            constructor for TextRange_Contains class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Contains.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Contains.TextRange_Contains1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that an existing TextPosition is contained in a TextRange
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Copy">
            <summary>
            test class for TextRange Copy BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Copy.#ctor">
            <summary>
            constructor for TextRange_Copy class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Copy.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Copy.TextRange_Copy1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_ctor">
            <summary>
            test class for TextRange ctor BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_ctor.#ctor">
            <summary>
            constructor for TextRange_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_ctor.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_ctor.TextRange_ctor1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextRange cal be created on an empty tree
            </summary>
            <remarks>
            the test passes if the TextRange is created
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Cut">
            <summary>
            test class for TextRange Cut BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Cut.#ctor">
            <summary>
            constructor for TextRange_Cut class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Cut.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Cut.TextRange_Cut1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_DeleteContent">
            <summary>
            test class for TextRange DeleteContent BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_DeleteContent.#ctor">
            <summary>
            constructor for TextRange_DeleteContent class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_DeleteContent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_DeleteContent.TextRange_DeleteContent1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that the content is deleted from a TextRange when the range
            spans text, TextElements, and embedded objects
            </summary>
            <remarks>
            the test passes if the content is deleted
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_End">
            <summary>
            test class for TextRange End BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_End.#ctor">
            <summary>
            constructor for TextRange_End class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_End.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_End.TextRange_End1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that the End is set for a TextRange in an empty TextTree
            </summary>
            <remarks>
            the test passes if the positions match
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Find">
            <summary>
            test class for TextRange Find BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Find.#ctor">
            <summary>
            constructor for TextRange_Find class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Find.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Find.TextRange_Find1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if we can find a string in a TextTree containing only that string
            </summary>
            <remarks>
            the test passes if the text exists
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_GetInnerXml">
            <summary>
            test class for TextRange GetInnerXml BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_GetInnerXml.#ctor">
            <summary>
            constructor for TextRange_GetInnerXml class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_GetInnerXml.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_GetInnerXml.TextRange_GetXml1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a string is returned for GetInnerXml
            </summary>
            <remarks>
            the test passes if a string is returned - currently we don't care what.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertBreak">
            <summary>
            test class for TextRange InsertBreak BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertBreak.#ctor">
            <summary>
            constructor for TextRange_InsertBreak class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertBreak.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertBreak.TextRange_InsertBreak1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertElement">
            <summary>
            test class for TextRange InsertElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertElement.#ctor">
            <summary>
            constructor for TextRange_InsertElement class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_InsertElement.TextRange_InsertElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert an element into the TextRange
            </summary>
            <remarks>
            the test passes if the element is successfully inserted
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsEmpty">
            <summary>
            test class for TextRange IsEmpty BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsEmpty.#ctor">
            <summary>
            constructor for TextRange_IsEmpty class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsEmpty.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsEmpty.TextRange_IsEmpty1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify the IsEmpty property for an empty TextRange
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsEmpty.TextRange_IsEmpty2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify the IsEmpty property for a TextRange spanning text
            </summary>
            <remarks>
            the test passes if the function returns false
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsMovable">
            <summary>
            test class for TextRange IsMovable BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsMovable.#ctor">
            <summary>
            constructor for TextRange_IsMovable class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsMovable.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_IsMovable.TextRange_IsMovable1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextRange is movable
            </summary>
            <remarks>
            the test passes if the TextRange is movable
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveContent">
            <summary>
            test class for TextRange MoveContent BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveContent.#ctor">
            <summary>
            constructor for TextRange_MoveContent class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveContent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveContent.TextRange_MoveContent1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Moved">
            <summary>
            test class for TextRange Moved BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Moved.#ctor">
            <summary>
            constructor for TextRange_Moved class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Moved.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Moved.TextRange_Moved1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveEnd">
            <summary>
            test class for TextRange MoveEnd BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveEnd.#ctor">
            <summary>
            constructor for TextRange_MoveEnd class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveEnd.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveEnd.TextRange_MoveEnd1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that the End of a TextRange can be moved over a few existing characters
            </summary>
            <remarks>
            the test passes if the range is moved and the new text spanned is verified
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveStart">
            <summary>
            test class for TextRange MoveStart BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveStart.#ctor">
            <summary>
            constructor for TextRange_MoveStart class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveStart.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveStart.TextRange_MoveStart1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that the Start of a TextRange can be moved over a few existing characters
            </summary>
            <remarks>
            the test passes if the range is moved and the new text spanned is verified
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPosition">
            <summary>
            test class for TextRange MoveToPosition BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPosition.#ctor">
            <summary>
            constructor for TextRange_MoveToPosition class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPosition.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPosition.TextRange_MoveToPosition1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextRange can be collapsed to a single TextPosition
            </summary>
            <remarks>
            the test passes if the TextRange is collapsed successfully
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPositions">
            <summary>
            test class for TextRange MoveToPositions BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPositions.#ctor">
            <summary>
            constructor for TextRange_MoveToPositions class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPositions.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToPositions.TextRange_MoveToPositions1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can move a TextRange to a new position in the TextTree
            </summary>
            <remarks>
            the test passes if the TextRange is moved
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToRange">
            <summary>
            test class for TextRange MoveToRange BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToRange.#ctor">
            <summary>
            constructor for TextRange_MoveToRange class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToRange.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToRange.TextRange_MoveToRange1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToUnit">
            <summary>
            test class for TextRange MoveToUnit BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToUnit.#ctor">
            <summary>
            constructor for TextRange_MoveToUnit class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToUnit.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_MoveToUnit.TextRange_MoveToUnit1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Paste">
            <summary>
            test class for TextRange Paste BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Paste.#ctor">
            <summary>
            constructor for TextRange_Paste class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Paste.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Paste.TextRange_Paste1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RemoveBreak">
            <summary>
            test class for TextRange RemoveBreak BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RemoveBreak.#ctor">
            <summary>
            constructor for TextRange_RemoveBreak class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RemoveBreak.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RemoveBreak.TextRange_RemoveBreak1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RetreatToScope">
            <summary>
            test class for TextRange RetreatToScope BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RetreatToScope.#ctor">
            <summary>
            constructor for TextRange_RetreatToScope class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RetreatToScope.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_RetreatToScope.TextRange_RetreatToScope1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_SetInnerXML">
            <summary>
            test class for TextRange SetInnerXML BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_SetInnerXML.#ctor">
            <summary>
            constructor for TextRange_SetInnerXML class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_SetInnerXML.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_SetInnerXML.TextRange_SetInnerXML1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Start">
            <summary>
            test class for TextRange Start BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Start.#ctor">
            <summary>
            constructor for TextRange_Start class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Start.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Start.TextRange_Start1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that the Start of the TextRange is set for an empty TextTree
            </summary>
            <remarks>
            the test passes if the positions match
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Text">
            <summary>
            test class for TextRange Text BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Text.#ctor">
            <summary>
            constructor for TextRange_Text class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Text.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_Text.TextRange_Text1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can set the Text property for a TextRange
            </summary>
            <remarks>
            the test passes if the text is set properly
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_TextContainer">
            <summary>
            test class for TextRange TextContainer BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_TextContainer.#ctor">
            <summary>
            constructor for TextRange_TextContainer class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_TextContainer.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_TextContainer.TextRange_TextContainer1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that the TextContainer property is correct
            </summary>
            <remarks>
            the test passes if a reference to the containing TextTree is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_WriteUnbalancedOpeningTags">
            <summary>
            test class for TextRange WriteUnbalancedOpeningTags BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_WriteUnbalancedOpeningTags.#ctor">
            <summary>
            constructor for TextRange_WriteUnbalancedOpeningTags class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_WriteUnbalancedOpeningTags.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextRangeTests.BVT.TextRange_WriteUnbalancedOpeningTags.TextRange_WriteUnbalancedOpeningTags1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteContent">
            <summary>
            test class for TextTree CanDeleteContent BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteContent.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteContent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteContent.TextTree_CanDeleteContent1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we are allowed to delete content from a mixed tree of text, 
            elements and embedded objects
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteEmbeddedObject">
            <summary>
            test class for TextTree CanDeleteEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteEmbeddedObject.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanDeleteEmbeddedObject.TextTree_CanDeleteEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we are allowed to delete an existing embedded object in the tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanExtractElement">
            <summary>
            test class for TextTree CanExtractElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanExtractElement.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanExtractElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanExtractElement.TextTree_CanExtractElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can remove an existing TextElement with no children from the tree
            </summary>
            <remarks>
            the test passes if the element can be removed
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanExtractElement.TextTree_CanExtractElement2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can remove an existing TextElement with no children from the tree, 
             given a TextPosition within that element
            </summary>
            <remarks>
            the test passes if the element can be successfully removed
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertElement">
            <summary>
            test class for TextTree CanInsertElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertElement.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertElement.TextTree_CanInsertElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert a TextElement into an empty tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertElement.TextTree_CanInsertElement2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert a particular element type into an empty tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertEmbeddedObject">
            <summary>
            test class for TextTree CanInsertEmbedded BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertEmbeddedObject.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertEmbeddedObject.TextTree_CanInsertEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert an embedded object into an empty tree
            </summary>
            <remarks>
            the test passes if the test returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertText">
            <summary>
            test class for TextTree CanInsertText BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertText.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertText.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanInsertText.TextTree_CanInsertText1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert text into an empty tree
            </summary>
            <remarks>
            the test passes if the function returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanSetValue">
            <summary>
            test class for TextTree CanSetValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanSetValue.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanSetValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_CanSetValue.TextTree_CanSetValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can set a value on an existing TextElement in the tree scoping the current position
            </summary>
            <remarks>
            the test passes if the method returns true
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ClearValue">
            <summary>
            test class for TextTree ClearValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ClearValue.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ClearValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ClearValue.TextTree_ClearValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to make sure that we can clear a single existing property on a TextElement in the tree
            </summary>
            <remarks>
            the test passes if the property is successfully cleared.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ctor">
            <summary>
            test class for TextTree constructor(s) BVT cases
            available constructors include:
                - TextTree(DependencyObject)
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ctor.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ctor.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ctor.TextTree_ctor1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test constructor to make sure that we can get / set a parent 
            </summary>
            <remarks>
            the test passes if the TextTree is created and the parent that we passed in is the same one we get back.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ctor.TextTree_ctor2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            try passing in null for a DependencyObject into the texttree constructor
            </summary>
            <remarks>
            the test passes if the TextTree is created successfully.- note that this is considered to
            be a valid action
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteContent">
            <summary>
            test class for TextTree DeleteContent BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteContent.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteContent.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteContent.TextTree_DeleteContent1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can delete content from a mixed tree of text, 
            elements and embedded objects
            </summary>
            <remarks>
            the test passes if the content is successfully deleted.
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteEmbeddedObject">
            <summary>
            test class for TextTree DeleteEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteEmbeddedObject.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_DeleteEmbeddedObject.TextTree_DeleteEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that an embedded object can be deleted from the tree
            </summary>
            <remarks>
            the test passes if the object is successfully removed
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_End">
            <summary>
            test class for TextTree End BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_End.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_End.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_End.TextTree_End1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextPosition is returned for the End property of an empty TextTree
            </summary>
            <remarks>
            the test passes if a TextPosition is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ExtractElement">
            <summary>
            test class for TextTree ExtractElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ExtractElement.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ExtractElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ExtractElement.TextTree_ExtractElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can remove an existing TextElement with no children from the tree
            </summary>
            <remarks>
            the test passes if the element is successfully removed
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_ExtractElement.TextTree_ExtractElement2(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can remove an existing TextElement with no children from the tree, 
             given a TextPosition within that element
            </summary>
            <remarks>
            the test passes if the element is successfully removed
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertElement">
            <summary>
            test class for TextTree InsertElement BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertElement.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertElement.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertElement.TextTree_InsertElement1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert an element into an empty tree
            </summary>
            <remarks>
            the test passes if the element is inserted successfully
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertEmbeddedObject">
            <summary>
            test class for TextTree InsertEmbeddedObject BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertEmbeddedObject.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertEmbeddedObject.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertEmbeddedObject.TextTree_InsertEmbeddedObject1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to see if we can insert an embedded object into the tree
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertText">
            <summary>
            test class for TextTree InsertText BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertText.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertText.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_InsertText.TextTree_InsertText1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can insert text into an empty tree
            </summary>
            <remarks>
            the test passes if the text is successfully inserted
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValue">
            <summary>
            test class for TextTree SetValue BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValue.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValue.TextTree_SetValue1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test that we can set a property value on a TextElement
            </summary>
            <remarks>
            the test passes if the property is successfully set
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValues">
            <summary>
            test class for TextTree SetValues BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValues.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValues.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_SetValues.TextTree_SetValues1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that we can set properties on 
            </summary>
            <remarks>
            the test passes if 
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_Start">
            <summary>
            test class for TextTree Start BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_Start.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_Start.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_Start.TextTree_Start1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that a TextPosition is returned for the End property of an empty TextTree
            </summary>
            <remarks>
            the test passes if a TextPosition is returned
            </remarks>
        </member>
        <member name="T:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_TextChanged">
            <summary>
            test class for TextTree TextChanged BVT cases
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_TextChanged.#ctor">
            <summary>
            constructor for TextTree_ctor class
            </summary>
            <remarks>
            class inherits from TestCase, where ContextEnteringSupport will automatically create
            and enter a context when the constructor is called, and will automatically exit and 
            dispose the context when the destructor is called.
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_TextChanged.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Run implemented as an abstract base class, but since we support multiple cases per class, we don't use it.
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Tree.TextTreeTests.BVT.TextTree_TextChanged.TextTree_TextChanged1(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            test to verify that the even fires when text is interted into the tree
            </summary>
            <remarks>
            the test passes if the event fires
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndHostSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Threads: each thread creates it own dispatcher and context, later creates a canvas and button. Validate everything run fine.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Spwan 4 Threads and wait for all the thread finished their work.</li>
             </ol>
                <filename>MultipleContextMultipleDispatcherMultiple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.Win32ButtonElement">
            <summary>
            </summary>
            <remarks>
                 <filename>Win32ButtonElement.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement._hook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.ValidateHandle">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.ArrangeCore(MSAvalon.Windows.Size)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.MeasureCore(MSAvalon.Windows.Size)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.Win32Handle">
            <summary>
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.ContainerWindowHandle">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.ContainerWindowHook">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.ControlWindowHook">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32ButtonElement.Painted">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual">
            <summary>
            </summary>
            <remarks>
                 <filename>Win32ButtonElement.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual._hook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.ValidateHandle">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.ArrangeCore(MSAvalon.Windows.Size)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.MeasureCore(MSAvalon.Windows.Size)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.Win32Handle">
            <summary>
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.ContainerWindowHandle">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.ContainerWindowHook">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.ControlWindowHook">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32ButtonVisual.Painted">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.Win32VisualInvalidZero">
            <summary>
             This class constructors an invalid HwndVisualHost that returns IntPtr.Zero
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32VisualInvalidZero.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32VisualInvalidZero.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.Win32VisualInvalidZero.IsBuildWindowCoreCalled">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowNoWSChild">
            <summary>
             This class constructors an invalid HwndVisualHost that returns IntPtr.Zero
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowNoWSChild.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowNoWSChild.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowNoWSChild.IsBuildWindowCoreCalled">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowCheatParent">
            <summary>
             This class constructors an invalid HwndVisualHost that returns IntPtr.Zero
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowCheatParent.#ctor(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowCheatParent.FakeParent">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowCheatParent.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.HwndVisualHostWindowCheatParent.IsBuildWindowCoreCalled">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.Win32SimpleButton">
            <summary>
            </summary>
            <remarks>
                 <filename>Win32ButtonElement.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32SimpleButton.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32SimpleButton.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32SimpleButton._hook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32SimpleButton.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32SimpleButton.Painted">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndHostClickWin32Button">
            <summary>
            </summary>
            <remarks>
                 <filename>HwndHostClickWin32Button.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostClickWin32Button.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostClickWin32Button.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a  HwndSource that host a Win32Button using HwndHost and later click on the Win32Button and recive the message
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a HwndDispatcher and Context</li>
                <li>Create a canvas and a HwndHost to host a Win32ButtonElement</li>
                <li>When the button is painted we click on the Win32Button</li>
                <li>When we receive the message, exit the dispatcher</li>
             </ol>
                <filename>HwndHostClickWin32Button.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndHostInXaml">
            <summary>
            </summary>
            <remarks>
                 <filename>HwndHostInXaml.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostInXaml.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostInXaml.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a  HwndSource that host a Win32Button using HwndHost and later click on the Win32Button and recive the message. The tree is loaded using Xaml file
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a HwndDispatcher and Context</li>
                <li>Create a canvas and a HwndHost to host a Win32ButtonElement loaded from Xaml using Parser.LoadXml</li>
                <li>When the button is painted we click on the Win32Button</li>
                <li>When we receive the message, exit the dispatcher</li>
             </ol>
                <filename>HwndHostInXaml.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.MovingHwndHost">
            <summary>
            </summary>
            <remarks>
                 <filename>MovingHwndHost.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.MovingHwndHost.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.MovingHwndHost.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a  HwndSource that host a Win32Button using HwndHost and Reparent Async. Later making a Click on the new parented
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a HwndDispatcher and Context</li>
                <li>Create a canvas and a HwndHost to host a Win32ButtonElement</li>
                <li>When the button is painted we click on the Win32Button</li>
                <li>When we receive the message, exit the dispatcher</li>
             </ol>
                <filename>MovingHwndHost.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple">
             <summary>
                 
                 Create 5 Threads that Each one will be create a UIContext, HwndDispatcher and a HwndSource
                 This will Destroy the window and Validate the Windows Creation and Destruction
            </summary>
             <remarks>
             </remarks>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.InvalidParentWindow(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Using a parent window that it is no CS_MIL window
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.InvalidChildWindow(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Returning IntPtr.Zero from BuildWIndowCore
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.MovingFromDiffPanels(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Moving a HwndVisualHost form Panel1 to Panel2 on the Same source
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.MovingFromDiffSources(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Testing Moving a HwndVIsualHost for HwndSource 1 ot HwndSource 2
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.CreatingNOWSChildHost(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Testing creatring a Host that it is not WS_CHILD
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.CreatingHwndVIsualHostParentCheat(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Making the HWND returned be parented to different window
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.ClickTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.foo(System.Object,System.EventArgs)">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.Hosting.Mil.HwndVisualHostTestSimple.DisposeSimple(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.TreeViewHost">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.TreeViewHost.#ctor">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.TreeViewHost.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.TreeViewHost.ListingMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.TreeViewHost.Handle">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.TreeViewHost.Treeview">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.TreeViewHost.ClickTree">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.TreeViewHost.ClickHandler">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.Win32Treeview">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32Treeview.#cctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32Treeview.#ctor(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32Treeview.AddRoot(System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.Win32Treeview.AddNode(System.IntPtr,System.String)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.Win32Treeview.Width">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.Win32Treeview.Height">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.Win32Treeview.Handle">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.Win32Treeview.Root">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Hosting.Win32Treeview.ParentWindow">
            <summary>
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Hosting.Win32Treeview.ParentHook">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndHostAppDomainSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostAppDomainSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndHostAppDomainSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Threads: each thread creates it own dispatcher and context, later creates a canvas and button. Validate everything run fine.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Spwan 4 Threads and wait for all the thread finished their work.</li>
             </ol>
                <filename>MultipleContextMultipleDispatcherMultiple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Hosting.HwndVisualHostAppDomainSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndVisualHostAppDomainSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Hosting.HwndVisualHostAppDomainSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Threads: each thread creates it own dispatcher and context, later creates a canvas and button. Validate everything run fine.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Spwan 4 Threads and wait for all the thread finished their work.</li>
             </ol>
                <filename>MultipleContextMultipleDispatcherMultiple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd">
             <summary>
                     Create a HwndSource on a Single Thread and Single Context. This will Validate that we create without
                     problems. Later we destroy the window and stop the dispatcher
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context</li>
                     <li>Create a HelloElement to be rendered. Also we add an event to be called when the OnRender is executed</li>
                     <li>Create an HwndSource and Validate that creation</li>
                     <li>Run the Dispatcher</li>
                     <li>HelloElement.OnRender will be executed and the renderEvent(testing event) will be called this will
                     post an item to Close the window and stop the dispatcher</li>
                     <li>Validate the window is destroyed</li>
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SimpleThreadSingleContext</Area>
                 <location>SimpleHwndSourceSTSC.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.Test(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.TestTwo(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostAvalon">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostAvalon.#ctor(MSAvalon.Windows.Length,MSAvalon.Windows.Length)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostAvalon.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostAvalon.RootVisual">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostHWNDAvalon">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostHWNDAvalon.#ctor(MSAvalon.Windows.Length,MSAvalon.Windows.Length)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostHWNDAvalon.BuildWindowCore(System.Runtime.InteropServices.HandleRef)">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Source.Avalon_Hwnd_Avalon_Hwnd.AvalonHwndHostHWNDAvalon.RootVisual">
            <summary>
            HwndSource-HwndHost-HwndSource
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext">
            <summary>
            
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.CreateHost(System.Int32)">
            <summary>
            
            </summary>
            <param name="ID"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.Hello_RenderdSourcedHandlerEvent(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.InputFirstControl(System.Object)">
            <summary>
            Click on the First Control
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext_OnDestroyMainWindowEvent(System.Object,System.EventArgs)">
            <summary>
            Closing the dispatcher
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.Hello_MouseUp(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.InputSecondControl(System.Object)">
            <summary>
            Click on the First Control
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.CloseWindowASyncHandler(System.Object)">
            <summary>
            Destroying the main window
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceMultipleClickSingleDispatcherSingleContext.Hello_MouseDown(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceMTMC">
             <summary>
                 
                 Create 5 Threads that Each one will be create a UIContext, HwndDispatcher and a HwndSource
                 This will Destroy the window and Validate the Windows Creation and Destruction
            </summary>
             <remarks>
                     <ol>Scenarios steps:
                     <li>The main thread creates 5 thread that it will execute these:</li>
                         <li>Creating 1 context and Enter the context</li>
                         <li>Create a HelloElement to be rendered. Also we add an event to be called when the OnRender is executed</li>
                         <li>Create an HwndSource and Validate that creation</li>
                         <li>Run the Dispatcher</li>
                         <li>HelloElement.OnRender will be executed and the renderEvent(testing event) will be called this will
                         post an item to Close the window and stop the dispatcher</li>
                         <li>Validate the window is destroyed</li>
                     <li>The main thread wait until everything is done and validate that there was no exception</li>
                     </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\MultpleThreadSingleContext</Area>
                 <location>SimpleMultipleHwndSourceMTMC.cs</location>
             </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceMTMC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceMTMC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceMTMC.CloseWindowASyncHandler(System.Object)">
            <summary>
            This handler will be posted to the Context to Close the windows and Stop the dispatcher
            </summary>
            <param name="o"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceMTMC.evCore">
            <summary>
            Use to sync the threads, It will wait until the 5 threas ends to continue the main thread
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceMTMC.Dispatchers">
            <summary>
            Holds a referece for the Dispatcher on the different contexts
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.SimpleHwndSourceSTSC">
             <summary>
                     Create a HwndSource on a Single Thread and Single Context. This will Validate that we create without
                     problems. Later we destroy the window and stop the dispatcher
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context</li>
                     <li>Create a HelloElement to be rendered. Also we add an event to be called when the OnRender is executed</li>
                     <li>Create an HwndSource and Validate that creation</li>
                     <li>Run the Dispatcher</li>
                     <li>HelloElement.OnRender will be executed and the renderEvent(testing event) will be called this will
                     post an item to Close the window and stop the dispatcher</li>
                     <li>Validate the window is destroyed</li>
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SimpleThreadSingleContext</Area>
                 <location>SimpleHwndSourceSTSC.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleHwndSourceSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleHwndSourceSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleHwndSourceSTSC.CloseWindowASyncHandler(System.Object)">
            <summary>
            This handler will be posted to the Context to Close the windows and Stop the dispatcher
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleHwndSourceSTSC.Hello_RenderdSourcedHandlerEvent(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            This is called when OnRender on HelloElement is called.  We post a CloseWindowAsyncHandler to be executed on the Context
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceSTSC">
            <summary>
            Multiple HwndSource with a Single Thread and Single Context
            </summary>
            <remarks>
                <ol>Scenarios steps:
                        <li>Creating 1 context and Enter the context</li>
                        <li>Create a 3 HelloElement to be rendered. Also we add an event to be called when the OnRender is executed</li>
                        <li>Create an 3 HwndSource and Validate that creation</li>
                        <li>Run the Dispatcher</li>
                        <li>HelloElement.OnRender will be executed and the renderEvent(testing event) will be called this will
                        post an item to Close the window and stop the dispatcher</li>
                        <li>Validate all windows are destroyed</li>
                </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceSTSC.CloseWindowASyncHandler(System.Object)">
            <summary>
            This handler will be posted to the Context to Close the windows and Stop the dispatcher
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceSTSC.Hello_RenderdSourcedHandlerEvent(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.Hwnd.SimpleMultipleHwndSourceSTSC.Counter">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual">
            <summary>
                     Creating a HwndSource with a Visual Root, later using mouseEnter Event swap the visual root.
                     For another visual root and validate that the new visual is there.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context, mouse is on 0,0 coordinates</li>
                     <li>Create a VisualRoot that contains a White Text</li>
                     <li>When the visual is render, mouve the mouse over the visual </li>
                     <li>On mouse enter we move the mouse to  0,0 Coordinates and we post a background item to execute the next step</li>
                     <li>On the posted item we swap the visual root for a new visual (Red Text) and also this visual handles on mouse enter</li>
                     <li>To validate the new visual is there we move the mouse over the new visual this should fire onmouseenter</li>
                     <li>During on Mouse enter we set a flag that the test pass and we close the window and stop the dispatcher</li>
                     <li>The dispathcer stop and we validate that everything pass.</li>
                 </ol>
                 <filename>ChangingRootVisual.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.FirstControl_RenderHandler(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            This will be called when OnRender on First HelloElement is called.
            It will post a delegate that will Input a mouse move. The function called after this
            is IntroduceFirstInputHandler
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.IntroduceInputHandler(System.Object)">
            <summary>
            Adding a delegate to the MouseEnter event on the First Control Render.
            Later it will move the move to the positon 100,100 of the Source Window, this
            will cause the delegate just added to be fired. The next function called will be
            FirstControl_MouseEnterHandler
            </summary>
            <param name="o">This is the Source window</param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.FirstControl_MouseEnterHandler(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            On MouseEnter: first move the mouse to (0,0) later we create a new Element and we swap the RootVisual from the Source
            also we add a delegate to fire an event when the Second HelloElement is rendered
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.SwapTree(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.SecondControl_RenderHandler(MSAvalon.Windows.UIElement,MSAvalon.Windows.HwndSource)">
            <summary>
            When the second HelloElement is rendered a Second input is genereated and the SecondControlMouseEntherHandler will be file. 
            </summary>
            <param name="target"></param>
            <param name="Source"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.MoveMouseDelayActiveMouseEnterNewElement(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.SecondControl_MouseEnterHandler(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            MouseEnter of the second controls handler. Set the Global variabel IsTestPass to true and Close the window to 
            stop the test
            </summary>      
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.ChangingRootVisual.CloseWindowASyncHandler(System.Object)">
            <summary>
            This handler will be posted to the Context to Close the windows and Stop the dispatcher
            </summary>
            <param name="o"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.HelloElement">
            <summary>
            Simple Hello UIElement to render something on the screen
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.HelloElement.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.HelloElement.Source">
            <summary>
            Attribute that holds the Source where this element is rendered
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.HelloElement.FontColor">
            <summary>
            Set the Font Color
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.HelloElement.OnRender(MSAvalon.Windows.Media.DrawingContext)">
            <summary>
            Rendered method that it is called by the MIL
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.HelloElement.HitTestCore(MSAvalon.Windows.Media.PointHitTestParameters)">
            <summary>
            HitTestCore implements precise hit testing against render contents
            </summary>
        </member>
        <member name="E:Avalon.Test.CoreUI.Source.HelloElement.RenderedSourcedHandlerEvent">
            <summary>
            Event where tells you that the control is already rendered.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.HelloElement.RenderHandler">
            <summary>
            Delegate for RenderSourcedHandlerEvent
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleDispatcherMultiple">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleDispatcherMultiple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleDispatcherMultiple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Threads: each thread creates it own dispatcher and context, later creates a canvas and button. Validate everything run fine.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Spwan 4 Threads and wait for all the thread finished their work.</li>
                <li>Each thread: Create a context and a Win32Dispatcher .</li>
                <li>Each Thread: Create a HwndSource and a CAnvas, Button and Hello Element</li>
                <li>When HelloElement is rendered, we post a message to exit a dispatcher en 2 seconds</li>
                <li>Validating that there is no expecption on any thread. and exit the app</li>
             </ol>
                <filename>MultipleContextMultipleDispatcherMultiple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleDispatcherMultiple.CreateCase">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleWindowMultipleContextOneDispatcher">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleWindowMultipleContextOneDispatcher.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleWindowMultipleContextOneDispatcher.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Threads: each thread creates it own dispatcher and context, later creates a canvas and button. Validate everything run fine.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Spwan 4 Threads and wait for all the thread finished their work.</li>
                <li>Each thread: Create a context and a Win32Dispatcher .</li>
                <li>Each Thread: Create a HwndSource and a CAnvas, Button and Hello Element</li>
                <li>When HelloElement is rendered, we post a message to exit a dispatcher en 2 seconds</li>
                <li>Validating that there is no expecption on any thread. and exit the app</li>
             </ol>
                <filename>MultipleContextMultipleDispatcherMultiple.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleWindowMultipleContextOneDispatcher.CreateCase">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.SourcesServicesSimple">
             <summary>
                     Validating the SourceServices works correctly
                     
             </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SimpleThreadSingleContext</Area>
                 <location>SourcesServicesSimple.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SourcesServicesSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.SourcesServicesSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Retrieve the SourceFromFrameworkElement from a alement that it is no on the tree, later on the tree and after unplugged again
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li>Create 1 Source and a tree with Border-StackPanel->TextPanel->Button</li>
                     <li>QUery SourceFromFrameworkElement on the TP.  Validate Null</li>
                     <li>Connect the RootVisual to the Border. Post an item to validate Async</li>
                     <li>Run Disptacher</li>
                     <li>Validate the TP has source. and later Set the RootVisual to null and validate async again, later exit the dispatcher</li>
                     <li>Validate the Async call where done</li>
                     
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SourceServices\Simple</Area>
                 <location>SourcesServicesSimple.cs</location>
            </remarks>
             <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceonTopLevelWindow">
             <summary>
                     Validating the SourceServices works correctly
                     
             </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SimpleThreadSingleContext</Area>
                 <location>SourcesServicesSimple.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceonTopLevelWindow.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceonTopLevelWindow.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a top window that contains 4 HwndSource, One dispatcher and One Context and One Thread, making a Click on each Button.
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li></li>
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\Child\Context\Single</Area>
                 <location>MultipleHwndSourceonTopLevelWindow.cs</location>
            </remarks>
             <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceonTopLevelWindowonDifferentContext">
             <summary>
                     Validating the SourceServices works correctly
                     
             </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SimpleThreadSingleContext</Area>
                 <location>SourcesServicesSimple.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceonTopLevelWindowonDifferentContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleHwndSourceonTopLevelWindowonDifferentContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a top window that contains 4 HwndSource, One dispatcher and 4 context Context and One Thread, making a Click on each Button.
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li>Create 1 Source and a tree with Border-StackPanel->TextPanel->Button</li>
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SourceServices\Simple</Area>
                 <location>MultipleHwndSourceonTopLevelWindowonDifferentContext.cs</location>
            </remarks>
             <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.HwndSourceDisposeSimple">
            <summary>
            </summary>"
            <remarks>
                 <filename>HwndSourceDispose.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.HwndSourceDisposeSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.HwndSourceDisposeSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating a CheckButton (all the tree on code) and adding a property trigger for CheckState
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.HwndSourceDisposeSimple.CallingWin32Destroy(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Disposing the HwndSource using a Win32 DestroyWindow async.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a HwndSource and Hook a button</li>
                <li>Dispatcher.Run</li>
                <li>on a posted object call Win32 DestroyWindow</li>
                <li>Exit the dispatcher and validating Source.IsDisposed</li>
             </ol>
                <filename>HwndSourceDispose.cs</filename>
            </remarks>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler">
             <summary>
                     Create a HwndSource on a Single Thread and Single Context. This will Validate that we create without
                     problems. Later we destroy the window and stop the dispatcher
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context</li>
                     <li>Create a HelloElement to be rendered. Also we add an event to be called when the OnRender is executed</li>
                     <li>Create an HwndSource and Validate that creation</li>
                     <li>Run the Dispatcher</li>
                     <li>HelloElement.OnRender will be executed and the renderEvent(testing event) will be called this will
                     post an item to Close the window and stop the dispatcher</li>
                     <li>Validate the window is destroyed</li>
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Source\SimpleThreadSingleContext</Area>
                 <location>SimpleHwndSourceSTSC.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler.removingSourceAdded(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler.removingSourceAddedNull(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler.MultipleThreadSourceandRemoveSource(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.PresentationSource_SourceAddedHandler.MultipleThreadSourceandRemoveSourceMultiple(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.TestSimpleFromHwnd">
             <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestSimpleFromHwnd.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestSimpleFromHwnd.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and calling FromHwnd. Basic Functionaly Test
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestSimpleFromHwnd.HwndDisposed(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and calling Dispose(), after that call FromHwnd, this should return Null, basic Functionality
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestSimpleFromHwnd.MultipleHwndSimple(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating 10 HwndSources and calling FromHwnd on all of them, should return the correct Ones
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestSimpleFromHwnd.InvalidParameter(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource with IntPtr.Zero as paramenter. Expecting an exception
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource">
             <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and calling FromHwnd. Basic Functionaly Test
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.RemovingSourceEvent(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource with IntPtr.Zero as paramenter. Expecting an exception
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.AddingSourceTwice(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource with IntPtr.Zero as paramenter. Expecting an exception
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.RemovingSourceTwice(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource with IntPtr.Zero as paramenter. Expecting an exception
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.RemovingWithoutAdding(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource with IntPtr.Zero as paramenter. Expecting an exception
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestMyPresentationSource.AddMultipleKindPresentationSource(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource with IntPtr.Zero as paramenter. Expecting an exception
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestSimpleFromHwnd.cs</location>
             </remarks>        
        </member>
        <member name="P:Avalon.Test.CoreUI.Source.Hwnd.MyPresentationSource.RootVisual">
            <summary>
                The root visual being presented in the source.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Source.Hwnd.MyPresentationSource.CompositionTarget">
            <summary>
                The visual manager for the visuals being presented in the source.
            </summary>
        </member>
        <member name="P:Avalon.Test.CoreUI.Source.Hwnd.MyPresentationSource.LayoutManager">
            <summary>
                The layout manager for the visuals being presented in the source.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange">
             <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.TwoNewSource(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.InvalidParameters(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.MovingtheUIElem2Lower(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.MultipleSimpleAddSameTree(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.AddSimpleCustomPS(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.SettingSameValueCustomPS(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.AddSourceChangedAndRemoveFromTree(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.MultipleAddSourceCallontheSame(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestNotifyRootChange.AddSourceChangedEventonbuiltTree(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener">
             <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.AddRemoveAddListener(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.AddRemoveTwiceAddListener(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.RemoveWithoutAdding(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.InvalidParameters(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.RemovingElementSourceChangedListener.RemoveFromDiffThreadAndAdd(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 Creating a HwndSource and a Button. Calling AddSourceChangedHandler on the Button, Set the HwndSource.RootVisual to the button. Expecting an event.
                 Later Setting the HwndSource.RootVisual to null and expecting the Event again.  Validating Arguments
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestNotifyRootChange.cs</location>
             </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual">
             <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                Calling FromVisual very simple scenario; I pass the root as parameter and validates correct Source 
                
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestFromVisual.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual.NotOnTheTree(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 
                
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestFromVisual.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual.LookingOnDeepTree(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 
                
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestFromVisual.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual.InvalidParam(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 
                
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestFromVisual.cs</location>
             </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.TestFromVisual.MovingRootFromS1toS2(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
                 
                
            </summary>
             <remarks>
                 <Owner>Microsoft</Owner>
 
                 <location>TestFromVisual.cs</location>
             </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleAppDomainSingleTopWindow">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleAppDomainSingleTopWindow.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleAppDomainSingleTopWindow.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Create a top level HWND, that HWND will contain 4 child HwndSource. Each HwndSource is created on a different
            Thread and on a different AppDomain. For that reason we create for each a new HwndDispatcher and a UIContext
            After each HwndSource start rendering it post a Quit to the dispatcher an later signel the main thread to say
            that that thread is done.
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleAppDomainSingleTopWindow.StartTestCaseCrossAppDomain">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleContextMultipleAppDomainSingleTopWindow.CreateCase">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.CrossAppData">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.CrossAppData.#ctor(System.IntPtr)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.CrossAppData.#ctor(Avalon.Test.CoreUI.Source.Hwnd.CrossAppData)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.Hwnd.CrossAppData.Handler">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.CrossAppPosition">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.CrossAppPosition.#ctor(System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.CrossAppPosition.#ctor(Avalon.Test.CoreUI.Source.Hwnd.CrossAppPosition)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.Hwnd.CrossAppPosition.Top">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Source.Hwnd.CrossAppPosition.Left">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainMultipleTopWindows">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainMultipleTopWindows.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainMultipleTopWindows.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Top Level HwndSource on a different AppDomans. Each AppDomain contains its own Dispatcher
            and its own Context.  This test creates the four threads and the main Thread waits until the 4 are done
            The exit criteria for the threads is that something is OnRender is called.
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainMultipleTopWindows.StartTestCaseCrossAppDomain">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainMultipleTopWindows.CreateCase">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.TestDispatcher">
            <summary>
            Custom Dispatcher to retrieve one by one items from the queue
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            Constructor
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.RegisterContext(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.UnregisterContext(MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.PushFrame(MSAvalon.Threading.UIDispatcherFrame)">
            <summary>
            
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.Quit">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.IsDispatcherThread(System.Threading.Thread,MSAvalon.Threading.UIContext)">
            <summary>
            
            </summary>
            <param name="thread"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.DispatchNextItem">
            <summary>
            It will dispatch the next item on the Context queue
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcher.DispatchNextItem(System.Threading.WaitHandle)">
            <summary>
            It will dispatch the next item on the Context queue
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.TestDispatcherSite">
            <summary>
            This the Class the actually connect the Context and the Dispatcher. You can access everything thru the ContextDispatch property
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcherSite.#ctor(MSAvalon.Threading.UIContext,Avalon.Test.Framework.Dispatchers.TestDispatcher)">
            <summary>
            Constructor that plug the dispatcher and
            </summary>
            <param name="context"></param>
            <param name="dispatcher"></param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.TestDispatcherSite.OnPendingWorkChanged(System.Object,System.EventArgs)">
            <summary>
            This is signal everytime that something change on the Context
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Avalon.Test.Framework.Dispatchers.TestDispatcherSite.ContextDispatch">
            <summary>
            Access to the Context and Dispatcher
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateSimple">
            <summary>
            Description:
            This test cases allocate slots. It is covering simple scenarios for AllocateDataSlot API
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\Storage
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: AllocateSimple.cs
            <para/>
            <ol>Scenarios covered:
            <li>Calling UIContext.AllocateDataSlot() </li>
            <li>SetData(slot,int)</li>
            <li>Validate data using GetData(slot)</li>
            <li>Allocate 20 Slots on for stament</li>
            <li>SetData(slot,string) for 20 slots</li>
            <li>Validate data using GetData(slot) for 20 slots</li>
            <li>Reuse first data allocated SetData(slot,object)</li>
            <li>Validate reused data using GetData(slot)</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateSCMT">
            <summary>
            Description:
            This test case is to test UIContext.Allocate from different threads, but all of them targetting the same context.
            <para />
            5 different threads allocating 20 slot, setting and getting data on the context too.
            </summary>
            <remarks>
            Area: Threading\UIContext
            <para />
             Microsoft 
            <para />
            <para />
            FileName: AllocateSCMT.cs
            <para />
            Way to execute this test case:
            <ul>
            <li>Creates 5 Threads, Start the threads and waits...</li>
            <li>Each thread will:
                <ul>
                    <li> Enter Context - Allocate 20 Slots - Leave Context - Thread Yields</li>
                    <li> Enter Context - Set 20 Objects on the Context - Thread Yields</li>
                    <li> Enter Context - Validate the object that were set - Thread Yields</li>
                </ul>
            </li>
            <li>The main thread validate that 100 objects where assigned</li>
            </ul>
            </remarks>
            <example>
            <code lang="C#">
            AllocateSCMT Test = new AllocateSCMT();
            Test.RunTest(new CoreLogger());
            </code>
            </example>
                
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateSCMT.#ctor">
            <summary>
            Contructor class that calls the base line with TestCaseType.ContextSupport
            </summary>
            <remarks>
            <see cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateSCMT.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry method for the test case
            </summary>
            <param name="framework">No Special args on the Framework just a plain CoreLogger</param>
            <remarks>
            <seealso cref="T:Avalon.Test.CoreUI.Common.CoreLogger"/>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedSimple">
            <summary>
            Description:
            This test cases allocate using AllocateNamedDataSlot
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Storage
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: AllocateNamedSimple.cs
            <para/>
            <ol>Scenarios covered:
            <li>Calling UIContext.AllocateNamedDataSlot() with using AutoData(0) </li>
            <li>SetData(slot,int)</li>
            <li>Validate data using GetData(slot)</li>
            <li>Validate data using GetData(UIContext.GetNamedDataSlot("name")) </li>
            <li>Free Named Slot</li>
            <li>Validate free slot using UIContext.GetNamedDataSlot equal to null</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedMultipleAllocations">
            <summary>
            Description:
            This test cases allocate multiple slots using AllocateNamedDataSlot with a Globalize Names
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\Storage
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: AllocateNamedMultipleAllocations.cs
            <para/>
            <ol>Scenarios covered:
            <li>Calling 40 times UIContext.AllocateNamedDataSlot() with using AutoData(0) </li>
            <li>SetData(slot,int) on the 40</li>
            <li>Validate data using GetData(UIContext.GetNamedDataSlot("name")) </li>
            <li>Free Named 40 Slots</li>
            <li>Validate free slot using UIContext.GetNamedDataSlot equal to null</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedMultipleAllocations.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedMultipleAllocations.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeEventFireSTSC">
            <summary>
            Testing call to Dispose method on UIContext. The disposed event should be called once and
            also validating the IsDiposed Property on the UIContext.
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Dispose\Simple
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: DisposeEventFireSTSC.cs
            <para/>
            <ol>Scenarios covered:
            <li>Adding Delegate to uiContext.Disposed Event</li>
            <li>Dispose the context</li>
            <li>Validating Event is called</li>
            <li>Validating IsDisposed Property</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeEventFireSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeEventFireSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeEventFireSTSC.uiContext_Disposed(System.Object,System.EventArgs)">
            <summary>
            Method that handles the Disposed Event on UIContext
            </summary>
            <param name="sender">This should be the context</param>
            <param name="e"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeEventFireSTSC._eventFire">
            <summary>
            Bool that holds if the Event is fired when the context is dispose
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeMultipleTimesSTSC">
            <summary>
            Calling Multiple Times Dispose Method.  Validating dispose event and IsDisposed Property
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Disposing
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: DisposeMultipleTimesSTSC.cs
            <para/>
            <ol>Scenarios covered:
            <li>Adding Delegate to uiContext.Disposed Event</li>
            <li>Dispose the context</li>
            <li>Validating Event is called</li>
            <li>Validating IsDisposed Property</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeMultipleTimesSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeMultipleTimesSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeMultipleTimesSTSC.uiContext_Disposed(System.Object,System.EventArgs)">
            <summary>
            Method that handles the Disposed Event on UIContext
            </summary>
            <param name="sender">This should be the context</param>
            <param name="e"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeMultipleTimesSTSC._eventFire">
            <summary>
            Int reference that holds the count of Disposed Events fired.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeInOutContextSTMC">
            <summary>
            Disposing a context when the Thread is IN the context. Also Dispose a Context when the Thread is out of the context.
            <para/>
            This is a BVT scenario for Single Thread Multiple Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Dispose\Intermediate
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: DisposeInOutContextSTMC.cs
            <para/>
            <ol>Scenarios covered:
            <li>Creating 2 context</li>
            <li>Adding Delegate to uiContext.Disposed Event</li>
            <li>Context1: Enter, Dispose and Exit</li>
            <li>Context2: Dispose</li>
            <li>Validating IsDisposed Property</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeInOutContextSTMC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeInOutContextSTMC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeInOutContextSTMC.uiContext_Disposed(System.Object,System.EventArgs)">
            <summary>
            Handler for disposed event on context
            </summary>
            <param name="sender">Context that was disposed</param>
            <param name="e"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeInOutContextSTMC._eventFire">
            <summary>
            Int reference that holds the count of Disposed Events fired.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposingMultipleContextSTMC">
            <summary>
            Disposing 20 Context on a Single Thread. Validating Dispose Work correctly, IsDiposed property and the Disposed Event
            <para/>
            This is a BVT scenario for Single Thread Multiple Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Dispose\Intermediate
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: DisposingMultipleContextSTMC.cs
            <para/>
            <ol>Scenarios covered:
            <li>Creating 20 context</li>
            <li>Adding Delegate to uiContext.Disposed Event</li>
            <li>Validating IsDisposed Property for each context</li>
            <li>Dispose 20 context, for each odd context we enter, dipose and exit; for each even context we just dispose</li>
            <li>Validating IsDisposed Property for each context</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposingMultipleContextSTMC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposingMultipleContextSTMC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposingMultipleContextSTMC.uiContext_Disposed(System.Object,System.EventArgs)">
            <summary>
            Handler for disposed event on context
            </summary>
            <param name="sender">Context that was disposed</param>
            <param name="e"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposingMultipleContextSTMC._eventFire">
            <summary>
            Int reference that holds the count of Disposed Events fired. This start with 1 due TestCase.cs add the first context, that it
            is not use on this test case
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterSimpleSTSC">
            <summary>
                    TryEnter on a single context single thread. Validating the return value of TryEnter. and Validation In Context and Out Context
            </summary>
            <remarks>
                <ol>Scenarios steps:
                        <li>Creating 1 context</li>
                        <li>TryEnter to the Context</li>
                        <li>Validate return value (True) and Ownership-Query (CurrenContext, VerifyContext and CheckContext</li>
                        <li>Exit</li>
                        <li>Validate return value (False) and Ownership-Query (CurrenContext, VerifyContext and CheckContext</li>
                </ol>
                <Owner>Microsoft</Owner>
 
                <Area>Threading\UIContext\Ownership</Area>
                <location>TryEnterSimpleSTSC.cs</location>
            </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterSimpleSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterSimpleSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterReenterSimple">
             <summary>
                     Testing Reentrence to TryEnter for one single context and single thread.
             </summary>
             <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context</li>
                     <li>Calling TryEnter five times</li>
                     <li>Verify 5 results from call</li>
                     <li>Verify Thread in Context</li>
                     <li>Exit one </li>
                     <li>Verify Thread still in Context</li>
                     <li>Verify Thread in Context</li>
                     <li>Exit all the times</li>
                 </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Threading\UIContext\Ownership</Area>
                 <location>TryEnterReenterSimple.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterReenterSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterReenterSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterMultipleContext">
             <summary>
                     Testing Entering several context on the same thread, validating each entrance,
                     the ownership values and exitting values
             </summary>
             <remarks>
                     <ol>Scenarios steps:
                         <li>Creating 3 context</li>
                         <li>Calling TryEnter on C1, validate Return value and Thread InContext</li>
                         <li>Calling TryEnter on C2, validate Return value and Thread InContext</li>
                         <li>Calling TryEnter on C3, validate Return value and Thread InContext</li>
                         <li>Calling TryEnter on C1, validate Return value and Thread InContext</li>
                          <li>Exit C1 and validate on C3</li>
                          <li>Exit C3 and validate on C2</li>
                          <li>Exit C2 and validate on C1</li>
                          <li>Exit C1 and validate on null</li>
                         </ol>
 
                 <Area>Threading\UIContext\Ownership</Area>
                 <location>TryEnterMultipleContext.cs</location>
            </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterMultipleContext.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.TryEnterMultipleContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Ownership.SimpleEnteringMTSC">
             <summary>
                     Testing Entering several context on the same thread, validating each entrance,
                     the ownership values and exitting values
            </summary>
            <remarks>
                     <ol>Scenarios steps:
                         <li>Creating 3 context</li>
                         <li>Calling TryEnter on C1, validate Return value and Thread InContext</li>
                         <li>Calling TryEnter on C2, validate Return value and Thread InContext</li>
                         <li>Calling TryEnter on C3, validate Return value and Thread InContext</li>
                         <li>Calling TryEnter on C1, validate Return value and Thread InContext</li>
                          <li>Exit C1 and validate on C3</li>
                          <li>Exit C3 and validate on C2</li>
                          <li>Exit C2 and validate on C1</li>
                          <li>Exit C1 and validate on null</li>
                         </ol>
                 <Owner>Microsoft</Owner>
 
                 <Area>Threading\UIContext\Ownership</Area>
                 <location>SimpleEnteringMTSC.cs</location>
             </remarks>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.SimpleEnteringMTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.SimpleEnteringMTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.SimpleEnteringMTSC._xTestCase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="Frmwk">Pass the CoreLogger to log</param>    
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.RunSimpleEntering(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test case is really simple. On 1 Thread and 1 Context call Access to enter the context and validate ownership
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>Reference to a context</li>
                    <li>Validate Ownership for Context. Should be Out</li>
                    <li>Enter the context using Access()</li>
                    <li>Validate Ownership for Context. Should be In</li>
                    <li>End of the using stament and validate ownership out of the Context</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.RunMixingEnteringAccessTryEnter(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test cases mix the Acess API call and nesting a TryEnter call to validate  they work 
            togheter.
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>One Context created</li>
                    <li>Enter using Access API</li>
                        <li>Validate ownership thread in context</li>
                        <li>Call TryEnter. Validate the return value</li>
                        <li>Validate Ownership</li>
                        <li>Call Using Exit API</li>
                        <li>Validate ownership the thread should still in the context</li>
                   <li>Finishing the using. Validate Thread out of context</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.RunMixingEnteringTryEnterAccess(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test cases mix the TryEnter API call and nesting a Access call to validate  they work 
            togheter.
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>One Context created</li>
                    <li>Enter using TryEnter</li>
                        <li>Validate ownership thread in context and validates the returned value</li>
                        <li>Call Access.</li>
                            <li>Validate Ownership</li>
                        <li>Call Using Exit API</li>
                        <li>Validate ownership the thread should still in the context</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.RunEnteringTwice(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test case is really simple. On 1 Thread and 1 Context call 5 nested Access call 
            to enter the context and validate ownership
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>Reference to a context</li>
                    <li>Validate Ownership for Context. Should be Out</li>
                    <li>Start nesting enter the context using Access() 5 Times</li>
                    <li>Validate Ownership for Context. Should be In</li>
                    <li>Enter the context using Access()</li>
                    <li>End of the using stament and validate ownership out of the Context</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextSimpleSTSC.RunExitBetweenAccessCall(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test case is really simple. On 1 Thread and 1 Context call Access to enter the context and validate ownership
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>Reference to a context</li>
                    <li>Validate Ownership for Context. Should be Out</li>
                    <li>Enter the context using Access()</li>
                    <li>Validate Ownership for Context. Should be In</li>
                    <li>End of the using stament and validate ownership out of the Context</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
                TODO: THIS IS BROKEN!!!!!!
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextIntermediateMCST">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextIntermediateMCST.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextIntermediateMCST.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="Frmwk">Pass the CoreLogger to log</param>    
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextIntermediateMCST.RunEnteringMultipleContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test case is really simple. On 1 Thread and 1 Context call Access to enter the context and validate ownership
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>Reference to a context</li>
                    <li>Validate Ownership for Context. Should be Out</li>
                    <li>Enter the context using Access()</li>
                    <li>Validate Ownership for Context. Should be In</li>
                    <li>End of the using stament and validate ownership out of the Context</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Ownership.AccessContextIntermediateMCST.RunNestingMultipleContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This test case nested several Access Call on differents Contexts
            properties
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>Reference to three different context context</li>
                    <li>Using Access to enter a ContextOne</li>      
                        <li>Validate Ownership for the 3 Contexts</li>
                        <li>Using Access to enter ContextTow</li>
                            <li>Validate Ownership for the 3 Contexts</li>
                                <li>Using Access to enter ContextThree</li>
                                <li>Validate Ownership for the 3 Contexts</li>
                        <li>Validate Ownership for the 3 Contexts</li>
                   <li>Validate Ownership for the 3 Contexts</li>
                </ol>
                <filename>AccessContextSimpleSTSC.cs</filename>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC">
            <summary>
             This class contains 2 test cases. One using a custom dispatcher and another using a HwndDispatcher. We post
             22 items to the context and we dispatch. we verify the correct order for the dispatched items.  This two test cases
             are on differente methods.
            </summary>
            <remarks>
                 <filename>BeginInvokeSimpleBeforeRunSTSC.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is the first test case. We create a custom TestDispatcher to Get one by one all the items on the 
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a TestDispatcher</li>
             <li>Post Items to the Context queues using Begin Invoke. Two items for each existent priority. The
             items are posted backwards of the priority</li>
             <li>We start a loop to get all the item using the API TestDispatcher.DispatchNextItem</li>
             <li>On the handler we validate the Correct order </li>
             <li>After all the itesm are validated. We validate that 20 items are processed.</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is the first test case. We create a HwndDispatcher to dispatch all the items on the 
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Post Items to the Context queues using Begin Invoke. Two items for each existent priority. The
             items are posted backwards of the priority</li>
             <li>Call HwndDispatcher.Run</li>
             <li>On the handler we validate the Correct order. On the 20 item we stop the dispatcher </li>
             <li>After all the itesm are validated. We validate that 20 items are processed.</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC._PostItems">
            <summary>
            post 20 Items to the queues. Each 2 are the same priority.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSimpleBeforeRunSTSC._count">
            <summary>
            
            </summary>     
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase">
            <summary>
             This class contains 2 test cases. One using a custom dispatcher and another using a HwndDispatcher. We post
             11 items to the context on a Inactive Priority, Later we Change the priority with time Zero. we verify the correct order for the dispatched items.  This two test cases
             are on differente methods.
            </summary>
            <remarks>
                 <filename>PromoteItemSimpleTestCase.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is the first test case. We create a custom TestDispatcher to Get one by one all the items on the 
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a context and a TestDispatcher</li>
                <li>Post 11 Items  to the Context queues using Begin Invoke. One item for each existent priority but all Inactive</li>
                <li>We Schedule a Change Priority with time Zero. One per priority</li>
                <li>We start a loop to get all the item using the API TestDispatcher.DispatchNextItem</li>
                <li>On the handler we validate the Correct order </li>
                <li>After all the itesm are validated. We validate that 10 items are processed. One should be inactive</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is the first test case. We create a HwndDispatcher to dispatch all the items on the 
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Post 11 Items  to the Context queues using Begin Invoke. One item for each existent priority but all Inactive</li>
             <li>We Schedule a Change Priority with time Zero. One per priority</li>
             <li>We start a loop to get all the item using the API TestDispatcher.DispatchNextItem</li>
             <li>On the handler we validate the Correct order </li>
             <li>After all the itesm are validated. We validate that 10 items are processed. One should be inactive</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase._PostItems">
            <summary>
            post 11 Items to the queues. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemSimpleTestCase._count">
            <summary>
            
            </summary>     
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple">
            <summary>
             This class contains 2 test cases. One using a custom dispatcher and another using a HwndDispatcher. We post
             11 items to the context on a Inactive Priority, Later we Change the priority with time Zero. we verify the correct order for the dispatched items.  This two test cases
             are on differente methods.
            </summary>
            <remarks>
                 <filename>PromoteItemSimpleTestCase.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is the first test case. We create a custom TestDispatcher to Get one by one all the items on the 
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a TestDispatcher</li>
             <li>Post 11 Items  to the Context queues using Begin Invoke. One item for each existent priority but all Inactive</li>
             <li>We Schedule a Change Priority with time Zero. One per priority</li>
             <li>We start a loop to get all the item using the API TestDispatcher.DispatchNextItem</li>
             <li>On the handler we validate the Correct order </li>
             <li>After all the itesm are validated. We validate that 10 items are processed. One should be inactive</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is the first test case. We create a HwndDispatcher to dispatch all the items on the 
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Post 11 Items  to the Context queues using Begin Invoke. One item for each existent priority but all Inactive</li>
             <li>We Schedule a Change Priority with time Zero. One per priority</li>
             <li>We start a loop to get all the item using the API TestDispatcher.DispatchNextItem</li>
             <li>On the handler we validate the Correct order </li>
             <li>After all the itesm are validated. We validate that 10 items are processed. One should be inactive</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple._AbortItems">
            <summary>
            Abort Background, Layout, DataBinding and Send Priorities
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple._PostItems">
            <summary>
            post 11 Items to the queues. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortEnqueueItemSimple._count">
            <summary>
            
            </summary>     
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple">
            <summary>
             This Class Contains two test cases to Promote several items sharing the same ManualReset Event.  The difference with the test cases
             it taht the first one implements using a HwndDispatcher and teh second one a Win32Dispathcer
            </summary>
            <remarks>
                 <filename>PromoteItemwithEventSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Promote 11 items using 1 ManualResetEvent. Testing that we get all the promotion correctly
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and a HwndDispatcher</li>
             <li>Post 11 Items as Innactive</li>
             <li>Promote does 11 items to each priority (available on UIContextPrioriy, starting for below to top)  The promotion is base on 1 AutoResetEvent for all</li>
             <li>Post an Item to Signal the autoresetevent and trigger all. </li>
             <li>HwndDispatcher.Attach, Loop, DeAtach</li>
             <li>Validating the Items are dispatched on the correct order. On the last one, Quit the dispathcer</li>
             <li>Validates 10 items were executed</li>
             </ol>
            Version: HwndDispatcher
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Promote 11 items using 1 ManualResetEvent. Testing that we get all the promotion correctly
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and a Win32Dispatcher</li>
             <li>Post 11 Items as Innactive</li>
             <li>Promote does 11 items to each priority (available on UIContextPrioriy, starting for below to top)  The promotion is base on 1 AutoResetEvent for all</li>
             <li>Post an Item to Signal the autoresetevent and trigger all. </li>
             <li>Win32Dispatcher.Run</li>
             <li>Validating the Items are dispatched on the correct order. On the last one, Quit the dispathcer</li>
             <li>Validates 10 items were executed</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple._PromoteItems">
            <summary>
             Promoting all the items posted to a Time=MaxValue and all availables prioritiries on Avalon
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.ChangePriority(MSAvalon.Threading.UIContextOperation,System.Int32,System.TimeSpan,MSAvalon.Threading.UIContextPriority)">
            <summary>
             Change the priority to a time passed and the priority on the args. Also for each change an AutoResetEvent is store
             to signal the change later.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.SignalPromotion(System.Object)">
            <summary>
             Signal the Promotion of all the AutoResetEvents on the AutoResetEventArray
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple._PostItems">
            <summary>
            post 11 Items to the queues. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemManualResetEventSimple._count">
            <summary>
            
            </summary>     
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple">
            <summary>
             This Class contains 2 test cases
            </summary>
            <remarks>
                 <filename>PromoteWaitHandleSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
                <li> Post 1 Item as Inactive </li>
                <li> Promote the item using an AutoResetEvent to Trigger that</li>
                <li> Post 1 Item to Trigger the AutoResetEvent and make the promotion </li>
                <li> HwndDispatcher.Attach, Loop and DeAttach</li>
                <li> Validate the item promoted was dispatcher</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a context and a Win32Dispatcher</li>
                <li> Post 1 Item as Inactive </li>
                <li> Promote the item using an AutoResetEvent to Trigger that</li>
                <li> Post 1 Item to Trigger the AutoResetEvent and make the promotion </li>
                <li> Win32Dispatcher.Run</li>
                <li> Validate the item promoted was dispatcher</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple._PostItems">
            <summary>
            Post 1 Items to the Context on Inactive Priority 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple._PromoteItems">
            <summary>
             Promoting the item posted to a Time=MaxValue and promote to Normal priority
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple.SignalPromotion(System.Object)">
            <summary>
             Signaling the item to be promoted.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple._count">
            <summary>
            
            </summary>     
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteWaitHandleSimple._uiContextOperationObject">
            <summary>
            This will hold a refence to the UIContextOperation that was return to the posted item to the Context
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.BeginInvokewithTimerSimple">
            <summary>
                     Calling nested pump twice and tried to exit on different order
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context, mouse is on 0,0 coordinates</li>
                     <li>Push a frame Frame1</li>
                     <li>Push a Frame2</li>
                     <li>Exit Frame1</li>
                     <li>Exit Frame2</li>
                     <li>Validate they exit correctlyy</li>
                 </ol>
                 <filename>NestedPumpExitIncorrectOrder.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.BeginInvokewithTimerSimple.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.BeginInvokewithTimerSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.BeginInvokewithTimerSimple._StartUITimers(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTest">
            <summary>
            </summary>
            <remarks>
                 <filename>BeginInvokeSecurityTest.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTest.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTest.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTest.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the BeginInvoke get the SecurityContext.  Running the dispatcher on a trusted thread (Started on a untrusted). The 
            evil code posted in on the untrusted dll
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Add a handler to the OperationInitiated event. Later begin invoke a dummy item, posting items 2 (Normal and BG) the first execute insecure code (IO) that lives on the untrusted assembly, the second one exits the dispatcher</li>
             <li>Create a Thread that it will run a dispatcher on a Assembly that have full trusted</li>
             <li>Wait One on until the other thread finished</li>
             <li>When the dispatcher exit validates there was a securityexpcetion throw and no other exception</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTest.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTest.SuppressFlowTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Calling SuppressFlow on the SecurityContext before calling BeginInvoke
            </summary>
            <remarks>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.SecurityInsecureHelper">
            <summary>
             Calling SuppressFlow on the SecurityContext before calling BeginInvoke
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.SecurityInsecureHelper.PostingBadCode">
            <summary>
             Calling SuppressFlow on the SecurityContext before calling BeginInvoke
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple">
            <summary>
             Posing 1 item to the queues on inactive and adding several ScheduleChangePriority.
            </summary>
            <remarks>
                 <filename>ClearingScheduleSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posing 1 item to the queues on inactive and adding several ScheduleChangePriority, later clearing the schedulechange.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and HwndDispatcher</li>
             <li>Post 1 item to the dispatcher and add 10 ScheduleChangePriority on differente milliseconds</li>
             <li>Clear async the priorities, add a System Timer to quit the dispatcher after 2 second</li>
             <li>Run the Dispatcer</li>
             <li>Validate that the Item should not be called</li>
             </ol>
            Version: HwndDispatcher
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posing 1 item to the queues on inactive and adding several ScheduleChangePriority, later clearing the schedulechange.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and Win32Dispatcher</li>
             <li>Post 1 item to the dispatcher and add 10 ScheduleChangePriority on differente milliseconds</li>
             <li>Clear async the priorities, add a System Timer to quit the dispatcher after 2 second</li>
             <li>Run the Dispatcer</li>
             <li>Validate that the Item should not be called</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple.PostItem">
            <summary>
            post 1 Items to the queues and adding 10 Schedule Priorities
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple.ClearSchedules(MSAvalon.Threading.UIContextOperation)">
            <summary>
            Clearing Schedule
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearingScheduleSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain">
            <summary>
             Posing 1 item to the queues on inactive and adding several ScheduleChangePriority, Clear deadlines and add a new Deadline
            </summary>
            <remarks>
                 <filename>ClearingScheduleSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posing 1 item to the queues on inactive and adding several ScheduleChangePriority, Clear deadlines and add a new Deadline
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and HwndDispatcher</li>
             <li>Post 1 item to the dispatcher and add 10 ScheduleChangePriority on differente milliseconds</li>
             <li>ClearSchedule and Schedule another priority</li>
             <li>Run the Dispatcer</li>
             <li>Validate that the Item should not be called</li>
             </ol>
            Version: HwndDispatcher
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posing 1 item to the queues on inactive and adding several ScheduleChangePriority, Clear deadlines and add a new Deadline
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and HwndDispatcher</li>
             <li>Post 1 item to the dispatcher and add 10 ScheduleChangePriority on differente milliseconds</li>
             <li>ClearSchedule and Schedule another priority</li>
             <li>Run the Dispatcer</li>
             <li>Validate that the Item should not be called</li>
             </ol>
            Version: HwndDispatcher
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain.PostItem">
            <summary>
            post 1 Items to the queues and adding 10 Schedule Priorities
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain.ClearSchedules(MSAvalon.Threading.UIContextOperation)">
            <summary>
            Clearing Schedule
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Schedule.ClearScheduleandSetAgain._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestTwo">
            <summary>
            </summary>
            <remarks>
                 <filename>BeginInvokeSecurityTest.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestTwo.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestTwo.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestTwo.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the BeginInvoke get the SecurityContext.  Running the dispatcher on a trusted thread (Started on a untrusted). The 
            evil code posted in on the trusted dll
            Contexts Queues.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Add a handler to the OperationInitiated event. Later begin invoke a dummy item, posting items 2 (Normal and BG) the first execute insecure code (IO) that lives on the trusted assembly, the second one exits the dispatcher</li>
             <li>Create a Thread that it will run a dispatcher on a Assembly that have full trusted</li>
             <li>Wait One on until the other thread finished</li>
             <li>When the dispatcher exit validates there was a securityexpcetion throw and no other exception</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestTwo.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestThree">
            <summary>
            </summary>
            <remarks>
                 <filename>BeginInvokeSecurityTest.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestThree.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestThree.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestThree.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test the BeginInvoke get the SecurityContext.  Running the dispatcher on a trusted thread (Started on a untrusted). The 
            evil code posted in on the trusted dll and the posted code to post the evil code is on the trusted dll too.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a context and a HwndDispatcher</li>
                <li>Add a handler to the OperationInitiated event (the handler lives on the trusted assembly). Later begin invoke a dummy item, posting items 2 (Normal and BG) the first execute insecure code (IO) that lives on the trusted assembly, the second one exits the dispatcher</li>
                <li>Create a Thread that it will run a dispatcher on a Assembly that have full trusted</li>
                <li>Wait One on until the other thread finished</li>
                <li>When the dispatcher exit validates there was a securityexpcetion throw and no other exception</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.BeginInvoke.BeginInvokeSecurityTestThree.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple">
            <summary>
             This Class Contains two test cases to Promote several items sharing the same AutoReset Event.  The difference with the test cases
             it taht the first one implements using a HwndDispatcher and teh second one a Win32Dispathcer
             TODO: The behavior with the AutoResetEvent may change on M7
            </summary>
            <remarks>
                 <filename>PromoteItemwithEventSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Promote 11 items using 1 AutoResetEvent. Testing that we get all the promotion correctly
            // TODO: I told dwayne that Autoresetevent is not correctly use. He need to work
            // TODO: to see if this is the correct scenario.  I said this is not.
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and a HwndDispatcher</li>
             <li>Post 11 Items as Innactive</li>
             <li>Promote does 11 items to each priority (available on UIContextPrioriy, starting for below to top)  The promotion is base on 1 AutoResetEvent for all</li>
             <li>Post an Item to Signal the autoresetevent and trigger all.   </li>
             <li>HwndDispatcher.Attach, Loop, DeAtach</li>
             <li>Validating the Items are dispatched on the correct order. On the last one, Quit the dispathcer</li>
             <li>Validates 10 items were executed</li>
             </ol>
            Version: HwndDispatcher
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Promote 11 items using 1 AutoResetEvent. Testing that we get all the promotion correctly
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and a Win32Dispatcher</li>
             <li>Post 11 Items as Innactive</li>
             <li>Promote does 11 items to each priority (available on UIContextPrioriy, starting for below to top)  The promotion is base on 1 AutoResetEvent for all</li>
             <li>Post an Item to Signal the autoresetevent and trigger all.   </li>
             <li>Win32Dispatcher.Run</li>
             <li>Validating the Items are dispatched on the correct order. On the last one, Quit the dispathcer</li>
             <li>Validates 10 items were executed</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple._PromoteItems">
            <summary>
             Promoting all the items posted to a Time=MaxValue and all availables prioritiries on Avalon
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.ChangePriority(MSAvalon.Threading.UIContextOperation,System.Int32,System.TimeSpan,MSAvalon.Threading.UIContextPriority)">
            <summary>
             Change the priority to a time passed and the priority on the args. Also for each change an AutoResetEvent is store
             to signal the change later.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.SignalPromotion(System.Object)">
            <summary>
             Signal the Promotion of all the AutoResetEvents on the AutoResetEventArray
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple._PostItems">
            <summary>
            post 11 Items to the queues. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemwithEventSimple._count">
            <summary>
            
            </summary>     
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple">
            <summary>
             This Class contains 2 test cases
            </summary>
            <remarks>
                 <filename>PromoteMultipleAutoResetonSingleOperationSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
                <li> Post 1 Item as Inactive </li>
                <li> Promote the item using 5 AutoResetEvent to Trigger that</li>
                <li> Post 1 Item to Trigger the AutoResetEvent and make the promotion just one for the AutoResetEvent </li>
                <li> HwndDispatcher.Attach, Loop and DeAttach</li>
                <li> Validate the item promoted was dispatcher</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create a context and a Win32Dispatcher</li>
                <li> Post 1 Item as Inactive </li>
                <li> Promote the item using 5 AutoResetEvent to Trigger that</li>
                <li> Post 1 Item to Trigger the AutoResetEvent and make the promotion just one for the AutoResetEvent </li>
                <li> Win32Dispatcher.Run</li>
                <li> Validate the item promoted was dispatcher</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple._PostItems">
            <summary>
            Post 1 Items to the Context on Inactive Priority 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple._PromoteItems">
            <summary>
             Promoting the item posted to a Time=MaxValue and promote to Normal priority
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple.SignalPromotion(System.Object)">
            <summary>
             Signaling the item to be promoted.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple._count">
            <summary>
            
            </summary>     
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteMultipleAutoResetonSingleOperationSimple._uiContextOperationObject">
            <summary>
            This will hold a refence to the UIContextOperation that was return to the posted item to the Context
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple">
            <summary>
             This Class Contains two test cases to Promote several items sharing the same ManualReset Event.  The difference with the test cases
             it taht the first one implements using a HwndDispatcher and teh second one a Win32Dispathcer
            </summary>
            <remarks>
                 <filename>PromoteItemAlreadySignaledManualResetSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Promote 11 items using 1 ManualResetEvent. Testing that we get all the promotion correctly
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and a HwndDispatcher</li>
             <li>Post 11 Items as Innactive</li>
             <li>Promote does 11 items to each priority (available on UIContextPrioriy, starting for below to top)  The promotion is base on 1 ManualResetEvent (that is already Signal)for all</li>
             <li>HwndDispatcher.Attach, Loop, DeAtach</li>
             <li>Validating the Items are dispatched on the correct order. On the last one, Quit the dispathcer</li>
             <li>Validates 10 items were executed</li>
             </ol>
            Version: HwndDispatcher
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Promote 11 items using 1 ManualResetEvent. Testing that we get all the promotion correctly
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a Context and a Win32Dispatcher</li>
             <li>Post 11 Items as Innactive</li>
             <li>Promote does 11 items to each priority (available on UIContextPrioriy, starting for below to top)  The promotion is base on 1 ManualResetEvent that is alread signal for all</li>
             <li>Win32Dispatcher.Run</li>
             <li>Validating the Items are dispatched on the correct order. On the last one, Quit the dispathcer</li>
             <li>Validates 10 items were executed</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple._PromoteItems">
            <summary>
             Promoting all the items posted to a Time=MaxValue and all availables prioritiries on Avalon
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple.ChangePriority(MSAvalon.Threading.UIContextOperation,System.Int32,System.TimeSpan,MSAvalon.Threading.UIContextPriority)">
            <summary>
             Change the priority to a time passed and the priority on the args. Also for each change an AutoResetEvent is store
             to signal the change later.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple._PostItems">
            <summary>
            post 11 Items to the queues. 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.PromoteItemAlreadySignaledManualResetSimple._count">
            <summary>
            
            </summary>     
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Dispatching.ValidatesPriorityonDispatching">
            <summary>
            </summary>
            <remarks>
                 <filename>ValidatesPriorityonDispatching.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Dispatching.ValidatesPriorityonDispatching.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Dispatching.ValidatesPriorityonDispatching.ValidatingPrioritiesNormalRenderBackground(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             </ol>
                <filename>ValidatesPriorityonDispatching.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Dispatching.ValidatesPriorityonDispatching.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Dispatching.ValidatesPriorityonDispatching.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple">
            <summary>
                     
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li></li>
                 </ol>
                 
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.SetNormalValue(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Setting a context using SetContext API on UIContext. Also validating that when you create a TestContextObject the UIContexObject.Contex
                 is null.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a TestContextObject:UIContextObject</li>
                     <li>Validate that Context is Null</li>
                     <li>Create a UIContext</li>
                     <li>Call SetContext on TestContextObject on the TestContextObject</li>
                     <li>Validate the Context property with the new value</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructorOneParameterNormal(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Creating a UIContextObject with a constructor that has 1 parameter. The parameter is a valid context
                 is null.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a UIContext</li>
                     <li>Enter the Context</li>
                     <li>Create a TestContextObject:UIContextObject with the context as paramenter on the constructor</li>
                     <li>Exit the Context</li>
                     <li>Validate that Context property on the TesttContextObjectl</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructorOneParameterNoEnteringTheContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Creating a UIContextObject with a constructor that has 1 parameter. The parameter is valid but we don't enter the Context
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a UIContext</li>
                     <li>Create a TestContextObject:UIContextObject with the context as paramenter on the constructor</li>
                     <li>Validate that Context property on the TesttContextObjectl</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.SetNullValue(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Setting a context using SetContext passing a Null value. This should throw an exception
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a TestContextObject:UIContextObject</li>
                     <li>Validate that Context is Null</li>
                     <li>Call SetContext with Null value</li>
                     <li>Validate that an exception is thrown by the SetContext</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ReSetContextValue(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Resetting the context using SetContext.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a TestContextObject:UIContextObject</li>
                     <li>Validate that Context is Null</li>
                     <li>Create a UIContext</li>
                     <li>Call SetContext on TestContextObject on the TestContextObject</li>
                     <li>Validate the Context property with the new value</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructWithContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Setting a context using SetContext without entering the context. An exception should be thrown by Set Context becuase VerifyContext is called inside WPP code.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a TestContextObject:UIContextObject</li>
                     <li>Validate that Context is Null</li>
                     <li>Create a UIContext</li>
                     <li>Call SetContext on TestContextObject without entering the context</li>
                     <li>Validate an exception is thrown be SetContext</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructorZeroParameterNormal(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Creating a UIContextObject with a base constructor that has 0 parameter. The parameter is a valid context
                 is null.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a UIContext</li>
                     <li>Enter the Context</li>
                     <li>Create a TestContextObject:UIContextObject with Base constructor that has 0 parameters</li>
                     <li>Exit the Context</li>
                     <li>Validate that Context property on the TesttContextObjectl</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructorZeroParameterNoEnteringTheContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Creating a UIContextObject with a constructor that has 0 parameter. The parameter is valid but we don't enter the Context
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a UIContext</li>
                     <li>Create a TestContextObject:UIContextObject with base construtor Zero Parameter</li>
                     <li>Validate that Context property on the TesttContextObjectl</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructorZeroParameterNormalMultipleContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Creating two UIContextObject with a base constructor that has 0 parameter on a nested entered context.
                 This test case create a
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create two UIContext</li>
                     <li>Enter the ContextOne</li>
                     <li>Create a TestContextObject:UIContextObject with Base constructor that has 0 parameters</li>
                     <li>Enter the ContextTwo</li>
                     <li>Create a TestContextObject:UIContextObject with Base constructor that has 0 parameters</li>
                     <li>Exit the ContextOne</li>
                     <li>Exit the ContextTwo</li>        
                     <li>Validate that Context property on the Two TestContextObject</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.SetContextonUIContextObjectSimple.ConstructorOnDisposedContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Creating a TestUIContextObject on a disposed 
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a UIContext</li>
                     <li>Disposed the  UIContext</li>
                     <li>Enter the ContextOne</li>
                     <li>Create a TestContextObject:UIContextObject with Base constructor that has 0 parameters</li>
                     <li>A excpetion should be trhow.. </li>
                     <li>Exit the ContextOn</li>        
                     <li>Validate the expcetion is thrown</li>
                     <li>Enter the ContextOne</li>
                     <li>Create a TestContextObject:UIContextObject with Base constructor that has 1 parameter</li>
                     <li>A excpetion should be trhow.. </li>
                     <li>Exit the ContextOn</li>        
                     <li>Validate the expcetion is thrown</li>
                 </ol>
                 <filename>SetContextonUIContextObjectSimple.cs</filename>
            </remarks>        
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.TestContextObject">
            <summary>
               
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.TestContextObject.#ctor">
            <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.TestContextObject.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
                 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.TestContextObject.#ctor(System.Boolean)">
            <summary>
                 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Contexts.UIContextObjectTest">
            <summary>
            Multiple HwndSource with a Single Thread and Single Context
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.ChangingFromSet2Null(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Calling ChangeContext with a NULL value, overrideing ChangeContextCore with true
            </summary>
            <remarks>
                <ol>Scenarios steps:
                        <li>Creating a Context</li>
                        <li>Creating a UIContextObjectTest with default constructor</li>
                        <li>Validating o.Context </li>
                        <li>Enter Context </li>
                        <li>Call ChangeContext with NULL </li>
                        <li>Validating o.Context with NULL</li>
                </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.ChangingFromSet2NullNotValid(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Calling ChangeContext overriding with False the ChangeCoreValue Exception is expected
            </summary>
            <remarks>
                <ol>Scenarios steps:
                        <li>Creating a Context</li>
                        <li>Enter context, Creating a UIContextObjectTest with default constructor</li>
                        <li>Validating o.Context </li>
                        <li>Enter Context </li>
                        <li>Call ChangeContext with NULL </li>
                        <li>Validating an Excpetion was throw</li>
                </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.CreatingNullContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Calling ChangeContext overriding with False the ChangeCoreValue Exception is expected
            </summary>
            <remarks>
                <ol>Scenarios steps:
                        <li>Creating a Context</li>
                        <li>Enter context, Creating a UIContextObjectTest with default constructor</li>
                        <li>Validating o.Context </li>
                        <li>Enter Context </li>
                        <li>Call ChangeContext with NULL </li>
                        <li>Validating an Excpetion was throw</li>
                </ol>
            </remarks>       
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.DefaultChangeContextCore(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Calling ChangeContext without overriding ChangeCoreValue and passing null. Exception is expected
            </summary>
            <remarks>
                <ol>Scenarios steps:
                        <li>Creating a Context</li>
                        <li>Enter context, Creating a UIContextObjectTest with default constructor</li>
                        <li>Validating o.Context </li>
                        <li>Enter Context </li>
                        <li>Call ChangeContext with NULL </li>
                        <li>Validating an Excpetion was throw</li>
                </ol>
            </remarks>       
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.ChangingFromSet2NullNoinContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Calling ChangeContext without enteting the context that the object is owned. Exception is expected
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.ChangingWithoutBeOnNewContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.ChangingContext2Context(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.ChangingUsingSameContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTest">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTest.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTest.CanAcceptNull">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTest.ChangeContextCore(MSAvalon.Threading.UIContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTestTwo">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTestTwo.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Contexts.UIContextObjectTest.MyUIContextObjectTestTwo.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ChangingPriority">
            <summary>
             This Class contains 2 test cases for UIContextOperation.Priority change.
            </summary>
            <remarks>
                 <filename>ChangingPriority.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ChangingPriority.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ChangingPriority.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ChangingPriority.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Post 2 items one on send and one on inactive</li>
             <li>Dispatcher.Attach Loop and Dispatcher.Detach</li>
             <li>On the Send item: Every time repost itself to the queue on Send. Also changes the pririoty to the other item everytime</li>
             <li>The send item: also validates the priority change. it change the other item until send</li>
                <li> When the inactive item is on send we quit the dispatcher </li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ChangingPriority.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a Win32Dispatcher</li>
             <li>Post 2 items one on send and one on inactive</li>
             <li>Dispatcher.run</li>
             <li>On the Send item: Every time repost itself to the queue on Send. Also changes the pririoty to the other item everytime</li>
             <li>The send item: also validates the priority change. it change the other item until send</li>
                <li> When the inactive item is on send we quit the dispatcher </li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ChangingPriority._PostItems">
            <summary>
            Post 1 Items to the Context on Inactive Priority 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ContextPriority">
            <summary>
             This Class contains 2 test cases for UIContextOperation.Priority change.
            </summary>
            <remarks>
                 <filename>ContextPriority.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ContextPriority.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ContextPriority.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ContextPriority.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a 10 context and a HwndDispatcher</li>
             <li>Post 10 items on each context on Send Priority</li>
             <li>Dispatcher.run</li>
                <li> Validates 100 items are dispatched </li>		///  </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ContextPriority.RunWithWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a 10 context and a Win32Dispatcher</li>
             <li>Post 10 items on each context on Send Priority</li>
             <li>Dispatcher.run</li>
                <li> Validates 100 items are dispatched </li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.ContextPriority._PostItems">
            <summary>
            Post 10 Items to the each 10 Context on Send Priority 
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.UIContextOperationTestObject">
            <summary>
             This class has a reference to the Context and the UIContextOperation
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.UIContextOperationTestObject.#ctor(MSAvalon.Threading.UIContext)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.UIContextOperationTestObject.Context">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Promoting.UIContextOperationTestObject.Operation">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Time.UITimeFromDateTime">
            <summary>
             This Class contains 2 test cases for UITime
            </summary>
            <remarks>
                 <filename>UITimeFromDateTime.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromDateTime.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromDateTime.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromDateTime.SimpleRun(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 2 UITime using DateTime constructor (2 years of difference)</li>
                <li>Equals operator validation</li>
                <li> Greater and Greater and Equal Than validation</li>
                <li> Less and Less and Equal Than operator validation</li>
                <li>== and != operator validation</li>
                <li>Sustraction operator validation</li>
                <li>IsInfinity Property validation</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan">
            <summary>
             This Class contains 5 test cases for UITime 
            </summary>
            <remarks>
                 <filename>UITimeFromTimeSpan.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.None
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.SimpleRun(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 2 UITime using TimeSpan constructor (3 seconds  of difference)</li>
                <li>Equals operator validation</li>
                <li> Greater and Greater and Equal Than validation</li>
                <li> Less and Less and Equal Than operator validation</li>
                <li>== and != operator validation</li>
                <li>Sustraction operator validation</li>
                <li>IsInfinity Property validation</li>
             </ol>
                <filename>UITimeFromTimeSpan.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.InfinityValues(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 2 UITime using UITime.Inifinity</li>
                <li>Equals operator validation</li>
                <li> Greater and Greater and Equal Than validation</li>
                <li> Less and Less and Equal Than operator validation</li>
                <li>== and != operator validation</li>
                <li>Sustraction operator validation</li>
                <li>IsInfinity Property validation</li>
             </ol>
                <filename>UITimeFromTimeSpan.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.InfinityValueTimeSpanValue(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 2 UITime using TimeSpan constructor and other with infinity</li>
                <li>Equals operator validation</li>
                <li> Greater and Greater and Equal Than validation</li>
                <li> Less and Less and Equal Than operator validation</li>
                <li>== and != operator validation</li>
                <li>Sustraction operator validation</li>
                <li>IsInfinity Property validation</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.TimeSpanValueInfinityValue(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 2 UITime using Inifinty and TimeSpan constructor </li>
                <li>Equals operator validation</li>
                <li> Greater and Greater and Equal Than validation</li>
                <li> Less and Less and Equal Than operator validation</li>
                <li>== and != operator validation</li>
                <li>Sustraction operator validation</li>
                <li>IsInfinity Property validation</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.CompareToInvalid(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 1 UITime with TimeSpan(1)</li>
                <li>CompareTo Call with a invalid object and a Null value</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeFromTimeSpan.NowValidation(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Getting Now property on UITime, sleep the thread for 1 second and get another Now. Validating the second UITime is bigger than the first one.
            </summary>
            <remarks>
             <ol>Description Steps:
                <li>Create 1 UITime using Now</li>
                <li>Sleep the Thread</li>
                <li>Create 1 UITime using Now</li>
                <li>Validate Properties</li>
             </ol>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Time.UITimeTestHelper">
            <summary>
             This class contains a helper function
            </summary>
            <remarks>
                 <filename>UITimeTestHelper.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeTestHelper.ValidateSameValues(MSAvalon.Threading.UITime,MSAvalon.Threading.UITime,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Validates all the properties to compare to UITime are the same value
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Time.UITimeTestHelper.ValidateGreaterThanValues(MSAvalon.Threading.UITime,MSAvalon.Threading.UITime,Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             T2 is greater than T1
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple">
            <summary>
                     Creating two UITimers with 2 seconds and 3 seconds. Validating deliver time and order.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                     Creating two UITimers with 2 seconds and 3 seconds. Validating deliver time and order. Using a Win32Dispatcher
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating and Entering Context</li>
                     <li>Create a UITimer with 3 seconds with Normal</li>
                     <li>Create a UITimer with 2 seconds with Normal</li>
                     <li>Post an Item to Start the UITimer </li>
                     <li>Dispatcher.Run</li>
                     <li>The items to start the UITimer are dispatched. We take a 2 times, before each Start</li>
                     <li>When the UITimer are delivered we snap the time for each item.</li>
                     <li>We stop the dispatcher on the second item</li>
                     <li>Validate the time (Dispatcher - Starting)</li>
                     <li>Validating fire order</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                     Creating two UITimers with 2 seconds and 3 seconds. Validating deliver time and order. Using a HwndDispatcher
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating and Entering Context</li>
                     <li>Create a UITimer with 3 seconds with Normal</li>
                     <li>Create a UITimer with 2 seconds with Normal</li>
                     <li>Post an Item to Start the UITimer </li>
                     <li>Dispatcher.Run</li>
                     <li>The items to start the UITimer are dispatched. We take a 2 times, before each Start</li>
                     <li>When the UITimer are delivered we snap the time for each item.</li>
                     <li>We stop the dispatcher on the second item</li>
                     <li>Validate the time (Dispatcher - Starting)</li>
                     <li>Validating fire order</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerSimple.cs</filename>
            </remarks>        [CoreTestsLoader(CoreTestsTestType.MethodBase)]
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple._StartUITimers(System.Object)">
            <summary>
            Item to start both UITimers. Also get the time for each timer before Start the UITimer
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.ValidateThree(System.Object,System.EventArgs)">
            <summary>
            Items that Dispatch the UITimer.  Snap the times that is dispatched, and quits the dispatcher
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.ValidateTwo(System.Object,System.EventArgs)">
            <summary>
            Items that Dispatch the UITimer.  Snap the times that is dispatched. (Two Seconds)
            </summary>
            <param name="o"></param>
            <param name="args"></param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.twoEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.threeEnd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.twoStart">
            <summary>
            
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerSimple.threeStart">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerConstructor">
            <summary>
                     Creating two UITimers with 2 seconds and 3 seconds. Validating deliver time and order.
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating and Entering Context</li>
                     <li>Create a UITimer with 3 seconds with Normal</li>
                     <li>Create a UITimer with 2 seconds with Normal</li>
                     <li>Post an Item to Start the UITimer </li>
                     <li>Dispatcher.Run</li>
                     <li>The items to start the UITimer are dispatched. We take a 2 times, before each Start</li>
                     <li>When the UITimer are delivered we snap the time for each item.</li>
                     <li>We stop the dispatcher on the second item</li>
                     <li>Validate the time (Dispatcher - Starting)</li>
                     <li>Validating fire order</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerConstructor.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerConstructor.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerConstructor.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This testcase uses the Win32Dispatcher.Run
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerConstructor.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This testcase uses the HwndDispatcher.Attach == LOOP == HwndDispatcher.Deattach
            </summary>
            <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.CommonTimerVariables">
            <summary>
            Common call that holds common variables for all the timer cases
            </summary>       
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.CommonTimerVariables.TimeTolerance">
            <summary>
            Variable tolerance use on UITimer cases. 500 milliseconds is the tolerance
            </summary>       
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.TimersTest">
            <summary>
            
            </summary>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.TimersTest.#ctor(MSAvalon.Threading.UIContext,Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest[])">
            <summary>
            
            </summary>        
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.TimersTest.ValidateTimers(Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest[])">
            <summary>
            
            </summary> 
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.TimersTest.StartUITimersAsync(System.Object)">
            <summary>
            Item to start both UITimers. Also get the time for each timer before Start the UITimer
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.TimersTest.EndResults">
            <summary>        
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.#ctor">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.Interval">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.Tick">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.Priority">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.startTime">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.endTime">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.uiTimer">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerTest.ExitDispatcher">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap">
            <summary>
             This class is used on UITimers Test Cases
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap.ExpectedTime">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap.StartTime">
            <summary>
             This class is used on UITimers Test Cases
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap.EndTime">
            <summary>
             This class is used on UITimers Test Cases
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap.CostInSeconds">
            <summary>
             Return in Seconds value EndTime - StartTime
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.PerfCounterTimeSnap.CostInMilliseconds">
            <summary>
             Return in Seconds value EndTime - StartTime
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrue">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrue.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrue.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrue.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the Win32Dispatcher
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true</li>
                     <li>Dispather Starts</li>
                     <li>After 1 second the Timer should be called. Validating the IsEnable is true. Set False and later validate for false</li>
                     <li>Validate deliver time 1 second</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrue.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true</li>
                     <li>Dispather Starts</li>
                     <li>After 1 second the Timer should be called. Validating the IsEnable is true. Set False and later validate for false</li>
                     <li>Validate deliver time 1 second</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerSimple.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableFalse">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableFalse.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableFalse.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableFalse.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer (1 second) using Start API ... right after I set IsEnabled=false. This should stop the Timer  with Win32Dispathcer
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Start the timer Start() and later set IsEnable = False.  Validate should be false, true and later false. Posting a UITimer 2 secs to stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>if timer is called we throw an exception. Exit Timer should be called</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnabledFalse.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableFalse.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer (1 second) using Start API ... right after I set IsEnabled=false. This should stop the Timer. With HwndDispatcher 
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Start the timer Start() and later set IsEnable = False.  Validate should be false, true and later false. Posting a UITimer 2 secs to stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>if timer is called we throw an exception. Exit Timer should be called</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnabledFalse.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrueMultipleCall">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrueMultipleCall.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrueMultipleCall.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrueMultipleCall.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher. 
             Letting the same item to be executed 10 times without posting another. Later Stop the dispath
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a Win32Dispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true. Let continue reposting 10 times later stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>After 200 millisecond the Timer should be called.</li>
                     <li>Validate it is deliver 10 times with 200 seconds all the times</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnableTrueMultipleCall.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerEnableTrueMultipleCall.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher. 
             Letting the same item to be executed 10 times without posting another. Later Stop the dispath
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true. Let continue reposting 10 times later stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>After 200 millisecond the Timer should be called.</li>
                     <li>Validate it is deliver 10 times with 200 seconds all the times</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnableTrueMultipleCall.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStopSimple">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStopSimple.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStopSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStopSimple.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher. 
             Letting the same item to be executed 10 times without posting another. Later Stop the dispath
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a Win32Dispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true. Let continue reposting 10 times later stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>After 200 millisecond the Timer should be called.</li>
                     <li>Validate it is deliver 10 times with 200 seconds all the times</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnableTrueMultipleCall.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStopSimple.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher. 
             Letting the same item to be executed 10 times without posting another. Later Stop the dispath
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true. Let continue reposting 10 times later stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>After 200 millisecond the Timer should be called.</li>
                     <li>Validate it is deliver 10 times with 200 seconds all the times</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnableTrueMultipleCall.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartMultipleThreadMultipleContext">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartMultipleThreadMultipleContext.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartMultipleThreadMultipleContext.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartMultipleThreadMultipleContext.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating Two Thread and Post 3 items each thread on multiple context. Using Win32Dispatcher
             Validating all the items should be called and the times are correct
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a Win32Dispatcher</li>
                     <li>Creating a 2 UIContext and Registering the 2 Context on the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>Async Creating create two threads</li>
                     <li>Each thread create 3 Uitimer on a different two context</li>
                     <li>Posting a exit dispatcher at 2 seconds</li>
                     <li>Validate 6 timers are delivare that the correct time</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerStartMultipleThreadMultipleContext.cs</filename>
            </remarks>        [CoreTestsLoader(CoreTestsTestType.MethodBase)]
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartMultipleThreadMultipleContext.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating Two Thread and Post 3 items each thread on multiple context. Using HwndDispatcher
             Validating all the items should be called and the times are correct
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a 2 UIContext and Registering the 2 Context on the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>Async Creating create two threads</li>
                     <li>Each thread create 3 Uitimer on a different two context</li>
                     <li>Posting a exit dispatcher at 2 seconds</li>
                     <li>Validate 6 timers are delivare that the correct time</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerStartMultipleThreadMultipleContext.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartStopStart">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartStopStart.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartStopStart.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartStopStart.RunWin32Dispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher. 
             Letting the same item to be executed 10 times without posting another. Later Stop the dispath
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a Win32Dispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true. Let continue reposting 10 times later stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>After 200 millisecond the Timer should be called.</li>
                     <li>Validate it is deliver 10 times with 200 seconds all the times</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnableTrueMultipleCall.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerStartStopStart.RunHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and Starting the UITimer is IsEnabled = true. This is using the HwndDispatcher. 
             Letting the same item to be executed 10 times without posting another. Later Stop the dispath
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating a HwndDispatcher</li>
                     <li>Creating a UIContext and Registering the Context</li>
                     <li>Creating a UITimer with Context and Priority Normal</li>
                     <li>Setting 1 second and the Handler</li>
                     <li>Posting an Item to SystemIdle to Set Enable = true.  Validate should be false and later true. Let continue reposting 10 times later stop the dispatcher</li>
                     <li>Dispather Starts</li>
                     <li>After 200 millisecond the Timer should be called.</li>
                     <li>Validate it is deliver 10 times with 200 seconds all the times</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerEnableTrueMultipleCall.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posting an item an later aborting the item. After aborting the item, we schedule a change of priority.
            Validate The item is aborted. Validate that you can schedule something without an exception. Validate Operation is not complete and not dispatched
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a TestDispatcher</li>
             <li>Post an Item to inactive priority</li>
             <li>Abort the Operation and Schedule a change of priority on a event handle. Post an item on 1 sec to exit the dispatcher. Posting an item to signal.</li>
             <li>The aborted item should not be called. Throw an exception</li>
             <li>Exit the dispatcher</li>
             <li>Validate the IsCompleted is not true</li>
             </ol>
                <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posting an item an later aborting the item. After aborting the item, we schedule a change of priority.
            Validate The item is aborted. Validate that you can schedule something without an exception. Validate Operation is not complete and not dispatched
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Post an Item to inactive priority</li>
             <li>Abort the Operation and Schedule a change of priority on a event handle. Post an item on 1 sec to exit the dispatcher. Posting an item to signal.</li>
             <li>The aborted item should not be called. Throw an exception</li>
             <li>Exit the dispatcher</li>
             <li>Validate the IsCompleted is not true</li>
             </ol>
                <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple._AbortScheduleItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple._PostItems">
            <summary>
            Post 1 Item to Normal Priority
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple._HandlerSet(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple._ExitHandler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortandChangeScheduleSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posting an item an later aborting the item. After aborting the item, we schedule a change of priority.
            Validate The item is aborted. Validate that you can schedule something without an exception. Validate Operation is not complete and not dispatched
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a TestDispatcher</li>
             <li>Post an Item to inactive priority</li>
             <li>Abort the Operation and Schedule a change of priority on a event handle. Post an item on 1 sec to exit the dispatcher. Posting an item to signal.</li>
             <li>The aborted item should not be called. Throw an exception</li>
             <li>Exit the dispatcher</li>
             </ol>
                <filename>AbortFalseSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Posting an item an later aborting the item. After aborting the item, we schedule a change of priority.
            Validate The item is aborted. Validate that you can schedule something without an exception. Validate Operation is not complete and not dispatched
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and a HwndDispatcher</li>
             <li>Post an Item to inactive priority</li>
             <li>Abort the Operation and Schedule a change of priority on a event handle. Post an item on 1 sec to exit the dispatcher. Posting an item to signal.</li>
             <li>The aborted item should not be called. Throw an exception</li>
             <li>Exit the dispatcher</li>
             </ol>
                <filename>AbortFalseSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple._PostItems">
            <summary>
            Post 1 Item to Normal Priority
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortFalseSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>ScheduleAbortSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ScheduleAbort on a BackGround Item that it is on the queue
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and TestDispatcher</li>
             <li>Post 10 items on background and other on background that it will throw an exception if it is handled</li>
             <li>Schedule an Abort for the last item posted using a AutoResetEvent</li>
             <li>Dispatch 20 items</li>
             <li>When the 6 items posted is dispatched, we signal the Event. This should abort the item</li>
             <li>An exception is thrown if the item is dispatched</li>
             </ol>
                <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            ScheduleAbort on a BackGround Item that it is on the queue
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and HwndDispatcher</li>
             <li>Post 10 items on background and other on background that it will throw an exception if it is handled</li>
             <li>Schedule an Abort for the last item posted using a AutoResetEvent</li>
             <li>Run the Dispatcher</li>
             <li>When the 6 items posted is dispatched, we signal the Event. This should abort the item</li>
             <li>An exception is thrown if the item is dispatched</li>
             </ol>
                <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple._AbortScheduleItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple._PostItems">
            <summary>
            Post 1 Item to Normal Priority
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple._xHandler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple._ExitHandler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.ScheduleAbortSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>ScheduleAbortSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This is not used.
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple.RunWithTestDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Abort first, middle, and last on the same priority twice. Validating return value and execution
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and TestDispatcher</li>
             <li>Post 10 items on background and other on background that it will throw an exception if it is handled</li>
             <li>Abort index 0,5,9 (first, middle and last); validate that Abort should return true, then reAbort the same should return false</li>
             <li>Run the Dispatcher</li>
             <li>throw an exception if any of the items is handled, on the 8 we post a exit dispathcer on SystemIdle</li>
             </ol>
                <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple.RunWithHwndDispatcher(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Abort first, middle, and last on the same priority twice. Validating return value and execution
            </summary>
            <remarks>
             <ol>Description Steps:
             <li>Create a context and HwndDispatcher</li>
             <li>Post 10 items on background and other on background that it will throw an exception if it is handled</li>
             <li>Abort index 0,5,9 (first, middle and last); validate that Abort should return true, then reAbort the same should return false</li>
             <li>Run the Dispatcher</li>
             <li>throw an exception if any of the items is handled, on the 8 we post a exit dispathcer on SystemIdle</li>
             </ol>
                <filename>AbortandChangeScheduleSimple.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple._AbortItems">
            <summary>
            
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple._PostItems">
            <summary>
            Post 1 Item to Normal Priority
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple._Handler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple._ExitHandler(System.Object)">
            <summary>
            This is the delegate that we are posting to the queues.
            </summary>
            <param name="o">Priority that we post the item</param>
            <returns></returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Queues.Aborting.AbortTwiceSimple.ContextRef">
            <summary>
            
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.InvokeSimple">
            <summary>
                     
            </summary>
            <remarks>
                 <filename>InvokeSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.InvokeSimple.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.InvokeSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Call Invoke on Context and create a UIElement without entering the context. Validate the UIElement can be created
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context</li>
                     <li>Call Invoke (No Params)</li>
                     <li>On the handler, just create a UIElement</li>
                     <li>On the main... Validate the item is created</li>
                 </ol>        
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.InvokeSimple.InvokeArgs(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context</li>
                     <li>Call Invoke and pass an string</li>
                     <li>On the handler, just create a UIElement and validate the string parameter</li>
                     <li>On the main... Validate the item is created</li>
                 </ol>
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.InvokeSimple.InvokeThreadArgs(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context and a HwndDispatcher</li>
                     <li>Post an item to the context</li>
                     <li>Create a new STA Thread and Start the thread.  One the thread there is a WaitOne before start</li>
                     <li>Dispatcher.Run() ---  </li>
                     <li>During the posted item is handled we signal the thread to continue</li>
                     <li></li>
                     <li></li>
                     <li>On the handler, just create a UIElement</li>
                     <li>On the main... Validate the item is created</li>
                 </ol>
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.InvokeSimple.InvokeThreadBusy(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Entering the Context for 3 seconds and the Invoke on other thread waits.  Validate the milliseconds are correct 3000 (+-100 error)
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context </li>
                     <li>Post an item to the context</li>
                     <li>Create a new STA Thread and Start the thread.  One the thread there is a WaitOne before start</li>
                     <li>Enter the context, snap the time and Thread.Sleep 3000 </li>
                     <li>The other thread is signal to Invoke.  When invoke is called, we snap the time</li>
                     <li>Validate the time is around 3000 millisecond the diff between snaps</li>
                     <li></li>
                     <li>On the handler, just create a UIElement</li>
                     <li>On the main... Validate the item is created</li>
                 </ol>
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.OperationAbortedDelegateSimple">
            <summary>
                     
            </summary>
            <remarks>
                 <filename>InvokeSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.OperationAbortedDelegateSimple.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.OperationAbortedDelegateSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context</li>
                 </ol>        
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.OperationAbortedDelegateSimple.AddRemoveEvent(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context</li>
                 </ol>        
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.OperationPriorityChangedDelegateSimple">
            <summary>
                     
            </summary>
            <remarks>
                 <filename>InvokeSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.OperationPriorityChangedDelegateSimple.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.OperationPriorityChangedDelegateSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context</li>
                 </ol>        
                 <filename>OperationPriorityChangedDelegateSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.OperationPriorityChangedDelegateSimple.AddRemoveEvent(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create a context</li>
                 </ol>        
                 <filename>InvokeSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.HwndSourceSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.SimpleFiltering(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                     
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context, mouse is on 0,0 coordinates</li>
                 </ol>
                 <filename>ExceptionFilerSimpleCase.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.ThrowException(System.Object)">
            <summary>
                     
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.filterHandler(System.Object,MSAvalon.Threading.ExceptionFilterEventArgs)">
            <summary>
                     
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.exitDispatcher(System.Object)">
            <summary>
                     
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExceptionFiltering.ExceptionFilterSimpleCase.contextHandler(System.Object,MSAvalon.Threading.ContextExceptionEventArgs)">
            <summary>
                     
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSimple">
            <summary>
                     
            </summary>
            <remarks>
                 <filename>RegisterServiceSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSimple.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating Register a Service for the Context and Later create the context.  The service should be called
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create Win32Dispatcher</li>
                     <li>Register Service</li>
                     <li>Create a context </li>
                     <li>Run the dispatcher </li>
                     <li>Validates the service is called</li>
                 </ol>        
                 <filename>RegisterServiceSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSimple.CreateRegisterCreate(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Create Win32Dispatcher and a UIContext</li>
                     <li>Register Service</li>
                     <li>Create a context </li>
                     <li>Run the dispatcher </li>
                     <li>Validates the service is called for both Context</li>
                 </ol>        
                 <filename>RegisterServiceSimple.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest">
            <summary>
                     
            </summary>
            <remarks>
                 <filename>RegisterServiceSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.ParamValidation(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Register Service with Null Value</li>
                     <li>Validates a correct Expcetion is thrown</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.RegisterTwice(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register the same Handler Twice.
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Register Service with the same handler twice</li>
                     <li>Creating a UIContext</li>
                     <li>BeginInvoke exit dispatcher</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.RegisterMultipleHandlerSimple(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register two services and create a UIContext later... validating the two services are called
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Register two services  </li>
                     <li>Creating a UIContext</li>
                     <li>BeginInvoke exit dispatcher</li>
                     <li>Validating the services are called and the parameters on the event</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.RegisterMultipleHandlerSimpleCreatingUIContextBefore(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register two services and create a UIContext before... validating the two services are called
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Register two services  </li>
                     <li>BeginInvoke exit dispatcher</li>
                     <li>Validating the services are called and the parameters on the event</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.RegisterMultipleHandlerSimpleCreatingMultipleUIContextBefore(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register 5 services and create 10 UIContext before... validating the five services are called
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 10 UIContext </li>
                     <li>Register 5 services  </li>
                     <li>BeginInvoke exit dispatcher on 1 Context</li>
                     <li>Validating the services are called and the parameters on the event</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.RegisterMultipleHandlerSimpleCreatingMultipleUIContextAfter(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register 5 services and create 10 UIContext after... validating the five services are called
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Register 5 services  </li>
                     <li>Creating 10 UIContext </li>        
                     <li>BeginInvoke exit dispatcher on 1 Context</li>
                     <li>Validating the services are called and the parameters on the event</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.RegisterMultipleHandlerSimpleCreatingMultipleUIContextBeforeAfter(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register 5 services and create 5 UIContext before and 5 UICOntext after... validating the five services are called for the 10 UICOntext
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 5 UIContext </li>        
                     <li>Register 5 services  </li>
                     <li>Creating 5 UIContext </li>        
                     <li>BeginInvoke exit dispatcher on 1 Context</li>
                     <li>Validating the services are called and the parameters on the event</li>
                 </ol>        
                 <filename>RegisterServiceTest.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.ContextBag">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.ContextBag.#ctor(MSAvalon.Threading.UIContext,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.ContextBag.Context">
            <summary>
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Services.RegisterServiceTest.ContextBag.BoolValue">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSecurity">
            <summary>
                     
            </summary>
            <remarks>
                 <filename>RegisterServiceSimple.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSecurity.#ctor">
            <summary>
            
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSecurity.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Services.RegisterServiceSecurity.RegisterInsecureCall(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Register an Insecure Service.. this should throw a security exception.
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Register Service with the same handler </li>
                     <li>Creating a UIContext</li>
                     <li>BeginInvoke exit dispatcher</li>
                     <li>The insecure handler reads the local directory</li>
                 </ol>        
                 <filename>RegisterServiceSecurity.cs</filename>
            </remarks>
             <param name="framework"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.DriverTest">
            <summary>
             Test cases for the Driver
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.DriverTest.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.DriverTest.SecurityWork(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Validates the Security throws an exception
            </summary>
            <remarks>
            </remarks>
            <param name="Frmwk"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.XamlTestRunner">
             <summary>
                 
            </summary>
             <remarks>
             </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.RunCompileCase(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.RunBamlReaderWriterCase(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for test cases of type BamlReaderWriter.
            It does the following things:
            1. Compiles the given XAML to BAML. 
            2. Creates an object tree from this BAML using LoadBaml()
            3. Uses BamlHelper.CopyBaml to read this BAML using BamlReader and 
               create a new BAML using BamlWriter, with the same contents
            4. Creates an object tree from this second BAML using LoadBaml()
            5. Compares the object trees in Step 2 and Step 4, recursively, to make sure that 
               they are the same. If they are, it passes the test. If not, the test fails.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.RunLoadParser(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.ApplicationFilterMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.Quit(System.Object)">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.XamlTestRunner.CreateContext">
            <summary>
            Creating UIContext
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.ExecuteFileTestCase">
             <summary>
                 
            </summary>
             <remarks>
                     <ol>Scenarios steps:
                     <li>The main thread creates 5 thread that it will execute these:</li>
                     </ol>
             </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExecuteFileTestCase.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.ExecuteFileTestCase.ExecuteFile(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT1">
             <summary>
             This test case is designed to test a simple Resource reference on a Framework Element like StackPanel
             </summary>
             <remarks>
             <ol>
             <li>Create StackPanel</li>
             <li>Set its Resources Property to a Resource Dictionary</li>
             <li>Set the VerticalAlignment property to a value in the Resource</li> 
             <li>Verify the VerticalAlignment Property of the StackPanel is set correctly</li>
             <li>Now Directly change the VerticalAlignment property of the StackPanel</li>
             <li>Verify the VerticalAlignment Property</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT1.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT2">
             <summary>
             Test whether the default property is evaluated when the Resource reference on a Framework elemet is made null
             </summary>
             <remarks>
             <ol>
             <li>Create StackPanel</li>
             <li>Set its Resources Property to a Resource Dictionary</li>
             <li>Set the VerticalAlignment property to a value in the Resource</li> 
             <li>Verify the VerticalAlignment Property of the StackPanel is set correctly</li>
             <li>Make the StackPanel Resource null</li>
             <li>Verify the VerticalAlignment Property and see that we get the default value</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT2.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT3">
            <summary>
            This Testcase is designed to test the FindResource method on a FrameworkElement like StackPanel etc
            </summary>
            <remarks>
            Create a tree structure
            StackPanel
            -Border
            --DocPanel
            <ol>
            <li>Set the Resources Property to a Resource Dictionary on the StackPanel and Border</li>
            <li>Call FindResource on StackPanel,Border, DockPanel and verify the values</li> 
            </ol> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT3.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT4">
             <summary>
             This test case is designed to test setResource reference on a FrameworkContentElement like Paragraph
             </summary>
             <remarks>
             Create Tree
             StackPanel
             -Border
             --TextPanel
             ---Para
             <ol>
             <li>Set StackPanel's Resources Property to a Resource Dictionary</li>
             <li>Set the FontWeight property of the Paragraph to a value in the Resource</li> 
             <li>Verify the FontWight Property of the Paragraph is set correctly</li>
             <li>Now Directly change the FontWeight property of Paragraph</li>
             <li>Verify the FontWight Property</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT4.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT5">
             <summary>
             This test case is designed to test Resource reference on a FrameworkContentElement like Paragraph
             </summary>
             <remarks>
             Create Tree
             StackPanel
             -Border
             --TextPanel
             ---Para
             <ol>
             <li>Set TextPanel's Resources Property to a Resource Dictionary</li>
             <li>Set the FontWeight property of the Paragraph to a value in the Resource</li> 
             <li>Verify the FontWight Property of the Paragraph is set correctly</li>
             <li>Now Directly change the FontWeight property of Paragraph</li>
             <li>Verify the FontWight Property</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT5.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT6">
             <summary>
             This test case is designed to test FindResources on a FrameworkContenElement(Paragraph) and FrameworkElement(StackPanel, TextPanel)
             </summary>
             <remarks>
             Create Tree
             StackPanel
             -Border
             --TextPanel
             ---Para
             <ol>
             <li>Set StackPanel's Resources Property to a Resource Dictionary</li>
             <li>Set TextPanel's Resources Property to a Resource Dictionary</li>
             <li>Set Paragraph's Resource Property to a Resource Dictionary</li> 
             <li>Verify values obtained by Paragraph.FindResource </li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT6.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT7">
             <summary>
             This test case is designed to test Invalidation of  ResourceReference
             </summary>
             <remarks>
             Create Tree
             StackPanel
             -Border
             --TextPanel
             ---Para
             <ol>
             <li>Set StackPanel's Resources Property to a Resource Dictionary</li>
             <li>Set TextPanel's Resources Property to a Resource Dictionary</li>
             <li>verify values in sub tree</li> 
             <li>Change the Resource Property of the StackPanel to a new value </li>
             <li>Change the Resource Property of the Paragraph to a new value </li>
            <li>verify values</li> 
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT7.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT8">
             <summary>
             This test case is designed to test Application resources, FrameworkContent element(Paragraph here) is tested for fallback to Application Resources
             </summary>
             <remarks>
             <ol>
             <li>Create Application</li>
             <li>Set resources on the Application</li>
             <li>Handle the Startup event</li> 
             <li>Run the Application </li>
             <li>In the Startup event handler. </li>
             <li>Create an element tree</li> 
             <li>Assign the FontWeight property of Paragraph a value in the resource </li>
             <li>Verify Paragraph's FontWeight before the tree is added to the Window</li>
             <li>Verify Paragraph's FontWeight after the tree is added to the Window</li>
             <li>Verify Paragraph's FontWeight after changing the value directly</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT8.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT9">
             <summary>
             This test case is designed to test Application resources, Framework element(Button) is tested for fallback to Application Resources
             </summary>
             <remarks>
             <ol>
             <li>Create Application</li>
             <li>Set resources on the Application</li>
             <li>Handle the Startup event</li> 
             <li>Run the Application </li>
             <li>In the Startup event handler. </li>
             <li>Create an element tree</li> 
             <li>Assign the FontWeight property of Button a value in the resource </li>
             <li>Verify Button's FontWeight before the tree is added to the Window</li>
             <li>Verify Button's FontWeight after the tree is added to the Window</li>
             <li>Verify Button's FontWeight after changing the value directly</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT9.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT10">
             <summary>
             Test Framework Element (Button) take value form the tree when we have resources both in the tree and the application
             </summary>
             <remarks>
             <ol>
             <li>Create Application</li>
             <li>Set resources on the Application</li>
             <li>Handle the Startup event</li> 
             <li>Run the Application </li>
             <li>In the Startup event handler. </li>
             <li>Create an element tree</li> 
             <li>Set a resource on the StackPanel</li> 
             <li>Assign the FontWeight and FontStyle property of Button a value in the resource </li>
             <li>Verify Button's FontWeight and FontStyle before the tree is added to the Window</li>
             <li>Verify Button's FontWeight and FontStyle after the tree is added to the Window</li>
             <li>Verify Button's FontWeight and FontStyle after changing the value directly</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT10.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT11">
             <summary>
             Test FrameworkContent Element (Paragraph) take value form the tree when we have resources both in the tree and the application
             </summary>
             <remarks>
             <ol>
             <li>Create Application</li>
             <li>Set resources on the Application</li>
             <li>Handle the Startup event</li> 
             <li>Run the Application </li>
             <li>In the Startup event handler. </li>
             <li>Create an element tree</li> 
             <li>Set a resource on the StackPanel</li> 
             <li>Assign the FontWeight and FontStyle property of Paragraph a value in the resource </li>
             <li>Verify Paragraph's FontWeight and FontStyle before the tree is added to the Window</li>
             <li>Verify Paragraph's FontWeight and FontStyle after the tree is added to the Window</li>
             <li>Verify Paragraph's FontWeight and FontStyle after changing the value directly</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT11.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT12">
            <summary>
            Test FrameworkContent Element's (Here Paragraph) and Application's FindResouce method, when there are resources in the tree and the application 
            </summary>
            <remarks>
            <ol>
            <li>Create Application</li>
            <li>Set resources on the Application</li>
            <li>Handle the Startup event</li> 
            <li>Run the Application </li>
            <li>In the Startup event handler. </li>
            <li>Create an element tree</li> 
            <li>Set a resource on the StackPanel, Paragraph</li> 
            <li>Verify values obtained by Para.FindResource </li>
            </ol> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT12.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT13">
            <summary>
            Test Framework Element's (Here Button) FindResouce method, when there are resources in the tree and the application 
            </summary>
            <remarks>
            <ol>
            <li>Create Application</li>
            <li>Set resources on the Application</li>
            <li>Handle the Startup event</li> 
            <li>Run the Application </li>
            <li>In the Startup event handler. </li>
            <li>Create an element tree</li> 
            <li>Set a resource on the StackPanel, button</li> 
            <li>Verify values obtained by Button.FindResource </li>
            </ol> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT13.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT14">
            <summary>
            Testing Invalidation on the Application
            </summary>
            <remarks>
            <ol>
            <li>Create Application</li>
            <li>Set resources on the Application</li>
            <li>Handle the Startup event</li> 
            <li>Run the Application </li>
            <li>In the Startup event handler. </li>
            <li>Create an element tree</li> 
            <li>Set a resource on the StackPanel, button, TextPanel</li> 
            <li>Verify values </li>
            <li>Change the Resource on the Application </li>
            <li>Verify the new values</li>
            </ol> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT14.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT15">
            <summary>
            Testing locally set values after invalidation of Resource on the Application
            </summary>
            <remarks>
            <ol>
            <li>Create Application</li>
            <li>Set resources on the Application</li>
            <li>Handle the Startup event</li> 
            <li>Run the Application </li>
            <li>In the Startup event handler. </li>
            <li>Create an element tree</li> 
            <li>Set a resource on the StackPanel, button, Paragraph</li> 
            <li>Locally set new values </li>
            <li>Change the Resource on the Application </li>
            <li>Verify the new values</li>
            </ol> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT15.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT16">
            <summary>
            Testing Invalidation on the Application when Application Resource is set to null
            </summary>
            <remarks>
            <ol>
            <li>Create Application</li>
            <li>Set resources on the Application</li>
            <li>Handle the Startup event</li> 
            <li>Run the Application </li>
            <li>In the Startup event handler. </li>
            <li>Create an element tree</li> 
            <li>Set a resource on the StackPanel, button, TextPanel</li> 
            <li>Verify values </li>
            <li>Change the Resource on the Application </li>
            <li>Verify the new values</li>
            </ol> 
            </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT16.RunTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Resources.BVT17">
             <summary>
             Test whether the default property is evaluated when the Resource reference on a Framework elemet is made null
             </summary>
             <remarks>
             Create Tree
             StackPanel
             -Border
             --TextPanel
             ---Para
             <ol>
             <li>Set Resources on the Paragraph</li>
             <li>Set the FontWeight property to a value in the Resource</li> 
             <li>Verify the FontWeight Property of the StackPanel is set correctly</li>
             <li>Make the Paragraph Resource null</li>
             <li>Verify the FontWeight Property and see that we get the default value</li>
            </ol> 
             </remarks>
        </member>
        <member name="M:Avalon.Test.Resources.BVT17.Test">
            <summary>
            Test case 
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.Nested.NestedPumpExitIncorrectOrder">
            <summary>
                     Calling nested pump twice and tried to exit on different order
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Creating 1 context and Enter the context, mouse is on 0,0 coordinates</li>
                     <li>Push a frame Frame1</li>
                     <li>Push a Frame2</li>
                     <li>Exit Frame1</li>
                     <li>Exit Frame2</li>
                     <li>Validate they exit correctlyy</li>
                 </ol>
                 <filename>NestedPumpExitIncorrectOrder.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.NestedPumpExitIncorrectOrder.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextEnteringSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.Nested.NestedPumpExitIncorrectOrder.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.PushFrameTest">
            <summary>
            </summary>
            <remarks>
                 <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.PushFrameTest.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.PushFrameTest.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Quiting the dispatcher from different thread.
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
             </ol>
                <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.PushFrameTest.QuitAndPushFrameQuitScenario(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Quiting the dispatcher from different thread.
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
             </ol>
                <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher">
            <summary>
            </summary>
            <remarks>
                 <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Testing Hosting a HwndHost that contains avalon with another HwndDispatcher and Context
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
             </ol>
                <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher.OnExit(System.Object,MSAvalon.Windows.ExitEventArgs)">
            <summary>
            </summary>        
            <remarks>
            </remarks>
        </member>
        <member name="F:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher.w">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher.ClickButton(System.Object)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.HostingAvalonWithaDispatcher.Click(System.Object,MSAvalon.Windows.Controls.RoutedEventArgs)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.AppTestHostingAvalon">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.AppTestHostingAvalon.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple">
            <summary>
            </summary>
            <remarks>
                 <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Testing Hosting a HwndHost that contains avalon with another HwndDispatcher and Context
            </summary>
            <remarks>
             <ol>Description Steps:
                 <li>Create a Win32Dispatcher</li>
             </ol>
                <filename>HwndDispatcherMultipleThreads.cs</filename>
            </remarks>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.OnExit(System.Object,MSAvalon.Windows.ExitEventArgs)">
            <summary>
            </summary>        
            <remarks>
            </remarks>
        </member>
        <member name="F:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.w">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.ClickButton(System.Object)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.Click(System.Object,MSAvalon.Windows.Controls.RoutedEventArgs)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.ClickExit(System.Object,MSAvalon.Windows.Controls.RoutedEventArgs)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="M:Avalon.Test.Framework.Dispatchers.SurviveWin32NestedSimple.ClickHere(System.Object,MSAvalon.Windows.Controls.RoutedEventArgs)">
            <summary>Clicks on the Button.</summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventManagerRegisterRoutedIDBoundaryCheck">
            <summary>
            Test check invalid input for registering at class EventManager
            </summary>
            <remarks>
            <para/>
            The test case check invalid input for founctions at EventManage class:  RegisterRoutedEventID
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            Reviewed by: Microsoft
            <para/>
            <para/>
            FileName:  EventManagerRoutedIDBoundaryCheck.cs
            <para/>
            <ol>Scenarios covered:
            <li>Register a new RoutedEventID with null name</li>
            <li>Register a new RoutedEventID with null handlerType</li>
            <li>Register a new RoutedEventID with null ownerType</li>
            <li>Register a new RoutedEventID which is already there</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventManagerRegisterRoutedIDBoundaryCheck.#ctor">
            <summary>
            Constructor for class EventManagerRoutedIDBoundaryCheck 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventManagerRegisterRoutedIDBoundaryCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RaiseEventParaCheck">
            <summary>
            Raise Event with a none Event ID.
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RaiseEventParaCheck.cs
            <para/>
            <ol>Scenarios covered:
            	checking null args for RaiseEvent on ContentElement
            	checking null args for RaiseEvent on UIElement
            	checking the exception for setSource before EventID is set. 
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventParaCheck.#ctor">
            <summary>
            Constructor for class RaiseEventParaCheck 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RaiseEventParaCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AddInstanceHandlerUIElementParameterCheck">
            <summary>
            Add instance handler for bubble event onto content element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  AddInstanceHandlerUIElementParameterCheck.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the UI element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceHandlerUIElementParameterCheck.#ctor">
            <summary>
            Constructor for class AddInstanceBubbleOnContentElement 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceHandlerUIElementParameterCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.AddInstanceHandlerContentElementParameterCheck">
            <summary>
            Add instance handler for bubble event onto content element and raise event
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  AddInstanceHandlerContentElementParameterCheck.cs
            <para/>
            <ol>Scenarios covered:
            <li>Create a RoutedEventID</li>
            <li>Create a new Content Element</li>
            <li>Add 3 handlers onto the Content element, HandedEventToo=false</li>
            <li>Raise Event and check the times handle runs</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceHandlerContentElementParameterCheck.#ctor">
            <summary>
            Constructor for class  AddInstanceHandlerContentElementParameterCheck
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.AddInstanceHandlerContentElementParameterCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RegisterClasshandlerParameterCheck">
            <summary>
            Tests Checking invalid input for EventManager.RegisterClassHandler 
            </summary>
            <remarks>
            <para/>
            This is a non-BVT scenario for Class handler
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RegisterClasshandlerParameterCheck.cs
            <para/>
            <ol>Scenarios covered:
            <li>add a class handler with null classtype</li>
            <li>add a class handler with null EventID</li>
            <li>add a class handler with null handler</li>
            <li>add a class handler with non match handler type</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RegisterClasshandlerParameterCheck.#ctor">
            <summary>
            Constructor for class RegisterClasshandlerParameterCheck
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RegisterClasshandlerParameterCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RegisterClasshandlerParameterCheck.MyContentElement">
             <summary>
             MyContentElement
             </summary>
             <remarks>
            A subclass of ContentElement to avoid confliction 
            We can add class handler to a class, but we cannot remove it
            So, to avoid this scenrio to effect the rest of test cases, we use 
            a subclass.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RegisterClasshandlerParameterCheck.MyContentElement.#ctor">
            <summary>
            Constructor for MyContentElement
            </summary>
            <remarks>Just Pass it to base
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RoutedEventArgsParaCheck">
            <summary>
            Check the invalid inputs for RoutedEventArgs.
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RoutedEventArgsParaCheck.cs
            <para/>
            <ol>Scenarios covered:
                Create an args
                SetSource with null EventID
            	Registe Event ID
            	SetEventID
            	SetSource
            	Read RoutedEventID, handled, Source, OriginalSource
            	Set handled
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RoutedEventArgsParaCheck.#ctor">
            <summary>
            Constructor for class RoutedEventArgsParaCheck
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RoutedEventArgsParaCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.BuildRouteParaCheck">
            <summary>
            Check the invalid BuildRoute() function in UIElement and ContentElement
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RoutedEventArgsParaCheck.cs
            <para/>
            <ol>Scenarios covered:
                <li>Create an RoutedEventArgs, an UIElement, a ContentElement, a EventRoute and two RoutedEventIDs</li>
                <li>call UIElement.BuildRoute with null route</li>
                <li>call ContentElement.BuildRoute with null route</li>
                <li>call UIElement.BuildRoute with null RoutedEventArgs</li>
                <li>call ContentElementElement.BuildRoute with null RoutedEventArgs</li>
                <li>Create a EventRoute with differnt RoutedEventID with RoutedEventArgs</li>
                <li>call ContentElement.BuildRoute with differnt RoutedEventIDs in RoutedEventArgs and EventRoute</li>
                <li>call ContentElement.BuildRoute with differnt RoutedEventIDs in RoutedEventArgs and EventRoute</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BuildRouteParaCheck.#ctor">
            <summary>
            Constructor for class RoutedEventArgsParaCheck
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.BuildRouteParaCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RouteInvokeHandlersParaCheck">
            <summary>
            Raise Event with a none Event ID.
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RouteInvokeHandlersParaCheck.cs
            <para/>
            <ol>Scenarios covered:
            	checking null source EventRoute.InvokeHandlers
            	checking null args EventRoute.InvokeHandlers
            	checking unmatched EventID
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RouteInvokeHandlersParaCheck.#ctor">
            <summary>
            Constructor for class RaiseEventParaCheck 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RouteInvokeHandlersParaCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventRouteAddParaCheck">
            <summary>
            Checking Validation for EventRoute.Add()
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  EventRouteAddParaCheck.cs
            <para/>
            <ol>Scenarios covered:
            	checking null Target EventRoute.Add
            	checking null handler for EventRoute.Add
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventRouteAddParaCheck.#ctor">
            <summary>
            Constructor for class EventRouteAddParaCheck 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventRouteAddParaCheck.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RoutedEventArgsParaCheck1">
            <summary>
            Check the invalid inputs for RoutedEventArgs.
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RoutedEventArgsParaCheck1.cs
            <para/>
            <ol>Scenarios covered:
                Create an subclass of RouteEventArgs
                SetSource with null EventID
                Set handled before RoutedEventID is set
                Check InvokeEventHandler for null RouteEventID, Null handler and null type
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RoutedEventArgsParaCheck1.#ctor">
            <summary>
            Constructor for class RoutedEventArgsParaCheck
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RoutedEventArgsParaCheck1.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RemoveHandlerOnContentElementParaValidation">
            <summary>
            Tests Remove Bubble EventHandler from ContentElement
            <para/>
            This is a BVT scenario for removing event handler from a ContentElement and check for invalid parameter
            </summary>
            <remarks>
            <para/>
            Area: Events\ContentElement
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RemoveHandlerOnContentElementParaValidation.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Remove event handler with invalid parameter and check</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveHandlerOnContentElementParaValidation.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveHandlerOnContentElementParaValidation.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveHandlerOnContentElementParaValidation.OnRoutedEvent2(System.Object)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.RemoveHandlerOnUIElementParaValidation">
            <summary>
            Tests Remove Bubble EventHandler from UIElement
            <para/>
            This is a BVT scenario for removing event handler from a UIElement and check for invalid parameter
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  RemoveHandlerOnUIElementParaValidation.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventID for bubble event</li>
            <li>Remove event handler with null RoutedEventID and check</li>
            <li>Remove event handler with null Handler and check</li>
            <li>Remove event handler with Handler type unmatch with handler type for the RoutedEventID and check</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveHandlerOnUIElementParaValidation.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveHandlerOnUIElementParaValidation.OnRoutedEvent1(System.Object,Avalon.Test.CoreUI.Events.CustomRoutedEventArgs)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
            <param name="args">Pass the CustomRoutedEventArgs to it</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.RemoveHandlerOnUIElementParaValidation.OnRoutedEvent2(System.Object)">
            <summary>
            Handler called
            </summary>
            <param name="sender">Pass the object to it</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.EventMangerGetClassListenersParaValidation">
            <summary>
            Test check invalid input for EventManager.GetClassListeners
            </summary>
            <remarks>
            <para />
            The test case check invalid input for founctions at EventManage class:  GetClassListeners
            <para />
            Area: Events\Boundary
            <para />
             Microsoft
            <para />
            <para />
            FileName:  EventMangerGetClassListenersParaValidation.cs
            <para />
            <ol>Scenarios covered:
            <li>Register a new RoutedEventID which is already there</li>
            <li>call GetClassListeners with null classType</li>
            <li>call GetClassListeners with null routedEventID</li>
            </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventMangerGetClassListenersParaValidation.#ctor">
            <summary>
            Constructor for class EventMangerGetClassListenersParaValidation 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.EventMangerGetClassListenersParaValidation.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Events.GetRoutedEventIDsForOwnerWhenNon">
            <summary>
            Tests GetRoutedEventIDs() for UIElement
            <para/>
            This is a BVT scenario Check GetRoutedEventIDsForOwner when there is not one
            </summary>
            <remarks>
            <para/>
            Area: Events\Boundary
            <para/>
             Microsoft
            <para/>
            <para/>
            FileName:  GetRoutedEventIDsForOwnerWhenNon.cs
            <para/>
            <ol>Scenarios covered:
            <li>Fetch RoutedEventIDs using GetRoutedEventIDsForOwner(), check whether the returned value is null</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsForOwnerWhenNon.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Events.GetRoutedEventIDsForOwnerWhenNon.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeLaterBeginInvokeSTSC">
            <summary>
            Calling BeginInvoke on a Dispose Context
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Dispose\Simple
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: DisposeMultipleTimesSTSC.cs
            <para/>
            <ol>Scenarios covered:
            <li>Adding Delegate to uiContext.Disposed Event</li>
            <li>Dispose the context</li>
            <li>Calling BeginInvoke on the dispose context</li>
            <li>Validating object that it is return by the BeginInvoke call. Should be Null</li>
            <li>Validating IsDisposed Property</li>
            </ol>
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeLaterBeginInvokeSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeLaterBeginInvokeSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeLaterBeginInvokeSTSC._xHandler(System.Object)">
            <summary>
            Handler that suppose no to be called
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeandAllocatedScenarionSTSC">
            <summary>
            Disposing 20 Context on a Single Thread. Validating Dispose Work correctly, IsDiposed property and the Disposed Event
            <para/>
            This is a BVT scenario for Single Thread Multiple Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Disposing
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: DisposeandAllocatedScenarionSTSC.cs
            <para/>
            <ol>Scenarios covered:
            <li>Creating 20 context</li>
            <li>Adding Delegate to uiContext.Disposed Event</li>
            <li>Dispose 20 context, each even context to dispose we entered the context dipose and exit, for odd number we just dispose</li>
            <li>Validating IsDisposed Property for each context</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeandAllocatedScenarionSTSC.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeandAllocatedScenarionSTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeandAllocatedScenarionSTSC.auxContextRef_Disposed(System.Object,System.EventArgs)">
            <summary>
            Handler for disposed event on context
            </summary>
            <param name="sender">Context that was disposed</param>
            <param name="e"></param>
            <remarks>
            During the Disposed event it is the last time for posting items or reading from the Local Storage
            </remarks>
        </member>
        <member name="F:Avalon.Test.CoreUI.Threading.Context.Disposing.DisposeandAllocatedScenarionSTSC._slotRef">
            <summary>
            Holds the reference of Data Slot used on the test
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocatedNamedValidateUseoftheStringNotReference">
            <summary>
            Description:
            This test cases allocate using AllocateNamedDataSlot
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\UIContext\Storage
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: AllocatedNamedValidateUseoftheStringNotReference.cs
            <para/>
            <ol>Scenarios covered:
            <li>Calling UIContext.AllocateNamedDataSlot() with using AutoData(0) </li>
            <li>SetData(slot,int)</li>
            <li>Validate data using GetData(slot)</li>
            <li>Validate data using GetData(UIContext.GetNamedDataSlot("name")) </li>
            <li>Changing the string to another string. Testing we go for value no reference</li>
            <li>Validate data with new String and with the old(value changed) </li>
            <li>Free Named Slot with the new string</li>
            <li>Validate free slot using UIContext.GetNamedDataSlot equal to null</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocatedNamedValidateUseoftheStringNotReference.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocatedNamedValidateUseoftheStringNotReference.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedTwiceSameName">
            <summary>
            Description:
            This test cases allocat named slot with the same name
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\Storage
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: AllocateNamedTwiceSameName.cs
            <para/>
            <ol>Scenarios covered:
            <li>Calling UIContext.AllocateNamedDataSlot() with using AutoData(0) </li>
            <li>Calling UIContext.AllocateNamedDataSlot() with using same that before AutoData(0) </li>
            <li>Validate that both should be the same</li>
            <li>SetData(slot) with the first slot allocated</li>
            <li>Validate data set using the second slot allocated </li>
            <li>Free Named Slot</li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedTwiceSameName.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedTwiceSameName.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedNullArgument">
            <summary>
            Description:
            This test cases allocat named slot with that the parameter is null.  Expecting an exception.
            <para/>
            This is a BVT scenario for Single Thread Single Context.
            </summary>
            <remarks>
            <para/>
            Area: Threading\Storage
            <para/>
             Microsoft 
            <para/>
            <para/>
            FileName: AllocateNamedNullArgument.cs
            <para/>
            <ol>Scenarios covered:
            <li>AllocateNamedSlot with a null argument </li>
            <li>Validatee exception was thrown </li>
            </ol>
            
            </remarks>
            <seealso cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedNullArgument.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateNamedNullArgument.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.AllocateMultipleTimesDifferentMTSC">
            <summary>
            Description:
            This test case is to test UIContext.Allocate from different threads, but all of them targetting the same context.
            <para />
            5 different threads allocating 20 slot, setting and getting data on the context too.
            </summary>
            <remarks>
            Area: Threading\Storage
            <para />
             Microsoft 
            <para />
            <para />
            FileName: AllocateMultipleTimesDifferentMTSC.cs
            <para />
            Way to execute this test case:
            <ul>
            <li>Creates 5 Threads, Start the threads and waits...</li>
            <li>Each thread will:
                <ul>
                    <li> Enter Context - Allocate Named 8 Slots with AutoData - Leave Context - Thread Yields</li>
                    <li> Enter Context - Set 8 Objects on the Context - Thread Yields</li>
                    <li> Enter Context - Validate the object that were set also Validate with GetNamedDataSlot- Thread Yields</li>
                </ul>
            </li>
            <li>The main thread validate that 40 objects where assigned</li>
            </ul>
            </remarks>
            <example>
            <code lang="C#">
            AllocateMultipleTimesDifferentMTSC Test = new AllocateMultipleTimesDifferentMTSC();
            Test.RunTest(new CoreLogger());
            </code>
            </example>
            
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateMultipleTimesDifferentMTSC.#ctor">
            <summary>
            Contructor class that calls the base line with TestCaseType.ContextSupport
            </summary>
            <remarks>
            <see cref="T:Avalon.Test.CoreUI.TestCaseType"/>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.AllocateMultipleTimesDifferentMTSC.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry method for the test case
            </summary>
            <param name="framework">No Special args on the Framework just a plain CoreLogger</param>
            <remarks>
            <seealso cref="T:Avalon.Test.CoreUI.Common.CoreLogger"/>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario">
            <summary>
                     This test case contains four test cases for invalid null scenario on UIContext\Storage\InvalidScenarios
            </summary>
            <remarks>
                 <filename>GetDataFromContextInvalidScenario.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="Frmwk">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.RunSetNullTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Scenario passing null to GetData API
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Calling GetData with null parameter</li>
                     <li>Expecting ArguementNullException thrown by the call</li>
                     <li>Validate the exception is thrown</li>
                 </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.RunGetNullTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
             Scenario passing null to GetData API
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Calling GetData with null parameter</li>
                     <li>Expecting ArguementNullException thrown by the call</li>
                     <li>Validate the exception is thrown</li>
                 </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.RunGetDataNoInContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
              This scenario we try to GetData from a context without entering first. InvalidOperationException should be thrown
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Call AllocateDataSlot</li>
                     <li>Try to Get data without entering the context</li>
                     <li>Expecting InvalidOperationException</li>
                     <li>Validating the expection was thrown</li>
                 </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.RunSetDataNoInContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
              This scenario we try to SetData from a context without entering first. InvalidOperationException should be thrown
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Call AllocateDataSlot</li>
                     <li>Try to Set data without entering the context</li>
                     <li>Expecting InvalidOperationException</li>
                     <li>Validating the expection was thrown</li>
                 </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.RunSetOnDisposedContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Set Data on a Disposed Context. This must throw an ObjectDisposedException
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Call AllocateDataSlot, Create a context and Dispose the context</li>
                     <li>Try to Set data without entering the context</li>
                     <li>Expecting InvalidOperationException</li>
                     <li>Validating the expection was thrown</li>
                 </ol>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Storage.StorageFromContextInvalidScenario.RunGetOnDisposedContext(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
                 Get Data on a Disposed Context. This must throw an ObjectDisposedException
            </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>Call AllocateDataSlot, Create a context and Dispose the context</li>
                     <li>Try to Get data without entering the context</li>
                     <li>Expecting InvalidOperationException</li>
                     <li>Validating the expection was thrown</li>
                 </ol>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerInvalidScenarios">
            <summary>
                     Creating a UITimer and calling
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerInvalidScenarios.#ctor">
            <summary>
            This test case that support TestCaseType.ContextEnteringSupport
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerInvalidScenarios.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            This method doesn't contain anything
            </summary>
            <param name="framework"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerInvalidScenarios.InvalidConstructorContextNull(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a timer with constructor with a null context. Validating argument null exception
             
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>UITimer Constructor passing a null as context</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerInvalidScenarios.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerInvalidScenarios.InvalidConstructorParameters(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a timer with constructor with a null context, null event handler and invalid timespan. Validating argument null exception
             
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>UITimer Constructor passing a null as context</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerInvalidScenarios.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Threading.Timers.UITimers.UITimerInvalidScenarios.InvalidInterval(Avalon.Test.CoreUI.Common.CoreLogger)">
             <summary>
             Creating a UITimer and setting Interval to MinValue Validate ArgumentOutOfRangeException
             
             </summary>
            <remarks>
                 <ol>Scenarios steps:
                     <li>UITimer Constructor passing a null as context</li>
                 </ol>
                 This test case uses QueryPerformanceCount to get the time
                 <filename>UITimerInvalidScenarios.cs</filename>
            </remarks>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp">
            <summary>
            Verify capture works from MouseMove event handler.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp._elementToCapture">
            <summary>
            Store record of our captured element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CaptureMoveApp._bCaptureAPI">
            <summary>
            Store record of our capture API call.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp">
            <summary>
            Verify capture fails from MouseMove event handler if element is not in a source.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <remarks>
            Disabled due to bug. Enable once bug is fixed.
            </remarks>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp._elementToCapture">
            <summary>
            Store record of our captured element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CaptureMoveNoSourceApp._bCaptureAPI">
            <summary>
            Store record of our capture API call.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CapturePositionApp">
            <summary>
            Verify Mouse GetPosition works from MouseMove event handler on a captured element.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CapturePositionApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CapturePositionApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CapturePositionApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CapturePositionApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CapturePositionApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CapturePositionApp.OnMouseMove(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CapturePositionApp._elementToCapture">
            <summary>
            Store record of our captured element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CapturePositionApp._bCaptureAPI">
            <summary>
            Store record of our capture API call.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CapturePositionApp._savedPoint">
            <summary>
            Store record of our mouse move saved point.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CapturePositionApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.CaptureClickApp">
            <summary>
            Verify capture works from MouseRightButtonDown event handler.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <area>CoreInput\Mouse</area>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureClickApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureClickApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureClickApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureClickApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.CaptureClickApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CaptureClickApp._elementToCapture">
            <summary>
            Store record of our captured element.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.CaptureClickApp._bCaptureAPI">
            <summary>
            Store record of our capture API call.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp">
            <summary>
            Verify focus after a message box is dismissed.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusAfterMessageBoxApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp">
            <summary>
            Verify Capture is lost after removing element with Capture.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementApp.OnCaptureStateChange(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp">
            <summary>
            Verify Capture is lost and gained after removing element with Capture and recapturing.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.CaptureAfterRemoveElementRecaptureApp.OnCaptureStateChange(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp">
            <summary>
            Verify focus is lost after removing element with keyboard focus.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementApp.OnFocusStateChange(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp">
            <summary>
            Verify focus is lost and regained after removing element with keyboard focus, then refocusing to element in tree.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.FocusAfterRemoveElementRefocusApp.OnFocusStateChange(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp">
            <summary>
            Verify focus after a WinForms message box is dismissed.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusAfterWinFormsMessageBoxApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp">
            <summary>
            Verify Keyboard Focus fails for invalid input element in window.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp._dio">
            <summary>
            Invalid input element.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp.OnFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp.OnPreviewFocus(System.Object,MSAvalon.Windows.Input.FocusChangedEventArgs)">
            <summary>
            Standard preview focus event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.FocusInvalidInputElementApp._exceptionLog">
            <summary>
            Store record of our fired exceptions.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp">
            <summary>
            Verify setting FrameworkElement ForceCursor overrides Cursor on child element.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp._bOriginalForceCursor">
            <summary>
            Stores original ForceCursor value.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementForceCursorApp._frameworkContentElement">
            <summary>
            Store content element on our canvas.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp">
            <summary>
            Verify InputManager multiple handlers on ProcessInput events fire in REVERSE order of when they were added.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp._preEventHandlerLog">
            <summary>
            Store record of our fired PreProcessInput events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp._postEventHandlerLog">
            <summary>
            Store record of our fired PostProcessInput events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp._preProcessHandlers">
            <summary>
            Store record of our PreProcessInput event handlers.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerMultipleProcessEventsApp._processHandlers">
            <summary>
            Store record of our PostProcessInput event handlers.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp">
            <summary>
            Verify PeekInput returns empty staging items for PostProcessInput and PreProcessInput events.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp.OnPreProcess(System.Object,MSAvalon.Windows.Input.PreProcessInputEventArgs)">
            <summary>
            Standard PreProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp.OnProcess(System.Object,MSAvalon.Windows.Input.ProcessInputEventArgs)">
            <summary>
            Standard PostProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPeekInputApp._stagingItemLog">
            <summary>
            Store record of our staging items.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp">
            <summary>
            Verify PushInput(null) puts null staging item into staging area for PostProcessInput.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp.OnPreProcess(System.Object,MSAvalon.Windows.Input.PreProcessInputEventArgs)">
            <summary>
            Standard PreProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp.OnProcess(System.Object,MSAvalon.Windows.Input.ProcessInputEventArgs)">
            <summary>
            Standard PostProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputNullApp._stagingItemLog">
            <summary>
            Store record of our staging items.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp">
            <summary>
            Verify PushInput(InputEventArgs,promote) fails to put invalid staging item into staging area.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp.OnPreProcess(System.Object,MSAvalon.Windows.Input.PreProcessInputEventArgs)">
            <summary>
            Standard PreProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp.OnProcess(System.Object,MSAvalon.Windows.Input.ProcessInputEventArgs)">
            <summary>
            Standard PostProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteInvalidApp._stagingItemLog">
            <summary>
            Store record of our staging items.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp">
            <summary>
            Verify PushInput(InputEventArgs,null) puts valid staging item into staging area.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp.OnPreProcess(System.Object,MSAvalon.Windows.Input.PreProcessInputEventArgs)">
            <summary>
            Standard PreProcessInput event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp.OnWheel(System.Object,MSAvalon.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Standard mouse-wheel event handler.
            </summary>
            <param name="sender">Object sending the event.</param>
            <param name="e">Event-specific arguments</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.InputManagerProcessEventPushInputPromoteNullApp._eventLog">
            <summary>
            Store record of our raised events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp">
            <summary>
            Verify KeyTypeConverter ConvertFrom method for all keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows OS Bugs  is fixed, this case is disabled.
            </remarks>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertFromAllKeysApp.KeyStrings">
            <summary>
            Strings representing all valid Key enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidDestinationTypeApp">
            <summary>
            Verify KeyTypeConverter ConvertTo method for standard keys to invalid destination type.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidDestinationTypeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidDestinationTypeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidDestinationTypeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidDestinationTypeApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidKeyApp">
            <summary>
            Verify KeyTypeConverter ConvertTo method for invalid Key.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToInvalidKeyApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp">
            <summary>
            Verify KeyTypeConverter ConvertTo method for Key.Down.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyDownApp.KeysAndExpectedStrings">
            <summary>
            Strings representing valid Key and expected string enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyNoneApp">
            <summary>
            Verify KeyTypeConverter ConvertTo method for None key.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyNoneApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyNoneApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyNoneApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.KeyTypeConverterConvertToKeyNoneApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp">
            <summary>
            Verify KeyTypeConverter ConvertFrom method for two Modifier combination keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination2KeyApp.ValidKeyStrings">
            <summary>
            Strings representing valid Key enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp">
            <summary>
            Verify KeyTypeConverter ConvertFrom method for three Modifier combination keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombination3KeyApp.ValidKeyStrings">
            <summary>
            Strings representing valid Key enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp">
            <summary>
            Verify KeyTypeConverter ConvertFrom method for Windows key.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp._convertedKeys">
            <summary>
            Keys converted from strings.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertFromCombinationKeyApp.ValidKeyStrings">
            <summary>
            Strings representing valid Key enumeration values.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidDestinationTypeApp">
            <summary>
            Verify ModifierKeysTypeConverter ConvertTo method for standard keys to invalid destination type.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidDestinationTypeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidDestinationTypeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidDestinationTypeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidDestinationTypeApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidKeyApp">
            <summary>
            Verify ModifierKeysTypeConverter ConvertTo method for invalid keys.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ModifierKeysTypeConverterConvertToInvalidKeyApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertTo API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp">
            <summary>
            Verify Mouse class button properties.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp._stateLog">
            <summary>
            Store record of our fired states.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.MouseStatus">
            <summary>
            Data structure holding various mouse states.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.MouseStatus.LeftButton">
            <summary>LeftButton</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.MouseStatus.RightButton">
            <summary>RightButton</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.MouseStatus.MiddleButton">
            <summary>MiddleButton</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.MouseStatus.XButton1">
            <summary>XButton1</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonApp.MouseStatus.XButton2">
            <summary>XButton2</summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp">
            <summary>
            Verify Mouse class button properties on a button-up.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp._stateLog">
            <summary>
            Store record of our fired states.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.MouseStatus">
            <summary>
            Data structure holding various mouse states.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.MouseStatus.LeftButton">
            <summary>LeftButton</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.MouseStatus.RightButton">
            <summary>RightButton</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.MouseStatus.MiddleButton">
            <summary>MiddleButton</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.MouseStatus.XButton1">
            <summary>XButton1</summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseClassButtonUpApp.MouseStatus.XButton2">
            <summary>XButton2</summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringCursorTypeApp">
            <summary>
            Verify Cursor ToString() method returns CursorType in the string.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
            <bug  product="Windows OS Bugs" />
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringCursorTypeApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringCursorTypeApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseCursorToStringCursorTypeApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp">
            <summary>
            Verify Mouse cursor update on a mouse move and click on FrameworkElement.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.DoAfterExecute">
            <summary>
            Execute stuff right after the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.OnProcess(System.Object,MSAvalon.Windows.Input.ProcessInputEventArgs)">
            <summary>
            Standard process event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp.OnQuery(System.Object,MSAvalon.Windows.Input.QueryCursorEventArgs)">
            <summary>
            Standard query cursor event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.MouseUpdateCursorApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.MultiWindowFocusableApp">
            <summary>
            Verify non-focusable element does not kill focus from second window.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusableApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusableApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusableApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiWindowFocusableApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.Framework.CoreInput.MultiSourceFocusableApp">
            <summary>
            Verify non-focusable element does not kill focus from second source.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiSourceFocusableApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiSourceFocusableApp.OnStartup(MSAvalon.Windows.StartupEventArgs)">
            <summary>
            Fires when this app starts up.
            </summary>
            <param name="e">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiSourceFocusableApp.RunTest(System.Object)">
            <summary>
            Run a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.Framework.CoreInput.MultiSourceFocusableApp.Validate(System.Object)">
            <summary>
            Verify results of a test.
            </summary>
            <param name="obj">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.PreProcessEventPeekInputApp">
            <summary>
            Verify InputManager PreProcessInputEventArgs.PeekInput works as expected.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PreProcessEventPeekInputApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PreProcessEventPeekInputApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PreProcessEventPeekInputApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.PreProcessEventPeekInputApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.PreProcessEventPopInputApp">
            <summary>
            Verify InputManager PreProcessInputEventArgs.PopInput works as expected.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PreProcessEventPopInputApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PreProcessEventPopInputApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PreProcessEventPopInputApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.PreProcessEventPopInputApp._popInputItem">
            <summary>
            Store record of our popped item.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.PreProcessEventPopInputApp._eventLog">
            <summary>
            Store record of our raised events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp">
            <summary>
            Verify KeyDown event does not fire on a print-screen key down.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <area>CoreInput\Keyboard</area>
            <author>Microsoft</author>
            <priority>0</priority>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.PrintScreenKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp">
            <summary>
            Verify TextInput events don't fire on Alt-letter keys.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp.OnKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.TextInputAltCharApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp">
            <summary>
            Verify TextInput events don't fire on Alt-Shift-letter keys.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp.OnKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.TextInputAltShiftCharApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp">
            <summary>
            Verify TextInput events fire on characters entered via Alt-Numeric keypad keys.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.TextInputAltNumKeyApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp">
            <summary>
            Verify TextInput events don't fire on Control-letter keys.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp.OnKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.TextInputControlCharApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp">
            <summary>
            Verify Text event fires on a non-alphabetic-character Shift-key down.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.OnText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp.OnPreviewText(System.Object,MSAvalon.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Standard preview text event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.TextInputShiftCharApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseOverApp">
            <summary>
            Verify ContentElement IsMouseOver works for element in window
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseOverApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseOverApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseOverApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseOverApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseOverApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse button event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp">
            <summary>
            Verify UIElement Capture works for subtree containing content host on mouse input.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse button event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementCaptureToSubtreeContentHostMouseClickApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseDirectlyOverApp">
            <summary>
            Verify ContentElement IsMouseDirectlyOver works for element in window after element on top is removed.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until bug  is resolved, this case is disabled.
            </remarks>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseDirectlyOverApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseDirectlyOverApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseDirectlyOverApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseDirectlyOverApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsMouseDirectlyOverApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse button event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementIsMouseDirectlyOverApp">
            <summary>
            Verify UIElement IsMouseDirectlyOver works for element in window after element on top is removed.
            </summary>
            <description>
            This is part of a collection of scenarios for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsMouseDirectlyOverApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsMouseDirectlyOverApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsMouseDirectlyOverApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsMouseDirectlyOverApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsMouseDirectlyOverApp.OnMouseButton(System.Object,MSAvalon.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Standard mouse button event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp">
            <summary>
            Verify KeyDown and KeyUp events on multiple keydowns of the same key on ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.OnKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp.OnPreviewKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementMultiSameKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp">
            <summary>
            Verify KeyDown and KeyUp events on multiple keydowns for same key.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp.OnPreviewKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp">
            <summary>
            Verify KeyDown and KeyUp events on multiple keyups for same key.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp.OnPreviewKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementMultiSameKeyUpApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp">
            <summary>
            Verify KeyDown and KeyUp events on multiple Control keypresses.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp.OnPreviewKey(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementMultiControlKeyDownApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp">
            <summary>
            Verify UIElement ReleaseMouseCapture within LostCapture event handler works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for input events.
            It also regresses Windows Bug .
            </description>
            <bug  product="Windows OS Bugs" />
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp._bCaptureAPI">
            <summary>
            Stores result of Capture API call.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp.OnCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard Capture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp.OnLostCapture(System.Object,MSAvalon.Windows.Input.MouseEventArgs)">
            <summary>
            Standard LostCapture event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp._eventLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementReleaseMouseCaptureLostCaptureApp._bIsMouseCaptured">
            <summary>
            Store record of our IsMouseCaptured API call.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.ContentElementIsEnabledApp">
            <summary>
            Verify IInputElement IsEnabled set fails for ContentElement.
            </summary>
            <description>
            This is part of a collection of unit tests for core input.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsEnabledApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsEnabledApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsEnabledApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.ContentElementIsEnabledApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.ContentElementIsEnabledApp._bExceptionThrown">
            <summary>
            Stores results of exception.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.CoreInput.UIElementIsEnabledApp">
            <summary>
            Verify IInputElement IsEnabled set fails for UIElement.
            </summary>
            <description>
            This is part of a collection of unit tests for core input.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsEnabledApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsEnabledApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsEnabledApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.CoreInput.UIElementIsEnabledApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.CoreInput.UIElementIsEnabledApp._bExceptionThrown">
            <summary>
            Stores results of exception.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromPrefixApp">
            <summary>
            Verify CommandConverter ConvertFrom method for standard commands with prefix.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows bug  is resolved, this case is disabled.
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromPrefixApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromPrefixApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromPrefixApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandConverterConvertFromPrefixApp._typeDescriptorContext">
            <summary>
            Store a type descriptor context, for use with the ConvertFrom API.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp">
            <summary>
            Verify Command with multiple command links with non-conflicting special key bindings (no Defaults)
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <bug  product="Windows OS Bugs" />
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingSpecialKeyApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp">
            <summary>
            Verify Command with multiple command links with non-conflicting Apps key binding (no Defaults)
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandMultipleKeyBindingAppsKeyApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp">
            <summary>
            Verify CommandLinkCollection Add method fails if collection is sealed.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp._exceptionThrown">
            <summary>
            Was the expected exception thrown?
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddSealedApp._readonlyCommandLinks">
            <summary>
            Stores a readonly collection of links.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp">
            <summary>
            Verify CommandLinkCollection Add method fails if a non-commandlink is added.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp._exceptionThrown">
            <summary>
            Was the expected exception thrown?
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionAddNonLinkApp._readwriteCommandLinks">
            <summary>
            Stores a read-write collection of links.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp">
            <summary>
            Verify CommandLinkCollection Remove method fails if collection is sealed.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp._exceptionThrown">
            <summary>
            Was the expected exception thrown?
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveSealedApp._readonlyCommandLinks">
            <summary>
            Stores a readonly collection of links.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp">
            <summary>
            Verify CommandLinkCollection Remove method fails if a non-commandlink is removed.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp._exceptionThrown">
            <summary>
            Was the expected exception thrown?
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp._readwriteCommandLinks">
            <summary>
            Stores a read-write collection of links.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionRemoveNonLinkApp._sampleCommand">
            <summary>
            Stores a sample command.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp">
            <summary>
            Verify CommandLinkCollection SyncRoot and IsSynchronized properties.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp.NUMCOMMANDLINKS">
            <summary>
            How many command links on our root element?
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkCollectionSyncApp._sampleCommand">
            <summary>
            Our sample command.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp">
            <summary>
            Verify CommandLink can be retrieved from link collection via default bindings.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp._sampleCommand">
            <summary>
            Stores sample command object.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp._saveKeyBinding">
            <summary>
            Key binding to be used as an indexer into the collection of command links.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp._saveMouseBinding">
            <summary>
            Mouse binding to be used as an indexer into the collection of command links.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkFromDefaultsApp._savePenBinding">
            <summary>
            Pen binding to be used as an indexer into the collection of command links.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp">
            <summary>
            Verify CommandLink Invoke event works with KeyDown event.
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <bug  product="Windows OS Bugs" />
            <remarks>
            Until Windows OS Bugs  is fixed, this case is disabled.
            </remarks>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp._commandLog">
            <summary>
            Store record of our fired command events.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp._eventLog">
            <summary>
            Store record of our fired key events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkInvokeKeyDownApp.OnKeyDown(System.Object,MSAvalon.Windows.Input.KeyEventArgs)">
            <summary>
            Standard key event handler.
            </summary>
            <param name="sender">Source sending the event.</param>
            <param name="args">Event-specific arguments.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp">
            <summary>
            Verify multiple command links with Command setter, non-conflicting Apps key binding (no Defaults)
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <bug  product="Windows OS Bugs" />
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkKeyBindingAppsKeyApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp">
            <summary>
            Verify CommandLink KeyBinding to different links using same key, different modifiers.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
            <bug  product="Windows OS Bugs" />
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkSameKeyBindingApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp">
            <summary>
            Verify multiple command links with Command setter, non-conflicting special key binding (Defaults)
            </summary>
            <description>
            This is part of a collection of scenarios for commanding.
            </description>
            <bug  product="Windows OS Bugs" />
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandDefaultsKeyBindingSpecialKeyApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp">
            <summary>
            Verify UIElement CommandLink MouseBinding works for middle-mouse button on element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.GetTestOps(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Identify test operations to run.
            </summary>
            <param name="hwnd">Window handle.</param>
            <returns>Array of test operations.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.DoBeforeExecute">
            <summary>
            Execute stuff right before the test operations.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp._commandLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.OnSample(System.Object,MSAvalon.Windows.Commands.CommandInvokeEventArgs)">
            <summary>
            If we are in this CommandEvent Handler, the case passes.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp.OnQuery(System.Object,MSAvalon.Windows.Commands.QueryStatusEventArgs)">
            <summary>
            If we are in this event handler, we are being queried.
            </summary>
            <param name="target">Element that is the target of the event.</param>
            <param name="args">Arguments pertaining to the command event.</param>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp._bCommandLinkEnabled">
            <summary>
            Store enabled-ness of command link.
            </summary>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.CommandLinkMouseBindingMiddleButtonApp._mouseBinding">
            <summary>
            Store mouse binding for our command link.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Commanding.QueryStatusEventArgsNullApp">
            <summary>
            Verify QueryStatusEventArgs(null) works for element in window.
            </summary>
            <description>
            This is part of a collection of unit tests for commanding.
            </description>
            <author>Microsoft</author>
 
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.QueryStatusEventArgsNullApp.LaunchTest(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Launch our test.
            </summary>
            <param name="fw">Automation framework object.</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.QueryStatusEventArgsNullApp.DoSetup(System.Object)">
            <summary>
            Setup the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.QueryStatusEventArgsNullApp.DoExecute(System.Object)">
            <summary>
            Execute stuff.
            </summary>
            <param name="arg">Not used.</param>
            <returns>Null object.</returns>
        </member>
        <member name="M:Avalon.Test.CoreUI.Commanding.QueryStatusEventArgsNullApp.DoValidate(System.Object)">
            <summary>
            Validate the test.
            </summary>
            <param name="sender">App sending the callback.</param>
            <returns>Null object.</returns>
        </member>
        <member name="F:Avalon.Test.CoreUI.Commanding.QueryStatusEventArgsNullApp._exceptionLog">
            <summary>
            Store record of our fired events.
            </summary>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.SimpleThreadSingleContext.DestroyingHwndSourceForRunDispatcher">
            <summary>
                Destroying the HwndSource before the Dispatcher start running, and the RootVisual was se
            </summary>
            <remarks>
                <ol>Scenarios steps:
                    <li>Creating 1 context and Enter the context</li>
                    <li>Creating a HelloElement to render something on the screen</li>
                    <li>Create a HwndSource and set the RootVisual to the HwndSource</li>
                    <li>Destroy the Window from the HwndSource using Win32.DestroyWindow nad Post an item to stop the dispatcher </li>
                    <li>Start Running the dispatcher</li>
                </ol>
                
                <location>DestroyingHwndSourceForRunDispatcher.cs</location>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.SimpleThreadSingleContext.DestroyingHwndSourceForRunDispatcher.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.SimpleThreadSingleContext.DestroyingHwndSourceForRunDispatcher.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Entry Method for the test case
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.SimpleThreadSingleContext.DestroyingHwndSourceForRunDispatcher._CloseWindowASyncHandler(System.Object)">
            <summary>
            This handler will be posted to the Context to Close the windows and Stop the dispatcher
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.SimpleThreadSingleContext.DestroyingHwndSourceForRunDispatcher._StopDispatcher(System.Object)">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainsMultipleAvalonWindowsTop">
            <summary>
            </summary>
            <remarks>
                 <filename>RegisterTwiceSameContext.cs</filename>
            </remarks>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainsMultipleAvalonWindowsTop.#ctor">
            <summary>
            Constructor.  On the base class pass TestCaseType.ContextSupport 
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainsMultipleAvalonWindowsTop.Run(Avalon.Test.CoreUI.Common.CoreLogger)">
            <summary>
            Creating 4 Top Level Avalon Window on a different AppDomans. Each AppDomain contains its own Dispatcher
            and its own Context.  This test creates the four threads and the main Thread waits until the 4 are done
            The exit criteria for the threads is that something is OnRender is called.
            </summary>
            <param name="framework">Pass the CoreLogger to log</param>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainsMultipleAvalonWindowsTop.StartTestCaseCrossAppDomain">
            <summary>
            </summary>
        </member>
        <member name="M:Avalon.Test.CoreUI.Source.Hwnd.MultipleAppDomainsMultipleAvalonWindowsTop.CreateCase">
            <summary>
            </summary>
        </member>
    </members>
</doc>
