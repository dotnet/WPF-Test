


<cmn:CustomDockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

    xmlns:cmn="clr-namespace:Microsoft.Test.Serialization.CustomElements;assembly=TestRuntime"
    xmlns:event="clr-namespace:Avalon.Test.CoreUI.Events;assembly=CoreTestsUntrusted" xmlns:MappingPIGen1="clr-namespace:Microsoft.Test.Serialization.CustomElements;assembly=TestRuntime" xmlns:MappingPIGen2="clr-namespace:Avalon.Test.CoreUI.Events;assembly=CoreTestsUntrusted">
    <cmn:CustomDockPanel.Resources>
        <Style x:Key="Style1" TargetType="{x:Type Button}">
            <Setter Property="Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type Button}">
                <TextBlock Text="Text content" DataObject.Copying="MyDataObjectCopyingEventHandler" DataObject.Pasting="MyDataObjectPastingEventHandler" DataObject.SettingData="MyDataObjectSettingDataEventHandler" DragDrop.Drop="MyDragEventHandler" DragDrop.PreviewDrop="MyDragEventHandler" DragDrop.DragLeave="MyDragEventHandler" DragDrop.PreviewDragLeave="MyDragEventHandler" DragDrop.DragOver="MyDragEventHandler" DragDrop.PreviewDragOver="MyDragEventHandler" DragDrop.DragEnter="MyDragEventHandler" DragDrop.PreviewDragEnter="MyDragEventHandler" DragDrop.GiveFeedback="MyGiveFeedbackEventHandler" DragDrop.PreviewGiveFeedback="MyGiveFeedbackEventHandler" DragDrop.QueryContinueDrag="MyQueryContinueDragEventHandler" DragDrop.PreviewQueryContinueDrag="MyQueryContinueDragEventHandler" AccessKeyManager.AccessKeyPressed="MyAccessKeyPressedEventHandler" Keyboard.KeyUp="MyKeyEventHandler" Keyboard.PreviewKeyUp="MyKeyEventHandler" Keyboard.KeyDown="MyKeyEventHandler" Keyboard.PreviewKeyDown="MyKeyEventHandler" Mouse.QueryCursor="MyQueryCursorEventHandler" Mouse.LostMouseCapture="MyMouseEventHandler" Mouse.GotMouseCapture="MyMouseEventHandler" Mouse.MouseLeave="MyMouseEventHandler" Mouse.MouseEnter="MyMouseEventHandler" Mouse.MouseMove="MyMouseEventHandler" Mouse.PreviewMouseMove="MyMouseEventHandler" Mouse.MouseWheel="MyMouseWheelEventHandler" Mouse.PreviewMouseWheel="MyMouseWheelEventHandler" Mouse.MouseUp="MyMouseButtonEventHandler" Mouse.PreviewMouseUp="MyMouseButtonEventHandler" Mouse.MouseDown="MyMouseButtonEventHandler" Mouse.PreviewMouseDown="MyMouseButtonEventHandler" Mouse.PreviewMouseUpOutsideCapturedElement="MyMouseButtonEventHandler" Mouse.PreviewMouseDownOutsideCapturedElement="MyMouseButtonEventHandler" Stylus.LostStylusCapture="MyStylusEventHandler" Stylus.StylusOutOfRange="MyStylusEventHandler" Stylus.PreviewStylusOutOfRange="MyStylusEventHandler" Stylus.StylusInRange="MyStylusEventHandler" Stylus.PreviewStylusInRange="MyStylusEventHandler" Stylus.StylusEnter="MyStylusEventHandler" Stylus.StylusInAirMove="MyStylusEventHandler" Stylus.PreviewStylusInAirMove="MyStylusEventHandler" Stylus.StylusMove="MyStylusEventHandler" Stylus.PreviewStylusMove="MyStylusEventHandler" Stylus.StylusUp="MyStylusEventHandler" Stylus.PreviewStylusUp="MyStylusEventHandler" Stylus.StylusDown="MyStylusEventHandler" Stylus.PreviewStylusDown="MyStylusEventHandler" Stylus.StylusSystemGesture="MyStylusSystemGestureEventHandler" Stylus.PreviewStylusSystemGesture="MyStylusSystemGestureEventHandler" TextCompositionManager.TextInput="MyTextCompositionEventHandler" TextCompositionManager.PreviewTextInput="MyTextCompositionEventHandler" TextCompositionManager.TextInputUpdate="MyTextCompositionEventHandler" TextCompositionManager.PreviewTextInputUpdate="MyTextCompositionEventHandler" TextCompositionManager.TextInputStart="MyTextCompositionEventHandler" TextCompositionManager.PreviewTextInputStart="MyTextCompositionEventHandler" event:EventHelper.Bubble="MyCustomRoutedEventHandler" event:EventHelper.Tunnel="MyCustomRoutedEventHandler" />
            </ControlTemplate>
            </Setter.Value>
            </Setter>
        </Style> 
    </cmn:CustomDockPanel.Resources>
    <Button
        DataObject.Copying="MyDataObjectCopyingEventHandler"
        DataObject.Pasting="MyDataObjectPastingEventHandler"
        DataObject.SettingData="MyDataObjectSettingDataEventHandler"
        DragDrop.Drop="MyDragEventHandler"
        DragDrop.PreviewDrop="MyDragEventHandler"
        DragDrop.DragLeave="MyDragEventHandler"
        DragDrop.PreviewDragLeave="MyDragEventHandler"
        DragDrop.DragOver="MyDragEventHandler"
        DragDrop.PreviewDragOver="MyDragEventHandler"
        DragDrop.DragEnter="MyDragEventHandler"
        DragDrop.PreviewDragEnter="MyDragEventHandler"
        DragDrop.GiveFeedback="MyGiveFeedbackEventHandler"
        DragDrop.PreviewGiveFeedback="MyGiveFeedbackEventHandler"
        DragDrop.QueryContinueDrag="MyQueryContinueDragEventHandler"
        DragDrop.PreviewQueryContinueDrag="MyQueryContinueDragEventHandler"
        AccessKeyManager.AccessKeyPressed="MyAccessKeyPressedEventHandler"
        Keyboard.KeyUp="MyKeyEventHandler"
        Keyboard.PreviewKeyUp="MyKeyEventHandler"
        Keyboard.KeyDown="MyKeyEventHandler"
        Keyboard.PreviewKeyDown="MyKeyEventHandler"
        Mouse.QueryCursor="MyQueryCursorEventHandler"
        Mouse.LostMouseCapture="MyMouseEventHandler"
        Mouse.GotMouseCapture="MyMouseEventHandler"
        Mouse.MouseLeave="MyMouseEventHandler"
        Mouse.MouseEnter="MyMouseEventHandler"
        Mouse.MouseMove="MyMouseEventHandler"
        Mouse.PreviewMouseMove="MyMouseEventHandler"
        Mouse.MouseWheel="MyMouseWheelEventHandler"
        Mouse.PreviewMouseWheel="MyMouseWheelEventHandler"
        Mouse.MouseUp="MyMouseButtonEventHandler"
        Mouse.PreviewMouseUp="MyMouseButtonEventHandler"
        Mouse.MouseDown="MyMouseButtonEventHandler"
        Mouse.PreviewMouseDown="MyMouseButtonEventHandler"
        Mouse.PreviewMouseUpOutsideCapturedElement="MyMouseButtonEventHandler"
        Mouse.PreviewMouseDownOutsideCapturedElement="MyMouseButtonEventHandler"
        Stylus.LostStylusCapture="MyStylusEventHandler"
        Stylus.StylusOutOfRange="MyStylusEventHandler"
        Stylus.PreviewStylusOutOfRange="MyStylusEventHandler"
        Stylus.StylusInRange="MyStylusEventHandler"
        Stylus.PreviewStylusInRange="MyStylusEventHandler"
        Stylus.StylusLeave="MyStylusEventHandler"
        Stylus.StylusEnter="MyStylusEventHandler"
        Stylus.StylusInAirMove="MyStylusEventHandler"
        Stylus.PreviewStylusInAirMove="MyStylusEventHandler"
        Stylus.StylusMove="MyStylusEventHandler"
        Stylus.PreviewStylusMove="MyStylusEventHandler"
        Stylus.StylusUp="MyStylusEventHandler"
        Stylus.PreviewStylusUp="MyStylusEventHandler"
        Stylus.StylusDown="MyStylusEventHandler"
        Stylus.PreviewStylusDown="MyStylusEventHandler"
        Stylus.StylusSystemGesture="MyStylusSystemGestureEventHandler"
        Stylus.PreviewStylusSystemGesture="MyStylusSystemGestureEventHandler"
        TextCompositionManager.TextInput="MyTextCompositionEventHandler"
        TextCompositionManager.PreviewTextInput="MyTextCompositionEventHandler"
        TextCompositionManager.TextInputUpdate="MyTextCompositionEventHandler"
        TextCompositionManager.PreviewTextInputUpdate="MyTextCompositionEventHandler"
        TextCompositionManager.TextInputStart="MyTextCompositionEventHandler"
        TextCompositionManager.PreviewTextInputStart="MyTextCompositionEventHandler"
        event:EventHelper.Bubble="MyCustomRoutedEventHandler"
        event:EventHelper.Tunnel="MyCustomRoutedEventHandler" />
    <x:Code>
        <![CDATA[
       /// <summary>
        /// An handler of type CustomRoutedEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyCustomRoutedEventHandler(object sender, CustomRoutedEventArgs e)
        {
        }

        /// <summary>
        /// An handler of type CustomRoutedEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyDragEventHandler(object sender, DragEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type QueryContinueDragEventHandler to do nothing.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyQueryContinueDragEventHandler(object sender, QueryContinueDragEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type GiveFeedbackEventHandler to do nothing.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyGiveFeedbackEventHandler(object sender, GiveFeedbackEventArgs e)
        {
        }

        /// <summary>
        /// An handler of type TextCompositionEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyTextCompositionEventHandler(object sender, TextCompositionEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type StylusSystemGestureEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyStylusSystemGestureEventHandler(object sender, StylusSystemGestureEventArgs e)
        {
        }

        /// <summary>
        /// An handler of type StylusEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyStylusEventHandler(object sender, StylusEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type MouseButtonEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyMouseButtonEventHandler(object sender, MouseButtonEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type MouseWheelEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyMouseWheelEventHandler(object sender, MouseWheelEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type MouseEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyMouseEventHandler(object sender, MouseEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type QueryCursorEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyQueryCursorEventHandler(object sender, QueryCursorEventArgs e)
        {
        }

        /// <summary>
        /// An handler of type KeyEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyKeyEventHandler(object sender, KeyEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type KeyboardFocusChangedEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        /// 
        void MyKeyboardFocusChangedEventHandler(object sender, KeyboardFocusChangedEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type DataObjectCopyingEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyDataObjectCopyingEventHandler(object sender, DataObjectCopyingEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type DataObjectPastingEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyDataObjectPastingEventHandler(object sender, DataObjectPastingEventArgs e)
        {
        }

        /// <summary>
        /// An handler of type DataObjectSettingDataEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyDataObjectSettingDataEventHandler(object sender, DataObjectSettingDataEventArgs e)
        {
        }
        /// <summary>
        /// An handler of type AccessKeyPressedEventHandler to do nothing. 
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void MyAccessKeyPressedEventHandler(object sender, AccessKeyPressedEventArgs e)
        {
        }
        
        ]]>
        </x:Code>        
</cmn:CustomDockPanel>
