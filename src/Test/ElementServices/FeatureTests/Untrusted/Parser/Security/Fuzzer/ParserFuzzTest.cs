// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

/*******************************************************************
 * Purpose: 
 *      Represents a generic parser fuzz test. Xaml and Baml fuzz tests
 *      derive from this type. Implements xaml generation and provides 
 *      generic exception checking that are used for xaml and baml tests.
 * Contributor: 
 *
 
  
 * Revision:         $Revision: 1 $
 
********************************************************************/
using System;
using System.IO;
using System.Xml;
using System.Threading;
using System.Globalization;
using System.Collections.Generic;
using System.Reflection;
using System.Net;
using System.Windows;
using System.Windows.Threading;
using System.Windows.Markup;

using Microsoft.Test.Markup;
using Microsoft.Test.Serialization;
using Avalon.Test.CoreUI.Trusted;
using Avalon.Test.CoreUI.Parser;

namespace Avalon.Test.CoreUI.Parser.Security
{
    /// <summary>
    /// Represents a generic parser fuzz test. Xaml and Baml fuzz tests 
    /// derive from this type. Implements xaml generation and provides 
    /// generic exception checking that are used for xaml and baml tests.
    /// </summary>
    public abstract class ParserFuzzTest : FuzzTest
    {
        static ParserFuzzTest()
        {
            // Load schema (model) from assembly resources.
            Stream xsdStream = File.OpenRead(s_xsdFile);

            // Construct generator.
            s_generator = new XamlGenerator(xsdStream);

            xsdStream.Close();

            // Register helper for generating text content.
            s_generator.RegisterTextHelper(new TextContentHelper(_GenerateText));

            // Register helper for generating attribute values.
            s_generator.RegisterAttributeHelper(new AttributeHelper(_GenerateAttribValue));
        }

        /// <summary>
        /// </summary>
        public ParserFuzzTest() : base()
        {
        }

        /// <summary>
        /// Create a set of options that will be used by the FuzzBox
        /// </summary>
        /// <param name="xmlElement">An Xml element describing the options</param>
        public ParserFuzzTest(XmlElement xmlElement) : base(xmlElement)
        {
            XmlAttributeCollection attribs = xmlElement.Attributes;

            if (attribs["maxdepth"] != null)
                _maxDepth = Convert.ToInt32(attribs["maxdepth"].Value);

            if (attribs["maxattributes"] != null)
                _maxAttributes = Convert.ToInt32(attribs["maxattributes"].Value);

            if (attribs["maxchildren"] != null)
                _maxChildren = Convert.ToInt32(attribs["maxchildren"].Value);
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string CreateFile()
        {
            string genXamlFile = "__generated.xaml";

            // Create xaml
            Stream stream = s_generator.CreateStream(_maxDepth, _maxAttributes, _maxChildren);

            // Save xaml to file.
            if (File.Exists(genXamlFile))
                File.Delete(genXamlFile);
            IOHelper.SaveTextToFile(stream, genXamlFile);

            stream.Close();

            return genXamlFile;
        }

        // Checks if the given Exception is a kind that we expect from
        // the Parser when loading bogus xaml or baml streams.
        private bool _IsExpectedExceptionType(Exception ex)
        {
            return ex is ArgumentException
                || ex is XmlException
                || ex is XamlParseException
                || ex is InvalidCastException
                || ex is InvalidOperationException
                || ex is NotSupportedException
                || ex is TargetException
                || ex is FormatException
                || ex is DirectoryNotFoundException
                || ex is FileNotFoundException
                || ex is WebException;
        }

        /// <summary>
        /// 
        /// </summary>
        protected override bool IsExceptionOkay(Exception ex)
        {
            ex = this.GetInnermostException(ex);

            return _IsExpectedExceptionType(ex);
        }

        // Writes xml:lang value for nodes generated by Xml/XamlGenerator.
        private static HandledLevel _GenerateAttribValue(XmlNode parentNode, XmlAttribute attribute)
        {
            if (attribute.NamespaceURI == "http://www.w3.org/XML/1998/namespace" && attribute.LocalName == "lang")
            {
                attribute.Value = "en-US";
                ((XmlElement)parentNode).SetAttributeNode(attribute);

                return HandledLevel.Complete;
            }
            else if (attribute.LocalName == "Name")
            {
                attribute.Value = "name" + (s_nameCount++).ToString();
                ((XmlElement)parentNode).SetAttributeNode(attribute);

                return HandledLevel.Complete;
            }

            return HandledLevel.None;
        }

        // Writes text content for mixed content nodes.
        private static HandledLevel _GenerateText(XmlNode parentNode)
        {
            // Only write text if we're not under a Style tag.
            if (!_IsInStyle(parentNode))
            {
                XmlText textNode = parentNode.OwnerDocument.CreateTextNode("abcdef");
                parentNode.AppendChild(textNode);

                return HandledLevel.Complete;
            }
            else
            {
                return HandledLevel.None;
            }
        }

        /// Checks if the given node is under a Style node or is one itself.
        private static bool _IsInStyle(XmlNode parentNode)
        {
            while (parentNode != null)
            {
                if (parentNode.Name == "Style")
                    return true;

                parentNode = parentNode.ParentNode;
            }

            return false;
        }

        private static XamlGenerator s_generator = null;
        private static readonly string s_xsdFile = "testxamls.xsd";
        private static long s_nameCount = 0;
        private int _maxDepth = 6;
        private int _maxAttributes = 3;
        private int _maxChildren = 6;
    }
}

