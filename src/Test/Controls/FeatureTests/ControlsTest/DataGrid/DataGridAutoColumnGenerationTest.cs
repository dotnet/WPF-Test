using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Windows.Controls;
using System.Windows.Threading;
using Avalon.Test.ComponentModel;
using Microsoft.Test.Controls.DataSources;
using Microsoft.Test.Discovery;
using Microsoft.Test.Logging;
using Microsoft.Test.TestTypes;


namespace Microsoft.Test.Controls
{
    /// <summary>
    /// <description>
    /// Base class for DataGrid auto-column generation tests.    
    /// </description>

    /// </summary>
    public class DataGridAutoColumnGenerationTest : DataGridTest
    {
        #region Private Fields

        // delegate actions to run through
        protected List<DoItemsSourceBehavior> doItemsSourceBehaviors;
        protected List<DoAutoGenerateColumnsBehavior> doAutoGenerateColumnsBehaviors;
        protected List<DoColumnsBehavior> doColumnsBehaviors;

        // expected inital data
        protected string xamlFilename;
        protected Dictionary<string, StateProfile> initialStateProfiles = new Dictionary<string, StateProfile>
        {
            {"DataGridAutoGenOn.xaml", new StateProfile { autoGenFlag = true, isUserSet = false, isItemsSourceCountZero = false, isItemsSourceSet = true}},
            {"DataGridAutoGenOff.xaml", new StateProfile { autoGenFlag = false, isUserSet = false, isItemsSourceCountZero = false, isItemsSourceSet = true}},
            {"DataGridAutoGenOnZeroCount.xaml", new StateProfile { autoGenFlag = true, isUserSet = false, isItemsSourceCountZero = true, isItemsSourceSet = true}},
            {"DataGridAutoGenOnNullSource.xaml", new StateProfile { autoGenFlag = true, isUserSet = false, isItemsSourceCountZero = false, isItemsSourceSet = false}},
            {"DataGridAutoGenOnUserSet.xaml", new StateProfile { autoGenFlag = true, isUserSet = true, isItemsSourceCountZero = false, isItemsSourceSet = true}},
            {"DataGridAutoGenOffUserSet.xaml", new StateProfile { autoGenFlag = false, isUserSet = true, isItemsSourceCountZero = false, isItemsSourceSet = true}},
            {"DataGridAutoGenOnZeroCountUserSet.xaml", new StateProfile { autoGenFlag = true, isUserSet = true, isItemsSourceCountZero = true, isItemsSourceSet = true}},
            {"DataGridAutoGenOnNullSourceUserSet.xaml", new StateProfile { autoGenFlag = true, isUserSet = true, isItemsSourceCountZero = false, isItemsSourceSet = false}}
        };

        // state tracking
        protected List<DataGridColumn> userColumns;
        protected ObservableCollection<Person> newDataSource;
        protected StateProfile prevState;
        protected StateProfile curState;

        #endregion Private Fields

        #region Constructor        
        
        public DataGridAutoColumnGenerationTest(string filename)
            : base(filename)
        {
            xamlFilename = filename;            
        }

        #endregion

        #region Test Steps

        /// <summary>
        /// Initial Setup  
        /// </summary>
        /// <returns>true if all is fine; false otherwise.</returns>
        public override TestResult Setup()
        {
            base.Setup();

            Status("Setup specific for DataGridAutoColumnGeneration");

            // set the actions the tests will take
            doItemsSourceBehaviors = new List<DoItemsSourceBehavior>
                {
                    this.UpdateNewItemsSource,
                    this.UpdateNewItemsSourceWithZeroCount,
                    this.ClearItemsSource,
                    this.SetItemsSourceToNull,
                    this.AddItemsToSource,
                    this.DeleteItemsFromSource                    
                };

            doAutoGenerateColumnsBehaviors = new List<DoAutoGenerateColumnsBehavior>
                {
                    this.SetAutoGenFlagToFalse,
                    this.SetAutoGenFlagToTrue
                };

            doColumnsBehaviors = new List<DoColumnsBehavior>
                {                    
                    this.AddNewColumns,
                    this.RemoveColumns,
                    this.ReorderColumnsThroughDisplayIndex,
                    this.ReorderColumns,
                    this.ClearColumns
                };

            // create the expected user set columns
            userColumns = new List<DataGridColumn>();
            foreach (DataGridColumn column in MyDataGrid.Columns)
            {
                if(!column.IsAutoGenerated)
                    userColumns.Add(column);
            }            

            // initiate the state
            prevState = curState = initialStateProfiles[xamlFilename];

            DataSource = (People)RootElement.FindName("people");
            TypeFromDataSource = typeof(Person);

            LogComment("Setup for DataGridAutoColumnGeneration was successful");
            return TestResult.Pass;
        }

        public override TestResult CleanUp()
        {
            userColumns = null;
            return TestResult.Pass;

        }
               
        #endregion Test Steps

        #region Public Data

        public delegate void DoItemsSourceBehavior();
        public delegate void DoAutoGenerateColumnsBehavior();
        public delegate void DoColumnsBehavior();

        public struct StateProfile
        {
            public bool autoGenFlag;
            public bool isUserSet;
            public bool isItemsSourceSet;
            public bool isItemsSourceCountZero;
            public bool isItemsSourceNew;
        }

        #endregion Public Data

        #region Helpers

        #region Setup Helpers

        protected void SetupDataSource(IEnumerable dataSource)
        {
            if (dataSource != null)
            {
                bool eventFired = false;
                EventHelper.ExpectEvent<EventArgs>(
                    () =>
                    {
                        // set the ItemsSource
                        MyDataGrid.ItemsSource = dataSource;

                        this.WaitForPriority(DispatcherPriority.SystemIdle);
                        this.Window.Focus();
                    },
                    MyDataGrid,
                    "AutoGeneratedColumns",
                    (sender, args) =>
                    {
                        eventFired = true;
                    });

                // verify AutoGeneratedColumns event fired
                if (!eventFired)
                {
                    throw new TestValidationException("AutoGeneratedColumns event did not fire.");
                }
            }
            else
            {
                MyDataGrid.ItemsSource = dataSource;
            }
        }

        protected void SetToInitState(StateProfile state)
        {
            // set auto gen to false so no auto-gen occurs while resetting
            MyDataGrid.AutoGenerateColumns = false;

            if (state.isUserSet)
            {
                MyDataGrid.Columns.Clear();                
                foreach (DataGridColumn column in userColumns)
                {
                    MyDataGrid.Columns.Add(column);
                }
            }
            else
            {
                MyDataGrid.Columns.Clear();
            }

            if (state.isItemsSourceSet)
            {
                MyDataGrid.ItemsSource = null;
                MyDataGrid.Items.Clear();

                newDataSource = new People();
                if (state.isItemsSourceCountZero)
                {
                    newDataSource.Clear();
                }

                MyDataGrid.ItemsSource = newDataSource;
                QueueHelper.WaitTillQueueItemsProcessed();
            }
            else
            {
                MyDataGrid.ItemsSource = null;
                MyDataGrid.Items.Clear();
            }

            if (state.autoGenFlag)
            {
                MyDataGrid.AutoGenerateColumns = true;
            }
            else
            {
                MyDataGrid.AutoGenerateColumns = false;
            }

            // reset the state variables
            prevState = curState = state;
        }

        #endregion Setup Helpers
        
        #region DoItemsSourceBehavior delegate actions
        
        public void UpdateNewItemsSource()
        {
            prevState = curState;
            curState.isItemsSourceNew = true;
            curState.isItemsSourceSet = true;
            curState.isItemsSourceCountZero = false;

            newDataSource = new People();
            this.SetupDataSource(newDataSource);
        }

        public void UpdateNewItemsSourceWithZeroCount()
        {
            prevState = curState;
            curState.isItemsSourceNew = true;
            curState.isItemsSourceSet = true;
            curState.isItemsSourceCountZero = true;

            newDataSource = new People();
            newDataSource.Clear();
            this.SetupDataSource(newDataSource);

        }

        public void ClearItemsSource()
        {
            if (MyDataGrid.ItemsSource != null)
            {
                prevState = curState;
                curState.isItemsSourceNew = false;
                curState.isItemsSourceSet = true;
                curState.isItemsSourceCountZero = true;

                ObservableCollection<Person> collection;
                if (MyDataGrid.ItemsSource == newDataSource)
                {
                    collection = newDataSource;
                }
                else
                {
                    collection = DataSource as ObservableCollection<Person>;
                }

                collection.Clear();
            }
        }

        public void SetItemsSourceToNull()
        {
            prevState = curState;
            curState.isItemsSourceNew = false;
            curState.isItemsSourceSet = false;
            curState.isItemsSourceCountZero = false;

            MyDataGrid.ItemsSource = null;
        }

        public void AddItemsToSource()
        {
            if (MyDataGrid.ItemsSource != null)
            {
                prevState = curState;
                curState.isItemsSourceNew = false;
                curState.isItemsSourceSet = true;
                curState.isItemsSourceCountZero = false;

                ObservableCollection<Person> collection;
                if (MyDataGrid.ItemsSource == newDataSource)
                {
                    collection = newDataSource;
                }
                else
                {
                    collection = DataSource as ObservableCollection<Person>;
                }

                collection.Add(new Person());
                collection.Add(new Person());
                collection.Add(new Person());
            }
        }

        public void DeleteItemsFromSource()
        {
            if (MyDataGrid.ItemsSource != null)
            {
                prevState = curState;
                curState.isItemsSourceNew = false;
                curState.isItemsSourceSet = true;
                curState.isItemsSourceCountZero = true;

                ObservableCollection<Person> collection;
                if (MyDataGrid.ItemsSource == newDataSource)
                {
                    collection = newDataSource;
                }
                else
                {
                    collection = DataSource as ObservableCollection<Person>;
                }

                int count = collection.Count;
                while (count > 0)
                {
                    collection.RemoveAt(0);
                    count--;
                }
            }
        }

        //public void UpdateNewBoundItems()
        //{
        //    prevState = curState;
        //    curState.isItemsSourceNew = true;
        //    curState.isItemsSourceSet = true;
        //    curState.isItemsSourceCountZero = false;

        //    MyDataGrid.ItemsSource = null;
        //    MyDataGrid.Items.Add(new Person());
        //    MyDataGrid.Items.Add(new Person());
        //    MyDataGrid.Items.Add(new Person());
        //}

        #endregion DoItemsSourceBehavior delegate actions

        #region SetAutoGenerateColumns delegate actions

        public void SetAutoGenFlagToTrue()
        {
            prevState = curState;
            curState.autoGenFlag = true;

            MyDataGrid.AutoGenerateColumns = true;
            QueueHelper.WaitTillQueueItemsProcessed();
        }

        public void SetAutoGenFlagToFalse()
        {
            prevState = curState;
            curState.autoGenFlag = false;

            MyDataGrid.AutoGenerateColumns = false;
            //QueueHelper.WaitTillQueueItemsProcessed();
        }

        #endregion SetAutoGenerateColumns delegate actions

        #region DoColumnsBehavior delegate actions

        public void ReorderColumnsThroughDisplayIndex()
        {
            ReorderColumnsRandomly(2);
        }

        public void ReorderColumns()
        {
            if (MyDataGrid.Columns.Count > 0)
            {
                int first = 0;
                int mid = MyDataGrid.Columns.Count / 2;
                int last = MyDataGrid.Columns.Count - 1;

                MyDataGrid.Columns.Move(first, mid);
                MyDataGrid.Columns.Move(first, last);
                MyDataGrid.Columns.Move(mid, first);
            }
        }

        public void AddNewColumns()
        {
            int mid, last;
            if (MyDataGrid.Columns.Count > 0)
            {
                mid = MyDataGrid.Columns.Count / 2;
                last = MyDataGrid.Columns.Count - 1;
            }
            else
            {
                mid = 0;
                last = 0;
            }

            foreach (int index in new List<int> { 0, mid, last })
            {
                DataGridColumn column = new DataGridTextColumn();
                userColumns.Add(column);
                MyDataGrid.Columns.Insert(index, column);
            }

            curState.isUserSet = true;
        }

        public void RemoveColumns()
        {
            if (MyDataGrid.Columns.Count > 0)
            {
                foreach (int index in new List<int> { 0, 0 })
                {
                    DataGridColumn column = MyDataGrid.Columns[index];
                    if (!column.IsAutoGenerated)
                    {
                        userColumns.Remove(column);
                    }
                    MyDataGrid.Columns.Remove(column);
                }
            }
        }

        public void ClearColumns()
        {
            userColumns.Clear();
            MyDataGrid.Columns.Clear();
        }

        #endregion DoColumnsBehavior delegate actions
        
        #region Verification Helpers

        protected void VerifyColumnInitState()
        {
            StateProfile isp = initialStateProfiles[xamlFilename];

            if (isp.autoGenFlag && isp.isItemsSourceSet && !isp.isItemsSourceCountZero)
            {
                VerifyColumnGeneration();
                VerifyOrderOfGeneratedColumns();
            }
            else
            {
                VerifyColumnsNotGenerated();
            }
        }

        protected void VerifyOnAutoGenColumnsChanged()
        {
            // autogen flag turned off
            if (prevState.autoGenFlag && !curState.autoGenFlag)
            {
                LogComment("FlagChange: AutoGen flag was turned off.  Verify autogenerated columns are removed.");
                VerifyColumnsNotGenerated();
            }
            // autogen flag turned on
            else if (!prevState.autoGenFlag && curState.autoGenFlag)
            {
                if (curState.isItemsSourceSet && !curState.isItemsSourceCountZero)
                {
                    LogComment("FlagChange: AutoGen flag was turned on, source was set with a non-zero count.  Verify columns are autogenerated.");
                    VerifyColumnGeneration();
                    VerifyOrderOfGeneratedColumns();
                }
                else
                {
                    LogComment("FlagChange: AutoGen flag was turned on, source was set with a zero count.  Verify columns are NOT autogenerated.");
                    VerifyColumnsNotGenerated();
                }
            }
        }

        protected void VerifyOnItemsSourceChanged()
        {
            if (curState.autoGenFlag)
            {
                // check for new ItemsSource that has items
                if (!prevState.isItemsSourceNew && curState.isItemsSourceNew && !curState.isItemsSourceCountZero)
                {
                    LogComment("ISChange: AutoGen flag is on, a new source was set with a non-zero count.  Verify columns are autogenerated.");
                    VerifyColumnGeneration();
                    VerifyOrderOfGeneratedColumns();
                }
                // new ItemsSource added with zero items
                else if (!prevState.isItemsSourceNew && curState.isItemsSourceNew && curState.isItemsSourceCountZero)
                {
                    LogComment("ISChange: AutoGen flag is on, a new source was set with a zero count.  Verify columns are NOT autogenerated.");
                    VerifyColumnsNotGenerated();
                }
                // cur ItemsSource is set to null
                else if (prevState.isItemsSourceSet && !curState.isItemsSourceSet)
                {
                    LogComment("ISChange: AutoGen flag is on, ItemsSource was set to null.  Verify columns are NOT autogenerated.");
                    VerifyColumnsNotGenerated();
                }
                // cur ItemsSource was cleared
                else if (!curState.isItemsSourceNew && !prevState.isItemsSourceCountZero && curState.isItemsSourceCountZero)
                {
                    LogComment("ISChange: AutoGen flag is on, collection was cleared.  Verify columns remain in tact.");
                    VerifyOrderOfGeneratedColumns();
                }
                // cur ItemsSource went from zero to more items
                else if (!curState.isItemsSourceNew && prevState.isItemsSourceCountZero && !curState.isItemsSourceCountZero)
                {
                    LogComment("ISChange: AutoGen flag is on, collection went from zero to more items.  Verify columns are autogenerated.");
                    VerifyColumnGeneration();
                    VerifyOrderOfGeneratedColumns();
                }
            }
            else
            {
                LogComment("ISChange: AutoGen flag is off.  Verify columns are NOT autogenerated.");
                VerifyColumnsNotGenerated();
            }
        }

        protected void VerifyOnColumnsChanged()
        {
            // cur ItemsSource went from zero to more items
            if (curState.autoGenFlag &&
                !curState.isItemsSourceNew &&
                prevState.isItemsSourceCountZero &&
                !curState.isItemsSourceCountZero &&
                curState.isItemsSourceSet)
            {
                LogComment("ColumnChange: AutoGen flag is on, collection wentt from zero to more items. Verify columns are autogenerated.");
                VerifyColumnGeneration();
                VerifyOrderOfGeneratedColumns();
            }
        }

        protected void VerifyColumnGeneration()
        {
            foreach (DataGridColumn column in MyDataGrid.Columns)
            {
                if (!IsUserColumn(column))
                {
                    // verify IsAutoGenerated is true for each auto-generated column
                    if (!column.IsAutoGenerated)
                    {
                        throw new TestValidationException("Column.IsAutoGenerated property should be true but is not.");
                    }

                    // verify the property type for each item property matches the correct column 
                    // for each auto-generated column
                    bool result = false;
                    PropertyInfo pi = TypeFromDataSource.GetProperty((string)column.Header);

                    if (pi.PropertyType.IsEnum && (column is DataGridComboBoxColumn))
                    {
                        result = true;
                    }
                    else if (typeof(String).IsAssignableFrom(pi.PropertyType) && (column is DataGridTextColumn))
                    {
                        result = true;

                    }
                    else if (typeof(Boolean).IsAssignableFrom(pi.PropertyType) && (column is DataGridCheckBoxColumn))
                    {
                        result = true;
                    }
                    else if (typeof(Uri).IsAssignableFrom(pi.PropertyType) && (column is DataGridHyperlinkColumn))
                    {
                        result = true;
                    }
                    //else if (typeof(DateTime).IsAssignableFrom(pi.PropertyType) && (column is DataGridDateTimeColumn)
                    //{
                    //    result = true; 
                    //}
                    else
                    {
                        if (column is DataGridTextColumn)
                        {
                            result = true;
                        }
                    }

                    if (!result)
                    {
                        throw new TestValidationException(string.Format("Column type: {0} does not match the property type: {1}", column, pi.PropertyType));
                    }
                }
            }
        }

        protected void VerifyOrderOfGeneratedColumns()
        {
            // verify the number of columns match the number of properties
            PropertyInfo[] piList = GetDataSourceProperties();
            int expectColumnCount = piList.Length + userColumns.Count;
            if (expectColumnCount != MyDataGrid.Columns.Count)
            {
                throw new TestValidationException(string.Format(
                    "Number of columns: {0}, does not match the expected count: {1}",
                    MyDataGrid.Columns.Count,
                    expectColumnCount));
            }

            // verify user columns come before auto-generated columns
            int userColumnCount = userColumns.Count;
            for (int i = 0; i < userColumnCount; i++)
            {
                if (!IsUserColumn(MyDataGrid.Columns[i]))
                {
                    throw new TestValidationException(string.Format(
                        "Auto-gen column was found in the subset where only User columns should be. Current Index: {0}, UserColumn.Count: {1}",
                        i,
                        userColumnCount));
                }
            }
            for (int i = userColumnCount; i < MyDataGrid.Columns.Count; i++)
            {
                if (IsUserColumn(MyDataGrid.Columns[i]))
                {
                    throw new TestValidationException(string.Format(
                        "User set column was found in the subset where only auto-gen columns should be. Current Index: {0}, UserColumn.Count: {1}",
                        i,
                        userColumnCount));
                }
            }
        }

        protected void VerifyColumnsNotGenerated()
        {
            // verify auto gen columns are not added yet
            if (MyDataGrid.Columns.Count != userColumns.Count)
            {
                throw new TestValidationException(string.Format(
                    "Number of columns: {0}, does not match the expected count: {1}",
                    MyDataGrid.Columns.Count,
                    userColumns.Count));
            }
        }

        #endregion Verification Helpers

        #region General Helpers
        
        protected void ReorderColumnsRandomly(int numIterations)
        {
            if (MyDataGrid.Columns.Count > 0)
            {
                Random rand = new Random();

                int iterations = MyDataGrid.Columns.Count * numIterations;
                for (int i = 0; i < iterations; i++)
                {
                    int newDisplayIndex = rand.Next(0, MyDataGrid.Columns.Count - 1);
                    MyDataGrid.Columns[i % MyDataGrid.Columns.Count].DisplayIndex = newDisplayIndex;
                    QueueHelper.WaitTillQueueItemsProcessed();
                }
            }
        }

        protected bool IsUserColumn(DataGridColumn column)
        {
            foreach (DataGridColumn userColumn in userColumns)
            {
                if (column == userColumn)
                    return true;
            }

            return false;
        }

        protected PropertyInfo[] GetDataSourceProperties()
        {
            return TypeFromDataSource.GetProperties(BindingFlags.Public | BindingFlags.Instance);
        }

        #endregion General Helpers

        #endregion Helpers
    }
}
