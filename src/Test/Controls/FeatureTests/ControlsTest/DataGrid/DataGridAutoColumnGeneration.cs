using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Reflection;
using System.Windows.Controls;
using System.Windows.Threading;
using Avalon.Test.ComponentModel;
using Microsoft.Test.Controls.DataSources;
using Microsoft.Test.Discovery;
using Microsoft.Test.Logging;
using Microsoft.Test.TestTypes;


namespace Microsoft.Test.Controls
{
    ////////////////////////////////////////////////////////////////////////////////////////////
    // DISABLEDUNSTABLETEST:
    // TestName: DataGridAutoColumnGeneration
    // Area: Controls�� SubArea: DataGrid
    // Disable this case due to high fail rate, will enable after fix it.
    // to find all disabled tests in test tree, use: �findstr /snip DISABLEDUNSTABLETEST� 
    ////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// <description>
    /// DataGrid auto-column generation tests.    
    /// </description>

    /// </summary>
    [Test(0, "DataGrid", "DataGridAutoColumnGeneration", SecurityLevel = TestCaseSecurityLevel.FullTrust, Keywords = "Localization_Suite", Disabled = true)]
    public class DataGridAutoColumnGeneration : DataGridAutoColumnGenerationTest
    {
        #region Constructor

        public DataGridAutoColumnGeneration()
            : this(@"DataGridAutoGenOffUserSet.xaml")
        {
        }

        [Variation("DataGridAutoGenOn.xaml")]
        [Variation("DataGridAutoGenOff.xaml")]
        [Variation("DataGridAutoGenOnZeroCount.xaml")]
        [Variation("DataGridAutoGenOnNullSource.xaml")]
        [Variation("DataGridAutoGenOnUserSet.xaml")]
        [Variation("DataGridAutoGenOffUserSet.xaml")]
        [Variation("DataGridAutoGenOnZeroCountUserSet.xaml")]
        [Variation("DataGridAutoGenOnNullSourceUserSet.xaml")]
        public DataGridAutoColumnGeneration(string filename)
            : base(filename)
        {
            InitializeSteps += new TestStep(Setup);
            RunSteps += new TestStep(TestInitialState);
            RunSteps += new TestStep(TestTogglingAutoGenFlag);
            RunSteps += new TestStep(TestTogglingAutoGenFlag2);            
        }

        #endregion

        #region Test Steps

        /// <summary>
        /// Initial Setup  
        /// </summary>
        /// <returns>true if all is fine; false otherwise.</returns>
        public override TestResult Setup()
        {
            base.Setup();

            Status("Setup specific for DataGridAutoColumnGeneration");

            // set the actions the tests will take
            doItemsSourceBehaviors = new List<DoItemsSourceBehavior>
                {
                    this.UpdateNewItemsSource,
                    this.UpdateNewItemsSourceWithZeroCount,
                    this.ClearItemsSource,
                    this.SetItemsSourceToNull,
                    this.AddItemsToSource,
                    this.DeleteItemsFromSource                    
                };

            doAutoGenerateColumnsBehaviors = new List<DoAutoGenerateColumnsBehavior>
                {
                    this.SetAutoGenFlagToFalse,
                    this.SetAutoGenFlagToTrue
                };

            doColumnsBehaviors = new List<DoColumnsBehavior>
                {                    
                    this.AddNewColumns,
                    this.RemoveColumns,
                    this.ReorderColumnsThroughDisplayIndex,
                    this.ReorderColumns,
                    this.ClearColumns
                };

            // create the expected user set columns
            userColumns = new List<DataGridColumn>();
            foreach (DataGridColumn column in MyDataGrid.Columns)
            {
                if(!column.IsAutoGenerated)
                    userColumns.Add(column);
            }            

            // initiate the state
            prevState = curState = initialStateProfiles[xamlFilename];

            DataSource = (People)RootElement.FindName("people");
            TypeFromDataSource = typeof(Person);

            LogComment("Setup for DataGridAutoColumnGeneration was successful");
            return TestResult.Pass;
        }

        /// <summary>
        /// Verify the expected data when the data grid is initially loaded.
        /// </summary>
        /// <returns>true if all is fine; false otherwise.</returns>
        private TestResult TestInitialState()
        {
            Status("TestInitialState");

            VerifyColumnInitState();

            LogComment("TestInitialState was successful");
            return TestResult.Pass;
        }

        /// <summary>
        /// Action1: change the AutoGenerateColumns property, and verify
        /// Action2: change the ItemsSource behavior, and verify 
        /// </summary>
        /// <returns>true if all is fine; false otherwise.</returns>
        private TestResult TestTogglingAutoGenFlag()
        {
            Status("TestTogglingAutoGenerateColumns");
            
            try
            {
                foreach (DoAutoGenerateColumnsBehavior AutoGenBehavior in doAutoGenerateColumnsBehaviors)
                {
                    LogComment(string.Format("Begin AutoGenBehavior: {0}", AutoGenBehavior.Method.Name));

                    AutoGenBehavior();
                    VerifyOnAutoGenColumnsChanged();

                    foreach (DoItemsSourceBehavior ItemsSourceBehavior in doItemsSourceBehaviors)
                    {
                        LogComment(string.Format("  Begin ItemsSourceBehavior: {0}", ItemsSourceBehavior.Method.Name));

                        // Capture the current state
                        StateProfile tempCurState = curState;

                        try
                        {
                            ItemsSourceBehavior();
                            VerifyOnItemsSourceChanged();
                        }
                        finally
                        {
                            SetToInitState(tempCurState);
                        }

                        LogComment(string.Format("  End ItemsSourceBehavior: {0}", ItemsSourceBehavior.Method.Name));
                    }

                    LogComment(string.Format("End AutoGenBehavior: {0}", AutoGenBehavior.Method.Name));
                }
            }
            finally
            {
                SetToInitState(initialStateProfiles[xamlFilename]);
            }

            LogComment("TestTogglingAutoGenerateColumns was successful");
            return TestResult.Pass;
        }

        /// <summary>
        /// Action1: change the AutoGenerateColumns property, and verify
        /// Action2: change the column behavior, and verify 
        /// </summary>
        /// <returns>true if all is fine; false otherwise.</returns>
        private TestResult TestTogglingAutoGenFlag2()
        {
            Status("TestTogglingAutoGenerateColumns");

            try
            {
                foreach (DoAutoGenerateColumnsBehavior AutoGenBehavior in doAutoGenerateColumnsBehaviors)
                {
                    LogComment(string.Format("Begin AutoGenBehavior: {0}", AutoGenBehavior.Method.Name));

                    AutoGenBehavior();
                    VerifyOnAutoGenColumnsChanged();

                    foreach (DoColumnsBehavior DoColumnBehavior in doColumnsBehaviors)
                    {
                        LogComment(string.Format("  Begin DoColumnBehavior: {0}", DoColumnBehavior.Method.Name));

                        // Capture the current state
                        StateProfile tempCurState = curState;

                        try
                        {
                            DoColumnBehavior();
                            VerifyOnColumnsChanged();
                        }
                        finally
                        {
                            SetToInitState(tempCurState);
                        }

                        LogComment(string.Format("  End DoColumnBehavior: {0}", DoColumnBehavior.Method.Name));
                    }

                    LogComment(string.Format("End AutoGenBehavior: {0}", AutoGenBehavior.Method.Name));
                }
            }
            finally
            {
                SetToInitState(initialStateProfiles[xamlFilename]);                
            }

            LogComment("TestTogglingAutoGenerateColumns was successful");
            return TestResult.Pass;
        }        
        
        #endregion Test Steps        
    }
}
