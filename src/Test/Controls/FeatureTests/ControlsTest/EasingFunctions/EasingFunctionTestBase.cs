using System;
using System.Windows;
using System.Windows.Input;
using System.Windows.Controls;
using System.Windows.Threading;
using Avalon.Test.ComponentModel;
using Microsoft.Test.Controls.Helpers;
using Microsoft.Test.Discovery;
using Microsoft.Test.Input;
using Microsoft.Test.Logging;
using Microsoft.Test.TestTypes;
using Microsoft.Test.Animation;
using System.Windows.Media.Animation;
using System.Windows.Shapes;
using MS.Internal;

namespace Microsoft.Test.Controls
{
    /// <summary>
    /// Easing Functions Base Class
    /// </summary>    
    public abstract class EasingFunctionTestBase : XamlTest
    {        
        #region Constructors

        public EasingFunctionTestBase(String Function, String Mode, String Control, String Property)
            : base("EasingFunctionApp.xaml")
        {
            this.easingFunction = Function;
            this.easingMode = Mode;
            this.easingControl = Control;
            this.easingProperty = Property;
            //Test Steps
            InitializeSteps += new TestStep(Initialize); 
            CleanUpSteps += new TestStep(CleanUp);
            RunSteps += new TestStep(Animate);
        }
        #endregion

        #region private methods
        Button button;
        Label label;        
        double animationTime = 1.0;
        double animationFrom;
        double animationTo;                
        int[] times = new int[] {0, 500, 1000};
        double tolerance;
        AnimationClock clock;                
        DependencyProperty dp;
        DependencyObject animatedObject;
        String easingfunction;
        String easingmode;
        String easingcontrol;
        String easingproperty;
        #endregion

        #region protected and public methods
        protected DoubleAnimation progressAnimation = new DoubleAnimation();
        public String easingFunction
        {
            get
            {
                return easingfunction;
            }

            set
            {
                easingfunction = value;
            }
        }

        public String easingMode
        {
            get
            {
                return easingmode;
            }
            set
            {
                easingmode = value;
            }
        }
        public String easingControl
        {
            get
            {
                return easingcontrol;
            }
            set
            {
                easingcontrol = value;
            }
        }
        public String easingProperty
        {
            get
            {
                return easingproperty;
            }
            set
            {
                easingproperty = value;
            }
        }
        
        /// <summary>
        /// Assign Animation Data based on the dependency property to be animated. Handle no valid DP.
        /// </summary>
        public void SetAnimationTestData()
        {
            switch (easingProperty)
            {
                case "Width":
                    animationFrom = 0.0;
                    animationTo = 500.0;
                    animationTime = 2.0;                    
                    animatedObject.SetValue(FrameworkElement.HeightProperty, (double)40.0);
                    dp = FrameworkElement.WidthProperty;
                    tolerance = 0.32;
                    break;
                case "Height":
                    animationFrom = 0.0;
                    animationTo = 100.0;
                    animationTime = 2.0;
                    animatedObject.SetValue(FrameworkElement.WidthProperty, (double)80.0);
                    dp = FrameworkElement.HeightProperty;
                    tolerance = 0.32;
                    break;
                default:
                    throw new TestValidationException("No Valid DP specified");
            }
        }

        /// <summary>
        /// Calculate Animation Progress time generated by Easing Functions using the easing equations. 
        /// </summary>        
        public double CalculateExpectedValues(double normalizedTime)
        {
            double expected;
            double animationBy;
            double ratio;
            animationBy = Math.Abs(animationTo - animationFrom);                                        
                switch (easingMode)
                {
                    case "EaseIn":
                        ratio = Calculate(normalizedTime);
                        expected = animationBy * ratio;
                        break;
                    case "EaseOut":
                        ratio = (1 - Calculate(1 - normalizedTime));
                        expected = animationBy * ratio;
                        break;
                    case "EaseInOut":
                        if (normalizedTime < 0.5)
                        {                   
                            ratio = (Calculate(normalizedTime * 2) / 2);
                            expected = animationBy * ratio;                            
                        }
                        else
                        {                         
                            ratio = ((1 - Calculate(2 - (normalizedTime * 2))) / 2 + 0.5);
                            expected = animationBy * ratio;                            
                        }
                        break;                        
                    default:
                        throw new TestValidationException("No Valid EasingMode defined");                        
                }
                LogComment("Animation Time Progress: " + clock.CurrentProgress.ToString());
                LogComment("Easing Time Progress   : " + ratio.ToString());
                return expected;
        }
      

        /// <summary>
        /// Calculate the progress time using easing equation. 
        /// </summary>
        /// <param name="time"></param>
        /// <returns></returns>
        public abstract double Calculate(double time);                

        /// <summary>
        /// Create Animation. Set the easing function properties. 
        /// </summary>
        public void CreateAnimation()
        {            
            progressAnimation.From = animationFrom;
            progressAnimation.To = animationTo;
            progressAnimation.Duration = new Duration(TimeSpan.FromSeconds(animationTime));
            SetEasingFunctions();
        }

        public abstract void SetEasingFunctions();               

        /// <summary>
        /// Compare observed value to expected value. 
        /// </summary>
        /// <param name="count"></param>
        /// <returns>True if values match; False otherwise</returns>
        public bool Compare()
        {
            System.Threading.Thread.Sleep(200);
            double testValue;
            double expected;
            double diff;
            if ((double)clock.CurrentProgress.Value > 0)
            {
                expected = CalculateExpectedValues((double)clock.CurrentProgress.Value);
                switch (easingControl)
                {
                    case "Button":
                        testValue = (Double)animatedObject.GetValue(dp);
                        break;
                    case "Label":
                        testValue = (Double)animatedObject.GetValue(dp);
                        break;
                    default:
                        LogComment("No valid Control Defined");
                        testValue = 0.0;
                        break;
                }

                diff = Math.Abs(expected - testValue);

                if ((expected != 0) && !((diff / expected) < tolerance))
                {
                    LogComment(String.Format("FAIL: Expected Value = {0} ; Observed Value = {1}; Tolerance {2}", expected, testValue, tolerance));
                    return false;
                }
                else
                {
                    LogComment(String.Format("PASS: Expected Value = {0} ; Observed Value = {1}; Tolerance {2}", expected, testValue, tolerance));
                    return true;
                }
            }
            else
            {
                return true;
            }
        }
        #endregion

        #region Test Steps 
        /// <summary>
        /// Initialize Test Step. 
        /// </summary>
        /// <returns>True if setup successful; False otherwise</returns>
        public TestResult Initialize()
        {
            Status("Initialize");
            LogComment(string.Format("Current Variation: Mode = {0}; Control = {1}; Property = {2}", easingMode, easingControl, easingProperty));
            switch (easingControl)
            {
                case "Button":
                    button = (Button)RootElement.FindName("button");
                    if (button == null)
                    {
                        LogComment("Button not found");
                        return TestResult.Fail;
                    }
                    animatedObject = (Button)button;
                    break;
                case "Label":
                    label = (Label)RootElement.FindName("label");
                    if (label == null)
                    {
                        LogComment("label not found");
                        return TestResult.Fail;
                    }
                    animatedObject = (Label)label;
                    break;
                default:
                    throw new TestValidationException("No valid control defined");
            }
            SetAnimationTestData();
            LogComment("Setup Successful");
            return TestResult.Pass;
        }

        public virtual TestResult CleanUp()
        {
            button = null;
            label = null;
            animatedObject = null;
            clock = null;
            return TestResult.Pass;
        }

        /// <summary>
        /// Creates and performs the animation. 
        /// </summary>
        /// <returns>True if all expected values match observed values; False otherwise</returns>
        public TestResult Animate()
        {
            Status("Animate");
            
            bool testPass = true;
            bool clockTicked = false;
            ClockManager clockManager = new ClockManager(times);
            if (clockManager != null)
            {
                LogComment("Clock Manager created");
            }
            ClockManager.Ticked += delegate(object sender, TimeControlArgs e)
            {                
                if (clock.CurrentTime.HasValue)
                {
                    clockTicked = true;                    
                    if (testPass)
                    {                        
                        LogComment("Clock Paused at " + e.curTime.ToString());                        
                        testPass = Compare();                        
                    }                    
                }                
                if (e.lastTick)
                    LogComment("Last tick registered");
            };
            
            CreateAnimation();                                    
            clock = progressAnimation.CreateClock();
            switch (easingControl)
            {
                case "Button":
                    button.ApplyAnimationClock(dp, clock);                    
                    break;
                case "Label":
                    label.ApplyAnimationClock(dp, clock);                    
                    break;
                default:
                    throw new TestValidationException("No valid control defined");
            }

            clockManager.hostManager.Resume();
            LogComment("Clock Manager resumed");
            QueueHelper.WaitTillTimeout(TimeSpan.FromSeconds(animationTime));
            //Fail the test if clock doesnt pause during animation. 
            if (clockTicked && testPass)
            {
                LogComment("EasingFunction successful");
                return TestResult.Pass;
            }
            else
            {
                if (!clockTicked)
                {
                    LogComment("EasingFunction failed: Clock did not pause. No Values Measured");
                }
                else
                {
                    LogComment("EasingFunction failed: Values not matching");
                }
                return TestResult.Fail;
            }
        }        
        #endregion 
    }
}
