#include "versions.h"
#include "ndp20.versions.h"

.assembly extern PresentationCore
{
	.publickeytoken = PRESENTATIONCORE_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver PRESENTATIONCORE_ASSEMBLY_VERSION_IL
}
.assembly extern PresentationFramework
{
	.publickeytoken = PRESENTATIONFRAMEWORK_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver PRESENTATIONFRAMEWORK_ASSEMBLY_VERSION_IL
}
.assembly extern System
{
	.publickeytoken = SYSTEM_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_ASSEMBLY_VERSION_IL
}
.assembly extern System.Drawing
{
	.publickeytoken = SYSTEM_DRAWING_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_DRAWING_ASSEMBLY_VERSION_IL
}
.assembly extern System.Windows.Forms
{
	.publickeytoken = SYSTEM_WINDOWS_FORMS_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_WINDOWS_FORMS_ASSEMBLY_VERSION_IL
}
.assembly extern System.Xml
{
	.publickeytoken = SYSTEM_XML_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver SYSTEM_XML_ASSEMBLY_VERSION_IL
}
.assembly extern TestRuntime
{
	.publickeytoken = TESTRUNTIME_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver TESTRUNTIME_ASSEMBLY_VERSION_IL
}
.assembly extern UIAutomationClient
{
	.publickeytoken = UIAUTOMATIONCLIENT_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver UIAUTOMATIONCLIENT_ASSEMBLY_VERSION_IL
}
.assembly extern UIAutomationTypes
{
	.publickeytoken = UIAUTOMATIONTYPES_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver UIAUTOMATIONTYPES_ASSEMBLY_VERSION_IL
}
.assembly extern WindowsBase
{
	.publickeytoken = WINDOWSBASE_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver WINDOWSBASE_ASSEMBLY_VERSION_IL
}
.assembly extern mscorlib
{
	.publickeytoken = MSCORLIB_20_ASSEMBLY_PUBLIC_KEY_TOKEN_IL
	.ver MSCORLIB_20_ASSEMBLY_VERSION_IL
}
.assembly EditingTestLib
{
	.custom instance void [mscorlib]System.CLSCompliantAttribute::.ctor(bool) = { bool(false) }
	.custom instance void [mscorlib]System.Runtime.InteropServices.ComVisibleAttribute::.ctor(bool) = { bool(false) }
	.custom instance void [mscorlib]System.Security.AllowPartiallyTrustedCallersAttribute::.ctor() = { }
	.permissionset reqmin = (2E 01 80 84 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 53 65 63 75 72 69 74 79 50 65 72 6D 69 73 73 69 6F 6E 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 15 01 54 02 10 53 6B 69 70 56 65 72 69 66 69 63 61 74 69 6F 6E 01)
	.publickey = EDITINGTESTLIB_ASSEMBLY_PUBLIC_KEY_IL
	.hash algorithm 0x00008004
	.ver EDITINGTESTLIB_ASSEMBLY_VERSION_IL
}
.namespace Avalon.Test.Win32
{
	.class public sealed Interop
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public static hidebysig 
			string StringFromCharPtr(native int ptr)
		{
			ret
		}
		.method public static hidebysig 
			string StringFromSBytePtr(native int ptr)
		{
			ret
		}
		.method public static hidebysig 
			string StringFromSecureString(class [mscorlib]System.Security.SecureString sStr)
		{
			ret
		}
		.method public static hidebysig 
			native int hMemStringToHGlobalAnsi(string str)
		{
			ret
		}
		.method public static hidebysig 
			native int hMemStringToHGlobalAuto(string str)
		{
			ret
		}
		.method public static hidebysig 
			native int hMemStringToHGlobalUni(string str)
		{
			ret
		}
		.method public static hidebysig 
			class [System]System.Diagnostics.Process LaunchAProcess(string processName, string Parameters)
		{
			ret
		}
		.method public static hidebysig 
			void ProcessWait(class [System]System.Diagnostics.Process process, int32 milliseconds)
		{
			ret
		}
		.method public static hidebysig 
			bool ProcessExit(class [System]System.Diagnostics.Process process)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
}
.namespace Microsoft.Test.KoKoMo
{
	.class public sealed CallAfterHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters, object result)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters, object result, class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed CallBeforeHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool Invoke(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters, class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance bool EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract Model
		extends Microsoft.Test.KoKoMo.ModelItem
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Init()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Terminate()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetAttributeValues(class Microsoft.Test.KoKoMo.ModelItemAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelEngine get_Engine()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Engine(class Microsoft.Test.KoKoMo.ModelEngine 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsExecuting()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_IsExecuting(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_MaxInstances()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_MaxInstances(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelActions get_Actions()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelVariables get_Variables()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void add_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void remove_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void add_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void remove_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool OnCallBefore(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void OnCallAfter(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters, object result)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void VerifyException(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters, class [mscorlib]System.Exception e, string id)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reload()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.Model get_Parent()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Parent(class Microsoft.Test.KoKoMo.Model 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.Models get_Children()
		{
			ret
		}
		.event Microsoft.Test.KoKoMo.CallAfterHandler CallAfter
		{
			.addon instance void Microsoft.Test.KoKoMo.Model::add_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler)
			.removeon instance void Microsoft.Test.KoKoMo.Model::remove_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler)
		}
		.event Microsoft.Test.KoKoMo.CallBeforeHandler CallBefore
		{
			.addon instance void Microsoft.Test.KoKoMo.Model::add_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler)
			.removeon instance void Microsoft.Test.KoKoMo.Model::remove_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelActions Actions()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelActions Microsoft.Test.KoKoMo.Model::get_Actions()
		}
		.property instance class Microsoft.Test.KoKoMo.Models Children()
		{
			.get instance class Microsoft.Test.KoKoMo.Models Microsoft.Test.KoKoMo.Model::get_Children()
		}
		.property instance class Microsoft.Test.KoKoMo.ModelEngine Engine()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelEngine Microsoft.Test.KoKoMo.Model::get_Engine()
			.set instance void Microsoft.Test.KoKoMo.Model::set_Engine(class Microsoft.Test.KoKoMo.ModelEngine)
		}
		.property instance bool IsExecuting()
		{
			.get instance bool Microsoft.Test.KoKoMo.Model::get_IsExecuting()
			.set instance void Microsoft.Test.KoKoMo.Model::set_IsExecuting(bool)
		}
		.property instance int32 MaxInstances()
		{
			.get instance int32 Microsoft.Test.KoKoMo.Model::get_MaxInstances()
			.set instance void Microsoft.Test.KoKoMo.Model::set_MaxInstances(int32)
		}
		.property instance class Microsoft.Test.KoKoMo.Model Parent()
		{
			.get instance class Microsoft.Test.KoKoMo.Model Microsoft.Test.KoKoMo.Model::get_Parent()
			.set instance void Microsoft.Test.KoKoMo.Model::set_Parent(class Microsoft.Test.KoKoMo.Model)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelVariables Variables()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelVariables Microsoft.Test.KoKoMo.Model::get_Variables()
		}
	}
	.class public ModelAction
		extends Microsoft.Test.KoKoMo.ModelItem
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.Model model, class [mscorlib]System.Reflection.MethodInfo 'method', class Microsoft.Test.KoKoMo.ModelActionAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int32 get_Weight()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_Disabled()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Disabled(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CallLimit()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallLimit(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallOnce()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallOnce(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallFirst()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallFirst(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallLast()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallLast(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallBefore()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallBefore(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallAfter()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallAfter(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Execute(class Microsoft.Test.KoKoMo.ModelParameters parameters)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelRequirements get_Requirements()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelParameters get_Parameters()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Reflection.MethodInfo get_Method()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reload()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Clone()
		{
			ret
		}
		.property instance bool CallAfter()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelAction::get_CallAfter()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_CallAfter(bool)
		}
		.property instance bool CallBefore()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelAction::get_CallBefore()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_CallBefore(bool)
		}
		.property instance bool CallFirst()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelAction::get_CallFirst()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_CallFirst(bool)
		}
		.property instance bool CallLast()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelAction::get_CallLast()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_CallLast(bool)
		}
		.property instance int32 CallLimit()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelAction::get_CallLimit()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_CallLimit(int32)
		}
		.property instance bool CallOnce()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelAction::get_CallOnce()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_CallOnce(bool)
		}
		.property instance bool Disabled()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelAction::get_Disabled()
			.set instance void Microsoft.Test.KoKoMo.ModelAction::set_Disabled(bool)
		}
		.property instance class [mscorlib]System.Reflection.MethodInfo Method()
		{
			.get instance class [mscorlib]System.Reflection.MethodInfo Microsoft.Test.KoKoMo.ModelAction::get_Method()
		}
		.property instance string Name()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelAction::get_Name()
		}
		.property instance class Microsoft.Test.KoKoMo.ModelParameters Parameters()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelParameters Microsoft.Test.KoKoMo.ModelAction::get_Parameters()
		}
		.property instance class Microsoft.Test.KoKoMo.ModelRequirements Requirements()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelRequirements Microsoft.Test.KoKoMo.ModelAction::get_Requirements()
		}
		.property instance int32 Weight()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelAction::get_Weight()
		}
	}
	.class public ModelActionAttribute
		extends Microsoft.Test.KoKoMo.ModelItemAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(192) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CallLimit()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallLimit(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallOnce()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallOnce(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallFirst()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallFirst(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallLast()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallLast(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallBefore()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallBefore(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CallAfter()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CallAfter(bool 'value')
		{
			ret
		}
		.property instance bool CallAfter()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelActionAttribute::get_CallAfter()
			.set instance void Microsoft.Test.KoKoMo.ModelActionAttribute::set_CallAfter(bool)
		}
		.property instance bool CallBefore()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelActionAttribute::get_CallBefore()
			.set instance void Microsoft.Test.KoKoMo.ModelActionAttribute::set_CallBefore(bool)
		}
		.property instance bool CallFirst()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelActionAttribute::get_CallFirst()
			.set instance void Microsoft.Test.KoKoMo.ModelActionAttribute::set_CallFirst(bool)
		}
		.property instance bool CallLast()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelActionAttribute::get_CallLast()
			.set instance void Microsoft.Test.KoKoMo.ModelActionAttribute::set_CallLast(bool)
		}
		.property instance int32 CallLimit()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelActionAttribute::get_CallLimit()
			.set instance void Microsoft.Test.KoKoMo.ModelActionAttribute::set_CallLimit(int32)
		}
		.property instance bool CallOnce()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelActionAttribute::get_CallOnce()
			.set instance void Microsoft.Test.KoKoMo.ModelActionAttribute::set_CallOnce(bool)
		}
	}
	.class public sealed ModelActionFlags
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelActionFlags CallAfter = int32(0x00000080)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelActionFlags CallBefore = int32(0x00000040)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelActionFlags CallFirst = int32(0x00000010)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelActionFlags CallLast = int32(0x00000020)
	}
	.class public ModelActionInfo
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameters parameters, object retval)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelAction get_Action()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Action(class Microsoft.Test.KoKoMo.ModelAction 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelParameters get_Parameters()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Parameters(class Microsoft.Test.KoKoMo.ModelParameters 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_RetVal()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_RetVal(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Created()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Created(bool 'value')
		{
			ret
		}
		.property instance class Microsoft.Test.KoKoMo.ModelAction Action()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelAction Microsoft.Test.KoKoMo.ModelActionInfo::get_Action()
			.set instance void Microsoft.Test.KoKoMo.ModelActionInfo::set_Action(class Microsoft.Test.KoKoMo.ModelAction)
		}
		.property instance bool Created()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelActionInfo::get_Created()
			.set instance void Microsoft.Test.KoKoMo.ModelActionInfo::set_Created(bool)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelParameters Parameters()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelParameters Microsoft.Test.KoKoMo.ModelActionInfo::get_Parameters()
			.set instance void Microsoft.Test.KoKoMo.ModelActionInfo::set_Parameters(class Microsoft.Test.KoKoMo.ModelParameters)
		}
		.property instance object RetVal()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelActionInfo::get_RetVal()
			.set instance void Microsoft.Test.KoKoMo.ModelActionInfo::set_RetVal(object)
		}
	}
	.class public ModelActionInfos
		extends class [mscorlib]'System.Collections.Generic.List`1'<class Microsoft.Test.KoKoMo.ModelActionInfo>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public ModelActions
		extends class 'Microsoft.Test.KoKoMo.ModelItems`1'<class Microsoft.Test.KoKoMo.ModelAction>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelAction[] actions)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelParameters get_Parameters()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelActions Find(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelActions FindExcept(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelActions FindFlag(valuetype Microsoft.Test.KoKoMo.ModelActionFlags flag)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelActions FindFlag(valuetype Microsoft.Test.KoKoMo.ModelActionFlags flag, bool include)
		{
			ret
		}
		.property instance class Microsoft.Test.KoKoMo.ModelParameters Parameters()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelParameters Microsoft.Test.KoKoMo.ModelActions::get_Parameters()
		}
	}
	.class public ModelAttribute
		extends Microsoft.Test.KoKoMo.ModelItemAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_MaxInstances()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_MaxInstances(int32 'value')
		{
			ret
		}
		.field family int32 _maxinstances
		.property instance int32 MaxInstances()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelAttribute::get_MaxInstances()
			.set instance void Microsoft.Test.KoKoMo.ModelAttribute::set_MaxInstances(int32)
		}
	}
	.class public ModelEngine
		extends Microsoft.Test.KoKoMo.ModelItem
		implements [mscorlib]System.IDisposable
	{
		.method public hidebysig specialname 
			instance void .ctor(object caller, int32 seed)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object caller)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.Model[] models)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method private final virtual hidebysig newslot 
			instance void System.IDisposable.Dispose()
		{
			.override [mscorlib]System.IDisposable::Dispose
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_InvalidActions()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_InvalidActions(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_InvalidParameters()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_InvalidParameters(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelActionInfos get_ActionsTrace()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelEngineOptions get_Options()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Options(class Microsoft.Test.KoKoMo.ModelEngineOptions 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Caller()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.Models get_Models()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reload()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Clone()
		{
			ret
		}
		.method family hidebysig 
			instance class Microsoft.Test.KoKoMo.ModelActions GetPossibleActions(class Microsoft.Test.KoKoMo.ModelActions totalactions)
		{
			ret
		}
		.method family hidebysig 
			instance bool MeetsRequirements(class Microsoft.Test.KoKoMo.ModelRequirements requirements)
		{
			ret
		}
		.method family hidebysig 
			instance bool MeetsRequirements(class Microsoft.Test.KoKoMo.ModelRequirements requirements, [out] class Microsoft.Test.KoKoMo.ModelRequirement& failedrequirement)
		{
			ret
		}
		.method family hidebysig 
			instance class Microsoft.Test.KoKoMo.ModelAction DetermineNextAction()
		{
			ret
		}
		.method family hidebysig 
			instance class Microsoft.Test.KoKoMo.ModelParameters DetermineParameters(class Microsoft.Test.KoKoMo.ModelAction action)
		{
			ret
		}
		.method family hidebysig 
			instance class Microsoft.Test.KoKoMo.ModelValue DetermineParameterValue(class Microsoft.Test.KoKoMo.ModelParameter parameter)
		{
			ret
		}
		.method public hidebysig 
			instance void Run()
		{
			ret
		}
		.method public hidebysig 
			instance bool RunUntil(class Microsoft.Test.KoKoMo.ModelRequirement[] requirements)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public hidebysig 
			instance bool RunUntil(class Microsoft.Test.KoKoMo.ModelFunction func)
		{
			ret
		}
		.method public hidebysig 
			instance bool RunUntil(class Microsoft.Test.KoKoMo.ModelRequirements requirements)
		{
			ret
		}
		.method public hidebysig 
			instance void RunScenario(class Microsoft.Test.KoKoMo.ModelAction[] actions)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public hidebysig 
			instance void RunScenario(class Microsoft.Test.KoKoMo.ModelActions actions)
		{
			ret
		}
		.method public hidebysig 
			instance void RunScenario(class Microsoft.Test.KoKoMo.ModelActionInfo[] actioninfos)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.field family class Microsoft.Test.KoKoMo.ModelActionInfos _actionstrace
		.field family object _caller
		.field family class Microsoft.Test.KoKoMo.ModelEngineOptions _engineoptions
		.field family class Microsoft.Test.KoKoMo.Models _models
		.property instance class Microsoft.Test.KoKoMo.ModelActionInfos ActionsTrace()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelActionInfos Microsoft.Test.KoKoMo.ModelEngine::get_ActionsTrace()
		}
		.property instance object Caller()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelEngine::get_Caller()
		}
		.property instance bool InvalidActions()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelEngine::get_InvalidActions()
			.set instance void Microsoft.Test.KoKoMo.ModelEngine::set_InvalidActions(bool)
		}
		.property instance bool InvalidParameters()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelEngine::get_InvalidParameters()
			.set instance void Microsoft.Test.KoKoMo.ModelEngine::set_InvalidParameters(bool)
		}
		.property instance class Microsoft.Test.KoKoMo.Models Models()
		{
			.get instance class Microsoft.Test.KoKoMo.Models Microsoft.Test.KoKoMo.ModelEngine::get_Models()
		}
		.property instance class Microsoft.Test.KoKoMo.ModelEngineOptions Options()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelEngineOptions Microsoft.Test.KoKoMo.ModelEngine::get_Options()
			.set instance void Microsoft.Test.KoKoMo.ModelEngine::set_Options(class Microsoft.Test.KoKoMo.ModelEngineOptions)
		}
	}
	.class public sealed ModelEngineFlags
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelEngineFlags InvalidActions = int32(0x00000001)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelEngineFlags InvalidParameters = int32(0x00000002)
	}
	.class public ModelEngineOptions
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance valuetype Microsoft.Test.KoKoMo.WeightScheme get_WeightScheme()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_WeightScheme(valuetype Microsoft.Test.KoKoMo.WeightScheme 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_Timeout()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Timeout(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int64 get_MaxActions()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MaxActions(int64 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_AddReturnedModels()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_AddReturnedModels(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Random get_Random()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Seed()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Seed(int32 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void Load()
		{
			ret
		}
		.property instance bool AddReturnedModels()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelEngineOptions::get_AddReturnedModels()
			.set instance void Microsoft.Test.KoKoMo.ModelEngineOptions::set_AddReturnedModels(bool)
		}
		.property instance int64 MaxActions()
		{
			.get instance int64 Microsoft.Test.KoKoMo.ModelEngineOptions::get_MaxActions()
			.set instance void Microsoft.Test.KoKoMo.ModelEngineOptions::set_MaxActions(int64)
		}
		.property instance class [mscorlib]System.Random Random()
		{
			.get instance class [mscorlib]System.Random Microsoft.Test.KoKoMo.ModelEngineOptions::get_Random()
		}
		.property instance int32 Seed()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelEngineOptions::get_Seed()
			.set instance void Microsoft.Test.KoKoMo.ModelEngineOptions::set_Seed(int32)
		}
		.property instance int64 Timeout()
		{
			.get instance int64 Microsoft.Test.KoKoMo.ModelEngineOptions::get_Timeout()
			.set instance void Microsoft.Test.KoKoMo.ModelEngineOptions::set_Timeout(int64)
		}
		.property instance valuetype Microsoft.Test.KoKoMo.WeightScheme WeightScheme()
		{
			.get instance valuetype Microsoft.Test.KoKoMo.WeightScheme Microsoft.Test.KoKoMo.ModelEngineOptions::get_WeightScheme()
			.set instance void Microsoft.Test.KoKoMo.ModelEngineOptions::set_WeightScheme(valuetype Microsoft.Test.KoKoMo.WeightScheme)
		}
	}
	.class public ModelException
		extends [mscorlib]System.Exception
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelItem item, string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelItem item, string message, class [mscorlib]System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelEngine engine, string message)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelEngine engine, string message, class [mscorlib]System.Exception inner)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelItem source, string message, class [mscorlib]System.Exception inner, class [mscorlib]'System.Collections.Generic.List`1'<class Microsoft.Test.KoKoMo.ModelActionInfo> actions)
		{
			ret
		}
	}
	.class public ModelExpression
		extends Microsoft.Test.KoKoMo.ModelRequirement
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelFunction func, class Microsoft.Test.KoKoMo.ModelValue 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Evaluate(object expected)
		{
			ret
		}
	}
	.class public sealed ModelFunction
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance object Invoke()
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance object EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract ModelItem
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.Model model, class Microsoft.Test.KoKoMo.ModelItemAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_FullName()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.Model get_Model()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Category()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Category(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Label()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object[] get_Labels()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Id()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Id(int32 'value')
		{
			ret
		}
		.method public static hidebysig 
			int32 NextId(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Weight()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Weight(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Disabled()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Disabled(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Tracked()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Tracked(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Invalid()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Invalid(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Type get_Exception()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Exception(class [mscorlib]System.Type 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ExceptionId()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ExceptionId(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Throws()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetAttributeValues(class Microsoft.Test.KoKoMo.ModelItemAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Flags()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Flags(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsFlag(int32 flag)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsFlagExcept(int32 flag)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetFlag(int32 flag, bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Accessed()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Accessed(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void Reload()
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance object Clone()
		{
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 CompareLabel(object label)
		{
			ret
		}
		.field family string _category
		.field family int32 _flags
		.field family string _fullname
		.field family object[] _labels
		.field family string _name
		.field family int32 _weight
		.property instance int32 Accessed()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelItem::get_Accessed()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Accessed(int32)
		}
		.property instance string Category()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItem::get_Category()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Category(string)
		}
		.property instance bool Disabled()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItem::get_Disabled()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Disabled(bool)
		}
		.property instance class [mscorlib]System.Type Exception()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelItem::get_Exception()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Exception(class [mscorlib]System.Type)
		}
		.property instance string ExceptionId()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItem::get_ExceptionId()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_ExceptionId(string)
		}
		.property instance int32 Flags()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelItem::get_Flags()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Flags(int32)
		}
		.property instance string FullName()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItem::get_FullName()
		}
		.property instance int32 Id()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelItem::get_Id()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Id(int32)
		}
		.property instance bool Invalid()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItem::get_Invalid()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Invalid(bool)
		}
		.property instance object Label()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelItem::get_Label()
		}
		.property instance object[] Labels()
		{
			.get instance object[] Microsoft.Test.KoKoMo.ModelItem::get_Labels()
		}
		.property instance class Microsoft.Test.KoKoMo.Model Model()
		{
			.get instance class Microsoft.Test.KoKoMo.Model Microsoft.Test.KoKoMo.ModelItem::get_Model()
		}
		.property instance string Name()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItem::get_Name()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Name(string)
		}
		.property instance bool Throws()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItem::get_Throws()
		}
		.property instance bool Tracked()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItem::get_Tracked()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Tracked(bool)
		}
		.property instance int32 Weight()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelItem::get_Weight()
			.set instance void Microsoft.Test.KoKoMo.ModelItem::set_Weight(int32)
		}
	}
	.class public abstract ModelItemAttribute
		extends [mscorlib]System.Attribute
	{
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Name(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Category()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Category(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Weight()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Weight(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Disabled()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Disabled(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Tracked()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Tracked(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Invalid()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Invalid(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Type get_Exception()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Exception(class [mscorlib]System.Type 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_ExceptionId()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_ExceptionId(string 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Throws()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Flags()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Flags(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool IsFlag(int32 flag)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetFlag(int32 flag, bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_Label()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Label(object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object[] get_Labels()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Labels(object[] 'value')
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field family string _category
		.field family int32 _flags
		.field family object[] _labels
		.field family string _name
		.field family int32 _weight
		.property instance string Category()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItemAttribute::get_Category()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Category(string)
		}
		.property instance bool Disabled()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItemAttribute::get_Disabled()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Disabled(bool)
		}
		.property instance class [mscorlib]System.Type Exception()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelItemAttribute::get_Exception()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Exception(class [mscorlib]System.Type)
		}
		.property instance string ExceptionId()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItemAttribute::get_ExceptionId()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_ExceptionId(string)
		}
		.property instance int32 Flags()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelItemAttribute::get_Flags()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Flags(int32)
		}
		.property instance bool Invalid()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItemAttribute::get_Invalid()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Invalid(bool)
		}
		.property instance object Label()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelItemAttribute::get_Label()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Label(object)
		}
		.property instance object[] Labels()
		{
			.get instance object[] Microsoft.Test.KoKoMo.ModelItemAttribute::get_Labels()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Labels(object[])
		}
		.property instance string Name()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelItemAttribute::get_Name()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Name(string)
		}
		.property instance bool Throws()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItemAttribute::get_Throws()
		}
		.property instance bool Tracked()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelItemAttribute::get_Tracked()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Tracked(bool)
		}
		.property instance int32 Weight()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelItemAttribute::get_Weight()
			.set instance void Microsoft.Test.KoKoMo.ModelItemAttribute::set_Weight(int32)
		}
	}
	.class public sealed ModelItemFlags
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelItemFlags Disabled = int32(0x10000000)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelItemFlags Invalid = int32(0x01000000)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelItemFlags Throws = int32(0x02000000)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelItemFlags Tracked = int32(0x20000000)
	}
	.class public 'ModelItemWeightComparer`1'<(Microsoft.Test.KoKoMo.ModelItem) T>
		extends [mscorlib]System.Object
		implements class [mscorlib]'System.Collections.Generic.IComparer`1'<!0>
	{
		.method public hidebysig specialname 
			instance void .ctor(bool desc)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 Compare(!0 x, !0 y)
		{
			ret
		}
	}
	.class public abstract 'ModelItems`1'<(Microsoft.Test.KoKoMo.ModelItem) T>
		extends [mscorlib]System.Object
	{
		.custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
		.class nested public sealed ModelItemCollectionChanged<(Microsoft.Test.KoKoMo.ModelItem) T>
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void Invoke(class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> collection, !0 item)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> collection, !0 item, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(!0[] items)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Count()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance !0 get_Item(int32 index)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance !0 get_Item(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance !0 get_First()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void add_OnAdded(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0> 'value')
			synchronized 
		{
			ret
		}
		.method public hidebysig specialname 
			instance void remove_OnAdded(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0> 'value')
			synchronized 
		{
			ret
		}
		.method public hidebysig specialname 
			instance void add_OnRemoved(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0> 'value')
			synchronized 
		{
			ret
		}
		.method public hidebysig specialname 
			instance void remove_OnRemoved(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0> 'value')
			synchronized 
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Throws()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0 Add(!0 item)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> Add(class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> items)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0[] Add(!0[] items)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0 Remove(!0 item)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> Remove(class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> items)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0[] ToArray()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Weight()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Weight(int32 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Enabled()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Enabled(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Accessed()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_AllCovered()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SortByWeightDesc()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Clear()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance int32 IndexOf(!0 item)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> Find(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> FindExcept(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> FindFlag(int32 flag)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> FindFlag(int32 flag, bool include)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0 FindInstance(!0 'instance')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> FindByLabel(object label)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0> FindByNoLabel(object label)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0 Choose(class Microsoft.Test.KoKoMo.ModelEngine engine)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance !0 Choose(class [mscorlib]System.Random r, valuetype Microsoft.Test.KoKoMo.WeightScheme weightscheme)
		{
			ret
		}
		.field family class [mscorlib]'System.Collections.Generic.List`1'<!0> _list
		.field family class [mscorlib]'System.Collections.Generic.IComparer`1'<!0> _weightcomparer
		.event class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0> OnAdded
		{
			.addon instance void 'Microsoft.Test.KoKoMo.ModelItems`1'::add_OnAdded(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0>)
			.removeon instance void 'Microsoft.Test.KoKoMo.ModelItems`1'::remove_OnAdded(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0>)
		}
		.event class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0> OnRemoved
		{
			.addon instance void 'Microsoft.Test.KoKoMo.ModelItems`1'::add_OnRemoved(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0>)
			.removeon instance void 'Microsoft.Test.KoKoMo.ModelItems`1'::remove_OnRemoved(class 'Microsoft.Test.KoKoMo.ModelItems`1'/ModelItemCollectionChanged<!0>)
		}
		.property instance int32 Accessed()
		{
			.get instance int32 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Accessed()
		}
		.property instance bool AllCovered()
		{
			.get instance bool 'Microsoft.Test.KoKoMo.ModelItems`1'::get_AllCovered()
		}
		.property instance int32 Count()
		{
			.get instance int32 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Count()
		}
		.property instance bool Enabled()
		{
			.get instance bool 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Enabled()
			.set instance void 'Microsoft.Test.KoKoMo.ModelItems`1'::set_Enabled(bool)
		}
		.property instance !0 First()
		{
			.get instance !0 'Microsoft.Test.KoKoMo.ModelItems`1'::get_First()
		}
		.property instance !0 Item(int32)
		{
			.get instance !0 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Item(int32)
		}
		.property instance !0 Item(string)
		{
			.get instance !0 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Item(string)
		}
		.property instance string Name()
		{
			.get instance string 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Name()
		}
		.property instance bool Throws()
		{
			.get instance bool 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Throws()
		}
		.property instance int32 Weight()
		{
			.get instance int32 'Microsoft.Test.KoKoMo.ModelItems`1'::get_Weight()
			.set instance void 'Microsoft.Test.KoKoMo.ModelItems`1'::set_Weight(int32)
		}
	}
	.class public ModelParameter
		extends Microsoft.Test.KoKoMo.ModelRange
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelParameterAttribute attr, class [mscorlib]System.Reflection.ParameterInfo paraminfo)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelAction get_Action()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Type get_Type()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsOptional()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_FullName()
		{
			ret
		}
		.property instance class Microsoft.Test.KoKoMo.ModelAction Action()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelAction Microsoft.Test.KoKoMo.ModelParameter::get_Action()
		}
		.property instance string FullName()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelParameter::get_FullName()
		}
		.property instance bool IsOptional()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelParameter::get_IsOptional()
		}
		.property instance string Name()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelParameter::get_Name()
		}
		.property instance int32 Position()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelParameter::get_Position()
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelParameter::get_Type()
		}
	}
	.class public ModelParameterAttribute
		extends Microsoft.Test.KoKoMo.ModelRangeAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(2112) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object[] values)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Position()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Position(int32 'value')
		{
			ret
		}
		.property instance int32 Position()
		{
			.get instance int32 Microsoft.Test.KoKoMo.ModelParameterAttribute::get_Position()
			.set instance void Microsoft.Test.KoKoMo.ModelParameterAttribute::set_Position(int32)
		}
	}
	.class public ModelParameters
		extends class 'Microsoft.Test.KoKoMo.ModelRanges`1'<class Microsoft.Test.KoKoMo.ModelParameter>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelParameters Find(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelParameters FindExcept(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelValues get_Values()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance class Microsoft.Test.KoKoMo.ModelValues Values()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelValues Microsoft.Test.KoKoMo.ModelParameters::get_Values()
		}
	}
	.class public abstract ModelRange
		extends Microsoft.Test.KoKoMo.ModelItem
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.Model model, class Microsoft.Test.KoKoMo.ModelRangeAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void SetAttributeValues(class Microsoft.Test.KoKoMo.ModelRangeAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void InferDynamicVariables()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelVariable DetermineVariable(string name)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddValuesFromType(class Microsoft.Test.KoKoMo.ModelRangeAttribute attr, class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddBitCombinations()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Microsoft.Test.KoKoMo.ModelValueConjunction get_Conjunction()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Conjunction(valuetype Microsoft.Test.KoKoMo.ModelValueConjunction 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Microsoft.Test.KoKoMo.ModelValueFlags get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype Microsoft.Test.KoKoMo.ModelValueFlags 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot abstract specialname 
			instance class [mscorlib]System.Type get_Type()
		{
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsEnum()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelValues get_Values()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Values(class Microsoft.Test.KoKoMo.ModelValues 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelValue get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(class Microsoft.Test.KoKoMo.ModelValue 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelVariable get_Variable()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_BitMask()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_BitMask(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Evaluate(object 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reload()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Clone()
		{
			ret
		}
		.field family class Microsoft.Test.KoKoMo.ModelVariable _variable
		.property instance bool BitMask()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelRange::get_BitMask()
			.set instance void Microsoft.Test.KoKoMo.ModelRange::set_BitMask(bool)
		}
		.property instance valuetype Microsoft.Test.KoKoMo.ModelValueConjunction Conjunction()
		{
			.get instance valuetype Microsoft.Test.KoKoMo.ModelValueConjunction Microsoft.Test.KoKoMo.ModelRange::get_Conjunction()
			.set instance void Microsoft.Test.KoKoMo.ModelRange::set_Conjunction(valuetype Microsoft.Test.KoKoMo.ModelValueConjunction)
		}
		.property instance valuetype Microsoft.Test.KoKoMo.ModelValueFlags Flags()
		{
			.get instance valuetype Microsoft.Test.KoKoMo.ModelValueFlags Microsoft.Test.KoKoMo.ModelRange::get_Flags()
			.set instance void Microsoft.Test.KoKoMo.ModelRange::set_Flags(valuetype Microsoft.Test.KoKoMo.ModelValueFlags)
		}
		.property instance bool IsEnum()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelRange::get_IsEnum()
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelRange::get_Type()
		}
		.property instance class Microsoft.Test.KoKoMo.ModelValue Value()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelValue Microsoft.Test.KoKoMo.ModelRange::get_Value()
			.set instance void Microsoft.Test.KoKoMo.ModelRange::set_Value(class Microsoft.Test.KoKoMo.ModelValue)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelValues Values()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelValues Microsoft.Test.KoKoMo.ModelRange::get_Values()
			.set instance void Microsoft.Test.KoKoMo.ModelRange::set_Values(class Microsoft.Test.KoKoMo.ModelValues)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelVariable Variable()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelVariable Microsoft.Test.KoKoMo.ModelRange::get_Variable()
		}
	}
	.class public abstract ModelRangeAttribute
		extends Microsoft.Test.KoKoMo.ModelItemAttribute
	{
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor(object[] values)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Microsoft.Test.KoKoMo.ModelValueConjunction get_Conjunction()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Conjunction(valuetype Microsoft.Test.KoKoMo.ModelValueConjunction 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Microsoft.Test.KoKoMo.ModelValueFlags get_Flags()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Flags(valuetype Microsoft.Test.KoKoMo.ModelValueFlags 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type get_Type()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Type(class [mscorlib]System.Type 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object[] get_Values()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Values(object[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Value(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Not()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Not(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_GreaterThan()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_GreaterThan(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_GreaterThanOrEqual()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_GreaterThanOrEqual(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_LessThan()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LessThan(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_LessThanOrEqual()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_LessThanOrEqual(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Min()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Min(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Max()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Max(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance object[] get_Any()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Any(object[] 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_BitMask()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_BitMask(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Variable()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Variable(string 'value')
		{
			ret
		}
		.property instance object[] Any()
		{
			.get instance object[] Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Any()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Any(object[])
		}
		.property instance bool BitMask()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelRangeAttribute::get_BitMask()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_BitMask(bool)
		}
		.property instance valuetype Microsoft.Test.KoKoMo.ModelValueConjunction Conjunction()
		{
			.get instance valuetype Microsoft.Test.KoKoMo.ModelValueConjunction Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Conjunction()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Conjunction(valuetype Microsoft.Test.KoKoMo.ModelValueConjunction)
		}
		.property instance valuetype Microsoft.Test.KoKoMo.ModelValueFlags Flags()
		{
			.get instance valuetype Microsoft.Test.KoKoMo.ModelValueFlags Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Flags()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Flags(valuetype Microsoft.Test.KoKoMo.ModelValueFlags)
		}
		.property instance object GreaterThan()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_GreaterThan()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_GreaterThan(object)
		}
		.property instance object GreaterThanOrEqual()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_GreaterThanOrEqual()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_GreaterThanOrEqual(object)
		}
		.property instance object LessThan()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_LessThan()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_LessThan(object)
		}
		.property instance object LessThanOrEqual()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_LessThanOrEqual()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_LessThanOrEqual(object)
		}
		.property instance object Max()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Max()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Max(object)
		}
		.property instance object Min()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Min()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Min(object)
		}
		.property instance object Not()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Not()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Not(object)
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Type()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Type(class [mscorlib]System.Type)
		}
		.property instance object Value()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Value()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Value(object)
		}
		.property instance object[] Values()
		{
			.get instance object[] Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Values()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Values(object[])
		}
		.property instance string Variable()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelRangeAttribute::get_Variable()
			.set instance void Microsoft.Test.KoKoMo.ModelRangeAttribute::set_Variable(string)
		}
	}
	.class public abstract 'ModelRanges`1'<(Microsoft.Test.KoKoMo.ModelItem) T>
		extends class 'Microsoft.Test.KoKoMo.ModelItems`1'<!0>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(!0[] values)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelRanges`1'<!0> FindFlag(valuetype Microsoft.Test.KoKoMo.ModelValueFlags flag)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class 'Microsoft.Test.KoKoMo.ModelRanges`1'<!0> FindFlag(valuetype Microsoft.Test.KoKoMo.ModelValueFlags flag, bool include)
		{
			ret
		}
	}
	.class public ModelRequirement
		extends Microsoft.Test.KoKoMo.ModelRange
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelVariable variable, object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelVariable variable, class Microsoft.Test.KoKoMo.ModelValue 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelVariable variable, class Microsoft.Test.KoKoMo.ModelValue 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelAction action, class Microsoft.Test.KoKoMo.ModelRequirementAttribute attr, class Microsoft.Test.KoKoMo.ModelVariable variable, class Microsoft.Test.KoKoMo.ModelValue 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelAction get_Action()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Type get_Type()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_Global()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Global(bool 'value')
		{
			ret
		}
		.property instance class Microsoft.Test.KoKoMo.ModelAction Action()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelAction Microsoft.Test.KoKoMo.ModelRequirement::get_Action()
		}
		.property instance bool Global()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelRequirement::get_Global()
			.set instance void Microsoft.Test.KoKoMo.ModelRequirement::set_Global(bool)
		}
		.property instance string Name()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelRequirement::get_Name()
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelRequirement::get_Type()
		}
	}
	.class public ModelRequirementAttribute
		extends Microsoft.Test.KoKoMo.ModelRangeAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(64) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object[] values)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
	}
	.class public ModelRequirements
		extends class 'Microsoft.Test.KoKoMo.ModelRanges`1'<class Microsoft.Test.KoKoMo.ModelRequirement>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelRequirement[] requirements)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelRequirement Add(class Microsoft.Test.KoKoMo.ModelVariable variable, object 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelRequirement Find(class Microsoft.Test.KoKoMo.ModelVariable variable)
		{
			ret
		}
	}
	.class public ModelTrace
		extends [mscorlib]System.Object
	{
		.method public static hidebysig specialname 
			bool get_Enabled()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_Enabled(bool 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]'System.IO.TextWriter' get_Out()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_Out(class [mscorlib]'System.IO.TextWriter' 'value')
		{
			ret
		}
		.method public static hidebysig 
			void Write(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			void WriteLine()
		{
			ret
		}
		.method public static hidebysig 
			void WriteLine(object 'value')
		{
			ret
		}
		.method public static hidebysig 
			string FormatMethod(class Microsoft.Test.KoKoMo.ModelActionInfo info)
		{
			ret
		}
		.method public static hidebysig 
			void FormatValue(class [mscorlib]System.Text.StringBuilder builder, class [mscorlib]System.Type 'type', object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property bool Enabled()
		{
			.get bool Microsoft.Test.KoKoMo.ModelTrace::get_Enabled()
			.set void Microsoft.Test.KoKoMo.ModelTrace::set_Enabled(bool)
		}
		.property class [mscorlib]'System.IO.TextWriter' Out()
		{
			.get class [mscorlib]'System.IO.TextWriter' Microsoft.Test.KoKoMo.ModelTrace::get_Out()
			.set void Microsoft.Test.KoKoMo.ModelTrace::set_Out(class [mscorlib]'System.IO.TextWriter')
		}
	}
	.class public sealed ModelTraceLevel
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
	}
	.class public ModelValue
		extends Microsoft.Test.KoKoMo.ModelItem
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(object 'value', valuetype Microsoft.Test.KoKoMo.ModelValueOperator op)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type 'type', object 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type 'type', object 'value', valuetype Microsoft.Test.KoKoMo.ModelValueOperator op)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class [mscorlib]System.Type get_Type()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_Type(class [mscorlib]System.Type 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsEnum()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Value()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Microsoft.Test.KoKoMo.ModelVariable get_Variable()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Variable(class Microsoft.Test.KoKoMo.ModelVariable 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reload()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Clone()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Microsoft.Test.KoKoMo.ModelValueOperator get_Operator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Operator(valuetype Microsoft.Test.KoKoMo.ModelValueOperator 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Evaluate(object expected)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance bool Evaluate(object expected, valuetype Microsoft.Test.KoKoMo.ModelValueOperator op)
		{
			ret
		}
		.property instance bool IsEnum()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelValue::get_IsEnum()
		}
		.property instance valuetype Microsoft.Test.KoKoMo.ModelValueOperator Operator()
		{
			.get instance valuetype Microsoft.Test.KoKoMo.ModelValueOperator Microsoft.Test.KoKoMo.ModelValue::get_Operator()
			.set instance void Microsoft.Test.KoKoMo.ModelValue::set_Operator(valuetype Microsoft.Test.KoKoMo.ModelValueOperator)
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelValue::get_Type()
			.set instance void Microsoft.Test.KoKoMo.ModelValue::set_Type(class [mscorlib]System.Type)
		}
		.property instance object Value()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelValue::get_Value()
		}
		.property instance class Microsoft.Test.KoKoMo.ModelVariable Variable()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelVariable Microsoft.Test.KoKoMo.ModelValue::get_Variable()
			.set instance void Microsoft.Test.KoKoMo.ModelValue::set_Variable(class Microsoft.Test.KoKoMo.ModelVariable)
		}
	}
	.class public sealed ModelValueConjunction
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueConjunction And = int32(0x00000000)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueConjunction Or = int32(0x00000001)
	}
	.class public sealed ModelValueFlags
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueFlags Bitmask = int32(0x00000001)
	}
	.class public sealed ModelValueOperator
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueOperator Equal = int32(0x00000000)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueOperator GreaterThan = int32(0x00000002)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueOperator GreaterThanOrEqual = int32(0x00000003)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueOperator LessThan = int32(0x00000004)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueOperator LessThanOrEqual = int32(0x00000005)
		.field static public literal valuetype Microsoft.Test.KoKoMo.ModelValueOperator NotEqual = int32(0x00000001)
	}
	.class public ModelValues
		extends class 'Microsoft.Test.KoKoMo.ModelItems`1'<class Microsoft.Test.KoKoMo.ModelValue>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelValue[] values)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Add(object[] values)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance object[] ToArray()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelValue FindValue(object 'instance')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelValues FindOperator(valuetype Microsoft.Test.KoKoMo.ModelValueOperator op)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelValues FindOperator(valuetype Microsoft.Test.KoKoMo.ModelValueOperator op, bool include)
		{
			ret
		}
	}
	.class public ModelVariable
		extends Microsoft.Test.KoKoMo.ModelRange
	{
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.Model model, class [mscorlib]System.Reflection.MemberInfo info, class Microsoft.Test.KoKoMo.ModelVariableAttribute attr)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.Model model, object 'instance', class [mscorlib]System.Reflection.MemberInfo info, class Microsoft.Test.KoKoMo.ModelVariableAttribute attr)
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance class [mscorlib]System.Type get_Type()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsCalculated()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance object get_CurrentValue()
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Reload()
		{
			ret
		}
		.method public virtual hidebysig 
			instance object Clone()
		{
			ret
		}
		.property instance object CurrentValue()
		{
			.get instance object Microsoft.Test.KoKoMo.ModelVariable::get_CurrentValue()
		}
		.property instance bool IsCalculated()
		{
			.get instance bool Microsoft.Test.KoKoMo.ModelVariable::get_IsCalculated()
		}
		.property instance string Name()
		{
			.get instance string Microsoft.Test.KoKoMo.ModelVariable::get_Name()
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Microsoft.Test.KoKoMo.ModelVariable::get_Type()
		}
	}
	.class public ModelVariableAttribute
		extends Microsoft.Test.KoKoMo.ModelRangeAttribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(384) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public ModelVariables
		extends class 'Microsoft.Test.KoKoMo.ModelRanges`1'<class Microsoft.Test.KoKoMo.ModelVariable>
	{
		.custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelVariables Find(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelVariables FindExcept(string[] names)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelVariable get_Item(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.ModelVariables FindType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance class Microsoft.Test.KoKoMo.ModelVariable Item(class [mscorlib]System.Type)
		{
			.get instance class Microsoft.Test.KoKoMo.ModelVariable Microsoft.Test.KoKoMo.ModelVariables::get_Item(class [mscorlib]System.Type)
		}
	}
	.class public Models
		extends class 'Microsoft.Test.KoKoMo.ModelItems`1'<class Microsoft.Test.KoKoMo.Model>
	{
		.custom instance void [mscorlib]System.Reflection.DefaultMemberAttribute::.ctor(string) = { string('Item') }
		.method public hidebysig specialname 
			instance void .ctor(class Microsoft.Test.KoKoMo.ModelEngine engine)
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.Model get_Item(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance class Microsoft.Test.KoKoMo.Models FindType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public virtual hidebysig 
			instance class Microsoft.Test.KoKoMo.Model Add(class Microsoft.Test.KoKoMo.Model model)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddFromAssembly(object caller)
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void AddFromAssembly(class [mscorlib]System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void add_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void remove_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void add_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void remove_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot 
			instance void Init()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance bool get_IsExecuting()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_IsExecuting(bool 'value')
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelActions get_Actions()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance class Microsoft.Test.KoKoMo.ModelVariables get_Variables()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance int32 get_MaxInstances()
		{
			ret
		}
		.method public virtual hidebysig newslot specialname 
			instance void set_MaxInstances(int32 'value')
		{
			ret
		}
		.event Microsoft.Test.KoKoMo.CallAfterHandler CallAfter
		{
			.addon instance void Microsoft.Test.KoKoMo.Models::add_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler)
			.removeon instance void Microsoft.Test.KoKoMo.Models::remove_CallAfter(class Microsoft.Test.KoKoMo.CallAfterHandler)
		}
		.event Microsoft.Test.KoKoMo.CallBeforeHandler CallBefore
		{
			.addon instance void Microsoft.Test.KoKoMo.Models::add_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler)
			.removeon instance void Microsoft.Test.KoKoMo.Models::remove_CallBefore(class Microsoft.Test.KoKoMo.CallBeforeHandler)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelActions Actions()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelActions Microsoft.Test.KoKoMo.Models::get_Actions()
		}
		.property instance bool IsExecuting()
		{
			.get instance bool Microsoft.Test.KoKoMo.Models::get_IsExecuting()
			.set instance void Microsoft.Test.KoKoMo.Models::set_IsExecuting(bool)
		}
		.property instance class Microsoft.Test.KoKoMo.Model Item(class [mscorlib]System.Type)
		{
			.get instance class Microsoft.Test.KoKoMo.Model Microsoft.Test.KoKoMo.Models::get_Item(class [mscorlib]System.Type)
		}
		.property instance int32 MaxInstances()
		{
			.get instance int32 Microsoft.Test.KoKoMo.Models::get_MaxInstances()
			.set instance void Microsoft.Test.KoKoMo.Models::set_MaxInstances(int32)
		}
		.property instance class Microsoft.Test.KoKoMo.ModelVariables Variables()
		{
			.get instance class Microsoft.Test.KoKoMo.ModelVariables Microsoft.Test.KoKoMo.Models::get_Variables()
		}
	}
	.class public sealed WeightScheme
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Microsoft.Test.KoKoMo.WeightScheme AdaptiveEqual = int32(0x00000002)
		.field static public literal valuetype Microsoft.Test.KoKoMo.WeightScheme Custom = int32(0x00000000)
		.field static public literal valuetype Microsoft.Test.KoKoMo.WeightScheme Equal = int32(0x00000001)
		.field static public literal valuetype Microsoft.Test.KoKoMo.WeightScheme Geometric = int32(0x00000003)
	}
}
.namespace Test.Uis.Data
{
	.class public sealed AccessibleVisualData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance string MatchesSystemValue(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyProperty get_DependencyProperty()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ValueIndex()
		{
			ret
		}
		.field static public class Test.Uis.Data.AccessibleVisualData[] Values
		.property instance class [WindowsBase]System.Windows.DependencyProperty DependencyProperty()
		{
			.get instance class [WindowsBase]System.Windows.DependencyProperty Test.Uis.Data.AccessibleVisualData::get_DependencyProperty()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Data.AccessibleVisualData::get_Name()
		}
		.property instance int32 ValueIndex()
		{
			.get instance int32 Test.Uis.Data.AccessibleVisualData::get_ValueIndex()
		}
	}
	.class public sealed AutomationPropertyData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance void VerifyCurrentValue(class [UIAutomationClient]System.Windows.Automation.AutomationElement element, class Test.Uis.Wrappers.UIElementWrapper wrapper, class Test.Uis.Utils.SimpleHandler 'handler', bool log)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [UIAutomationTypes]System.Windows.Automation.AutomationProperty get_AutomationProperty()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.field static public class Test.Uis.Data.AutomationPropertyData[] Values
		.property instance class [UIAutomationTypes]System.Windows.Automation.AutomationProperty AutomationProperty()
		{
			.get instance class [UIAutomationTypes]System.Windows.Automation.AutomationProperty Test.Uis.Data.AutomationPropertyData::get_AutomationProperty()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Data.AutomationPropertyData::get_Name()
		}
	}
	.class public sealed AutomationTextAttributeData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Data.AutomationTextAttributeData FindForAttribute(class [UIAutomationTypes]System.Windows.Automation.AutomationTextAttribute attribute)
		{
			ret
		}
		.method public hidebysig 
			instance object GetExpectedElementValue(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance object GetExpectedPointerValue(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyElementValue(class [UIAutomationClient]System.Windows.Automation.Text.TextPatternRange range, class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyPointerValue(class [UIAutomationClient]System.Windows.Automation.Text.TextPatternRange range, class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [UIAutomationTypes]System.Windows.Automation.AutomationTextAttribute get_Attribute()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsSupported()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type get_ValueType()
		{
			ret
		}
		.field static public class Test.Uis.Data.AutomationTextAttributeData[] Values
		.property instance class [UIAutomationTypes]System.Windows.Automation.AutomationTextAttribute Attribute()
		{
			.get instance class [UIAutomationTypes]System.Windows.Automation.AutomationTextAttribute Test.Uis.Data.AutomationTextAttributeData::get_Attribute()
		}
		.property instance bool IsSupported()
		{
			.get instance bool Test.Uis.Data.AutomationTextAttributeData::get_IsSupported()
		}
		.property instance class [mscorlib]System.Type ValueType()
		{
			.get instance class [mscorlib]System.Type Test.Uis.Data.AutomationTextAttributeData::get_ValueType()
		}
	}
	.class public sealed BrushData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			bool AreBrushesEqual(class [PresentationCore]System.Windows.Media.Brush brushA, class [PresentationCore]System.Windows.Media.Brush brushB)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Media.Brush get_Brush()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsTransparent()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.BrushData get_GradientBrush()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [PresentationCore]System.Windows.Media.Brush[] get_BrushValues()
		{
			ret
		}
		.field static public class Test.Uis.Data.BrushData[] Values
		.property instance class [PresentationCore]System.Windows.Media.Brush Brush()
		{
			.get instance class [PresentationCore]System.Windows.Media.Brush Test.Uis.Data.BrushData::get_Brush()
		}
		.property class [PresentationCore]System.Windows.Media.Brush[] BrushValues()
		{
			.get class [PresentationCore]System.Windows.Media.Brush[] Test.Uis.Data.BrushData::get_BrushValues()
		}
		.property class Test.Uis.Data.BrushData GradientBrush()
		{
			.get class Test.Uis.Data.BrushData Test.Uis.Data.BrushData::get_GradientBrush()
		}
		.property instance bool IsTransparent()
		{
			.get instance bool Test.Uis.Data.BrushData::get_IsTransparent()
		}
	}
	.class public sealed CommandType
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Data.CommandType CaretNavigationCommand = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Data.CommandType CharacterEditingCommand = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Data.CommandType CopyPasteCommand = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Data.CommandType ListEditingCommand = int32(0x00000006)
		.field static public literal valuetype Test.Uis.Data.CommandType ParagraphEditingCommand = int32(0x00000005)
		.field static public literal valuetype Test.Uis.Data.CommandType SelectionExtensionCommand = int32(0x00000003)
		.field static public literal valuetype Test.Uis.Data.CommandType SpellingCommand = int32(0x00000007)
		.field static public literal valuetype Test.Uis.Data.CommandType TableEditingCommand = int32(0x00000009)
		.field static public literal valuetype Test.Uis.Data.CommandType TypingCommand = int32(0x00000001)
	}
	.class public sealed DataExtensibilityCallback
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class [PresentationCore]System.Windows.DataObjectEventArgs args)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(object sender, class [PresentationCore]System.Windows.DataObjectEventArgs args, class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public sealed DataFormatsData
		extends [mscorlib]System.Object
	{
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DataFormatString()
		{
			ret
		}
		.field static public class Test.Uis.Data.DataFormatsData[] TRSupportedValues
		.field static public class Test.Uis.Data.DataFormatsData[] TRUnSupportedValues
		.field static public class Test.Uis.Data.DataFormatsData[] Values
		.property instance string DataFormatString()
		{
			.get instance string Test.Uis.Data.DataFormatsData::get_DataFormatString()
		}
	}
	.class public sealed DataTransferExtensibility
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Data.DataTransferExtensibility Copying = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Data.DataTransferExtensibility Pasting = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Data.DataTransferExtensibility Setting = int32(0x00000000)
	}
	.class public DataTransferExtensibilityData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance void AddHandler(class [WindowsBase]System.Windows.DependencyObject target, class [mscorlib]System.Delegate 'handler')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Delegate CreateDelegate(class Test.Uis.Data.DataExtensibilityCallback callback)
		{
			ret
		}
		.method public hidebysig 
			instance void RemoveHandler(class [WindowsBase]System.Windows.DependencyObject target, class [mscorlib]System.Delegate 'handler')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.RoutedEvent get_ExtensibilityEvent()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Data.DataTransferExtensibility get_Value()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DataTransferExtensibilityData[] get_Values()
		{
			ret
		}
		.property instance class [PresentationCore]System.Windows.RoutedEvent ExtensibilityEvent()
		{
			.get instance class [PresentationCore]System.Windows.RoutedEvent Test.Uis.Data.DataTransferExtensibilityData::get_ExtensibilityEvent()
		}
		.property instance valuetype Test.Uis.Data.DataTransferExtensibility Value()
		{
			.get instance valuetype Test.Uis.Data.DataTransferExtensibility Test.Uis.Data.DataTransferExtensibilityData::get_Value()
		}
		.property class Test.Uis.Data.DataTransferExtensibilityData[] Values()
		{
			.get class Test.Uis.Data.DataTransferExtensibilityData[] Test.Uis.Data.DataTransferExtensibilityData::get_Values()
		}
	}
	.class public sealed DependencyPropertyData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance object FindElementForProperty(class [WindowsBase]System.Windows.DependencyObject targetVisual, object expectedValue)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.DependencyPropertyData[] GetFormattingProperties()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.DependencyPropertyData[] GetCharacterFormattingProperties()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.DependencyPropertyData[] GetForTextSerialization(class [WindowsBase]System.Windows.DependencyObject defaultValues)
		{
			ret
		}
		.method public static hidebysig 
			valuetype Test.Uis.Data.PropertyValueSource GetPropertyValueSource(class [WindowsBase]System.Windows.DependencyObject element, class [WindowsBase]System.Windows.DependencyProperty 'property')
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.DependencyPropertyData[] GetDPDataForControl(class [mscorlib]System.Type elementType)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLocalValueSet(class [WindowsBase]System.Windows.DependencyObject element, class [WindowsBase]System.Windows.DependencyProperty 'property')
		{
			ret
		}
		.method public static hidebysig 
			bool IsStyleValueSet(class [PresentationFramework]System.Windows.Style style, class [WindowsBase]System.Windows.DependencyProperty 'property')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_DefaultValue()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsInheritable()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsInlineFormattingProperty()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyProperty get_Property()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_TestValue()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object[] get_TestValues()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.DependencyPropertyData CreateDPData(class [WindowsBase]System.Windows.DependencyProperty 'property', object defaultValue, object testValue)
		{
			ret
		}
		.method public static hidebysig 
			class [WindowsBase]System.Windows.DependencyProperty[] GetPropertiesFromPropertyData(class Test.Uis.Data.DependencyPropertyData[] data)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.DependencyPropertyData[] CombinePropertyDataArrays(class Test.Uis.Data.DependencyPropertyData[] array1, class Test.Uis.Data.DependencyPropertyData[] array2)
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_InlinePropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_BlockPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_RunPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_InlineUIContainerPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_BlockUIContainerPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_HyperlinkPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_ParagraphPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_ListPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_ListItemPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_FlowDocumentPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TablePropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TableRowGroupPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TableRowPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TableCellPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TableColumnPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TextBoxPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_RichTextBoxPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_PasswordBoxPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_ControlPropertyData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.DependencyPropertyData[] get_TextBoxBasePropertyData()
		{
			ret
		}
		.field static public class Test.Uis.Data.DependencyPropertyData[] TextElementPropertyData
		.field static public class Test.Uis.Data.DependencyPropertyData[] TypographyPropertyData
		.property class Test.Uis.Data.DependencyPropertyData[] BlockPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_BlockPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] BlockUIContainerPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_BlockUIContainerPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] ControlPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_ControlPropertyData()
		}
		.property instance object DefaultValue()
		{
			.get instance object Test.Uis.Data.DependencyPropertyData::get_DefaultValue()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] FlowDocumentPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_FlowDocumentPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] HyperlinkPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_HyperlinkPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] InlinePropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_InlinePropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] InlineUIContainerPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_InlineUIContainerPropertyData()
		}
		.property instance bool IsInheritable()
		{
			.get instance bool Test.Uis.Data.DependencyPropertyData::get_IsInheritable()
		}
		.property instance bool IsInlineFormattingProperty()
		{
			.get instance bool Test.Uis.Data.DependencyPropertyData::get_IsInlineFormattingProperty()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] ListItemPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_ListItemPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] ListPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_ListPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] ParagraphPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_ParagraphPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] PasswordBoxPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_PasswordBoxPropertyData()
		}
		.property instance class [WindowsBase]System.Windows.DependencyProperty Property()
		{
			.get instance class [WindowsBase]System.Windows.DependencyProperty Test.Uis.Data.DependencyPropertyData::get_Property()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] RichTextBoxPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_RichTextBoxPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] RunPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_RunPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TableCellPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TableCellPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TableColumnPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TableColumnPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TablePropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TablePropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TableRowGroupPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TableRowGroupPropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TableRowPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TableRowPropertyData()
		}
		.property instance object TestValue()
		{
			.get instance object Test.Uis.Data.DependencyPropertyData::get_TestValue()
		}
		.property instance object[] TestValues()
		{
			.get instance object[] Test.Uis.Data.DependencyPropertyData::get_TestValues()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TextBoxBasePropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TextBoxBasePropertyData()
		}
		.property class Test.Uis.Data.DependencyPropertyData[] TextBoxPropertyData()
		{
			.get class Test.Uis.Data.DependencyPropertyData[] Test.Uis.Data.DependencyPropertyData::get_TextBoxPropertyData()
		}
	}
	.class public DocumentContentGenerator
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Documents.FlowDocument document)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Documents.FlowDocument document, class Test.Uis.Data.DocumentContentPruner pruner)
		{
			ret
		}
		.method public hidebysig 
			instance bool Next()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Data.DocumentContentPruner get_Pruner()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Pruner(class Test.Uis.Data.DocumentContentPruner 'value')
		{
			ret
		}
		.property instance class Test.Uis.Data.DocumentContentPruner Pruner()
		{
			.get instance class Test.Uis.Data.DocumentContentPruner Test.Uis.Data.DocumentContentGenerator::get_Pruner()
			.set instance void Test.Uis.Data.DocumentContentGenerator::set_Pruner(class Test.Uis.Data.DocumentContentPruner)
		}
	}
	.class public DocumentContentPruner
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]'System.Collections.Generic.List`1'<class [mscorlib]System.Type> types)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.List`1'<int32> GetBreadthForElementChildren(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetDepthForElement(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance bool IsTypeAllowed(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.List`1'<class [mscorlib]System.Type> get_Types()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Types(class [mscorlib]'System.Collections.Generic.List`1'<class [mscorlib]System.Type> 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,int32> get_TypeDepth()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeDepth(class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,int32> 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]'System.Collections.Generic.List`1'<int32>> get_TypeBreadth()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TypeBreadth(class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]'System.Collections.Generic.List`1'<int32>> 'value')
		{
			ret
		}
		.property instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]'System.Collections.Generic.List`1'<int32>> TypeBreadth()
		{
			.get instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]'System.Collections.Generic.List`1'<int32>> Test.Uis.Data.DocumentContentPruner::get_TypeBreadth()
			.set instance void Test.Uis.Data.DocumentContentPruner::set_TypeBreadth(class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]'System.Collections.Generic.List`1'<int32>>)
		}
		.property instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,int32> TypeDepth()
		{
			.get instance class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,int32> Test.Uis.Data.DocumentContentPruner::get_TypeDepth()
			.set instance void Test.Uis.Data.DocumentContentPruner::set_TypeDepth(class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,int32>)
		}
		.property instance class [mscorlib]'System.Collections.Generic.List`1'<class [mscorlib]System.Type> Types()
		{
			.get instance class [mscorlib]'System.Collections.Generic.List`1'<class [mscorlib]System.Type> Test.Uis.Data.DocumentContentPruner::get_Types()
			.set instance void Test.Uis.Data.DocumentContentPruner::set_Types(class [mscorlib]'System.Collections.Generic.List`1'<class [mscorlib]System.Type>)
		}
	}
	.class public sealed DocumentPosition
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Data.DocumentPosition CrossCell = int32(0x0000000F)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition EndOfCell = int32(0x0000000E)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition EndOfDelimitedLine = int32(0x00000003)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition EndOfDocument = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition EndOfWhitespace = int32(0x0000000A)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition EndOfWord = int32(0x00000006)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition EndOfWrappedLine = int32(0x0000000C)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition InsideDelimitedLine = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition InsideWhitespace = int32(0x00000009)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition InsideWord = int32(0x00000007)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition StartOfCell = int32(0x0000000D)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition StartOfDelimitedLine = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition StartOfDocument = int32(0x00000000)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition StartOfWhitespace = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition StartOfWord = int32(0x00000005)
		.field static public literal valuetype Test.Uis.Data.DocumentPosition StartOfWrappedLine = int32(0x0000000B)
	}
	.class public sealed DocumentPositionData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Data.DocumentPositionData GetForValue(valuetype Test.Uis.Data.DocumentPosition 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer FindAfter(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer FindAny(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer FindBefore(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Data.DocumentPosition get_DocumentPosition()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPlainTextSupported()
		{
			ret
		}
		.field static public class Test.Uis.Data.DocumentPositionData[] Values
		.property instance valuetype Test.Uis.Data.DocumentPosition DocumentPosition()
		{
			.get instance valuetype Test.Uis.Data.DocumentPosition Test.Uis.Data.DocumentPositionData::get_DocumentPosition()
		}
		.property instance bool IsPlainTextSupported()
		{
			.get instance bool Test.Uis.Data.DocumentPositionData::get_IsPlainTextSupported()
		}
	}
	.class public DocumentSelectionIterator
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Wrappers.UIElementWrapper wrapper, valuetype Test.Uis.Data.TextSelectionTestValue[] selectionValues)
		{
			ret
		}
		.method public hidebysig 
			instance bool Next()
		{
			ret
		}
		.method public hidebysig 
			instance void Reset()
		{
			ret
		}
	}
	.class public sealed EditingCommandData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string GetKeyboardShortCutForCommand(class [PresentationCore]System.Windows.Input.RoutedUICommand command, class [mscorlib]System.Globalization.CultureInfo cultureInfo)
		{
			ret
		}
		.method public static hidebysig 
			string GetAccessKeyForCommand(class [PresentationCore]System.Windows.Input.RoutedUICommand command, class [mscorlib]System.Globalization.CultureInfo cultureInfo)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.EditingCommandData[] get_CharacterEditingValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.EditingCommandData get_ToggleBold()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.EditingCommandData get_ToggleItalic()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.EditingCommandData get_ToggleUnderline()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Data.CommandType get_CommandType()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsFormatCommand()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsToggleCommand()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_KeyboardShortcut()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Input.RoutedUICommand get_RoutedUICommand()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.EditingCommandData[] get_Values()
		{
			ret
		}
		.property class Test.Uis.Data.EditingCommandData[] CharacterEditingValues()
		{
			.get class Test.Uis.Data.EditingCommandData[] Test.Uis.Data.EditingCommandData::get_CharacterEditingValues()
		}
		.property instance valuetype Test.Uis.Data.CommandType CommandType()
		{
			.get instance valuetype Test.Uis.Data.CommandType Test.Uis.Data.EditingCommandData::get_CommandType()
		}
		.property instance bool IsFormatCommand()
		{
			.get instance bool Test.Uis.Data.EditingCommandData::get_IsFormatCommand()
		}
		.property instance bool IsToggleCommand()
		{
			.get instance bool Test.Uis.Data.EditingCommandData::get_IsToggleCommand()
		}
		.property instance string KeyboardShortcut()
		{
			.get instance string Test.Uis.Data.EditingCommandData::get_KeyboardShortcut()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Data.EditingCommandData::get_Name()
		}
		.property instance class [PresentationCore]System.Windows.Input.RoutedUICommand RoutedUICommand()
		{
			.get instance class [PresentationCore]System.Windows.Input.RoutedUICommand Test.Uis.Data.EditingCommandData::get_RoutedUICommand()
		}
		.property class Test.Uis.Data.EditingCommandData ToggleBold()
		{
			.get class Test.Uis.Data.EditingCommandData Test.Uis.Data.EditingCommandData::get_ToggleBold()
		}
		.property class Test.Uis.Data.EditingCommandData ToggleItalic()
		{
			.get class Test.Uis.Data.EditingCommandData Test.Uis.Data.EditingCommandData::get_ToggleItalic()
		}
		.property class Test.Uis.Data.EditingCommandData ToggleUnderline()
		{
			.get class Test.Uis.Data.EditingCommandData Test.Uis.Data.EditingCommandData::get_ToggleUnderline()
		}
		.property class Test.Uis.Data.EditingCommandData[] Values()
		{
			.get class Test.Uis.Data.EditingCommandData[] Test.Uis.Data.EditingCommandData::get_Values()
		}
	}
	.class public sealed GlobalStringData
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(string localeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_LocaleName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_StringTypeSequence()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CompositedString()
		{
			ret
		}
		.property instance string CompositedString()
		{
			.get instance string Test.Uis.Data.GlobalStringData::get_CompositedString()
		}
		.property instance string LocaleName()
		{
			.get instance string Test.Uis.Data.GlobalStringData::get_LocaleName()
		}
		.property instance string StringTypeSequence()
		{
			.get instance string Test.Uis.Data.GlobalStringData::get_StringTypeSequence()
		}
	}
	.class public sealed InputLocaleData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Data.InputLocaleData FindByIdentifier(string identifier)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DeviceName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Identifier()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_LanguageName()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_ArabicSaudiArabia()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_German()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_Hebrew()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_Chinese()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_Korean()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_French()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_Spanish()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_JapaneseMsIme2002()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_EnglishUS()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_SpanishArgentina()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.InputLocaleData get_Thai()
		{
			ret
		}
		.field static public class Test.Uis.Data.InputLocaleData[] Values
		.property class Test.Uis.Data.InputLocaleData ArabicSaudiArabia()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_ArabicSaudiArabia()
		}
		.property class Test.Uis.Data.InputLocaleData Chinese()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_Chinese()
		}
		.property instance string DeviceName()
		{
			.get instance string Test.Uis.Data.InputLocaleData::get_DeviceName()
		}
		.property class Test.Uis.Data.InputLocaleData EnglishUS()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_EnglishUS()
		}
		.property class Test.Uis.Data.InputLocaleData French()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_French()
		}
		.property class Test.Uis.Data.InputLocaleData German()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_German()
		}
		.property class Test.Uis.Data.InputLocaleData Hebrew()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_Hebrew()
		}
		.property instance string Identifier()
		{
			.get instance string Test.Uis.Data.InputLocaleData::get_Identifier()
		}
		.property class Test.Uis.Data.InputLocaleData JapaneseMsIme2002()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_JapaneseMsIme2002()
		}
		.property class Test.Uis.Data.InputLocaleData Korean()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_Korean()
		}
		.property instance string LanguageName()
		{
			.get instance string Test.Uis.Data.InputLocaleData::get_LanguageName()
		}
		.property class Test.Uis.Data.InputLocaleData Spanish()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_Spanish()
		}
		.property class Test.Uis.Data.InputLocaleData SpanishArgentina()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_SpanishArgentina()
		}
		.property class Test.Uis.Data.InputLocaleData Thai()
		{
			.get class Test.Uis.Data.InputLocaleData Test.Uis.Data.InputLocaleData::get_Thai()
		}
	}
	.class public sealed KeyboardEditingData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance class Test.Uis.Data.KeyboardEditingState CaptureBeforeEditing(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.KeyboardEditingData GetValue(valuetype Test.Uis.Data.KeyboardEditingTestValue testValue)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.KeyboardEditingData[] GetValues(valuetype Test.Uis.Data.KeyboardEditingTestValue[] testValues)
		{
			.param [1]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public static hidebysig 
			string KeyGestureToString(class [PresentationCore]System.Windows.Input.KeyGesture gesture)
		{
			ret
		}
		.method public hidebysig 
			instance void PerformAction(class Test.Uis.Wrappers.UIElementWrapper wrapper, class Test.Uis.Utils.SimpleHandler 'handler')
		{
			ret
		}
		.method public hidebysig 
			instance void PerformAction(class Test.Uis.Wrappers.UIElementWrapper wrapper, class Test.Uis.Utils.SimpleHandler 'handler', bool preferCommand)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyEditing(class Test.Uis.Data.KeyboardEditingState previousState)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.Input.RoutedCommand get_Command()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ExecutionString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsNavigationAction()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsRichTextOnly()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsUndoBoundary()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Data.KeyboardEditingTestValue get_TestValue()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_CharacterFormattingValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_CommandValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_EditingValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_NavigationValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_UndoBoundayValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_PageNavigationValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_DeleteBackSpaceHomeEndValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardEditingData[] get_UndoTypingValues()
		{
			ret
		}
		.field static public class Test.Uis.Data.KeyboardEditingData[] Values
		.property class Test.Uis.Data.KeyboardEditingData[] CharacterFormattingValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_CharacterFormattingValues()
		}
		.property instance class [PresentationCore]System.Windows.Input.RoutedCommand Command()
		{
			.get instance class [PresentationCore]System.Windows.Input.RoutedCommand Test.Uis.Data.KeyboardEditingData::get_Command()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] CommandValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_CommandValues()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] DeleteBackSpaceHomeEndValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_DeleteBackSpaceHomeEndValues()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] EditingValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_EditingValues()
		}
		.property instance string ExecutionString()
		{
			.get instance string Test.Uis.Data.KeyboardEditingData::get_ExecutionString()
		}
		.property instance bool IsNavigationAction()
		{
			.get instance bool Test.Uis.Data.KeyboardEditingData::get_IsNavigationAction()
		}
		.property instance bool IsRichTextOnly()
		{
			.get instance bool Test.Uis.Data.KeyboardEditingData::get_IsRichTextOnly()
		}
		.property instance bool IsUndoBoundary()
		{
			.get instance bool Test.Uis.Data.KeyboardEditingData::get_IsUndoBoundary()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] NavigationValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_NavigationValues()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] PageNavigationValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_PageNavigationValues()
		}
		.property instance valuetype Test.Uis.Data.KeyboardEditingTestValue TestValue()
		{
			.get instance valuetype Test.Uis.Data.KeyboardEditingTestValue Test.Uis.Data.KeyboardEditingData::get_TestValue()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] UndoBoundayValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_UndoBoundayValues()
		}
		.property class Test.Uis.Data.KeyboardEditingData[] UndoTypingValues()
		{
			.get class Test.Uis.Data.KeyboardEditingData[] Test.Uis.Data.KeyboardEditingData::get_UndoTypingValues()
		}
	}
	.class public KeyboardEditingState
		extends [mscorlib]System.Object
	{
	}
	.class public sealed KeyboardEditingTestValue
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Alphabetic = int32(0x00000000)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue AlphabeticShift = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue AltNumpadKeys = int32(0x00000005)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Backspace = int32(0x0000000A)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue BackspaceControl = int32(0x0000000B)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue BackspaceShift = int32(0x0000000C)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue BoldCommandKeys = int32(0x00000030)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue CenterJustifyCommandKeys = int32(0x00000034)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue ControlShiftLeft = int32(0x00000010)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue ControlShiftRight = int32(0x00000011)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue CopyCommandKeys = int32(0x00000031)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue CutCommandKeys = int32(0x0000003A)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DeadKeys = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DecreaseFontSizeCommandKeys = int32(0x0000003C)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DecreaseIndentationCommandKeys = int32(0x00000038)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Delete = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DeleteControl = int32(0x00000009)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DownArrow = int32(0x00000015)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DownArrowControl = int32(0x00000025)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DownArrowControlShift = int32(0x00000029)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue DownArrowShift = int32(0x0000001D)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue End = int32(0x00000017)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue EndControl = int32(0x0000002B)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue EndShift = int32(0x0000001F)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Enter = int32(0x00000006)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue EnterShift = int32(0x00000007)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Home = int32(0x00000016)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue HomeControl = int32(0x0000002A)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue HomeShift = int32(0x0000001E)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue IncreaseFontSizeCommandKeys = int32(0x0000003B)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue IncreaseIndentationCommandKeys = int32(0x00000037)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue ItalicCommandKeys = int32(0x00000033)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue LeftArrow = int32(0x00000012)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue LeftArrowControl = int32(0x00000022)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue LeftArrowControlShift = int32(0x00000026)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue LeftArrowShift = int32(0x0000001A)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue LeftJustifyCommandKeys = int32(0x00000036)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Numeric = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue NumericShift = int32(0x00000003)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PageDown = int32(0x00000019)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PageDownControl = int32(0x0000002D)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PageDownShift = int32(0x00000021)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PageUp = int32(0x00000018)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PageUpControl = int32(0x0000002C)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PageUpShift = int32(0x00000020)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue PasteCommandKeys = int32(0x00000039)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue RedoCommandKeys = int32(0x0000002F)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue RightArrow = int32(0x00000013)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue RightArrowControl = int32(0x00000023)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue RightArrowControlShift = int32(0x00000027)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue RightArrowShift = int32(0x0000001B)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue RightJustifyCommandKeys = int32(0x00000035)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Space = int32(0x0000000D)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue Tab = int32(0x0000000E)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue TabShift = int32(0x0000000F)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue UnderlineCommandKeys = int32(0x00000032)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue UndoCommandKeys = int32(0x0000002E)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue UpArrow = int32(0x00000014)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue UpArrowControl = int32(0x00000024)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue UpArrowControlShift = int32(0x00000028)
		.field static public literal valuetype Test.Uis.Data.KeyboardEditingTestValue UpArrowShift = int32(0x0000001C)
	}
	.class public sealed KeyboardLayoutData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Data.KeyboardLayoutData FindByName(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 get_KeyboardId()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_KeyboardIdString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance uint32 get_LayoutId()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_LayoutIdString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_RequiresHklComposition()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ImeFile()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardLayoutData get_LatinAmerican()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.KeyboardLayoutData get_US()
		{
			ret
		}
		.field static public class Test.Uis.Data.KeyboardLayoutData[] Values
		.property instance string ImeFile()
		{
			.get instance string Test.Uis.Data.KeyboardLayoutData::get_ImeFile()
		}
		.property instance uint32 KeyboardId()
		{
			.get instance uint32 Test.Uis.Data.KeyboardLayoutData::get_KeyboardId()
		}
		.property instance string KeyboardIdString()
		{
			.get instance string Test.Uis.Data.KeyboardLayoutData::get_KeyboardIdString()
		}
		.property class Test.Uis.Data.KeyboardLayoutData LatinAmerican()
		{
			.get class Test.Uis.Data.KeyboardLayoutData Test.Uis.Data.KeyboardLayoutData::get_LatinAmerican()
		}
		.property instance uint32 LayoutId()
		{
			.get instance uint32 Test.Uis.Data.KeyboardLayoutData::get_LayoutId()
		}
		.property instance string LayoutIdString()
		{
			.get instance string Test.Uis.Data.KeyboardLayoutData::get_LayoutIdString()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Data.KeyboardLayoutData::get_Name()
		}
		.property instance bool RequiresHklComposition()
		{
			.get instance bool Test.Uis.Data.KeyboardLayoutData::get_RequiresHklComposition()
		}
		.property class Test.Uis.Data.KeyboardLayoutData US()
		{
			.get class Test.Uis.Data.KeyboardLayoutData Test.Uis.Data.KeyboardLayoutData::get_US()
		}
	}
	.class public sealed LanguageIdentifierData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Data.LanguageIdentifierData FindByIdentifier(int32 identifier)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.LanguageIdentifierData FindByIdentifier(string identifier)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Identifier()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_IdentifierString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Language()
		{
			ret
		}
		.field static public class Test.Uis.Data.LanguageIdentifierData[] Values
		.property instance int32 Identifier()
		{
			.get instance int32 Test.Uis.Data.LanguageIdentifierData::get_Identifier()
		}
		.property instance string IdentifierString()
		{
			.get instance string Test.Uis.Data.LanguageIdentifierData::get_IdentifierString()
		}
		.property instance string Language()
		{
			.get instance string Test.Uis.Data.LanguageIdentifierData::get_Language()
		}
	}
	.class public sealed PrimaryLanguageIdentifierData
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance int32 get_Identifier()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Symbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Language()
		{
			ret
		}
		.field static public class Test.Uis.Data.PrimaryLanguageIdentifierData[] Values
		.property instance int32 Identifier()
		{
			.get instance int32 Test.Uis.Data.PrimaryLanguageIdentifierData::get_Identifier()
		}
		.property instance string Language()
		{
			.get instance string Test.Uis.Data.PrimaryLanguageIdentifierData::get_Language()
		}
		.property instance string Symbol()
		{
			.get instance string Test.Uis.Data.PrimaryLanguageIdentifierData::get_Symbol()
		}
	}
	.class public sealed PropertyValueSource
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Data.PropertyValueSource LocalValueSet = int32(0x00000000)
		.field static public literal valuetype Test.Uis.Data.PropertyValueSource ParentInherited = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Data.PropertyValueSource PropertyDefault = int32(0x00000003)
		.field static public literal valuetype Test.Uis.Data.PropertyValueSource StyleSet = int32(0x00000002)
	}
	.class public RichTextBoxSubClass
		extends [PresentationFramework]System.Windows.Controls.RichTextBox
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed RichTextContentData
		extends [mscorlib]System.Object
	{
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_StandaloneXaml()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Xaml()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_ContainsUIElements()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.RichTextContentData get_FullyPopulatedContent()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.RichTextContentData[] get_Values()
		{
			ret
		}
		.property instance bool ContainsUIElements()
		{
			.get instance bool Test.Uis.Data.RichTextContentData::get_ContainsUIElements()
		}
		.property class Test.Uis.Data.RichTextContentData FullyPopulatedContent()
		{
			.get class Test.Uis.Data.RichTextContentData Test.Uis.Data.RichTextContentData::get_FullyPopulatedContent()
		}
		.property instance string StandaloneXaml()
		{
			.get instance string Test.Uis.Data.RichTextContentData::get_StandaloneXaml()
		}
		.property class Test.Uis.Data.RichTextContentData[] Values()
		{
			.get class Test.Uis.Data.RichTextContentData[] Test.Uis.Data.RichTextContentData::get_Values()
		}
		.property instance string Xaml()
		{
			.get instance string Test.Uis.Data.RichTextContentData::get_Xaml()
		}
	}
	.class public SelectedDocumentGenerator
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance bool Next()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Data.DocumentContentPruner get_ContentPruner()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ContentPruner(class Test.Uis.Data.DocumentContentPruner 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Data.DocumentSelectionIterator get_SelectionIterator()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SelectionIterator(class Test.Uis.Data.DocumentSelectionIterator 'value')
		{
			ret
		}
		.property instance class Test.Uis.Data.DocumentContentPruner ContentPruner()
		{
			.get instance class Test.Uis.Data.DocumentContentPruner Test.Uis.Data.SelectedDocumentGenerator::get_ContentPruner()
			.set instance void Test.Uis.Data.SelectedDocumentGenerator::set_ContentPruner(class Test.Uis.Data.DocumentContentPruner)
		}
		.property instance class Test.Uis.Data.DocumentSelectionIterator SelectionIterator()
		{
			.get instance class Test.Uis.Data.DocumentSelectionIterator Test.Uis.Data.SelectedDocumentGenerator::get_SelectionIterator()
			.set instance void Test.Uis.Data.SelectedDocumentGenerator::set_SelectionIterator(class Test.Uis.Data.DocumentSelectionIterator)
		}
	}
	.class public sealed StringData
		extends [mscorlib]System.Object
	{
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_Empty()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsLong()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_LargeData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_LatinScriptData()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_MixedScripts()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Data.TextScript get_TextScript()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Value()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData[] get_Values()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_SurrogatePair()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_CombiningCharacters()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.StringData get_WrappingLine()
		{
			ret
		}
		.property class Test.Uis.Data.StringData CombiningCharacters()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_CombiningCharacters()
		}
		.property class Test.Uis.Data.StringData Empty()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_Empty()
		}
		.property instance bool IsLong()
		{
			.get instance bool Test.Uis.Data.StringData::get_IsLong()
		}
		.property class Test.Uis.Data.StringData LargeData()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_LargeData()
		}
		.property class Test.Uis.Data.StringData LatinScriptData()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_LatinScriptData()
		}
		.property class Test.Uis.Data.StringData MixedScripts()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_MixedScripts()
		}
		.property class Test.Uis.Data.StringData SurrogatePair()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_SurrogatePair()
		}
		.property instance class Test.Uis.Data.TextScript TextScript()
		{
			.get instance class Test.Uis.Data.TextScript Test.Uis.Data.StringData::get_TextScript()
		}
		.property instance string Value()
		{
			.get instance string Test.Uis.Data.StringData::get_Value()
		}
		.property class Test.Uis.Data.StringData[] Values()
		{
			.get class Test.Uis.Data.StringData[] Test.Uis.Data.StringData::get_Values()
		}
		.property class Test.Uis.Data.StringData WrappingLine()
		{
			.get class Test.Uis.Data.StringData Test.Uis.Data.StringData::get_WrappingLine()
		}
	}
	.class public SubLanguageIdentifierData
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance int32 get_Identifier()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Symbol()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Language()
		{
			ret
		}
		.field static public class Test.Uis.Data.SubLanguageIdentifierData[] Values
		.property instance int32 Identifier()
		{
			.get instance int32 Test.Uis.Data.SubLanguageIdentifierData::get_Identifier()
		}
		.property instance string Language()
		{
			.get instance string Test.Uis.Data.SubLanguageIdentifierData::get_Language()
		}
		.property instance string Symbol()
		{
			.get instance string Test.Uis.Data.SubLanguageIdentifierData::get_Symbol()
		}
	}
	.class public TextBoxSubClass
		extends [PresentationFramework]System.Windows.Controls.TextBox
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public sealed TextEditableType
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.FrameworkElement CreateInstance()
		{
			ret
		}
		.method public hidebysig 
			instance string GetEditableXaml(string attributes, string content)
		{
			ret
		}
		.method public static hidebysig 
			void GetValueForType(class [mscorlib]System.Type 'type', class [mscorlib]System.Type[] types, bool[] values, [out] bool& 'value')
		{
			ret
		}
		.method public static hidebysig 
			void GetValueForType(class [mscorlib]System.Type 'type', class [mscorlib]System.Type[] types, string[] values, [out] string& 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsAggregate()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPassword()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsSubClass()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_SubClassNamespaceAttributeName()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_SubClassNamespaceAttributeValue()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_SupportsParagraphs()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type get_Type()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XamlName()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.TextEditableType GetByName(string name)
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextEditableType[] get_PlatformTypes()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextEditableType[] get_Values()
		{
			ret
		}
		.property instance bool IsAggregate()
		{
			.get instance bool Test.Uis.Data.TextEditableType::get_IsAggregate()
		}
		.property instance bool IsPassword()
		{
			.get instance bool Test.Uis.Data.TextEditableType::get_IsPassword()
		}
		.property instance bool IsSubClass()
		{
			.get instance bool Test.Uis.Data.TextEditableType::get_IsSubClass()
		}
		.property class Test.Uis.Data.TextEditableType[] PlatformTypes()
		{
			.get class Test.Uis.Data.TextEditableType[] Test.Uis.Data.TextEditableType::get_PlatformTypes()
		}
		.property string SubClassNamespaceAttributeName()
		{
			.get string Test.Uis.Data.TextEditableType::get_SubClassNamespaceAttributeName()
		}
		.property string SubClassNamespaceAttributeValue()
		{
			.get string Test.Uis.Data.TextEditableType::get_SubClassNamespaceAttributeValue()
		}
		.property instance bool SupportsParagraphs()
		{
			.get instance bool Test.Uis.Data.TextEditableType::get_SupportsParagraphs()
		}
		.property instance class [mscorlib]System.Type Type()
		{
			.get instance class [mscorlib]System.Type Test.Uis.Data.TextEditableType::get_Type()
		}
		.property class Test.Uis.Data.TextEditableType[] Values()
		{
			.get class Test.Uis.Data.TextEditableType[] Test.Uis.Data.TextEditableType::get_Values()
		}
		.property instance string XamlName()
		{
			.get instance string Test.Uis.Data.TextEditableType::get_XamlName()
		}
	}
	.class public abstract sealed TextElementType
		extends [mscorlib]System.Object
	{
		.method public static hidebysig specialname 
			class [mscorlib]System.Type[] get_BlockItemValues()
		{
			ret
		}
		.method public static hidebysig 
			bool IsValidChildType(class [mscorlib]System.Type childType, class [mscorlib]System.Type parentType)
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Type[] get_NonAbstractValues()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Type[] get_Values()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]System.Type> get_ValidParentChildTypes()
		{
			ret
		}
		.property class [mscorlib]System.Type[] BlockItemValues()
		{
			.get class [mscorlib]System.Type[] Test.Uis.Data.TextElementType::get_BlockItemValues()
		}
		.property class [mscorlib]System.Type[] NonAbstractValues()
		{
			.get class [mscorlib]System.Type[] Test.Uis.Data.TextElementType::get_NonAbstractValues()
		}
		.property class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]System.Type> ValidParentChildTypes()
		{
			.get class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [mscorlib]System.Type,class [mscorlib]System.Type> Test.Uis.Data.TextElementType::get_ValidParentChildTypes()
		}
		.property class [mscorlib]System.Type[] Values()
		{
			.get class [mscorlib]System.Type[] Test.Uis.Data.TextElementType::get_Values()
		}
	}
	.class public TextLayoutModel
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance void CaptureLayoutInformation()
		{
			ret
		}
		.method public hidebysig 
			instance void CaptureLayoutInformation(int32 startIndex, int32 endIndex)
		{
			ret
		}
		.method public hidebysig 
			instance void CaptureLayoutInformation(class [PresentationFramework]System.Windows.Documents.TextPointer startPointer, class [PresentationFramework]System.Windows.Documents.TextPointer endPointer)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer GetPositionFromPoint(valuetype [WindowsBase]System.Windows.Point point, bool snapToText)
		{
			ret
		}
		.method public hidebysig 
			instance string DescribeModel()
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetUnitIndexFromPoint(valuetype [WindowsBase]System.Windows.Point point, bool snapToText)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Data.TextLayoutUnit> get_Units()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Wrappers.UIElementWrapper get_Wrapper()
		{
			ret
		}
		.property instance class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Data.TextLayoutUnit> Units()
		{
			.get instance class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Data.TextLayoutUnit> Test.Uis.Data.TextLayoutModel::get_Units()
		}
		.property instance class Test.Uis.Wrappers.UIElementWrapper Wrapper()
		{
			.get instance class Test.Uis.Wrappers.UIElementWrapper Test.Uis.Data.TextLayoutModel::get_Wrapper()
		}
	}
	.class public TextLayoutUnit
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(int32 index, valuetype [WindowsBase]System.Windows.Rect rectangle)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_Index()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Rect get_Rectangle()
		{
			ret
		}
		.property instance int32 Index()
		{
			.get instance int32 Test.Uis.Data.TextLayoutUnit::get_Index()
		}
		.property instance valuetype [WindowsBase]System.Windows.Rect Rectangle()
		{
			.get instance valuetype [WindowsBase]System.Windows.Rect Test.Uis.Data.TextLayoutUnit::get_Rectangle()
		}
	}
	.class public sealed TextScript
		extends [mscorlib]System.Object
	{
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextScript get_Arabic()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextScript get_Hebrew()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextScript get_Katakana()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextScript get_Latin()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextScript get_Thaana()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Sample()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Data.TextScript[] get_Values()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.TextScript FindByName(string name)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.TextScript GetCharacterScript(char c)
		{
			ret
		}
		.method public hidebysig 
			instance bool IsCharInScript(char c)
		{
			ret
		}
		.property class Test.Uis.Data.TextScript Arabic()
		{
			.get class Test.Uis.Data.TextScript Test.Uis.Data.TextScript::get_Arabic()
		}
		.property class Test.Uis.Data.TextScript Hebrew()
		{
			.get class Test.Uis.Data.TextScript Test.Uis.Data.TextScript::get_Hebrew()
		}
		.property class Test.Uis.Data.TextScript Katakana()
		{
			.get class Test.Uis.Data.TextScript Test.Uis.Data.TextScript::get_Katakana()
		}
		.property class Test.Uis.Data.TextScript Latin()
		{
			.get class Test.Uis.Data.TextScript Test.Uis.Data.TextScript::get_Latin()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Data.TextScript::get_Name()
		}
		.property instance string Sample()
		{
			.get instance string Test.Uis.Data.TextScript::get_Sample()
		}
		.property class Test.Uis.Data.TextScript Thaana()
		{
			.get class Test.Uis.Data.TextScript Test.Uis.Data.TextScript::get_Thaana()
		}
		.property class Test.Uis.Data.TextScript[] Values()
		{
			.get class Test.Uis.Data.TextScript[] Test.Uis.Data.TextScript::get_Values()
		}
	}
	.class public sealed TextSelectionData
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Data.TextSelectionData GetForValue(valuetype Test.Uis.Data.TextSelectionTestValue 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void PrepareForSelection(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance bool Select(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			void VerifySelectionRendering(class Test.Uis.Wrappers.UIElementWrapper wrapper, valuetype [TestRuntime]Microsoft.Test.Imaging.ColorElement highlightColorElement, valuetype [TestRuntime]Microsoft.Test.Imaging.ColorElement textColorElement, int32 highlightMatchPercent, int32 TextMatchPercent)
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Data.TextSelectionTestValue get_TestValue()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsRichTextSupported()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPlainTextSupported()
		{
			ret
		}
		.field static public class Test.Uis.Data.TextSelectionData[] Values
		.property instance bool IsPlainTextSupported()
		{
			.get instance bool Test.Uis.Data.TextSelectionData::get_IsPlainTextSupported()
		}
		.property instance bool IsRichTextSupported()
		{
			.get instance bool Test.Uis.Data.TextSelectionData::get_IsRichTextSupported()
		}
		.property instance valuetype Test.Uis.Data.TextSelectionTestValue TestValue()
		{
			.get instance valuetype Test.Uis.Data.TextSelectionTestValue Test.Uis.Data.TextSelectionData::get_TestValue()
		}
	}
	.class public sealed TextSelectionTestValue
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyAfterViewportStart = int32(0x00000010)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyAtTableRowEnd = int32(0x00000011)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyBeforeViewportEnd = int32(0x0000000F)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyDocumentEnd = int32(0x0000000E)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyDocumentStart = int32(0x0000000D)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyOnEmptyText = int32(0x00000000)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptyOnPopulatedText = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptySelectionAfterDelimitedLine = int32(0x00000009)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptySelectionAfterWrapLine = int32(0x0000000A)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptySelectionBeforeDelimitedLine = int32(0x0000000B)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue EmptySelectionBeforeWrapLine = int32(0x0000000C)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanAllText = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanDelimitedLine = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanMultipleEmptyLines = int32(0x00000007)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanMultiplePopulatedLines = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanNewline = int32(0x00000006)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanRenderedLine = int32(0x00000005)
		.field static public literal valuetype Test.Uis.Data.TextSelectionTestValue SpanTextFragment = int32(0x00000003)
	}
	.class public TextUndoModel
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Wrappers.UIElementWrapper wrapper)
		{
			ret
		}
		.method public hidebysig 
			instance void CaptureUndo()
		{
			ret
		}
		.method public hidebysig 
			instance void PerformRedo()
		{
			ret
		}
		.method public hidebysig 
			instance void PerformUndo()
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyRedo()
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyUndo()
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyUndoOperations(int32 maxUndoDepth, class Test.Uis.Utils.SimpleHandler callback)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CanRedo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_CanUndo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_CurrentState()
		{
			ret
		}
		.property instance bool CanRedo()
		{
			.get instance bool Test.Uis.Data.TextUndoModel::get_CanRedo()
		}
		.property instance bool CanUndo()
		{
			.get instance bool Test.Uis.Data.TextUndoModel::get_CanUndo()
		}
		.property instance string CurrentState()
		{
			.get instance string Test.Uis.Data.TextUndoModel::get_CurrentState()
		}
	}
	.class public sealed TypographyFontData
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.Paragraph GetSampleParagraph()
		{
			ret
		}
		.method public hidebysig 
			instance void ApplyToObject(class [WindowsBase]System.Windows.DependencyObject dependencyObject)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.TypographyFontData[] GetValuesForDependencyProperty(class [WindowsBase]System.Windows.DependencyProperty 'property')
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.TypographyFontData[] GetValuesForFontFamily(string fontFamilyName)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Data.TypographyFontData[] GetValuesFor(class [WindowsBase]System.Windows.DependencyProperty 'property', object propertyValue)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyProperty[] get_AdditionalProperties()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object[] get_AdditionalValues()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Globalization.CultureInfo get_CultureInfo()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyProperty get_DependencyProperty()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_FontFamilyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsSimulated()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_NotSupportedFontFamilyName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_SampleParagraphXaml()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_PropertyValue()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TextContent()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TextContent(string 'value')
		{
			ret
		}
		.field static public class Test.Uis.Data.TypographyFontData[] Values
		.property instance class [WindowsBase]System.Windows.DependencyProperty[] AdditionalProperties()
		{
			.get instance class [WindowsBase]System.Windows.DependencyProperty[] Test.Uis.Data.TypographyFontData::get_AdditionalProperties()
		}
		.property instance object[] AdditionalValues()
		{
			.get instance object[] Test.Uis.Data.TypographyFontData::get_AdditionalValues()
		}
		.property instance class [mscorlib]System.Globalization.CultureInfo CultureInfo()
		{
			.get instance class [mscorlib]System.Globalization.CultureInfo Test.Uis.Data.TypographyFontData::get_CultureInfo()
		}
		.property instance class [WindowsBase]System.Windows.DependencyProperty DependencyProperty()
		{
			.get instance class [WindowsBase]System.Windows.DependencyProperty Test.Uis.Data.TypographyFontData::get_DependencyProperty()
		}
		.property instance string FontFamilyName()
		{
			.get instance string Test.Uis.Data.TypographyFontData::get_FontFamilyName()
		}
		.property instance bool IsSimulated()
		{
			.get instance bool Test.Uis.Data.TypographyFontData::get_IsSimulated()
		}
		.property instance string NotSupportedFontFamilyName()
		{
			.get instance string Test.Uis.Data.TypographyFontData::get_NotSupportedFontFamilyName()
		}
		.property instance object PropertyValue()
		{
			.get instance object Test.Uis.Data.TypographyFontData::get_PropertyValue()
		}
		.property instance string SampleParagraphXaml()
		{
			.get instance string Test.Uis.Data.TypographyFontData::get_SampleParagraphXaml()
		}
		.property instance string TextContent()
		{
			.get instance string Test.Uis.Data.TypographyFontData::get_TextContent()
			.set instance void Test.Uis.Data.TypographyFontData::set_TextContent(string)
		}
	}
}
.namespace 'Test.Uis.IO'
{
	.class public LogStreamWorkItem
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]'System.IO.StreamReader' streamReader)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]'System.IO.StreamReader' streamReader, string prefix)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]'System.IO.StreamReader' streamReader, string prefix, bool autoQueue)
		{
			ret
		}
		.method public hidebysig 
			instance void LogCallback(object o)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Prefix()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Prefix(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]'System.IO.StreamReader' get_StreamReader()
		{
			ret
		}
		.property instance string Prefix()
		{
			.get instance string 'Test.Uis.IO.LogStreamWorkItem'::get_Prefix()
			.set instance void 'Test.Uis.IO.LogStreamWorkItem'::set_Prefix(string)
		}
		.property instance class [mscorlib]'System.IO.StreamReader' StreamReader()
		{
			.get instance class [mscorlib]'System.IO.StreamReader' 'Test.Uis.IO.LogStreamWorkItem'::get_StreamReader()
		}
	}
	.class public StringStream
		extends [mscorlib]'System.IO.Stream'
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string text)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string text, class [mscorlib]System.Text.Encoding encoding, bool ignorePreamble)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Flush()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 Read([in][out] uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 ReadByte()
		{
			ret
		}
		.method public virtual hidebysig 
			instance int64 Seek(int64 offset, valuetype [mscorlib]'System.IO.SeekOrigin' origin)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void SetLength(int64 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance void Write(uint8[] buffer, int32 offset, int32 count)
		{
			ret
		}
		.method public virtual hidebysig 
			instance void WriteByte(uint8 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Text.Encoding get_Encoding()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Encoding(class [mscorlib]System.Text.Encoding 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IncludePreamble()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Text()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Text(string 'value')
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanRead()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanSeek()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance bool get_CanWrite()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Length()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance int64 get_Position()
		{
			ret
		}
		.method public virtual hidebysig specialname 
			instance void set_Position(int64 'value')
		{
			ret
		}
		.property instance bool CanRead()
		{
			.get instance bool 'Test.Uis.IO.StringStream'::get_CanRead()
		}
		.property instance bool CanSeek()
		{
			.get instance bool 'Test.Uis.IO.StringStream'::get_CanSeek()
		}
		.property instance bool CanWrite()
		{
			.get instance bool 'Test.Uis.IO.StringStream'::get_CanWrite()
		}
		.property instance class [mscorlib]System.Text.Encoding Encoding()
		{
			.get instance class [mscorlib]System.Text.Encoding 'Test.Uis.IO.StringStream'::get_Encoding()
			.set instance void 'Test.Uis.IO.StringStream'::set_Encoding(class [mscorlib]System.Text.Encoding)
		}
		.property instance bool IncludePreamble()
		{
			.get instance bool 'Test.Uis.IO.StringStream'::get_IncludePreamble()
		}
		.property instance int64 Length()
		{
			.get instance int64 'Test.Uis.IO.StringStream'::get_Length()
		}
		.property instance int64 Position()
		{
			.get instance int64 'Test.Uis.IO.StringStream'::get_Position()
			.set instance void 'Test.Uis.IO.StringStream'::set_Position(int64)
		}
		.property instance string Text()
		{
			.get instance string 'Test.Uis.IO.StringStream'::get_Text()
			.set instance void 'Test.Uis.IO.StringStream'::set_Text(string)
		}
	}
	.class public TextFileUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string LoadFromFile(string fileName)
		{
			ret
		}
		.method public static hidebysig 
			void SaveToFile(string contents, string fileName)
		{
			ret
		}
		.method public static hidebysig 
			void Delete(string fileName)
		{
			ret
		}
		.method public static hidebysig 
			bool Exists(string fileName)
		{
			ret
		}
	}
}
.namespace Test.Uis.Loggers
{
	.class public sealed ClrProfilerLogger
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void DumpHeap()
		{
			ret
		}
		.method public static hidebysig 
			void Log(string comment)
		{
			ret
		}
		.method public static hidebysig 
			void Log(string format, object[] args)
		{
			.param [2]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public static hidebysig specialname 
			bool get_AllocationLoggingActive()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_AllocationLoggingActive(bool 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_CallLoggingActive()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_CallLoggingActive(bool 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_ProcessIsUnderProfiler()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_ProcessIsUnderProfiler(bool 'value')
		{
			ret
		}
		.property bool AllocationLoggingActive()
		{
			.get bool Test.Uis.Loggers.ClrProfilerLogger::get_AllocationLoggingActive()
			.set void Test.Uis.Loggers.ClrProfilerLogger::set_AllocationLoggingActive(bool)
		}
		.property bool CallLoggingActive()
		{
			.get bool Test.Uis.Loggers.ClrProfilerLogger::get_CallLoggingActive()
			.set void Test.Uis.Loggers.ClrProfilerLogger::set_CallLoggingActive(bool)
		}
		.property bool ProcessIsUnderProfiler()
		{
			.get bool Test.Uis.Loggers.ClrProfilerLogger::get_ProcessIsUnderProfiler()
			.set void Test.Uis.Loggers.ClrProfilerLogger::set_ProcessIsUnderProfiler(bool)
		}
	}
	.class public abstract sealed CommandLogger
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string DescribeCommand(class [PresentationCore]System.Windows.Input.RoutedCommand command)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeCommandBinding(class [PresentationCore]System.Windows.Input.CommandBinding link)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeKeyBinding(class [PresentationCore]System.Windows.Input.KeyBinding binding)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeMouseBinding(class [PresentationCore]System.Windows.Input.MouseBinding binding)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeUIElementCommands(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
	}
	.class public abstract sealed EventLogger
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string DescribeDelegate(class [mscorlib]System.Delegate item)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeEventRoute(class [PresentationCore]System.Windows.EventRoute route)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeRoutedEventArgs(class [PresentationCore]System.Windows.RoutedEventArgs args)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeRouteItem(object item)
		{
			ret
		}
	}
	.class public sealed ExceptionDumpKinds
		extends [mscorlib]System.Enum
	{
		.custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds All = int32(0x000001F9)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds AppDomainDump = int32(0x00000010)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds AssemblyDump = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds AvalonQueueDump = int32(0x00000080)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds ChainedExceptions = int32(0x00000040)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds Default = int32(0x000001B1)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds DetailedAssemblyDump = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds ExceptionDump = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds InputLocaleDump = int32(0x00000100)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds ThreadQueueDump = int32(0x00000020)
		.field static public literal valuetype Test.Uis.Loggers.ExceptionDumpKinds TraceDump = int32(0x00000002)
	}
	.class public InputLogger
		extends [mscorlib]System.Object
	{
		.class nested public sealed LogEvents
			extends [mscorlib]System.Enum
		{
			.custom instance void [mscorlib]System.FlagsAttribute::.ctor() = { }
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype Test.Uis.Loggers.InputLogger/LogEvents PostNotifyInput = int32(0x00000002)
			.field static public literal valuetype Test.Uis.Loggers.InputLogger/LogEvents PostProcessInput = int32(0x00000008)
			.field static public literal valuetype Test.Uis.Loggers.InputLogger/LogEvents PreNotifyInput = int32(0x00000001)
			.field static public literal valuetype Test.Uis.Loggers.InputLogger/LogEvents PreProcessInput = int32(0x00000004)
		}
		.method public static hidebysig 
			void EnableInputLogging()
		{
			ret
		}
		.method public static hidebysig 
			void EnableInputLogging(string filterDevice)
		{
			ret
		}
		.method public static hidebysig 
			void EnableInputLogging(string filterDevice, valuetype Test.Uis.Loggers.InputLogger/LogEvents events)
		{
			ret
		}
	}
	.class public LogEventArgs
		extends [mscorlib]System.EventArgs
	{
		.method public hidebysig specialname 
			instance void .ctor(string text)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Text()
		{
			ret
		}
		.property instance string Text()
		{
			.get instance string Test.Uis.Loggers.LogEventArgs::get_Text()
		}
	}
	.class public sealed LogEventHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class Test.Uis.Loggers.LogEventArgs e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(object sender, class Test.Uis.Loggers.LogEventArgs e, class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public Logger
		extends [mscorlib]System.Object
		implements [mscorlib]System.IDisposable
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method public hidebysig 
			instance void Log(string message)
		{
			ret
		}
		.method public hidebysig 
			instance void Log(string format, object[] args)
		{
			.param [2]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public hidebysig 
			instance void Log(object obj)
		{
			ret
		}
		.method public hidebysig 
			instance void LogFromThread(int32 processId, int32 threadId, string message)
		{
			ret
		}
		.method public hidebysig 
			instance void LogImage(class [System.Drawing]System.Drawing.Image image, string name)
		{
			ret
		}
		.method public hidebysig 
			instance void Quit(bool result)
		{
			ret
		}
		.method public hidebysig 
			instance void ReportResult(bool testPassed, string message)
		{
			ret
		}
		.method public hidebysig 
			instance void ReportResult(bool testPassed, string message, bool continueExecution)
		{
			ret
		}
		.method public hidebysig 
			instance void ReportResults(int32 passCount, int32 failCount, string message, bool continueExecution)
		{
			ret
		}
		.method public hidebysig 
			instance void ReportStage(int32 stageCode)
		{
			ret
		}
		.method public hidebysig 
			instance void ReportSuccess()
		{
			ret
		}
		.method public hidebysig 
			instance void QueueSuccess()
		{
			ret
		}
		.method public hidebysig 
			instance void DumpException(class [mscorlib]System.Exception exception)
		{
			ret
		}
		.method public hidebysig 
			instance void DumpException(class [mscorlib]System.Exception exception, valuetype Test.Uis.Loggers.ExceptionDumpKinds kinds)
		{
			ret
		}
		.method public hidebysig 
			instance void LogToFile(string fileName)
		{
			ret
		}
		.method public hidebysig 
			instance bool ProcessLog(string fileName)
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Loggers.Logger get_Current()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [TestRuntime]Microsoft.Test.Logging.TestLog get_TestLog()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TestLog(class [TestRuntime]Microsoft.Test.Logging.TestLog 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CombinationIndex()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_CombinationIndex(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_KeepApplicationOnFinish()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_KeepApplicationOnFinish(bool 'value')
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public hidebysig 
			instance void ShutdownApplication()
		{
			ret
		}
		.field static public bool CasePassed
		.field public class Test.Uis.Loggers.LogEventHandler LogEvent
		.property instance int32 CombinationIndex()
		{
			.get instance int32 Test.Uis.Loggers.Logger::get_CombinationIndex()
			.set instance void Test.Uis.Loggers.Logger::set_CombinationIndex(int32)
		}
		.property class Test.Uis.Loggers.Logger Current()
		{
			.get class Test.Uis.Loggers.Logger Test.Uis.Loggers.Logger::get_Current()
		}
		.property instance bool KeepApplicationOnFinish()
		{
			.get instance bool Test.Uis.Loggers.Logger::get_KeepApplicationOnFinish()
			.set instance void Test.Uis.Loggers.Logger::set_KeepApplicationOnFinish(bool)
		}
		.property instance class [TestRuntime]Microsoft.Test.Logging.TestLog TestLog()
		{
			.get instance class [TestRuntime]Microsoft.Test.Logging.TestLog Test.Uis.Loggers.Logger::get_TestLog()
			.set instance void Test.Uis.Loggers.Logger::set_TestLog(class [TestRuntime]Microsoft.Test.Logging.TestLog)
		}
	}
	.class public abstract sealed TextTreeLogger
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string DescribeNavigator(class [PresentationFramework]System.Windows.Documents.TextPointer navigator)
		{
			ret
		}
		.method public static hidebysig 
			string DescribePosition(class [PresentationFramework]System.Windows.Documents.TextPointer position)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeRange(class [PresentationFramework]System.Windows.Documents.TextRange range)
		{
			ret
		}
		.method public static hidebysig 
			string DescribeViewLocation(object viewLocation)
		{
			ret
		}
		.method public static hidebysig 
			string Describe(object o)
		{
			ret
		}
		.method public static hidebysig 
			void LogContainer(string imageName, class [PresentationFramework]System.Windows.Documents.TextPointer containerPointer, object[] pointersAndNames)
		{
			.param [3]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public static hidebysig 
			void LogRange(string imageName, class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, object[] pointersAndNames)
		{
			.param [4]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public static hidebysig 
			void LogRange(string imageName, class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, class [PresentationFramework]System.Windows.Documents.TextPointer[] pointers, string[] pointerNames)
		{
			ret
		}
	}
	.class public abstract sealed Verifier
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			bool AreValuesEqual(object a, object b)
		{
			ret
		}
		.method public static hidebysig 
			void Verify(bool condition)
		{
			ret
		}
		.method public static hidebysig 
			void Verify(bool condition, string description)
		{
			ret
		}
		.method public static hidebysig 
			void Verify(bool condition, string description, bool logAlways)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyAssigned(object o, string failDescription)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyValue(string valueName, object expectedValue, object actualValue)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyValueDifferent(string valueName, object expectedDifferentValue, object actualValue)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyText(string description, string expectedValue, string actualValue, bool logAlways)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyProperty(object o, string propertyName, object expectedValue)
		{
			ret
		}
		.method public static hidebysig 
			void QueueVerification(object target, string propertyName, object expectedValue)
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_StackFramesToSkip()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_StackFramesToSkip(int32 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_WillThrow()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_WillThrow(bool 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_Failed()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_Failed(bool 'value')
		{
			ret
		}
		.method public static hidebysig 
			object GetValue(object target, string propertyName)
		{
			ret
		}
		.property bool Failed()
		{
			.get bool Test.Uis.Loggers.Verifier::get_Failed()
			.set void Test.Uis.Loggers.Verifier::set_Failed(bool)
		}
		.property int32 StackFramesToSkip()
		{
			.get int32 Test.Uis.Loggers.Verifier::get_StackFramesToSkip()
			.set void Test.Uis.Loggers.Verifier::set_StackFramesToSkip(int32)
		}
		.property bool WillThrow()
		{
			.get bool Test.Uis.Loggers.Verifier::get_WillThrow()
			.set void Test.Uis.Loggers.Verifier::set_WillThrow(bool)
		}
	}
	.class public abstract sealed VisualLogger
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string DescribeVisualTree(class [PresentationCore]System.Windows.Media.Visual root)
		{
			ret
		}
	}
}
.namespace Test.Uis.Management
{
	.class public Coordinator
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance void RunTestCombinations(string combinatorialFile)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Utils.ConfigurationSettings get_Settings()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Settings(class Test.Uis.Utils.ConfigurationSettings 'value')
		{
			ret
		}
		.method public static hidebysig specialname 
			bool get_IsStandaloneMode()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public literal string CombFileArgument = "CombFile"
		.property bool IsStandaloneMode()
		{
			.get bool Test.Uis.Management.Coordinator::get_IsStandaloneMode()
		}
		.property instance class Test.Uis.Utils.ConfigurationSettings Settings()
		{
			.get instance class Test.Uis.Utils.ConfigurationSettings Test.Uis.Management.Coordinator::get_Settings()
			.set instance void Test.Uis.Management.Coordinator::set_Settings(class Test.Uis.Utils.ConfigurationSettings)
		}
	}
	.class public TestArgumentAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(true) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor(string name)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, string description)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Description()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestArgumentAttribute[] FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string Description()
		{
			.get instance string Test.Uis.Management.TestArgumentAttribute::get_Description()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Management.TestArgumentAttribute::get_Name()
		}
	}
	.class public TestBugsAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor(string bugs)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Bugs()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32[] get_BugIDs()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestBugsAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance int32[] BugIDs()
		{
			.get instance int32[] Test.Uis.Management.TestBugsAttribute::get_BugIDs()
		}
		.property instance string Bugs()
		{
			.get instance string Test.Uis.Management.TestBugsAttribute::get_Bugs()
		}
	}
	.class public TestCaseDataTableAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(256) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public TestCaseDataTableClassAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public TestEntryPointAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(64) }
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestEntryPointAttribute FromMethod(class [mscorlib]System.Reflection.MethodInfo 'method')
		{
			ret
		}
	}
	.class public TestFinder
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string[] ListAvailableTestCases(bool includeNamespace)
		{
			ret
		}
		.method public static hidebysig 
			void RunNamedTestCase(string typeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public class [TestRuntime]Microsoft.Test.Discovery.Adaptors.TestAttribute classTestAttribute
	}
	.class public TestLastUpdatedOnAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor(string updateDate)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_UpdateDate()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestLastUpdatedOnAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string UpdateDate()
		{
			.get instance string Test.Uis.Management.TestLastUpdatedOnAttribute::get_UpdateDate()
		}
	}
	.class public TestOwnerAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor(string ownerAlias)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_OwnerAlias()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestOwnerAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string OwnerAlias()
		{
			.get instance string Test.Uis.Management.TestOwnerAttribute::get_OwnerAlias()
		}
	}
	.class public abstract sealed TestRunner
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void DoDeployWindowLoaded()
		{
			ret
		}
		.method public static hidebysig 
			void DoDeployWindowLoaded(string[] args)
		{
			ret
		}
		.method public static hidebysig 
			void DoMain(string[] args)
		{
			ret
		}
		.method public static hidebysig 
			void HandleOutermostException(class [mscorlib]System.Exception exception, string catcher)
		{
			ret
		}
		.method public static hidebysig 
			void SetupApplicationExceptionHandler()
		{
			ret
		}
		.method public static hidebysig 
			void InternalMain()
		{
			ret
		}
		.method public static hidebysig 
			void ShutdownApplication()
		{
			ret
		}
		.field static public bool _partialTrust
		.field static public class [mscorlib]System.Threading.Thread _testThread
	}
	.class public TestSampleAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor(string sampleAPI)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_SampleAPI()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestSampleAttribute[] FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string SampleAPI()
		{
			.get instance string Test.Uis.Management.TestSampleAttribute::get_SampleAPI()
		}
	}
	.class public TestSpecAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor(string specCode)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_SpecCode()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestSpecAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string SpecCode()
		{
			.get instance string Test.Uis.Management.TestSpecAttribute::get_SpecCode()
		}
	}
	.class public TestTacticsAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor(string ids)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_IDs()
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestTacticsAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string[] IDs()
		{
			.get instance string[] Test.Uis.Management.TestTacticsAttribute::get_IDs()
		}
	}
	.class public TestTitleAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor(string title)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Title()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestTitleAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string Title()
		{
			.get instance string Test.Uis.Management.TestTitleAttribute::get_Title()
		}
	}
	.class public TestWorkItemAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor(string workItemIdentifier)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_WorkItemIdentifier()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.TestWorkItemAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.property instance string WorkItemIdentifier()
		{
			.get instance string Test.Uis.Management.TestWorkItemAttribute::get_WorkItemIdentifier()
		}
	}
	.class public VersionInformationAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(1) property bool AllowMultiple = bool(true) }
		.method public hidebysig specialname 
			instance void .ctor(string description)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.VersionInformationAttribute[] FromAssembly(class [mscorlib]System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public static hidebysig 
			string CreateHtmlReport()
		{
			ret
		}
		.method public static hidebysig 
			string CreateHtmlReport(class [mscorlib]System.AppDomain domain)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Author()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Change()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Date()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Revision()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Source()
		{
			ret
		}
		.property instance string Author()
		{
			.get instance string Test.Uis.Management.VersionInformationAttribute::get_Author()
		}
		.property instance string Change()
		{
			.get instance string Test.Uis.Management.VersionInformationAttribute::get_Change()
		}
		.property instance string Date()
		{
			.get instance string Test.Uis.Management.VersionInformationAttribute::get_Date()
		}
		.property instance string Revision()
		{
			.get instance string Test.Uis.Management.VersionInformationAttribute::get_Revision()
		}
		.property instance string Source()
		{
			.get instance string Test.Uis.Management.VersionInformationAttribute::get_Source()
		}
	}
	.class public WindowlessTestAttribute
		extends [mscorlib]System.Attribute
	{
		.custom instance void [mscorlib]System.AttributeUsageAttribute::.ctor(valuetype [mscorlib]System.AttributeTargets) = { int32(4) property bool Inherited = bool(false) property bool AllowMultiple = bool(false) }
		.method public hidebysig specialname 
			instance void .ctor(bool isWindowless)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Management.WindowlessTestAttribute FromType(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsWindowless()
		{
			ret
		}
		.property instance bool IsWindowless()
		{
			.get instance bool Test.Uis.Management.WindowlessTestAttribute::get_IsWindowless()
		}
	}
}
.namespace Test.Uis.Stress
{
	.class public UisStress
		extends [mscorlib]System.Object
	{
		.class nested public sealed OnStressProc
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void Invoke(uint32 iStressProcCalledFromStart)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(uint32 iStressProcCalledFromStart, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public hidebysig 
			instance void OnTimerEvent(object source, class [mscorlib]System.EventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void StartStress(class Test.Uis.Stress.UisStress/OnStressProc timerEventHandler, valuetype [mscorlib]System.TimeSpan stressInterval)
		{
			ret
		}
		.method public hidebysig 
			instance void DelayTimerEventInternal(object source, class [mscorlib]System.EventArgs e)
		{
			ret
		}
		.method public hidebysig 
			instance void DelayStartStress(class Test.Uis.Stress.UisStress/OnStressProc timerEventHandler, valuetype [mscorlib]System.TimeSpan stressInterval, valuetype [mscorlib]System.TimeSpan delayStart)
		{
			ret
		}
		.method public hidebysig 
			instance void SuspendStress()
		{
			ret
		}
		.method public hidebysig 
			instance void ResumeStress()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.TimeSpan get_StressInterval()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_StressInterval(valuetype [mscorlib]System.TimeSpan 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Stress.UisStressStatus get_StressStatus()
		{
			ret
		}
		.method public hidebysig 
			instance void StopStress()
		{
			ret
		}
		.property instance valuetype [mscorlib]System.TimeSpan StressInterval()
		{
			.get instance valuetype [mscorlib]System.TimeSpan Test.Uis.Stress.UisStress::get_StressInterval()
			.set instance void Test.Uis.Stress.UisStress::set_StressInterval(valuetype [mscorlib]System.TimeSpan)
		}
		.property instance valuetype Test.Uis.Stress.UisStressStatus StressStatus()
		{
			.get instance valuetype Test.Uis.Stress.UisStressStatus Test.Uis.Stress.UisStress::get_StressStatus()
		}
	}
	.class public sealed UisStressStatus
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname uint32 value__
		.field static public literal valuetype Test.Uis.Stress.UisStressStatus Running = uint32(0x00000002)
		.field static public literal valuetype Test.Uis.Stress.UisStressStatus Stopped = uint32(0x00000000)
		.field static public literal valuetype Test.Uis.Stress.UisStressStatus Suspended = uint32(0x00000001)
		.field static public literal valuetype Test.Uis.Stress.UisStressStatus WaitingStart = uint32(0x00000003)
	}
}
.namespace Test.Uis.TestTypes
{
	.class public abstract CombinedTestCase
		extends Test.Uis.TestTypes.CustomTestCase
	{
		.method public hidebysig 
			instance void StartUp(class [PresentationFramework]System.Windows.Window window, class Test.Uis.Utils.SimpleHandler 'handler')
		{
			ret
		}
		.method public hidebysig 
			instance void EndTest()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract CombinedTestCaseManager
		extends Test.Uis.TestTypes.CustomTestCase
	{
		.method public virtual hidebysig 
			instance void RunTestCase()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance class Test.Uis.TestTypes.CombinedTestCase[] GetTestCases()
		{
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public CustomActionDrivenTest
		extends Test.Uis.TestTypes.CustomTestCase
	{
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public final virtual hidebysig 
			instance void RunTestCase()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void ActionDrivenTestRunTestCase()
		{
			ret
		}
	}
	.class public abstract CustomCombinatorialTestCase
		extends Test.Uis.TestTypes.CustomTestCase
	{
		.method public virtual hidebysig 
			instance void RunTestCase()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Utils.Dimension[] get_Dimensions()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_HideCombinationLog()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_HideCombinationLog(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [mscorlib]System.DateTime get_StartTime()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.FrameworkElement get_TestElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TestElement(class [PresentationFramework]System.Windows.FrameworkElement 'value')
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance class Test.Uis.Utils.Dimension[] DoGetDimensions()
		{
		}
		.method family virtual hidebysig newslot 
			instance bool DoReadCombination(class [mscorlib]System.Collections.Hashtable values)
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance void DoRunCombination()
		{
		}
		.method family virtual hidebysig newslot 
			instance void DoTestCaseFinished()
		{
			ret
		}
		.method family hidebysig 
			instance void NextCombination()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void SetupTestCaseExceptionHandler()
		{
			ret
		}
		.method family hidebysig specialname 
			instance int32 get_CombinationNumber()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance int32 CombinationNumber()
		{
			.get instance int32 Test.Uis.TestTypes.CustomCombinatorialTestCase::get_CombinationNumber()
		}
		.property instance class Test.Uis.Utils.Dimension[] Dimensions()
		{
			.get instance class Test.Uis.Utils.Dimension[] Test.Uis.TestTypes.CustomCombinatorialTestCase::get_Dimensions()
		}
		.property instance bool HideCombinationLog()
		{
			.get instance bool Test.Uis.TestTypes.CustomCombinatorialTestCase::get_HideCombinationLog()
			.set instance void Test.Uis.TestTypes.CustomCombinatorialTestCase::set_HideCombinationLog(bool)
		}
		.property instance valuetype [mscorlib]System.DateTime StartTime()
		{
			.get instance valuetype [mscorlib]System.DateTime Test.Uis.TestTypes.CustomCombinatorialTestCase::get_StartTime()
		}
		.property instance class [PresentationFramework]System.Windows.FrameworkElement TestElement()
		{
			.get instance class [PresentationFramework]System.Windows.FrameworkElement Test.Uis.TestTypes.CustomCombinatorialTestCase::get_TestElement()
			.set instance void Test.Uis.TestTypes.CustomCombinatorialTestCase::set_TestElement(class [PresentationFramework]System.Windows.FrameworkElement)
		}
	}
	.class public abstract CustomTestCase
		extends Microsoft.Test.KoKoMo.Model
		implements [mscorlib]System.IDisposable
	{
		.method public static hidebysig 
			class [System]System.Diagnostics.ProcessStartInfo ProcessArgs(string commandline)
		{
			ret
		}
		.method public hidebysig 
			instance void StiEntryPoint(string commandline)
		{
			ret
		}
		.method public static hidebysig 
			void ExecutePartialTrust(string commandline)
		{
			ret
		}
		.method public hidebysig 
			instance void RunStandalone()
		{
			ret
		}
		.method public virtual hidebysig newslot abstract 
			instance void RunTestCase()
		{
		}
		.method public final virtual hidebysig newslot 
			instance void Dispose()
		{
			ret
		}
		.method family virtual hidebysig 
			instance void Finalize()
		{
			ret
		}
		.method public hidebysig 
			instance string GetProcessedXaml(string fileName)
		{
			ret
		}
		.method public hidebysig 
			instance void Log(string text)
		{
			ret
		}
		.method public hidebysig 
			instance void QueueDelegate(class Test.Uis.Utils.SimpleHandler 'handler')
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsNavigationStyle()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Window get_MainWindow()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_MainWindow(class [PresentationFramework]System.Windows.Window 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_StartupPage()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_StartupPage(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Navigation.NavigationWindow get_TestNavigationWindow()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Window get_TestWindow()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsAutomation()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Utils.ConfigurationSettings get_Settings()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void Dispose(bool disposing)
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void DoLoadCompleted()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void DoMainWindowCreated()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void DoMainWindowShown()
		{
			ret
		}
		.method family virtual hidebysig newslot 
			instance void SetupTestCaseExceptionHandler()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance bool IsAutomation()
		{
			.get instance bool Test.Uis.TestTypes.CustomTestCase::get_IsAutomation()
		}
		.property instance bool IsNavigationStyle()
		{
			.get instance bool Test.Uis.TestTypes.CustomTestCase::get_IsNavigationStyle()
		}
		.property instance class [PresentationFramework]System.Windows.Window MainWindow()
		{
			.get instance class [PresentationFramework]System.Windows.Window Test.Uis.TestTypes.CustomTestCase::get_MainWindow()
			.set instance void Test.Uis.TestTypes.CustomTestCase::set_MainWindow(class [PresentationFramework]System.Windows.Window)
		}
		.property instance class Test.Uis.Utils.ConfigurationSettings Settings()
		{
			.get instance class Test.Uis.Utils.ConfigurationSettings Test.Uis.TestTypes.CustomTestCase::get_Settings()
		}
		.property instance string StartupPage()
		{
			.get instance string Test.Uis.TestTypes.CustomTestCase::get_StartupPage()
			.set instance void Test.Uis.TestTypes.CustomTestCase::set_StartupPage(string)
		}
		.property instance class [PresentationFramework]System.Windows.Navigation.NavigationWindow TestNavigationWindow()
		{
			.get instance class [PresentationFramework]System.Windows.Navigation.NavigationWindow Test.Uis.TestTypes.CustomTestCase::get_TestNavigationWindow()
		}
		.property instance class [PresentationFramework]System.Windows.Window TestWindow()
		{
			.get instance class [PresentationFramework]System.Windows.Window Test.Uis.TestTypes.CustomTestCase::get_TestWindow()
		}
	}
	.class public abstract ManagedCombinatorialTestCase
		extends Test.Uis.TestTypes.CustomCombinatorialTestCase
	{
		.method family virtual hidebysig 
			instance class Test.Uis.Utils.Dimension[] DoGetDimensions()
		{
			ret
		}
		.method family virtual hidebysig 
			instance bool DoReadCombination(class [mscorlib]System.Collections.Hashtable values)
		{
			ret
		}
		.method family hidebysig specialname 
			instance class Test.Uis.TestTypes.TestCaseData get_TestCaseData()
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.property instance class Test.Uis.TestTypes.TestCaseData TestCaseData()
		{
			.get instance class Test.Uis.TestTypes.TestCaseData Test.Uis.TestTypes.ManagedCombinatorialTestCase::get_TestCaseData()
		}
	}
	.class public TestCaseData
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Type testCaseType, string 'filter', class Test.Uis.Utils.Dimension[] dimensions)
		{
			.param [3]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Utils.Dimension[] get_Dimensions()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Filter()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Type get_TestCaseType()
		{
			ret
		}
		.property instance class Test.Uis.Utils.Dimension[] Dimensions()
		{
			.get instance class Test.Uis.Utils.Dimension[] Test.Uis.TestTypes.TestCaseData::get_Dimensions()
		}
		.property instance string Filter()
		{
			.get instance string Test.Uis.TestTypes.TestCaseData::get_Filter()
		}
		.property instance class [mscorlib]System.Type TestCaseType()
		{
			.get instance class [mscorlib]System.Type Test.Uis.TestTypes.TestCaseData::get_TestCaseType()
		}
	}
}
.namespace Test.Uis.TextEditing
{
	.class public abstract sealed TextContentFinder
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextPointer FindString(class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, string pattern)
		{
			ret
		}
	}
	.class public abstract sealed TextRangeDumper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string Dump(class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, bool convertTagsToSymbol, bool normalizeTags)
		{
			ret
		}
		.field static public initonly char TagSymbol
	}
	.class public sealed TextRangeType
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.TextEditing.TextRangeType CollapsedAtEnd = int32(0x00000002)
		.field static public literal valuetype Test.Uis.TextEditing.TextRangeType CollapsedAtStart = int32(0x00000001)
		.field static public literal valuetype Test.Uis.TextEditing.TextRangeType WholeTextContainer = int32(0x00000000)
	}
	.class public TextTreeTestHelper
		extends [mscorlib]System.Object
	{
		.class nested public sealed FinishTreeWalkDelegate
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void Invoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, object[] args)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, object[] args, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.class nested public sealed ProcessElementEndContextDelegate
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool Invoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, class [PresentationFramework]System.Windows.Documents.TextElement element, object[] args)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, class [PresentationFramework]System.Windows.Documents.TextElement element, object[] args, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.class nested public sealed ProcessElementStartContextDelegate
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool Invoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, class [PresentationFramework]System.Windows.Documents.TextElement element, object[] args)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, class [PresentationFramework]System.Windows.Documents.TextElement element, object[] args, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.class nested public sealed ProcessEmbeddedElementContextDelegate
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool Invoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, class [WindowsBase]System.Windows.DependencyObject dObj, object[] args)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, class [WindowsBase]System.Windows.DependencyObject dObj, object[] args, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.class nested public sealed ProcessTextContextDelegate
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool Invoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, string content, object[] args)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, string content, object[] args, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance bool EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.class nested public sealed StartTreeWalkDelegate
			extends [mscorlib]System.MulticastDelegate
		{
			.method public hidebysig specialname 
				instance void .ctor(object 'object', native int 'method')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void Invoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, object[] args)
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance class [mscorlib]System.IAsyncResult BeginInvoke(class [PresentationFramework]System.Windows.Documents.TextPointer frozenTextPointer, object[] args, class [mscorlib]System.AsyncCallback callback, object 'object')
				runtime 
			{
			}
			.method public virtual hidebysig newslot 
				instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
				runtime 
			{
			}
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextRange GetTextRange(class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, string textRangeTypeStr)
		{
			ret
		}
		.method public static hidebysig 
			int32 SplitTextNode(class [PresentationFramework]System.Windows.Documents.TextRange textRange, int32 splitByHowMany)
		{
			ret
		}
		.method public static hidebysig 
			bool CompareTextRangeContents(class [PresentationFramework]System.Windows.Documents.TextPointer start1, class [PresentationFramework]System.Windows.Documents.TextPointer end1, class [PresentationFramework]System.Windows.Documents.TextPointer start2, class [PresentationFramework]System.Windows.Documents.TextPointer end2, [out] string& unmatchReason)
		{
			ret
		}
		.method public static hidebysig 
			void WalkTextRange(class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, object[] args, class [mscorlib]System.Delegate startTreeWalkDelegate, class [mscorlib]System.Delegate textContextProcessor, class [mscorlib]System.Delegate elementStartContextProcessor, class [mscorlib]System.Delegate elementEndContextProcessor, class [mscorlib]System.Delegate embeddedElementContextProcessor, class [mscorlib]System.Delegate finishTreeWalkProcessor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
}
.namespace Test.Uis.Utils
{
	.class public ActionItem
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(string name, valuetype Test.Uis.Utils.InvokeType invokeType, string className, string memberName, bool useWorkerThread, object[] args)
		{
			ret
		}
		.method public hidebysig 
			instance void InvokeAction()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_ID()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_Result()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_UseWorkerThread()
		{
			ret
		}
		.property instance int32 ID()
		{
			.get instance int32 Test.Uis.Utils.ActionItem::get_ID()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Utils.ActionItem::get_Name()
		}
		.property instance object Result()
		{
			.get instance object Test.Uis.Utils.ActionItem::get_Result()
		}
		.property instance bool UseWorkerThread()
		{
			.get instance bool Test.Uis.Utils.ActionItem::get_UseWorkerThread()
		}
	}
	.class public ActionManager
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			bool IsInvokeTypeStatic(valuetype Test.Uis.Utils.InvokeType invokeType)
		{
			ret
		}
		.method public hidebysig 
			instance void AddActionItemToList(class Test.Uis.Utils.ActionItem actionItem)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Collections.IEnumerator GetEnumerator()
		{
			ret
		}
		.method public hidebysig 
			instance object GetInvokedMethodReturnedValue(string name)
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.ActionManager get_Current()
		{
			ret
		}
		.method public hidebysig 
			instance void DumpReturnValueList()
		{
			ret
		}
		.property class Test.Uis.Utils.ActionManager Current()
		{
			.get class Test.Uis.Utils.ActionManager Test.Uis.Utils.ActionManager::get_Current()
		}
	}
	.class public ArrayTextContainer
		extends class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Utils.ArrayTextSymbol>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Utils.ArrayTextContainer container)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string text)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteContent(int32 startIndex, int32 endIndex)
		{
			ret
		}
		.method public hidebysig 
			instance void DeleteCombinedCharacters(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance string DescribeSymbols()
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetDepth(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetInsertionPosition(int32 index, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, bool includeSelectionOnly)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetInsertionPosition(int32 index, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction, bool includeSelectionOnly, [out] bool& blockBoundaryCrossed)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextElement GetParentElement(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetParentIndex(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance void GetRun(int32 index, [out] string& run, [out] int32& runStartIndex)
		{
			ret
		}
		.method public hidebysig 
			instance object GetValue(int32 index, class [WindowsBase]System.Windows.DependencyProperty 'property')
		{
			ret
		}
		.method public hidebysig 
			instance void InsertElement(int32 startIndex, int32 endIndex, class [PresentationFramework]System.Windows.Documents.TextElement element)
		{
			ret
		}
		.method public hidebysig 
			instance void InsertText(int32 index, string text)
		{
			ret
		}
		.method public hidebysig 
			instance bool IsInBounds(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance bool IsInParagraph(int32 index)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSymbolParagraphEnd(class Test.Uis.Utils.ArrayTextSymbol symbol)
		{
			ret
		}
		.method public static hidebysig 
			bool IsSymbolParagraphStart(class Test.Uis.Utils.ArrayTextSymbol symbol)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Utils.ArrayTextSymbol> ListParents(int32 symbolIndex)
		{
			ret
		}
		.method public hidebysig 
			instance bool Matches(class Test.Uis.Utils.ArrayTextContainer container)
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPlainText()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Text()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Text(string 'value')
		{
			ret
		}
		.property instance bool IsPlainText()
		{
			.get instance bool Test.Uis.Utils.ArrayTextContainer::get_IsPlainText()
		}
		.property instance string Text()
		{
			.get instance string Test.Uis.Utils.ArrayTextContainer::get_Text()
			.set instance void Test.Uis.Utils.ArrayTextContainer::set_Text(string)
		}
	}
	.class public ArrayTextSymbol
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Utils.ArrayTextSymbol symbol)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(char c)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.Documents.TextElement element, bool isStart)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.DependencyObject embeddedElement)
		{
			ret
		}
		.method public hidebysig 
			instance bool Matches(class Test.Uis.Utils.ArrayTextSymbol symbol)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig specialname 
			instance char get_Character()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [PresentationFramework]System.Windows.Documents.TextPointerContext get_Context()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextElement get_Element()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.DependencyObject get_EmbeddedElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsElementEdge()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Utils.DependencyPropertyBag get_LocalValues()
		{
			ret
		}
		.property instance char Character()
		{
			.get instance char Test.Uis.Utils.ArrayTextSymbol::get_Character()
		}
		.property instance valuetype [PresentationFramework]System.Windows.Documents.TextPointerContext Context()
		{
			.get instance valuetype [PresentationFramework]System.Windows.Documents.TextPointerContext Test.Uis.Utils.ArrayTextSymbol::get_Context()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextElement Element()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextElement Test.Uis.Utils.ArrayTextSymbol::get_Element()
		}
		.property instance class [WindowsBase]System.Windows.DependencyObject EmbeddedElement()
		{
			.get instance class [WindowsBase]System.Windows.DependencyObject Test.Uis.Utils.ArrayTextSymbol::get_EmbeddedElement()
		}
		.property instance bool IsElementEdge()
		{
			.get instance bool Test.Uis.Utils.ArrayTextSymbol::get_IsElementEdge()
		}
		.property instance class Test.Uis.Utils.DependencyPropertyBag LocalValues()
		{
			.get instance class Test.Uis.Utils.DependencyPropertyBag Test.Uis.Utils.ArrayTextSymbol::get_LocalValues()
		}
	}
	.class public AutomationUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [UIAutomationClient]System.Windows.Automation.AutomationElement GetAutomationElement(string controlID)
		{
			ret
		}
		.method public static hidebysig 
			class [UIAutomationClient]System.Windows.Automation.AutomationElement GetAutomationElement(class [PresentationCore]System.Windows.UIElement control)
		{
			ret
		}
		.method public static hidebysig 
			bool IsTextPatternAvailable(class [UIAutomationClient]System.Windows.Automation.AutomationElement e)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract sealed BuildUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			bool RunMSBuildForPageContent(string pageContent, string baseFileName)
		{
			ret
		}
	}
	.class public CaretVerifier
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationFramework]System.Windows.FrameworkElement element)
		{
			ret
		}
		.method public hidebysig 
			instance void CaptureCaret(class Test.Uis.Utils.SimpleHandler callBackHandler)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [System.Drawing]System.Drawing.Bitmap get_CaretCaptureResult()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Rect get_CaretCaptureRect()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetCaretRectangleFromTransform()
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyCaretBiDi(class Test.Uis.Utils.SimpleHandler callBackHandler, bool doSmartVerification)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyCaretBlinking(class Test.Uis.Utils.SimpleHandler callBackHandler, bool doSmartVerification)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyCaretItalic(class Test.Uis.Utils.SimpleHandler callBackHandler, bool doSmartVerification)
		{
			ret
		}
		.method public hidebysig 
			instance void VerifyCaretRendered(class Test.Uis.Utils.SimpleHandler callBackHandler, bool doSmartVerification)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CaretBitmapHeight()
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_SystemCaretBlinkTimeMS()
		{
			ret
		}
		.method public static hidebysig specialname 
			float64 get_SystemCaretWidthInDouble()
		{
			ret
		}
		.method public static hidebysig specialname 
			int32 get_SystemCaretWidthInPixels()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.FrameworkElement get_Element()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class Test.Uis.Wrappers.UIElementWrapper get_ElementWrapper()
		{
			ret
		}
		.method public hidebysig 
			instance class [System.Drawing]System.Drawing.Bitmap ConvertNonBlackPixelsToWhite(class [System.Drawing]System.Drawing.Bitmap sourceBitmap)
		{
			ret
		}
		.property instance int32 CaretBitmapHeight()
		{
			.get instance int32 Test.Uis.Utils.CaretVerifier::get_CaretBitmapHeight()
		}
		.property instance valuetype [WindowsBase]System.Windows.Rect CaretCaptureRect()
		{
			.get instance valuetype [WindowsBase]System.Windows.Rect Test.Uis.Utils.CaretVerifier::get_CaretCaptureRect()
		}
		.property instance class [System.Drawing]System.Drawing.Bitmap CaretCaptureResult()
		{
			.get instance class [System.Drawing]System.Drawing.Bitmap Test.Uis.Utils.CaretVerifier::get_CaretCaptureResult()
		}
		.property instance class [PresentationFramework]System.Windows.FrameworkElement Element()
		{
			.get instance class [PresentationFramework]System.Windows.FrameworkElement Test.Uis.Utils.CaretVerifier::get_Element()
		}
		.property instance class Test.Uis.Wrappers.UIElementWrapper ElementWrapper()
		{
			.get instance class Test.Uis.Wrappers.UIElementWrapper Test.Uis.Utils.CaretVerifier::get_ElementWrapper()
		}
		.property int32 SystemCaretBlinkTimeMS()
		{
			.get int32 Test.Uis.Utils.CaretVerifier::get_SystemCaretBlinkTimeMS()
		}
		.property float64 SystemCaretWidthInDouble()
		{
			.get float64 Test.Uis.Utils.CaretVerifier::get_SystemCaretWidthInDouble()
		}
		.property int32 SystemCaretWidthInPixels()
		{
			.get int32 Test.Uis.Utils.CaretVerifier::get_SystemCaretWidthInPixels()
		}
	}
	.class public CombinatorialEngine
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class Test.Uis.Utils.CombinatorialEngine FromDimensions(class Test.Uis.Utils.Dimension[] dimensions)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Utils.CombinatorialEngine FromFile(string fileName, string testName)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Utils.CombinatorialEngine FromString(string specification)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Utils.CombinatorialEngine FromXmlReader(class [System.Xml]System.Xml.XmlReader reader, string testName)
		{
			ret
		}
		.method public hidebysig 
			instance string DescribeState()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsEmpty()
		{
			ret
		}
		.method public hidebysig 
			instance bool Next(class [mscorlib]System.Collections.Hashtable cs)
		{
			ret
		}
		.field public class Test.Uis.Utils.FilteringEventHandler Filtering
		.property instance bool IsEmpty()
		{
			.get instance bool Test.Uis.Utils.CombinatorialEngine::get_IsEmpty()
		}
	}
	.class public ConfigurationSettings
		extends [mscorlib]System.Object
	{
		.class nested public MissingValueException
			extends [mscorlib]System.Exception
		{
			.method public hidebysig specialname 
				instance void .ctor(string valueName)
			{
				ret
			}
		}
		.method public hidebysig specialname 
			instance void .ctor(string[] arguments)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class Test.Uis.Utils.ConfigurationSettings settings)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [mscorlib]System.Collections.Hashtable settings)
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]System.Collections.Hashtable CloneValues()
		{
			ret
		}
		.method public hidebysig 
			instance void BuildXmlArguments()
		{
			ret
		}
		.method public hidebysig 
			instance void BuildXmlArguments(string testName)
		{
			ret
		}
		.method public hidebysig 
			instance void BuildXmlArgumentsFromFile(string fileName, string testName)
		{
			ret
		}
		.method public hidebysig 
			instance string GetArgument(string argumentName)
		{
			ret
		}
		.method public hidebysig 
			instance string GetArgument(string argumentName, bool failIfMissing)
		{
			ret
		}
		.method public hidebysig 
			instance bool GetArgumentAsBool(string argumentName)
		{
			ret
		}
		.method public hidebysig 
			instance bool GetArgumentAsBool(string argumentName, bool failIfMissing)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetArgumentAsInt(string argumentName)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetArgumentAsInt(string argumentName, bool failIfMissing)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetEnvironmentCommandLineArgs()
		{
			ret
		}
		.method public hidebysig 
			instance class [System.Xml]System.Xml.XmlReader GetXmlBlockReader()
		{
			ret
		}
		.method public hidebysig 
			instance bool HasArgument(string argumentName)
		{
			ret
		}
		.method public hidebysig 
			instance bool HasArgument(string argumentName, [out] string& argumentValue)
		{
			ret
		}
		.method public hidebysig 
			instance void SetArgument(string argumentName, string 'value')
		{
			ret
		}
		.method public hidebysig 
			instance class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Utils.KeyboardLayout> GetPreInstalledKeyboardLayouts()
		{
			ret
		}
		.method public hidebysig 
			instance void SetObjectProperties(object obj, string prefixName)
		{
			ret
		}
		.method public hidebysig 
			instance void SetInstalledKeyboardLayouts(class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Utils.KeyboardLayout> layoutList)
		{
			ret
		}
		.method public hidebysig 
			instance bool ReinstateOriginalKeyboardState()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [TestRuntime]Microsoft.Test.Logging.TestLog get_TestLog()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_TestLog(class [TestRuntime]Microsoft.Test.Logging.TestLog 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_CommandLineArguments()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.ConfigurationSettings get_Current()
		{
			ret
		}
		.method public static hidebysig specialname 
			void set_Current(class Test.Uis.Utils.ConfigurationSettings 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void DumpingHashtableValues(class [mscorlib]System.Collections.Hashtable ht)
		{
			ret
		}
		.method public hidebysig 
			instance void DumpingHashtableValues()
		{
			ret
		}
		.property instance string[] CommandLineArguments()
		{
			.get instance string[] Test.Uis.Utils.ConfigurationSettings::get_CommandLineArguments()
		}
		.property class Test.Uis.Utils.ConfigurationSettings Current()
		{
			.get class Test.Uis.Utils.ConfigurationSettings Test.Uis.Utils.ConfigurationSettings::get_Current()
			.set void Test.Uis.Utils.ConfigurationSettings::set_Current(class Test.Uis.Utils.ConfigurationSettings)
		}
		.property instance class [TestRuntime]Microsoft.Test.Logging.TestLog TestLog()
		{
			.get instance class [TestRuntime]Microsoft.Test.Logging.TestLog Test.Uis.Utils.ConfigurationSettings::get_TestLog()
			.set instance void Test.Uis.Utils.ConfigurationSettings::set_TestLog(class [TestRuntime]Microsoft.Test.Logging.TestLog)
		}
	}
	.class public abstract sealed CultureInfos
		extends [mscorlib]System.Object
	{
		.method public static hidebysig specialname 
			class [mscorlib]System.Globalization.CultureInfo get_ArabicQatar()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Globalization.CultureInfo get_ChinesePrc()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Globalization.CultureInfo get_EnglishUnitedStates()
		{
			ret
		}
		.method public static hidebysig specialname 
			class [mscorlib]System.Globalization.CultureInfo get_GermanGermany()
		{
			ret
		}
		.property class [mscorlib]System.Globalization.CultureInfo ArabicQatar()
		{
			.get class [mscorlib]System.Globalization.CultureInfo Test.Uis.Utils.CultureInfos::get_ArabicQatar()
		}
		.property class [mscorlib]System.Globalization.CultureInfo ChinesePrc()
		{
			.get class [mscorlib]System.Globalization.CultureInfo Test.Uis.Utils.CultureInfos::get_ChinesePrc()
		}
		.property class [mscorlib]System.Globalization.CultureInfo EnglishUnitedStates()
		{
			.get class [mscorlib]System.Globalization.CultureInfo Test.Uis.Utils.CultureInfos::get_EnglishUnitedStates()
		}
		.property class [mscorlib]System.Globalization.CultureInfo GermanGermany()
		{
			.get class [mscorlib]System.Globalization.CultureInfo Test.Uis.Utils.CultureInfos::get_GermanGermany()
		}
	}
	.class public DependencyPropertyBag
		extends class [mscorlib]'System.Collections.Generic.Dictionary`2'<class [WindowsBase]System.Windows.DependencyProperty,object>
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig 
			instance void ApplyValues(class [WindowsBase]System.Windows.DependencyObject dependencyObject)
		{
			ret
		}
		.method public hidebysig 
			instance void ReadLocalValues(class [WindowsBase]System.Windows.DependencyObject dependencyObject)
		{
			ret
		}
	}
	.class public Dimension
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(string name, object[] values)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(string name, object[] values, string[] filters)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Name()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object[] get_Values()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string[] get_Filters()
		{
			ret
		}
		.property instance string[] Filters()
		{
			.get instance string[] Test.Uis.Utils.Dimension::get_Filters()
		}
		.property instance string Name()
		{
			.get instance string Test.Uis.Utils.Dimension::get_Name()
		}
		.property instance object[] Values()
		{
			.get instance object[] Test.Uis.Utils.Dimension::get_Values()
		}
	}
	.class public FilteringEventArgs
		extends [mscorlib]System.EventArgs
	{
		.method public hidebysig specialname 
			instance bool get_IsAcceptable()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsAcceptable(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [mscorlib]System.Collections.Hashtable get_Values()
		{
			ret
		}
		.property instance bool IsAcceptable()
		{
			.get instance bool Test.Uis.Utils.FilteringEventArgs::get_IsAcceptable()
			.set instance void Test.Uis.Utils.FilteringEventArgs::set_IsAcceptable(bool)
		}
		.property instance class [mscorlib]System.Collections.Hashtable Values()
		{
			.get instance class [mscorlib]System.Collections.Hashtable Test.Uis.Utils.FilteringEventArgs::get_Values()
		}
	}
	.class public sealed FilteringEventHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke(object sender, class Test.Uis.Utils.FilteringEventArgs e)
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(object sender, class Test.Uis.Utils.FilteringEventArgs e, class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public GlobalCachedObjects
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance void Init()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [WindowsBase]System.Windows.Threading.Dispatcher get_MainDispatcher()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.GlobalCachedObjects get_Current()
		{
			ret
		}
		.property class Test.Uis.Utils.GlobalCachedObjects Current()
		{
			.get class Test.Uis.Utils.GlobalCachedObjects Test.Uis.Utils.GlobalCachedObjects::get_Current()
		}
		.property instance class [WindowsBase]System.Windows.Threading.Dispatcher MainDispatcher()
		{
			.get instance class [WindowsBase]System.Windows.Threading.Dispatcher Test.Uis.Utils.GlobalCachedObjects::get_MainDispatcher()
		}
	}
	.class public abstract sealed IMEInput
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public static hidebysig 
			bool InstallOrUninstallLayoutOrTip(string layoutOrTip, bool uninstall)
		{
			ret
		}
		.method public static hidebysig 
			string[] GetLayoutOrTipForLocale(uint32 locale)
		{
			ret
		}
	}
	.class public abstract InputMonitor
		extends [mscorlib]System.Object
	{
		.method family hidebysig specialname 
			instance void .ctor(int32 count)
		{
			ret
		}
		.method public hidebysig 
			instance void Attach()
		{
			ret
		}
		.method public hidebysig 
			instance void Detach()
		{
			ret
		}
		.method public hidebysig 
			instance int32 ConsolidateInputCount(class Test.Uis.Utils.InputMonitor inputMonitor)
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_CurrentInputCount()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsAttached()
		{
			ret
		}
		.method family hidebysig 
			instance int32 DecrementInputCount(int32 count)
		{
			ret
		}
		.method family hidebysig 
			instance int32 DecrementInputCount()
		{
			ret
		}
		.method family virtual hidebysig newslot abstract 
			instance void PostProcessInput(object sender, class [PresentationCore]System.Windows.Input.ProcessInputEventArgs args)
		{
		}
		.method public virtual hidebysig newslot abstract 
			instance bool IsSameKind(class Test.Uis.Utils.InputMonitor inputMonitor)
		{
		}
		.property instance int32 CurrentInputCount()
		{
			.get instance int32 Test.Uis.Utils.InputMonitor::get_CurrentInputCount()
		}
		.property instance bool IsAttached()
		{
			.get instance bool Test.Uis.Utils.InputMonitor::get_IsAttached()
		}
	}
	.class public InputMonitorManager
		extends [mscorlib]System.Object
	{
		.method public hidebysig 
			instance void AddInputMonitor(class Test.Uis.Utils.InputMonitor inputMonitor)
		{
			ret
		}
		.method public static hidebysig 
			void Initialize(class [WindowsBase]System.Windows.Threading.Dispatcher dispatcher)
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.InputMonitorManager get_Current()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsEnabled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_IsEnabled(bool 'value')
		{
			ret
		}
		.property class Test.Uis.Utils.InputMonitorManager Current()
		{
			.get class Test.Uis.Utils.InputMonitorManager Test.Uis.Utils.InputMonitorManager::get_Current()
		}
		.property instance bool IsEnabled()
		{
			.get instance bool Test.Uis.Utils.InputMonitorManager::get_IsEnabled()
			.set instance void Test.Uis.Utils.InputMonitorManager::set_IsEnabled(bool)
		}
	}
	.class public sealed InvokeType
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Utils.InvokeType GetInstanceField = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Utils.InvokeType GetInstanceProperty = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Utils.InvokeType GetStaticField = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Utils.InvokeType GetStaticProperty = int32(0x00000006)
		.field static public literal valuetype Test.Uis.Utils.InvokeType InstanceMethod = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Utils.InvokeType SetInstanceField = int32(0x00000005)
		.field static public literal valuetype Test.Uis.Utils.InvokeType SetInstanceProperty = int32(0x00000009)
		.field static public literal valuetype Test.Uis.Utils.InvokeType SetStaticField = int32(0x00000003)
		.field static public literal valuetype Test.Uis.Utils.InvokeType SetStaticProperty = int32(0x00000007)
		.field static public literal valuetype Test.Uis.Utils.InvokeType StaticMethod = int32(0x00000000)
	}
	.class public abstract sealed KeyboardInput
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public static hidebysig 
			void AddInputLocale(string inputLocale)
		{
			ret
		}
		.method public static hidebysig 
			void ResetCapsLock()
		{
			ret
		}
		.method public static hidebysig 
			void EnableIME(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
		.method public static hidebysig 
			string GetActiveInputLocaleString()
		{
			ret
		}
		.method public static hidebysig 
			bool IsBidiInputLanguageInstalled()
		{
			ret
		}
		.method public static hidebysig 
			bool IsInputLanguageInstalled(string _ThreeLetterWindowsLanguageName)
		{
			ret
		}
		.method public static hidebysig 
			void PressVirtualKey(uint8 vkbyte)
		{
			ret
		}
		.method public static hidebysig 
			void ReleaseVirtualKey(uint8 vkbyte)
		{
			ret
		}
		.method public static hidebysig 
			void ResetKeyboardState()
		{
			ret
		}
		.method public static hidebysig 
			void PressOrReleaseOneKey(string keystrokeDescription, bool pressed)
		{
			ret
		}
		.method public static hidebysig 
			void SetActiveInputLocale(string inputLocale)
		{
			ret
		}
		.method public static hidebysig 
			void TypeString(string s)
		{
			ret
		}
		.method public static hidebysig 
			void NoDelaySendString(string text)
		{
			ret
		}
	}
	.class public KeyboardLayout
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(string name, string vistaStr, string xpStr)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_DisplayName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_DisplayName(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_VistaTip()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_VistaTip(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XpLayout()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XpLayout(string 'value')
		{
			ret
		}
		.method public virtual hidebysig 
			instance bool Equals(object obj)
		{
			ret
		}
		.method public virtual hidebysig 
			instance int32 GetHashCode()
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Equality(class Test.Uis.Utils.KeyboardLayout a, class Test.Uis.Utils.KeyboardLayout b)
		{
			ret
		}
		.method public static hidebysig specialname 
			bool op_Inequality(class Test.Uis.Utils.KeyboardLayout a, class Test.Uis.Utils.KeyboardLayout b)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.property instance string DisplayName()
		{
			.get instance string Test.Uis.Utils.KeyboardLayout::get_DisplayName()
			.set instance void Test.Uis.Utils.KeyboardLayout::set_DisplayName(string)
		}
		.property instance string VistaTip()
		{
			.get instance string Test.Uis.Utils.KeyboardLayout::get_VistaTip()
			.set instance void Test.Uis.Utils.KeyboardLayout::set_VistaTip(string)
		}
		.property instance string XpLayout()
		{
			.get instance string Test.Uis.Utils.KeyboardLayout::get_XpLayout()
			.set instance void Test.Uis.Utils.KeyboardLayout::set_XpLayout(string)
		}
	}
	.class public abstract sealed KeyboardLayoutHelper
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.class nested public interface abstract import IEnumGUID
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('0002E000-0000-0000-C000-000000000046') }
			.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
			.method public virtual hidebysig newslot abstract 
				instance int32 Next(int32 count, [out] valuetype [mscorlib]System.Guid[] marshal([ + 0]) guidArray, [out] int32& fetched)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 Skip(int32 count)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 Reset()
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 Clone([out] class Test.Uis.Utils.KeyboardLayoutHelper/IEnumGUID& marshal(interface) enumGuid)
				preservesig 
			{
			}
		}
		.method public static hidebysig 
			bool TryInstallLayout(class Test.Uis.Utils.KeyboardLayout layoutData)
		{
			ret
		}
		.method public static hidebysig 
			bool TryUninstallLayout(class Test.Uis.Utils.KeyboardLayout layoutData)
		{
			ret
		}
		.method public static hidebysig 
			bool ActivateKeyboardLayout(class Test.Uis.Utils.KeyboardLayout layoutData)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Utils.KeyboardLayout[] GetLayoutsForCulture(class [mscorlib]System.Globalization.CultureInfo cultureInfo)
		{
			ret
		}
		.method public static hidebysig 
			bool IsLayoutInstalled(class Test.Uis.Utils.KeyboardLayout layoutData)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.List`1'<class Test.Uis.Utils.KeyboardLayout> GetCurrentKeyboardLayouts()
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Utils.KeyboardLayout GetUsersDefaultLayout()
		{
			ret
		}
	}
	.class public abstract sealed KeyboardLayouts
		extends [mscorlib]System.Object
	{
		.method public static hidebysig specialname 
			class Test.Uis.Utils.KeyboardLayout get_English()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.KeyboardLayout get_German()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.KeyboardLayout get_ChinesePinyin()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.KeyboardLayout get_ChineseQuanPin()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.KeyboardLayout get_Japanese()
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.KeyboardLayout get_Korean()
		{
			ret
		}
		.property class Test.Uis.Utils.KeyboardLayout ChinesePinyin()
		{
			.get class Test.Uis.Utils.KeyboardLayout Test.Uis.Utils.KeyboardLayouts::get_ChinesePinyin()
		}
		.property class Test.Uis.Utils.KeyboardLayout ChineseQuanPin()
		{
			.get class Test.Uis.Utils.KeyboardLayout Test.Uis.Utils.KeyboardLayouts::get_ChineseQuanPin()
		}
		.property class Test.Uis.Utils.KeyboardLayout English()
		{
			.get class Test.Uis.Utils.KeyboardLayout Test.Uis.Utils.KeyboardLayouts::get_English()
		}
		.property class Test.Uis.Utils.KeyboardLayout German()
		{
			.get class Test.Uis.Utils.KeyboardLayout Test.Uis.Utils.KeyboardLayouts::get_German()
		}
		.property class Test.Uis.Utils.KeyboardLayout Japanese()
		{
			.get class Test.Uis.Utils.KeyboardLayout Test.Uis.Utils.KeyboardLayouts::get_Japanese()
		}
		.property class Test.Uis.Utils.KeyboardLayout Korean()
		{
			.get class Test.Uis.Utils.KeyboardLayout Test.Uis.Utils.KeyboardLayouts::get_Korean()
		}
	}
	.class public MathUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			float64 GetSmallestPossibleIntegerValueWithinTheRect(valuetype [WindowsBase]System.Windows.Rect rect)
		{
			ret
		}
		.method public static hidebysig 
			float64 GetLargestPossibleIntegerValueWithinTheRect(valuetype [WindowsBase]System.Windows.Rect rect)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract sealed MouseInput
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public static hidebysig 
			void MouseMove(int32 x, int32 y)
		{
			ret
		}
		.method public static hidebysig 
			void MouseMove(valuetype [WindowsBase]System.Windows.Point point)
		{
			ret
		}
		.method public static hidebysig 
			void MouseMove(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
		.method public static hidebysig 
			void MouseClick()
		{
			ret
		}
		.method public static hidebysig 
			void MouseClick(int32 x, int32 y)
		{
			ret
		}
		.method public static hidebysig 
			void MouseClick(valuetype [WindowsBase]System.Windows.Point p)
		{
			ret
		}
		.method public static hidebysig 
			void MouseClick(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDown()
		{
			ret
		}
		.method public static hidebysig 
			void MouseDown(int32 x, int32 y)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDown(valuetype [WindowsBase]System.Windows.Point p)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDrag(int32 x, int32 y, int32 xDest, int32 yDest)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDrag(valuetype [WindowsBase]System.Windows.Point pointStart, valuetype [WindowsBase]System.Windows.Point pointEnd)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDragInOtherThread(valuetype [WindowsBase]System.Windows.Point start, valuetype [WindowsBase]System.Windows.Point end, bool pressed, valuetype [mscorlib]System.TimeSpan delayBeforeRun, class Test.Uis.Utils.SimpleHandler callback, class [WindowsBase]System.Windows.Threading.Dispatcher dispatcher)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDragInOtherThread(int32 startX, int32 startY, int32 endX, int32 endY, bool pressed, valuetype [mscorlib]System.TimeSpan delayBeforeRun, class Test.Uis.Utils.SimpleHandler callback, class [WindowsBase]System.Windows.Threading.Dispatcher dispatcher)
		{
			ret
		}
		.method public static hidebysig 
			void MouseDragPressed(valuetype [WindowsBase]System.Windows.Point ps, valuetype [WindowsBase]System.Windows.Point pe)
		{
			ret
		}
		.method public static hidebysig 
			void MouseUp()
		{
			ret
		}
		.method public static hidebysig 
			void RightMouseClick(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
		.method public static hidebysig 
			void RightMouseDown()
		{
			ret
		}
		.method public static hidebysig 
			void RightMouseDown(int32 x, int32 y)
		{
			ret
		}
		.method public static hidebysig 
			void RightMouseDown(valuetype [WindowsBase]System.Windows.Point p)
		{
			ret
		}
		.method public static hidebysig 
			void RightMouseUp()
		{
			ret
		}
		.method public static hidebysig 
			void MouseWheel(int32 clicks)
		{
			ret
		}
	}
	.class public sealed OnDispatchHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke()
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public ParameterToMethod
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor(string arg, valuetype Test.Uis.Utils.ParameterToMethodType 'type', string convertToTypeName)
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_ConvertToTypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Parameter()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype Test.Uis.Utils.ParameterToMethodType get_ParamType()
		{
			ret
		}
		.property instance string ConvertToTypeName()
		{
			.get instance string Test.Uis.Utils.ParameterToMethod::get_ConvertToTypeName()
		}
		.property instance valuetype Test.Uis.Utils.ParameterToMethodType ParamType()
		{
			.get instance valuetype Test.Uis.Utils.ParameterToMethodType Test.Uis.Utils.ParameterToMethod::get_ParamType()
		}
		.property instance string Parameter()
		{
			.get instance string Test.Uis.Utils.ParameterToMethod::get_Parameter()
		}
	}
	.class public sealed ParameterToMethodType
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname uint32 value__
		.field static public literal valuetype Test.Uis.Utils.ParameterToMethodType Direct = uint32(0x00000000)
		.field static public literal valuetype Test.Uis.Utils.ParameterToMethodType RetrieveFromReturnValue = uint32(0x00000001)
	}
	.class public abstract sealed ProcessUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			bool CheckLoadedModule(int32 processId, string moduleName)
		{
			ret
		}
		.method public static hidebysig 
			bool CheckLoadedModule(string moduleName)
		{
			ret
		}
		.method public static hidebysig 
			int32 RunProcess(string fileName, string arguments, float64 timeoutMilliseconds, [out] string& standardOutput, [out] string& standardError)
		{
			ret
		}
	}
	.class public QueueHelper
		extends [mscorlib]System.Object
	{
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.Threading.Dispatcher context)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority itemPriority)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor(class [WindowsBase]System.Windows.Threading.Dispatcher dispatcher, valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority itemPriority)
		{
			ret
		}
		.method public static hidebysig specialname 
			class Test.Uis.Utils.QueueHelper get_Current()
		{
			ret
		}
		.method public hidebysig specialname 
			instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority get_ItemPriority()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_ItemPriority(valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority 'value')
		{
			ret
		}
		.method public hidebysig 
			instance void QueueDelegate(class Test.Uis.Utils.SimpleHandler 'instance')
		{
			ret
		}
		.method public hidebysig 
			instance void QueueDelegate(class [mscorlib]System.Delegate 'instance', object[] args)
		{
			.param [2]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.method public hidebysig 
			instance void QueueDelayedDelegate(valuetype [mscorlib]System.TimeSpan delay, class [mscorlib]System.Delegate 'instance', object[] args)
		{
			.param [3]
			.custom instance void [mscorlib]System.ParamArrayAttribute::.ctor() = { }
			ret
		}
		.field static public literal string LogTestDispatchingArgName = "LogTestDispatching"
		.field static public literal string LogTestQueuingArgName = "LogTestQueuing"
		.property class Test.Uis.Utils.QueueHelper Current()
		{
			.get class Test.Uis.Utils.QueueHelper Test.Uis.Utils.QueueHelper::get_Current()
		}
		.property instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority ItemPriority()
		{
			.get instance valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority Test.Uis.Utils.QueueHelper::get_ItemPriority()
			.set instance void Test.Uis.Utils.QueueHelper::set_ItemPriority(valuetype [WindowsBase]System.Windows.Threading.DispatcherPriority)
		}
	}
	.class public abstract sealed ReflectionUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			void AddInstanceEventHandler(object target, string eventName, class [mscorlib]System.Delegate 'handler')
		{
			ret
		}
		.method public static hidebysig 
			object CreateInstance(class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public static hidebysig 
			object CreateInstanceOfType(string typeName, object[] args)
		{
			ret
		}
		.method public static hidebysig 
			string[] DescribeProperties(object o)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type FindType(string typeName)
		{
			ret
		}
		.method public static hidebysig 
			string GetNameFromFullTypeName(string fullTypeName)
		{
			ret
		}
		.method public static hidebysig 
			object GetField(object target, string fieldName)
		{
			ret
		}
		.method public static hidebysig 
			object GetInterfaceProperty(object target, string interfaceName, string propertyName)
		{
			ret
		}
		.method public static hidebysig 
			object GetProperty(object target, string propertyName)
		{
			ret
		}
		.method public static hidebysig 
			object GetStaticField(class [mscorlib]System.Type 'type', string fieldName)
		{
			ret
		}
		.method public static hidebysig 
			object GetStaticProperty(class [mscorlib]System.Type 'type', string propertyName)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type GetPropertyType(class [mscorlib]System.Type 'type', string propertyName)
		{
			ret
		}
		.method public static hidebysig 
			object GetValueForComparison(object o, class [mscorlib]System.Type targetType)
		{
			ret
		}
		.method public static hidebysig 
			void RemoveInstanceEventHandler(object target, string eventName, class [mscorlib]System.Delegate 'handler')
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Type[] SafeGetTypes(class [mscorlib]System.Reflection.Assembly 'assembly')
		{
			ret
		}
		.method public static hidebysig 
			object InvokeInterfaceMethod(object 'instance', string interfaceName, string methodName, object[] methodArguments)
		{
			ret
		}
		.method public static hidebysig 
			object InvokeInstanceMethod(object 'instance', string methodName, object[] methodArguments)
		{
			ret
		}
		.method public static hidebysig 
			object InvokeStaticMethod(class [mscorlib]System.Type 'type', string methodName, object[] methodArguments)
		{
			ret
		}
		.method public static hidebysig 
			object InvokePropertyOrMethod(string className, string methodName, object[] parameters, valuetype Test.Uis.Utils.InvokeType invokeType)
		{
			ret
		}
		.method public static hidebysig 
			void SetProperty(object target, string propertyName, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			void AddRemoveInstanceEventHandler(object target, string eventName, class [mscorlib]System.Delegate 'handler', bool 'add')
		{
			ret
		}
	}
	.class public sealed SimpleHandler
		extends [mscorlib]System.MulticastDelegate
	{
		.method public hidebysig specialname 
			instance void .ctor(object 'object', native int 'method')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void Invoke()
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance class [mscorlib]System.IAsyncResult BeginInvoke(class [mscorlib]System.AsyncCallback callback, object 'object')
			runtime 
		{
		}
		.method public virtual hidebysig newslot 
			instance void EndInvoke(class [mscorlib]System.IAsyncResult result)
			runtime 
		{
		}
	}
	.class public abstract sealed TextOMUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			int32 EmbeddedObjectCountInRange(class [PresentationFramework]System.Windows.Documents.TextRange range)
		{
			ret
		}
		.method public static hidebysig 
			int32 EmbeddedObjectCountInRange(class [PresentationFramework]System.Windows.Documents.TextRange range, class [mscorlib]System.Type objType)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]System.Collections.ArrayList EmbeddedObjectsInRange(class [PresentationFramework]System.Windows.Documents.TextRange range)
		{
			ret
		}
		.method public static hidebysig 
			bool IsEmbeddedObjectInRange(class [PresentationFramework]System.Windows.Documents.TextRange range, class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
	}
	.class public abstract sealed TextUtils
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public static hidebysig 
			string CreateWord(int32 iLength)
		{
			ret
		}
		.method public static hidebysig 
			string CreateSentence(int32 iLength)
		{
			ret
		}
		.method public static hidebysig 
			string CreateParagraph(int32 iLength)
		{
			ret
		}
		.method public static hidebysig 
			bool ContainsPunctuation(string text)
		{
			ret
		}
		.method public static hidebysig 
			bool EndsWithPunctuation(string text)
		{
			ret
		}
		.method public static hidebysig 
			bool EndsWithWhitespace(string text)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetWhitespaceCount(string text)
		{
			ret
		}
		.method public static hidebysig 
			bool EndsWithText(string text)
		{
			ret
		}
		.method public static hidebysig 
			string NormalizeEndOfLines(string text)
		{
			ret
		}
		.method public static hidebysig 
			string RemoveCombinedCharacters(string text, int32 index)
		{
			ret
		}
		.method public static hidebysig 
			string RepeatString(string val, int32 repeatCount)
		{
			ret
		}
		.method public static hidebysig 
			bool StartsWithWhitespace(string text)
		{
			ret
		}
		.method public static hidebysig 
			bool StartsWithPunctuation(string text)
		{
			ret
		}
		.method public static hidebysig 
			bool StartsWithText(string text)
		{
			ret
		}
		.method public static hidebysig 
			int32 CountContainerPositions(class [PresentationFramework]System.Windows.Documents.TextPointer containerPointer)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationCore]System.Windows.UIElement FindElementInText(class [PresentationFramework]System.Windows.Documents.TextPointer start, string id)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextRange FindTextRangeWithText(class [PresentationFramework]System.Windows.Documents.TextPointer startPosition, string text)
		{
			ret
		}
		.method public static hidebysig 
			int32 GetDistanceFromStart(class [PresentationFramework]System.Windows.Documents.TextPointer position)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextPointer GetTextBoxStart(class [PresentationFramework]System.Windows.Controls.TextBox textBox)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextPointer GetTextBoxEnd(class [PresentationFramework]System.Windows.Controls.TextBox textBox)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextSelection GetTextBoxSelection(class [PresentationFramework]System.Windows.Controls.TextBox textbox)
		{
			ret
		}
		.method public static hidebysig 
			string ConvertToAnsi(string text)
		{
			ret
		}
		.method public static hidebysig 
			string ConvertToSingleLineAnsi(string text)
		{
			ret
		}
		.method public static hidebysig 
			int32 CountOccurencies(string MainString, string SubString)
		{
			ret
		}
		.method public static hidebysig 
			string GetReverseString(string sInput)
		{
			ret
		}
		.method public static hidebysig 
			string IndentLines(string lines, string indentation)
		{
			ret
		}
		.method public static hidebysig 
			string ProcessCStyleEscapedChars(string text)
		{
			ret
		}
		.field static public literal char ObjectReplacementCharacter = char(0xFFFC)
	}
	.class public abstract XPathNavigatorUtils
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [UIAutomationClient]System.Windows.Automation.AutomationElement[] ListAutomationElements(class [UIAutomationClient]System.Windows.Automation.AutomationElement root, string xpathQuery)
		{
			ret
		}
		.method public static hidebysig 
			class [UIAutomationClient]System.Windows.Automation.AutomationElement[] ListAutomationElements(class [UIAutomationClient]System.Windows.Automation.AutomationElement root, string xpathQuery, class [UIAutomationClient]System.Windows.Automation.TreeWalker walker)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextRange[] ListElements(class [PresentationFramework]System.Windows.Documents.TextRange textRange, string xpathQuery)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextElement[] ListTextElements(class [PresentationFramework]System.Windows.FrameworkContentElement root, string xpathQuery)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.TextElement[] ListTextElements(class [PresentationFramework]System.Windows.Documents.FlowDocument root, string xpathQuery)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationCore]System.Windows.Media.Visual[] ListVisuals(class [PresentationCore]System.Windows.Media.Visual root, string xpathQuery)
		{
			ret
		}
		.method family hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
	}
	.class public abstract sealed XamlUtils
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.method public static hidebysig 
			string GetXamlFileContents(string fileName)
		{
			ret
		}
		.method public static hidebysig 
			object ParseToObject(string xamlText)
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_CurrentDirectory()
		{
			ret
		}
		.method public static hidebysig specialname 
			string get_SystemDirectory()
		{
			ret
		}
		.method public static hidebysig 
			int32 ReplaceEscapedXaml(string& text)
		{
			ret
		}
		.method public static hidebysig 
			void TextRange_SetXml(class [PresentationFramework]System.Windows.Documents.TextRange range, string xaml)
		{
			ret
		}
		.method public static hidebysig 
			string TextRange_GetXml(class [PresentationFramework]System.Windows.Documents.TextRange range)
		{
			ret
		}
		.method public static hidebysig 
			string GetRtfFromTextRange(class [PresentationFramework]System.Windows.Documents.TextRange range)
		{
			ret
		}
		.method public static hidebysig 
			void RestoreXamlFiles()
		{
			ret
		}
		.method public static hidebysig 
			void SetXamlContent(class [PresentationFramework]System.Windows.Documents.TextRange range, string xamlContent)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyTextRangeXaml(class [PresentationFramework]System.Windows.Documents.TextRange range, string expectedRangeXaml)
		{
			ret
		}
		.property string CurrentDirectory()
		{
			.get string Test.Uis.Utils.XamlUtils::get_CurrentDirectory()
		}
		.property string SystemDirectory()
		{
			.get string Test.Uis.Utils.XamlUtils::get_SystemDirectory()
		}
	}
}
.namespace Test.Uis.Wrappers
{
	.class public abstract sealed ActionItemWrapper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string GetArgument(string key)
		{
			ret
		}
		.method public static hidebysig 
			bool GetArgumentAsBool(string key)
		{
			ret
		}
		.method public static hidebysig 
			class [System.Drawing]System.Drawing.Bitmap CaptureElementLine(class Test.Uis.Wrappers.UIElementWrapper wrapper, string lineIndex)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Wrappers.UIElementWrapper CreateEmptyDefaultTextBoxAsUIElement(string id)
		{
			ret
		}
		.method public static hidebysig 
			class Test.Uis.Wrappers.UIElementWrapper CreateTextWrapperForElement(string id)
		{
			ret
		}
		.method public static hidebysig 
			void DumpReturnValueList()
		{
			ret
		}
		.method public static hidebysig 
			void DumpVisualTree()
		{
			ret
		}
		.method public static hidebysig 
			void Log(string text)
		{
			ret
		}
		.method public static hidebysig 
			void LogImage(class [System.Drawing]System.Drawing.Image image, string name)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationCore]System.Windows.UIElement FindElement(string elementID)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Window GetDefaultMainWindow()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationCore]System.Windows.Media.Visual GetVisualFromPath(string xpath)
		{
			ret
		}
		.method public static hidebysig 
			valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRect(string elementID, string indexStr)
		{
			ret
		}
		.method public static hidebysig 
			valuetype [WindowsBase]System.Windows.Point GetScreenRelativeOrigin(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
		.method public static hidebysig 
			valuetype [WindowsBase]System.Windows.Point OffsetPoint(valuetype [WindowsBase]System.Windows.Point point, string offsetXStr, string offsetYStr)
		{
			ret
		}
		.method public static hidebysig 
			object GetDependencyProperty(object target, string propertyName)
		{
			ret
		}
		.method public static hidebysig 
			class [WindowsBase]System.Windows.DependencyProperty GetDependencyPropertyFromName(string propertyName)
		{
			ret
		}
		.method public static hidebysig 
			void SetDependencyProperty(object target, string propertyName, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			void SetProperty(object target, string propertyName, object 'value')
		{
			ret
		}
		.method public static hidebysig 
			void ClickEveryElementRecursive(class [PresentationCore]System.Windows.Media.Visual element)
		{
			ret
		}
		.method public static hidebysig 
			void ClickEveryMainWindowElement()
		{
			ret
		}
		.method public static hidebysig 
			void ClickOnElement(string elementID)
		{
			ret
		}
		.method public static hidebysig 
			void ClickOnElement(string elementID, string relativePositionInElement)
		{
			ret
		}
		.method public static hidebysig 
			void ClickToPositionCaretAfterLastChar(string elementID)
		{
			ret
		}
		.method public static hidebysig 
			void ClickToPositionCaretBeforeCharacter(string elementID, string offsetStr)
		{
			ret
		}
		.method public static hidebysig 
			void ClickOnElementWithCoordinates(string elementID, string strX, string strY)
		{
			ret
		}
		.method public static hidebysig 
			void MouseElementRelative(object element, string description)
		{
			ret
		}
		.method public static hidebysig 
			void TypeString(string keystrokeString)
		{
			ret
		}
		.method public static hidebysig 
			void SelectCharacterByMouse(object wrapper, string direction, string startIndexInStr, string cchInStr)
		{
			ret
		}
		.method public static hidebysig 
			void PressOrReleaseOneKey(string keystrokeDescription, string strPressed)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyBitmapComparison(class [System.Drawing]System.Drawing.Bitmap master, class [System.Drawing]System.Drawing.Bitmap sample, string comparisonPrefix)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyBitmapsDifferent(class [System.Drawing]System.Drawing.Bitmap master, class [System.Drawing]System.Drawing.Bitmap sample)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyBitmapsEqual(class [System.Drawing]System.Drawing.Bitmap master, class [System.Drawing]System.Drawing.Bitmap sample)
		{
			ret
		}
		.method public static hidebysig 
			bool VerifyElementText(object wrapper, string expectedText)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyEquals(object 'value', object expected, string description)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyGreaterThan(object 'value', object known, string description)
		{
			ret
		}
		.method public static hidebysig 
			void VerifySelectedText(object wrapper, string expectedSelectedText)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyBooleanValue(bool boolToBeChecked, string boolNameToBeChecked)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyTextOnCaretLeft(object wrapper, string expectedString)
		{
			ret
		}
		.method public static hidebysig 
			void VerifyTextOnCaretRight(object wrapper, string expectedString)
		{
			ret
		}
		.method public static hidebysig 
			void LoadMainXaml(string fileName)
		{
			ret
		}
		.method public static hidebysig 
			void SetMainXaml(string xaml)
		{
			ret
		}
	}
	.class public abstract sealed ClipboardWrapper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [PresentationCore]System.Windows.IDataObject GetDataObject()
		{
			ret
		}
	}
	.class public abstract sealed DataObjectWrapper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			string[] GetFormats(class [PresentationCore]System.Windows.IDataObject dataObject)
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationCore]System.Windows.DataObject CreateXamlDataObject()
		{
			ret
		}
	}
	.class public sealed ElementPosition
		extends [mscorlib]System.Enum
	{
		.field public rtspecialname specialname int32 value__
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition Center = int32(0x00000004)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition LowerLeft = int32(0x00000002)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition LowerMiddle = int32(0x00000005)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition LowerRight = int32(0x00000008)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition MiddleLeft = int32(0x00000001)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition MiddleRight = int32(0x00000007)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition UpperLeft = int32(0x00000000)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition UpperMiddle = int32(0x00000003)
		.field static public literal valuetype Test.Uis.Wrappers.ElementPosition UpperRight = int32(0x00000006)
	}
	.class public abstract sealed SecurityHelper
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			bool GetIsStackFullyTrusted()
		{
			ret
		}
	}
	.class public UIElementWrapper
		extends [mscorlib]System.Object
	{
		.permissionset assert = (2E 01 7F 53 79 73 74 65 6D 2E 53 65 63 75 72 69 74 79 2E 50 65 72 6D 69 73 73 69 6F 6E 73 2E 50 65 72 6D 69 73 73 69 6F 6E 53 65 74 41 74 74 72 69 62 75 74 65 2C 20 6D 73 63 6F 72 6C 69 62 2C 20 56 65 72 73 69 6F 6E 3D 32 2E 30 2E 30 2E 30 2C 20 43 75 6C 74 75 72 65 3D 6E 65 75 74 72 61 6C 2C 20 50 75 62 6C 69 63 4B 65 79 54 6F 6B 65 6E 3D 62 37 37 61 35 63 35 36 31 39 33 34 65 30 38 39 12 01 54 0E 04 4E 61 6D 65 09 46 75 6C 6C 54 72 75 73 74)
		.class nested public sealed SelectionDirection
			extends [mscorlib]System.Enum
		{
			.field public rtspecialname specialname int32 value__
			.field static public literal valuetype Test.Uis.Wrappers.UIElementWrapper/SelectionDirection LeftToRight = int32(0x00000000)
			.field static public literal valuetype Test.Uis.Wrappers.UIElementWrapper/SelectionDirection RightToLeft = int32(0x00000001)
		}
		.method public hidebysig specialname 
			instance void .ctor(class [PresentationCore]System.Windows.UIElement element)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LineNumberOfTextPointer(class [PresentationFramework]System.Windows.Documents.TextPointer textPointer)
		{
			ret
		}
		.method public hidebysig 
			instance int32 LinesInAPageFromTextPointer(class [PresentationFramework]System.Windows.Documents.TextPointer startPointer, bool MoveDirection)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.Block GetBlockParentForTextPointer(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetControlRelativeLineBounds(int32 lineIndex)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextRange GetLineRange(int32 lineIndex)
		{
			ret
		}
		.method public hidebysig 
			instance string GetTextOutsideSelection(valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection ld)
		{
			ret
		}
		.method public hidebysig 
			instance string GetTextOutsideSelection(valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection ld, bool preserveTagsInPlainTextFormat)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRectOfLastCharacter()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRect(int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRect(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRect(class [PresentationFramework]System.Windows.Documents.TextPointer pointer, int32 index)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRect(class [PresentationFramework]System.Windows.Documents.TextPointer position, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetGlobalCharacterRect(int32 index, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Rect GetElementRelativeCharacterRect(class [PresentationFramework]System.Windows.Documents.TextPointer pointer, int32 index, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			ret
		}
		.method public hidebysig 
			instance void Clear()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtEndOfLine()
		{
			ret
		}
		.method public hidebysig 
			instance bool IsCaretRendered([out] class [System.Drawing]System.Drawing.Bitmap& CaretImage, bool isRightToLeft)
		{
			ret
		}
		.method public hidebysig 
			instance bool IsTextPointerInsideTextElement(class [PresentationFramework]System.Windows.Documents.TextPointer pointer, class [mscorlib]System.Type 'type')
		{
			ret
		}
		.method public hidebysig 
			instance bool RaiseCommand(class [PresentationCore]System.Windows.Input.RoutedCommand command)
		{
			ret
		}
		.method public hidebysig 
			instance bool RaiseCommand(string commandName)
		{
			ret
		}
		.method public hidebysig 
			instance void SelectCharacterByMouse(valuetype Test.Uis.Wrappers.UIElementWrapper/SelectionDirection direction, class [PresentationFramework]System.Windows.Documents.TextRange range)
		{
			ret
		}
		.method public hidebysig 
			instance void SelectCharacterByMouse(valuetype Test.Uis.Wrappers.UIElementWrapper/SelectionDirection direction, class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end)
		{
			ret
		}
		.method public hidebysig 
			instance void Select(int32 start, int32 length)
		{
			ret
		}
		.method public hidebysig 
			instance void SelectAll()
		{
			ret
		}
		.method public hidebysig 
			instance string GetPlainTextRepresentation(bool replaceTagsWithSymbol)
		{
			ret
		}
		.method public hidebysig 
			instance string GetSelectedText(bool preserveFormattingTagsInPlainText, bool normalizeCloseTags)
		{
			ret
		}
		.method public static hidebysig 
			string GetPlainTextRepresentation(class [PresentationFramework]System.Windows.Documents.TextPointer start, class [PresentationFramework]System.Windows.Documents.TextPointer end, bool convertTagsToSymbol)
		{
			ret
		}
		.method public hidebysig 
			instance void SelectCharacterByMouse(valuetype Test.Uis.Wrappers.UIElementWrapper/SelectionDirection direction, int32 startIndex, int32 cch)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetIndexOfFirstStringInWindow(float64 Ycoordinate, [out] float64& currYcoordinate)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer GetPointerToFirstStringInRTB(float64 Ycoordinate, [out] float64& currYcoordinate)
		{
			ret
		}
		.method public hidebysig 
			instance string GetFirstStringInWindow(float64 Ycoordinate, [out] float64& currYcoordinate)
		{
			ret
		}
		.method public hidebysig 
			instance int32 GetIndexOfLastStringInWindow(float64 Ycoordinate, [out] float64& currYcoordinate)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer GetPointerToLastStringInRTB(float64 Ycoordinate, [out] float64& currYcoordinate)
		{
			ret
		}
		.method public virtual hidebysig 
			instance string ToString()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Size GetUpdatedCaretRenderSize()
		{
			ret
		}
		.method public hidebysig 
			instance valuetype [WindowsBase]System.Windows.Point GetDocumentRelativeCaretPosition()
		{
			ret
		}
		.method public hidebysig 
			instance string TextBeforeOrAfterCaret(valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direct)
		{
			ret
		}
		.method public hidebysig 
			instance class [PresentationFramework]System.Windows.Documents.Table FindTable()
		{
			ret
		}
		.method public static hidebysig 
			class [PresentationFramework]System.Windows.Documents.Table FindTable(class [PresentationFramework]System.Windows.Documents.TextPointer position, valuetype [PresentationFramework]System.Windows.Documents.LogicalDirection direction)
		{
			ret
		}
		.method public hidebysig 
			instance int32 ListLevel(class [PresentationFramework]System.Windows.Documents.TextPointer pointer)
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.Adorner get_CaretElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.UIElement get_Element()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtTheBeginningOfAListItem()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtTheEndOfAListItem()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtTheBeginningOfAList()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtTheEndOfAList()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretFollowedBySubList()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsOvertypeModeEnabled()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationCore]System.Windows.UIElement get_RenderingElement()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_SelectionLength()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer get_SelectionMovingPointer()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_SelectionMovingPointerDistance()
		{
			ret
		}
		.method public hidebysig specialname 
			instance int32 get_SelectionStart()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_SelectionStart(int32 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Text(string 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_Text()
		{
			ret
		}
		.method public hidebysig specialname 
			instance object get_TextEditor()
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_TypeName()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextSelection get_SelectionInstance()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextRange get_TextRange()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer get_Start()
		{
			ret
		}
		.method public hidebysig specialname 
			instance class [PresentationFramework]System.Windows.Documents.TextPointer get_End()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtBeginningOfDocument()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsCaretAtEndOfDocument()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsElementRichText()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsSelectionAllowedOnThis()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsPointerAllowedOnThis()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_IsSelectionObjectAllowed()
		{
			ret
		}
		.method public hidebysig specialname 
			instance bool get_Wrap()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_Wrap(bool 'value')
		{
			ret
		}
		.method public hidebysig specialname 
			instance string get_XamlText()
		{
			ret
		}
		.method public hidebysig specialname 
			instance void set_XamlText(string 'value')
		{
			ret
		}
		.method public static hidebysig 
			void HighDpiScaleFactors([out] float32& xFactor, [out] float32& yFactor)
		{
			ret
		}
		.property instance class [PresentationFramework]System.Windows.Documents.Adorner CaretElement()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.Adorner Test.Uis.Wrappers.UIElementWrapper::get_CaretElement()
		}
		.property instance class [PresentationCore]System.Windows.UIElement Element()
		{
			.get instance class [PresentationCore]System.Windows.UIElement Test.Uis.Wrappers.UIElementWrapper::get_Element()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextPointer End()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextPointer Test.Uis.Wrappers.UIElementWrapper::get_End()
		}
		.property instance bool IsCaretAtBeginningOfDocument()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtBeginningOfDocument()
		}
		.property instance bool IsCaretAtEndOfDocument()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtEndOfDocument()
		}
		.property instance bool IsCaretAtEndOfLine()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtEndOfLine()
		}
		.property instance bool IsCaretAtTheBeginningOfAList()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtTheBeginningOfAList()
		}
		.property instance bool IsCaretAtTheBeginningOfAListItem()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtTheBeginningOfAListItem()
		}
		.property instance bool IsCaretAtTheEndOfAList()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtTheEndOfAList()
		}
		.property instance bool IsCaretAtTheEndOfAListItem()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretAtTheEndOfAListItem()
		}
		.property instance bool IsCaretFollowedBySubList()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsCaretFollowedBySubList()
		}
		.property instance bool IsElementRichText()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsElementRichText()
		}
		.property instance bool IsOvertypeModeEnabled()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsOvertypeModeEnabled()
		}
		.property instance bool IsPointerAllowedOnThis()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsPointerAllowedOnThis()
		}
		.property instance bool IsSelectionAllowedOnThis()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsSelectionAllowedOnThis()
		}
		.property instance bool IsSelectionObjectAllowed()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_IsSelectionObjectAllowed()
		}
		.property instance class [PresentationCore]System.Windows.UIElement RenderingElement()
		{
			.get instance class [PresentationCore]System.Windows.UIElement Test.Uis.Wrappers.UIElementWrapper::get_RenderingElement()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextSelection SelectionInstance()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextSelection Test.Uis.Wrappers.UIElementWrapper::get_SelectionInstance()
		}
		.property instance int32 SelectionLength()
		{
			.get instance int32 Test.Uis.Wrappers.UIElementWrapper::get_SelectionLength()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextPointer SelectionMovingPointer()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextPointer Test.Uis.Wrappers.UIElementWrapper::get_SelectionMovingPointer()
		}
		.property instance int32 SelectionMovingPointerDistance()
		{
			.get instance int32 Test.Uis.Wrappers.UIElementWrapper::get_SelectionMovingPointerDistance()
		}
		.property instance int32 SelectionStart()
		{
			.get instance int32 Test.Uis.Wrappers.UIElementWrapper::get_SelectionStart()
			.set instance void Test.Uis.Wrappers.UIElementWrapper::set_SelectionStart(int32)
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextPointer Start()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextPointer Test.Uis.Wrappers.UIElementWrapper::get_Start()
		}
		.property instance string Text()
		{
			.get instance string Test.Uis.Wrappers.UIElementWrapper::get_Text()
			.set instance void Test.Uis.Wrappers.UIElementWrapper::set_Text(string)
		}
		.property instance object TextEditor()
		{
			.get instance object Test.Uis.Wrappers.UIElementWrapper::get_TextEditor()
		}
		.property instance class [PresentationFramework]System.Windows.Documents.TextRange TextRange()
		{
			.get instance class [PresentationFramework]System.Windows.Documents.TextRange Test.Uis.Wrappers.UIElementWrapper::get_TextRange()
		}
		.property instance string TypeName()
		{
			.get instance string Test.Uis.Wrappers.UIElementWrapper::get_TypeName()
		}
		.property instance bool Wrap()
		{
			.get instance bool Test.Uis.Wrappers.UIElementWrapper::get_Wrap()
			.set instance void Test.Uis.Wrappers.UIElementWrapper::set_Wrap(bool)
		}
		.property instance string XamlText()
		{
			.get instance string Test.Uis.Wrappers.UIElementWrapper::get_XamlText()
			.set instance void Test.Uis.Wrappers.UIElementWrapper::set_XamlText(string)
		}
	}
	.class public abstract sealed Uniscribe
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.List`1'<int32> ListValidCaretPositions(string text, class [mscorlib]System.Globalization.CultureInfo info, valuetype [PresentationCore]System.Windows.FlowDirection direction)
		{
			ret
		}
		.method public static hidebysig 
			class [mscorlib]'System.Collections.Generic.List`1'<int32> ListValidCaretPositions(string text, uint16 langId, bool isRightToLeft)
		{
			ret
		}
	}
	.class public Win32
		extends [mscorlib]System.Object
	{
		.class nested public sequential sealed 'FORMATETC'
			extends [mscorlib]System.Object
		{
			.method public hidebysig specialname 
				instance void .ctor()
			{
				ret
			}
			.field public int16 cfFormat
			.field public int16 dummy
			.field public native int ptd
			.field public int32 dwAspect
			.field public int32 lindex
			.field public int32 tymed
		}
		.class nested public sequential sealed FORMATETCStruct
			extends [mscorlib]System.ValueType
		{
			.field public int16 cfFormat
			.field public int16 dummy
			.field public native int ptd
			.field public int32 dwAspect
			.field public int32 lindex
			.field public int32 tymed
		}
		.class nested public sequential sealed serializable 'HCURSOR'
			extends [mscorlib]System.ValueType
		{
			.method public hidebysig specialname 
				instance void .ctor(native int hCursor)
			{
				ret
			}
			.method public static hidebysig specialname 
				bool op_Equality(valuetype Test.Uis.Wrappers.Win32/'HCURSOR' hl, valuetype Test.Uis.Wrappers.Win32/'HCURSOR' hr)
			{
				ret
			}
			.method public static hidebysig specialname 
				bool op_Inequality(valuetype Test.Uis.Wrappers.Win32/'HCURSOR' hl, valuetype Test.Uis.Wrappers.Win32/'HCURSOR' hr)
			{
				ret
			}
			.method public virtual hidebysig 
				instance bool Equals(object oCompare)
			{
				ret
			}
			.method public static hidebysig 
				valuetype Test.Uis.Wrappers.Win32/'HCURSOR' Cast(native int h)
			{
				ret
			}
			.method public virtual hidebysig 
				instance int32 GetHashCode()
			{
				ret
			}
			.method public virtual hidebysig 
				instance string ToString()
			{
				ret
			}
			.field public native int h
		}
		.class nested public sequential sealed 'HINSTANCE'
			extends [mscorlib]System.ValueType
		{
			.method public static hidebysig 
				valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' Cast(native int h)
			{
				ret
			}
			.method public static hidebysig specialname 
				valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' get_NULL()
			{
				ret
			}
			.method public static hidebysig specialname 
				bool op_Equality(valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' hl, valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' hr)
			{
				ret
			}
			.method public static hidebysig specialname 
				bool op_Inequality(valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' hl, valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' hr)
			{
				ret
			}
			.method public virtual hidebysig 
				instance bool Equals(object oCompare)
			{
				ret
			}
			.method public virtual hidebysig 
				instance int32 GetHashCode()
			{
				ret
			}
			.field public native int h
			.property valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' 'NULL'()
			{
				.get valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' Test.Uis.Wrappers.Win32/'HINSTANCE'::get_NULL()
			}
		}
		.class nested public sequential sealed serializable 'HWND'
			extends [mscorlib]System.ValueType
		{
			.method public static hidebysig specialname 
				native int op_Implicit(valuetype Test.Uis.Wrappers.Win32/'HWND' h)
			{
				ret
			}
			.method public static hidebysig specialname 
				valuetype Test.Uis.Wrappers.Win32/'HWND' get_NULL()
			{
				ret
			}
			.field public native int h
			.property valuetype Test.Uis.Wrappers.Win32/'HWND' 'NULL'()
			{
				.get valuetype Test.Uis.Wrappers.Win32/'HWND' Test.Uis.Wrappers.Win32/'HWND'::get_NULL()
			}
		}
		.class nested public interface abstract import IAdviseSink
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('0000010f-0000-0000-C000-000000000046') }
			.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
			.method public virtual hidebysig newslot abstract 
				instance void OnDataChange([in] class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, [in] class Test.Uis.Wrappers.Win32/'STGMEDIUM' pStgmed)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance void OnViewChange([in] int32 dwAspect, [in] int32 lindex)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance void OnRename([in] object marshal(interface) pmk)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance void OnSave()
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance void OnClose()
				preservesig 
			{
			}
		}
		.class nested public interface abstract import IEnumFORMATETC
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('00000103-0000-0000-C000-000000000046') }
			.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
			.method public virtual hidebysig newslot abstract 
				instance int32 Next([in] int32 marshal(unsigned int32) celt, [in][out] valuetype Test.Uis.Wrappers.Win32/FORMATETCStruct[] marshal([ + 0]) rgelt, [in][out] int32* pceltFetched)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 Skip([in] int32 marshal(unsigned int32) celt)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 Reset()
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 Clone([out] class Test.Uis.Wrappers.Win32/IEnumFORMATETC& marshal(interface) ppenum)
				preservesig 
			{
			}
		}
		.class nested public interface abstract import IOleDataObject
		{
			.custom instance void [mscorlib]System.Runtime.InteropServices.GuidAttribute::.ctor(string) = { string('0000010E-0000-0000-C000-000000000046') }
			.custom instance void [mscorlib]System.Runtime.InteropServices.InterfaceTypeAttribute::.ctor(valuetype [mscorlib]System.Runtime.InteropServices.ComInterfaceType) = { int32(1) }
			.method public virtual hidebysig newslot abstract 
				instance int32 OleGetData(class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, [out] class Test.Uis.Wrappers.Win32/'STGMEDIUM' pMedium)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleGetDataHere([in] class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, [in][out] class Test.Uis.Wrappers.Win32/'STGMEDIUM' pMedium)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleQueryGetData(class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleGetCanonicalFormatEtc([in][out] valuetype Test.Uis.Wrappers.Win32/FORMATETCStruct& pformatectIn, [in][out] valuetype Test.Uis.Wrappers.Win32/FORMATETCStruct& pformatetcOut)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleSetData(class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatectIn, class Test.Uis.Wrappers.Win32/'STGMEDIUM' pmedium, bool fRelease)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleEnumFormatEtc([in] int32 marshal(unsigned int32) dwDirection, [out] class Test.Uis.Wrappers.Win32/IEnumFORMATETC& marshal(interface) enumFormatEtc)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleDAdvise([in] class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, [in] int32 marshal(unsigned int32) advf, [in] class Test.Uis.Wrappers.Win32/IAdviseSink marshal(interface) pAdvSink, [in][out] int32* pdwConnection)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleDUnadvise([in] int32 marshal(unsigned int32) dwConnection)
				preservesig 
			{
			}
			.method public virtual hidebysig newslot abstract 
				instance int32 OleEnumDAdvise([out] object& marshal(interface) ppenumAdvise)
				preservesig 
			{
			}
		}
		.class nested public sequential MSG
			extends [mscorlib]System.Object
		{
			.method public hidebysig specialname 
				instance void .ctor()
			{
				ret
			}
			.field public valuetype Test.Uis.Wrappers.Win32/'HWND' hwnd
			.field public native uint message
			.field public native int wParam
			.field public native int lParam
			.field public int32 time
			.field public int32 pt_x
			.field public int32 pt_y
		}
		.class nested public sequential sealed 'POINT'
			extends [mscorlib]System.ValueType
		{
			.method public hidebysig specialname 
				instance void .ctor(int32 x, int32 y)
			{
				ret
			}
			.field public int32 x
			.field public int32 y
		}
		.class nested public sequential sealed 'RECT'
			extends [mscorlib]System.ValueType
		{
			.method public hidebysig specialname 
				instance void .ctor(int32 left, int32 top, int32 right, int32 bottom)
			{
				ret
			}
			.method public hidebysig specialname 
				instance void .ctor(valuetype Test.Uis.Wrappers.Win32/'RECT' rcSrc)
			{
				ret
			}
			.method public hidebysig specialname 
				instance bool get_IsEmpty()
			{
				ret
			}
			.method public hidebysig specialname 
				instance int32 get_Height()
			{
				ret
			}
			.method public hidebysig specialname 
				instance int32 get_Width()
			{
				ret
			}
			.field public int32 left
			.field public int32 top
			.field public int32 right
			.field public int32 bottom
			.property instance int32 Height()
			{
				.get instance int32 Test.Uis.Wrappers.Win32/'RECT'::get_Height()
			}
			.property instance bool IsEmpty()
			{
				.get instance bool Test.Uis.Wrappers.Win32/'RECT'::get_IsEmpty()
			}
			.property instance int32 Width()
			{
				.get instance int32 Test.Uis.Wrappers.Win32/'RECT'::get_Width()
			}
		}
		.class nested public sequential autochar 'STGMEDIUM'
			extends [mscorlib]System.Object
		{
			.method public hidebysig specialname 
				instance void .ctor()
			{
				ret
			}
			.field public int32 tymed
			.field public native int unionmember
			.field public native int pUnkForRelease
		}
		.method public static hidebysig 
			uint8[] GetVirtualKeys()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 MessageBox(valuetype [mscorlib]System.Runtime.InteropServices.HandleRef hWnd, string text, string caption, int32 'type')
			preservesig 
		{
		}
		.method public static hidebysig 
			void CreateAttachDebuggerMessageBox()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetSystemMetrics(int32 nIndex)
			preservesig 
		{
		}
		.method public static hidebysig 
			uint32 SafeGetSysColor(int32 nIndex)
		{
			ret
		}
		.method public static hidebysig 
			bool SafeSetSysColors(int32 cElements, int32[] lpaElements, uint32[] lpaRgbValues)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetLastError()
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 SafeGetKeyboardLayoutList(int32 size, native int[] hkls)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool GetKeyboardState(uint8[] byteKeyboardState)
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeGetKeyboardState(uint8[] byteKeyboardState)
		{
			ret
		}
		.method public static hidebysig 
			bool SafeSetKeyboardState(uint8[] byteKeyboardState)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GetKeyboardLayout(native int threadID)
			preservesig 
		{
		}
		.method public static hidebysig 
			native int SafeGetKeyboardLayout(native int threadID)
		{
			ret
		}
		.method public static hidebysig 
			native int SafeLoadKeyboardLayout(string pwszKLID, int32 'flags')
		{
			ret
		}
		.method public static hidebysig 
			native int SafeActivateKeyboardLayout(native int hkl, int32 'flags')
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			uint32 MapVirtualKeyEx(uint32 nVirtKey, int32 nMapType, native int hkl)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			uint16 VkKeyScanEx(char ch, native int hkl)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 BlockInput(bool fBlockIt)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 SafeBlockInput(bool blockIt)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool SetCaretBlinkTime(int32 val)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetCaretBlinkTime()
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool GetCaretPos([out] valuetype Test.Uis.Wrappers.Win32/'POINT'& point)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool SetCaretPos(int32 x, int32 y)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 GetCaretWidthInPixels()
		{
			ret
		}
		.method public static hidebysig 
			void SetCaretWidthInPixels(int32 width, bool updateIni)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool CloseClipboard()
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeCloseClipboard()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 CountClipboardFormats()
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool EmptyClipboard()
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeEmptyClipboard()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GetClipboardData(uint32 format)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetClipboardFormatName(uint32 format, native int formatName, int32 maxCount)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			uint32 EnumClipboardFormats(uint32 format)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool OpenClipboard(valuetype Test.Uis.Wrappers.Win32/'HWND' hwndNewOwner)
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeOpenClipboard(valuetype Test.Uis.Wrappers.Win32/'HWND' hwndNewOwner)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 RegisterClipboardFormat(string str)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int SetClipboardData(uint32 uFormat, native int hMem)
			preservesig 
		{
		}
		.method public static hidebysig 
			native int SafeSetClipboardData(uint32 uFormat, native int hMem)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			valuetype Test.Uis.Wrappers.Win32/'HCURSOR' LoadCursor(valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' hinstance, int32 nCursorName)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			valuetype Test.Uis.Wrappers.Win32/'HCURSOR' LoadCursor(valuetype Test.Uis.Wrappers.Win32/'HINSTANCE' hinstance, string stCursorName)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			valuetype Test.Uis.Wrappers.Win32/'HCURSOR' GetCursor()
			preservesig 
		{
		}
		.method public static hidebysig 
			valuetype Test.Uis.Wrappers.Win32/'HCURSOR' SafeGetCursor()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GlobalAlloc(uint32 uFlags, int32 dwBytes)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GlobalFree(native int hMem)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GlobalLock(native int hMem)
			preservesig 
		{
		}
		.method public static hidebysig 
			native int SafeGlobalLock(native int hMem)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool GlobalUnlock(native int hMem)
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeGlobalUnlock(native int hMem)
		{
			ret
		}
		.method public static hidebysig 
			string ReadNullTerminatedString(native int memory, bool isUtf16)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GetDC(native int hwnd)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 ReleaseDC(native int hwnd, native int hdc)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool BitBlt(native int hdcDest, int32 xDest, int32 yDest, int32 cxDest, int32 cyDest, native int hdcSrc, int32 xSrc, int32 ySrc, int32 dwRop)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool GetClientRect(native int hwnd, [in][out] valuetype Test.Uis.Wrappers.Win32/'RECT'& rc)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool GetWindowRect(native int hwnd, [in][out] valuetype Test.Uis.Wrappers.Win32/'RECT'& rc)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool ClientToScreen(native int hwndFrom, [in][out] valuetype Test.Uis.Wrappers.Win32/'POINT'& pt)
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeClientToScreen(native int hwndFrom, valuetype Test.Uis.Wrappers.Win32/'POINT'& pt)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool ScreenToClient(native int hwndFrom, [in][out] valuetype Test.Uis.Wrappers.Win32/'POINT'& pt)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 SafeOleGetData(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, [out] class Test.Uis.Wrappers.Win32/'STGMEDIUM' pMedium)
			preservesig 
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleGetDataHere(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, [in][out] class Test.Uis.Wrappers.Win32/'STGMEDIUM' pMedium)
			preservesig 
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleQueryGetData(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc)
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleSetData(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatectIn, class Test.Uis.Wrappers.Win32/'STGMEDIUM' pmedium, bool fRelease)
			preservesig 
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleEnumFormatEtc(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, int32 dwDirection, [out] class Test.Uis.Wrappers.Win32/IEnumFORMATETC& enumFormatEtc)
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeEnumFormatEtcNext(class Test.Uis.Wrappers.Win32/IEnumFORMATETC enumFormatEtc, int32 celt, valuetype Test.Uis.Wrappers.Win32/FORMATETCStruct[] rgelt)
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeEnumFormatEtcNext(class Test.Uis.Wrappers.Win32/IEnumFORMATETC enumFormatEtc, int32 celt, valuetype Test.Uis.Wrappers.Win32/FORMATETCStruct[] rgelt, [out] int32& fetched)
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleDAdvise(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, class Test.Uis.Wrappers.Win32/'FORMATETC' pFormatetc, int32 advf, class Test.Uis.Wrappers.Win32/IAdviseSink pAdvSink, [out] int32& pdwConnection)
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleDUnadvise(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, int32 dwConnection)
		{
			ret
		}
		.method public static hidebysig 
			int32 SafeOleEnumDAdvise(class Test.Uis.Wrappers.Win32/IOleDataObject dataObject, [out] object& ppenumAdvise)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 OleGetClipboard([in][out] class Test.Uis.Wrappers.Win32/IOleDataObject& data)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 OleSetClipboard(class Test.Uis.Wrappers.Win32/IOleDataObject pDataObj)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 OleFlushClipboard()
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 OleIsCurrentClipboard(class Test.Uis.Wrappers.Win32/IOleDataObject pDataObj)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			void ReleaseStgMedium(class Test.Uis.Wrappers.Win32/'STGMEDIUM' pmedium)
			preservesig 
		{
		}
		.method public static hidebysig 
			void SafeReleaseStgMedium(class Test.Uis.Wrappers.Win32/'STGMEDIUM' pmedium)
		{
			ret
		}
		.method public static hidebysig 
			native int SafeGetDummyTargetDevice()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool SystemParametersInfo(uint32 action, uint32 param, native int pvParam, int32 winIni)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool SystemParametersInfo(uint32 action, uint32 param, uint32& pvParam, int32 winIni)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool SystemParametersInfo(uint32 action, uint32 param, uint32 pvParam, int32 winIni)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool IsThemeActive()
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetCurrentThemeName(class [mscorlib]System.Text.StringBuilder pszThemeFileName, int32 dwMaxNameChars, class [mscorlib]System.Text.StringBuilder pszColorBuff, int32 dwMaxColorChars, class [mscorlib]System.Text.StringBuilder pszSizeBuff, int32 cchMaxSizeChars)
			preservesig 
		{
		}
		.method public static hidebysig 
			string SafeGetCurrentThemeName()
		{
			ret
		}
		.method public static hidebysig 
			string SafeGetCurrentThemeColor()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool BringWindowToTop(native int hwnd)
			preservesig 
		{
		}
		.method public static hidebysig 
			bool SafeBringWindowToTop(native int hwnd)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			native int GetDesktopWindow()
			preservesig 
		{
		}
		.method public static hidebysig 
			native int SafeGetDesktopWindow()
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 MoveWindow(native int hWnd, int32 x, int32 y, int32 nWidth, int32 nHeight, bool bRepaint)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 SafeMoveWindow(native int hWnd, int32 x, int32 y, int32 nWidth, int32 nHeight, bool bRepaint)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 ShowWindow(native int hWnd, int32 nCmdShow)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 SafeShowWindow(native int hWnd, int32 nCmdShow)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 UpdateWindow(native int hWnd)
			preservesig 
		{
		}
		.method public static hidebysig 
			int32 SafeUpdateWindow(native int hWnd)
		{
			ret
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetMessage(class Test.Uis.Wrappers.Win32/MSG msg, valuetype Test.Uis.Wrappers.Win32/'HWND' hwnd, int32 nMsgFilterMin, int32 nMsgFilterMax)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool PeekMessage(class Test.Uis.Wrappers.Win32/MSG msg, valuetype Test.Uis.Wrappers.Win32/'HWND' hwnd, int32 nMsgFilterMin, int32 nMsgFilterMax, int32 wRemoveMsg)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool TranslateMessage(class Test.Uis.Wrappers.Win32/MSG msg)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			bool DispatchMessage(class Test.Uis.Wrappers.Win32/MSG msg)
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetCurrentProcessId()
			preservesig 
		{
		}
		.method public static hidebysig pinvokeimpl("dummy" winapi) 
			int32 GetCurrentThreadId()
			preservesig 
		{
		}
		.method public static hidebysig 
			string GetMessageDescription(class Test.Uis.Wrappers.Win32/MSG msg)
		{
			ret
		}
		.method public hidebysig specialname 
			instance void .ctor()
		{
			ret
		}
		.field static public literal int32 'BLACKNESS' = int32(0x00000042)
		.field static public literal uint32 'CF_BITMAP' = uint32(0x00000002)
		.field static public literal uint32 'CF_DIB' = uint32(0x00000008)
		.field static public literal uint32 'CF_DIBV5' = uint32(0x00000011)
		.field static public literal uint32 'CF_DIF' = uint32(0x00000005)
		.field static public literal uint32 'CF_DSPBITMAP' = uint32(0x00000082)
		.field static public literal uint32 'CF_DSPENHMETAFILE' = uint32(0x0000008E)
		.field static public literal uint32 'CF_DSPMETAFILEPICT' = uint32(0x00000083)
		.field static public literal uint32 'CF_DSPTEXT' = uint32(0x00000081)
		.field static public literal uint32 'CF_ENHMETAFILE' = uint32(0x0000000E)
		.field static public literal uint32 'CF_GDIOBJFIRST' = uint32(0x00000300)
		.field static public literal uint32 'CF_GDIOBJLAST' = uint32(0x000003FF)
		.field static public literal uint32 'CF_HDROP' = uint32(0x0000000F)
		.field static public literal uint32 'CF_LOCALE' = uint32(0x00000010)
		.field static public literal uint32 'CF_METAFILEPICT' = uint32(0x00000003)
		.field static public literal uint32 'CF_OEMTEXT' = uint32(0x00000007)
		.field static public literal uint32 'CF_OWNERDISPLAY' = uint32(0x00000080)
		.field static public literal uint32 'CF_PALETTE' = uint32(0x00000009)
		.field static public literal uint32 'CF_PENDATA' = uint32(0x0000000A)
		.field static public literal uint32 'CF_PRIVATEFIRST' = uint32(0x00000200)
		.field static public literal uint32 'CF_PRIVATELAST' = uint32(0x000002FF)
		.field static public literal uint32 'CF_RIFF' = uint32(0x0000000B)
		.field static public literal uint32 'CF_SYLK' = uint32(0x00000004)
		.field static public literal uint32 'CF_TEXT' = uint32(0x00000001)
		.field static public literal uint32 'CF_TIFF' = uint32(0x00000006)
		.field static public literal uint32 'CF_UNICODETEXT' = uint32(0x0000000D)
		.field static public literal uint32 'CF_WAVE' = uint32(0x0000000C)
		.field static public literal int32 'COLOR_3DDKSHADOW' = int32(0x00000015)
		.field static public literal int32 'COLOR_3DFACE' = int32(0x0000000F)
		.field static public literal int32 'COLOR_3DHIGHLIGHT' = int32(0x00000014)
		.field static public literal int32 'COLOR_3DHILIGHT' = int32(0x00000014)
		.field static public literal int32 'COLOR_3DLIGHT' = int32(0x00000016)
		.field static public literal int32 'COLOR_3DSHADOW' = int32(0x00000010)
		.field static public literal int32 'COLOR_ACTIVEBORDER' = int32(0x0000000A)
		.field static public literal int32 'COLOR_ACTIVECAPTION' = int32(0x00000002)
		.field static public literal int32 'COLOR_APPWORKSPACE' = int32(0x0000000C)
		.field static public literal int32 'COLOR_BACKGROUND' = int32(0x00000001)
		.field static public literal int32 'COLOR_BTNFACE' = int32(0x0000000F)
		.field static public literal int32 'COLOR_BTNHIGHLIGHT' = int32(0x00000014)
		.field static public literal int32 'COLOR_BTNHILIGHT' = int32(0x00000014)
		.field static public literal int32 'COLOR_BTNSHADOW' = int32(0x00000010)
		.field static public literal int32 'COLOR_BTNTEXT' = int32(0x00000012)
		.field static public literal int32 'COLOR_CAPTIONTEXT' = int32(0x00000009)
		.field static public literal int32 'COLOR_DESKTOP' = int32(0x00000001)
		.field static public literal int32 'COLOR_GRADIENTACTIVECAPTION' = int32(0x0000001B)
		.field static public literal int32 'COLOR_GRADIENTINACTIVECAPTION' = int32(0x0000001C)
		.field static public literal int32 'COLOR_GRAYTEXT' = int32(0x00000011)
		.field static public literal int32 'COLOR_HIGHLIGHT' = int32(0x0000000D)
		.field static public literal int32 'COLOR_HIGHLIGHTTEXT' = int32(0x0000000E)
		.field static public literal int32 'COLOR_HOTLIGHT' = int32(0x0000001A)
		.field static public literal int32 'COLOR_INACTIVEBORDER' = int32(0x0000000B)
		.field static public literal int32 'COLOR_INACTIVECAPTION' = int32(0x00000003)
		.field static public literal int32 'COLOR_INACTIVECAPTIONTEXT' = int32(0x00000013)
		.field static public literal int32 'COLOR_INFOBK' = int32(0x00000018)
		.field static public literal int32 'COLOR_INFOTEXT' = int32(0x00000017)
		.field static public literal int32 'COLOR_MENU' = int32(0x00000004)
		.field static public literal int32 'COLOR_MENUBAR' = int32(0x0000001E)
		.field static public literal int32 'COLOR_MENUHILIGHT' = int32(0x0000001D)
		.field static public literal int32 'COLOR_MENUTEXT' = int32(0x00000007)
		.field static public literal int32 'COLOR_SCROLLBAR' = int32(0x00000000)
		.field static public literal int32 'COLOR_WINDOW' = int32(0x00000005)
		.field static public literal int32 'COLOR_WINDOWFRAME' = int32(0x00000006)
		.field static public literal int32 'COLOR_WINDOWTEXT' = int32(0x00000008)
		.field static public literal int32 'DATADIR_GET' = int32(0x00000001)
		.field static public literal int32 'DATADIR_SET' = int32(0x00000002)
		.field static public literal int32 'DATA_S_SAMEFORMATETC' = int32(0x00040130)
		.field static public literal int32 'DSTINVERT' = int32(0x00550009)
		.field static public literal int32 'DVASPECT_CONTENT' = int32(0x00000001)
		.field static public literal int32 'DVASPECT_DOCPRINT' = int32(0x00000008)
		.field static public literal int32 'DVASPECT_ICON' = int32(0x00000004)
		.field static public literal int32 'DVASPECT_THUMBNAIL' = int32(0x00000002)
		.field static public literal int32 'DV_E_CLIPFORMAT' = int32(0x8004006A)
		.field static public literal int32 'DV_E_DVASPECT' = int32(0x8004006B)
		.field static public literal int32 'DV_E_DVTARGETDEVICE' = int32(0x80040065)
		.field static public literal int32 'DV_E_DVTARGETDEVICE_SIZE' = int32(0x8004006C)
		.field static public literal int32 'DV_E_FORMATETC' = int32(0x80040064)
		.field static public literal int32 'DV_E_LINDEX' = int32(0x80040068)
		.field static public literal int32 'DV_E_NOIVIEWOBJECT' = int32(0x8004006D)
		.field static public literal int32 'DV_E_STATDATA' = int32(0x80040067)
		.field static public literal int32 'DV_E_STGMEDIUM' = int32(0x80040066)
		.field static public literal int32 'DV_E_TYMED' = int32(0x80040069)
		.field static public literal int32 'E_FAIL' = int32(0x80004005)
		.field static public literal int32 'E_INVALIDARG' = int32(0x80070057)
		.field static public literal int32 'E_NOINTERFACE' = int32(0x80004002)
		.field static public literal int32 'E_NOTIMPL' = int32(0x80004001)
		.field static public literal int32 'E_OUTOFMEMORY' = int32(0x8007000E)
		.field static public literal int32 'E_POINTER' = int32(0x80004003)
		.field static public literal int32 'IDC_APPSTARTING' = int32(0x00007F8A)
		.field static public literal int32 'IDC_ARROW' = int32(0x00007F00)
		.field static public literal int32 'IDC_CROSS' = int32(0x00007F03)
		.field static public literal int32 'IDC_HAND' = int32(0x00007F89)
		.field static public literal int32 'IDC_HELP' = int32(0x00007F8B)
		.field static public literal int32 'IDC_IBEAM' = int32(0x00007F01)
		.field static public literal int32 'IDC_ICON' = int32(0x00007F81)
		.field static public literal int32 'IDC_NO' = int32(0x00007F88)
		.field static public literal int32 'IDC_SIZE' = int32(0x00007F80)
		.field static public literal int32 'IDC_SIZEALL' = int32(0x00007F86)
		.field static public literal int32 'IDC_SIZENESW' = int32(0x00007F83)
		.field static public literal int32 'IDC_SIZENS' = int32(0x00007F85)
		.field static public literal int32 'IDC_SIZENWSE' = int32(0x00007F82)
		.field static public literal int32 'IDC_SIZEWE' = int32(0x00007F84)
		.field static public literal int32 'IDC_UPARROW' = int32(0x00007F04)
		.field static public literal int32 'IDC_WAIT' = int32(0x00007F02)
		.field static public literal int32 'MAX_PATH' = int32(0x00000104)
		.field static public literal int32 'MB_OK' = int32(0x00000000)
		.field static public literal int32 'MB_OKCANCEL' = int32(0x00000001)
		.field static public literal int32 'MB_YESNO' = int32(0x00000004)
		.field static public literal int32 'MERGECOPY' = int32(0x00C000CA)
		.field static public literal int32 'MERGEPAINT' = int32(0x00BB0226)
		.field static public literal int32 'NOTSRCCOPY' = int32(0x00330008)
		.field static public literal int32 'NOTSRCERASE' = int32(0x001100A6)
		.field static public literal int32 'OLE_E_ADVF' = int32(0x80040001)
		.field static public literal int32 'OLE_E_ADVISENOTSUPPORTED' = int32(0x80040003)
		.field static public literal int32 'OLE_E_BLANK' = int32(0x80040007)
		.field static public literal int32 'OLE_E_CANTCONVERT' = int32(0x80040011)
		.field static public literal int32 'OLE_E_CANT_BINDTOSOURCE' = int32(0x8004000A)
		.field static public literal int32 'OLE_E_CANT_GETMONIKER' = int32(0x80040009)
		.field static public literal int32 'OLE_E_CLASSDIFF' = int32(0x80040008)
		.field static public literal int32 'OLE_E_ENUM_NOMORE' = int32(0x80040002)
		.field static public literal int32 'OLE_E_INVALIDHWND' = int32(0x8004000F)
		.field static public literal int32 'OLE_E_INVALIDRECT' = int32(0x8004000D)
		.field static public literal int32 'OLE_E_NOCACHE' = int32(0x80040006)
		.field static public literal int32 'OLE_E_NOCONNECTION' = int32(0x80040004)
		.field static public literal int32 'OLE_E_NOSTORAGE' = int32(0x80040012)
		.field static public literal int32 'OLE_E_NOTRUNNING' = int32(0x80040005)
		.field static public literal int32 'OLE_E_NOT_INPLACEACTIVE' = int32(0x80040010)
		.field static public literal int32 'OLE_E_OLEVERB' = int32(0x80040000)
		.field static public literal int32 'OLE_E_PROMPTSAVECANCELLED' = int32(0x8004000C)
		.field static public literal int32 'OLE_E_STATIC' = int32(0x8004000B)
		.field static public literal int32 'OLE_E_WRONGCOMPOBJ' = int32(0x8004000E)
		.field static public literal int32 'PATCOPY' = int32(0x00F00021)
		.field static public literal int32 'PATINVERT' = int32(0x005A0049)
		.field static public literal int32 'PATPAINT' = int32(0x00FB0A09)
		.field static public literal int32 'PM_NOREMOVE' = int32(0x00000000)
		.field static public literal int32 'PM_NOYIELD' = int32(0x00000002)
		.field static public literal int32 'PM_REMOVE' = int32(0x00000001)
		.field static public literal int32 'SM_CXSCREEN' = int32(0x00000000)
		.field static public literal int32 'SM_CXVIRTUALSCREEN' = int32(0x0000004E)
		.field static public literal int32 'SM_CYSCREEN' = int32(0x00000001)
		.field static public literal int32 'SM_CYVIRTUALSCREEN' = int32(0x0000004F)
		.field static public literal int32 'SM_MIDEASTENABLED' = int32(0x0000004A)
		.field static public literal int32 'SM_XVIRTUALSCREEN' = int32(0x0000004C)
		.field static public literal int32 'SM_YVIRTUALSCREEN' = int32(0x0000004D)
		.field static public literal int32 'SPIF_SENDCHANGE' = int32(0x00000002)
		.field static public literal int32 'SPIF_SENDWININICHANGE' = int32(0x00000002)
		.field static public literal int32 'SPIF_UPDATEINIFILE' = int32(0x00000001)
		.field static public literal uint32 'SPI_GETCARETWIDTH' = uint32(0x00002006)
		.field static public literal uint32 'SPI_SETCARETWIDTH' = uint32(0x00002007)
		.field static public literal int32 'SRCAND' = int32(0x008800C6)
		.field static public literal int32 'SRCCOPY' = int32(0x00CC0020)
		.field static public literal int32 'SRCERASE' = int32(0x00440328)
		.field static public literal int32 'SRCINVERT' = int32(0x00660046)
		.field static public literal int32 'SRCPAINT' = int32(0x00EE0086)
		.field static public literal int32 'STG_E_MEDIUMFULL' = int32(0x80030070)
		.field static public literal int32 'SW_FORCEMINIMIZE' = int32(0x0000000B)
		.field static public literal int32 'SW_HIDE' = int32(0x00000000)
		.field static public literal int32 'SW_MAX' = int32(0x0000000B)
		.field static public literal int32 'SW_MAXIMIZE' = int32(0x00000003)
		.field static public literal int32 'SW_MINIMIZE' = int32(0x00000006)
		.field static public literal int32 'SW_NORMAL' = int32(0x00000001)
		.field static public literal int32 'SW_RESTORE' = int32(0x00000009)
		.field static public literal int32 'SW_SHOW' = int32(0x00000005)
		.field static public literal int32 'SW_SHOWDEFAULT' = int32(0x0000000A)
		.field static public literal int32 'SW_SHOWMAXIMIZED' = int32(0x00000003)
		.field static public literal int32 'SW_SHOWMINIMIZED' = int32(0x00000002)
		.field static public literal int32 'SW_SHOWMINNOACTIVE' = int32(0x00000007)
		.field static public literal int32 'SW_SHOWNA' = int32(0x00000008)
		.field static public literal int32 'SW_SHOWNOACTIVATE' = int32(0x00000004)
		.field static public literal int32 'SW_SHOWNORMAL' = int32(0x00000001)
		.field static public literal int32 'S_FALSE' = int32(0x00000001)
		.field static public literal int32 'S_OK' = int32(0x00000000)
		.field static public literal int32 'TYMED_ENHMF' = int32(0x00000040)
		.field static public literal int32 'TYMED_FILE' = int32(0x00000002)
		.field static public literal int32 'TYMED_GDI' = int32(0x00000010)
		.field static public literal int32 'TYMED_HGLOBAL' = int32(0x00000001)
		.field static public literal int32 'TYMED_ISTORAGE' = int32(0x00000008)
		.field static public literal int32 'TYMED_ISTREAM' = int32(0x00000004)
		.field static public literal int32 'TYMED_MFPICT' = int32(0x00000020)
		.field static public literal int32 'TYMED_NULL' = int32(0x00000000)
		.field static public literal uint8 'VK_ACCEPT' = uint8(0x1E)
		.field static public literal uint8 'VK_ADD' = uint8(0x6B)
		.field static public literal uint8 'VK_APPS' = uint8(0x5D)
		.field static public literal uint8 'VK_ATTN' = uint8(0xF6)
		.field static public literal uint8 'VK_BACK' = uint8(0x08)
		.field static public literal uint8 'VK_BROWSER_BACK' = uint8(0xA6)
		.field static public literal uint8 'VK_BROWSER_FAVORITES' = uint8(0xAB)
		.field static public literal uint8 'VK_BROWSER_FORWARD' = uint8(0xA7)
		.field static public literal uint8 'VK_BROWSER_HOME' = uint8(0xAC)
		.field static public literal uint8 'VK_BROWSER_REFRESH' = uint8(0xA8)
		.field static public literal uint8 'VK_BROWSER_SEARCH' = uint8(0xAA)
		.field static public literal uint8 'VK_BROWSER_STOP' = uint8(0xA9)
		.field static public literal uint8 'VK_CANCEL' = uint8(0x03)
		.field static public literal uint8 'VK_CAPITAL' = uint8(0x14)
		.field static public literal uint8 'VK_CLEAR' = uint8(0x0C)
		.field static public literal uint8 'VK_CONTROL' = uint8(0x11)
		.field static public literal uint8 'VK_CONVERT' = uint8(0x1C)
		.field static public literal uint8 'VK_CRSEL' = uint8(0xF7)
		.field static public literal uint8 'VK_DECIMAL' = uint8(0x6E)
		.field static public literal uint8 'VK_DELETE' = uint8(0x2E)
		.field static public literal uint8 'VK_DIVIDE' = uint8(0x6F)
		.field static public literal uint8 'VK_DOWN' = uint8(0x28)
		.field static public literal uint8 'VK_END' = uint8(0x23)
		.field static public literal uint8 'VK_EREOF' = uint8(0xF9)
		.field static public literal uint8 'VK_ESCAPE' = uint8(0x1B)
		.field static public literal uint8 'VK_EXECUTE' = uint8(0x2B)
		.field static public literal uint8 'VK_EXSEL' = uint8(0xF8)
		.field static public literal uint8 'VK_F1' = uint8(0x70)
		.field static public literal uint8 'VK_F10' = uint8(0x79)
		.field static public literal uint8 'VK_F11' = uint8(0x7A)
		.field static public literal uint8 'VK_F12' = uint8(0x7B)
		.field static public literal uint8 'VK_F13' = uint8(0x7C)
		.field static public literal uint8 'VK_F14' = uint8(0x7D)
		.field static public literal uint8 'VK_F15' = uint8(0x7E)
		.field static public literal uint8 'VK_F16' = uint8(0x7F)
		.field static public literal uint8 'VK_F17' = uint8(0x80)
		.field static public literal uint8 'VK_F18' = uint8(0x81)
		.field static public literal uint8 'VK_F19' = uint8(0x82)
		.field static public literal uint8 'VK_F2' = uint8(0x71)
		.field static public literal uint8 'VK_F20' = uint8(0x83)
		.field static public literal uint8 'VK_F21' = uint8(0x84)
		.field static public literal uint8 'VK_F22' = uint8(0x85)
		.field static public literal uint8 'VK_F23' = uint8(0x86)
		.field static public literal uint8 'VK_F24' = uint8(0x87)
		.field static public literal uint8 'VK_F3' = uint8(0x72)
		.field static public literal uint8 'VK_F4' = uint8(0x73)
		.field static public literal uint8 'VK_F5' = uint8(0x74)
		.field static public literal uint8 'VK_F6' = uint8(0x75)
		.field static public literal uint8 'VK_F7' = uint8(0x76)
		.field static public literal uint8 'VK_F8' = uint8(0x77)
		.field static public literal uint8 'VK_F9' = uint8(0x78)
		.field static public literal uint8 'VK_FINAL' = uint8(0x18)
		.field static public literal uint8 'VK_HANGEUL' = uint8(0x15)
		.field static public literal uint8 'VK_HANGUL' = uint8(0x15)
		.field static public literal uint8 'VK_HANJA' = uint8(0x19)
		.field static public literal uint8 'VK_HELP' = uint8(0x2F)
		.field static public literal uint8 'VK_HOME' = uint8(0x24)
		.field static public literal uint8 'VK_ICO_00' = uint8(0xE4)
		.field static public literal uint8 'VK_ICO_CLEAR' = uint8(0xE6)
		.field static public literal uint8 'VK_ICO_HELP' = uint8(0xE3)
		.field static public literal uint8 'VK_INSERT' = uint8(0x2D)
		.field static public literal uint8 'VK_JUNJA' = uint8(0x17)
		.field static public literal uint8 'VK_KANA' = uint8(0x15)
		.field static public literal uint8 'VK_KANJI' = uint8(0x19)
		.field static public literal uint8 'VK_LAUNCH_APP1' = uint8(0xB6)
		.field static public literal uint8 'VK_LAUNCH_APP2' = uint8(0xB7)
		.field static public literal uint8 'VK_LAUNCH_MAIL' = uint8(0xB4)
		.field static public literal uint8 'VK_LAUNCH_MEDIA_SELECT' = uint8(0xB5)
		.field static public literal uint8 'VK_LBUTTON' = uint8(0x01)
		.field static public literal uint8 'VK_LCONTROL' = uint8(0xA2)
		.field static public literal uint8 'VK_LEFT' = uint8(0x25)
		.field static public literal uint8 'VK_LMENU' = uint8(0xA4)
		.field static public literal uint8 'VK_LSHIFT' = uint8(0xA0)
		.field static public literal uint8 'VK_LWIN' = uint8(0x5B)
		.field static public literal uint8 'VK_MBUTTON' = uint8(0x04)
		.field static public literal uint8 'VK_MEDIA_NEXT_TRACK' = uint8(0xB0)
		.field static public literal uint8 'VK_MEDIA_PLAY_PAUSE' = uint8(0xB3)
		.field static public literal uint8 'VK_MEDIA_PREV_TRACK' = uint8(0xB1)
		.field static public literal uint8 'VK_MEDIA_STOP' = uint8(0xB2)
		.field static public literal uint8 'VK_MENU' = uint8(0x12)
		.field static public literal uint8 'VK_MODECHANGE' = uint8(0x1F)
		.field static public literal uint8 'VK_MULTIPLY' = uint8(0x6A)
		.field static public literal uint8 'VK_NEXT' = uint8(0x22)
		.field static public literal uint8 'VK_NONAME' = uint8(0xFC)
		.field static public literal uint8 'VK_NONCONVERT' = uint8(0x1D)
		.field static public literal uint8 'VK_NUMLOCK' = uint8(0x90)
		.field static public literal uint8 'VK_NUMPAD0' = uint8(0x60)
		.field static public literal uint8 'VK_NUMPAD1' = uint8(0x61)
		.field static public literal uint8 'VK_NUMPAD2' = uint8(0x62)
		.field static public literal uint8 'VK_NUMPAD3' = uint8(0x63)
		.field static public literal uint8 'VK_NUMPAD4' = uint8(0x64)
		.field static public literal uint8 'VK_NUMPAD5' = uint8(0x65)
		.field static public literal uint8 'VK_NUMPAD6' = uint8(0x66)
		.field static public literal uint8 'VK_NUMPAD7' = uint8(0x67)
		.field static public literal uint8 'VK_NUMPAD8' = uint8(0x68)
		.field static public literal uint8 'VK_NUMPAD9' = uint8(0x69)
		.field static public literal uint8 'VK_OEM_1' = uint8(0xBA)
		.field static public literal uint8 'VK_OEM_102' = uint8(0xE2)
		.field static public literal uint8 'VK_OEM_2' = uint8(0xBF)
		.field static public literal uint8 'VK_OEM_3' = uint8(0xC0)
		.field static public literal uint8 'VK_OEM_4' = uint8(0xDB)
		.field static public literal uint8 'VK_OEM_5' = uint8(0xDC)
		.field static public literal uint8 'VK_OEM_6' = uint8(0xDD)
		.field static public literal uint8 'VK_OEM_7' = uint8(0xDE)
		.field static public literal uint8 'VK_OEM_8' = uint8(0xDF)
		.field static public literal uint8 'VK_OEM_ATTN' = uint8(0xF0)
		.field static public literal uint8 'VK_OEM_AUTO' = uint8(0xF3)
		.field static public literal uint8 'VK_OEM_AX' = uint8(0xE1)
		.field static public literal uint8 'VK_OEM_BACKTAB' = uint8(0xF5)
		.field static public literal uint8 'VK_OEM_CLEAR' = uint8(0xFE)
		.field static public literal uint8 'VK_OEM_COMMA' = uint8(0xBC)
		.field static public literal uint8 'VK_OEM_COPY' = uint8(0xF2)
		.field static public literal uint8 'VK_OEM_CUSEL' = uint8(0xEF)
		.field static public literal uint8 'VK_OEM_ENLW' = uint8(0xF4)
		.field static public literal uint8 'VK_OEM_FINISH' = uint8(0xF1)
		.field static public literal uint8 'VK_OEM_FJ_JISHO' = uint8(0x92)
		.field static public literal uint8 'VK_OEM_FJ_LOYA' = uint8(0x95)
		.field static public literal uint8 'VK_OEM_FJ_MASSHOU' = uint8(0x93)
		.field static public literal uint8 'VK_OEM_FJ_ROYA' = uint8(0x96)
		.field static public literal uint8 'VK_OEM_FJ_TOUROKU' = uint8(0x94)
		.field static public literal uint8 'VK_OEM_JUMP' = uint8(0xEA)
		.field static public literal uint8 'VK_OEM_MINUS' = uint8(0xBD)
		.field static public literal uint8 'VK_OEM_NEC_EQUAL' = uint8(0x92)
		.field static public literal uint8 'VK_OEM_PA1' = uint8(0xEB)
		.field static public literal uint8 'VK_OEM_PA2' = uint8(0xEC)
		.field static public literal uint8 'VK_OEM_PA3' = uint8(0xED)
		.field static public literal uint8 'VK_OEM_PERIOD' = uint8(0xBE)
		.field static public literal uint8 'VK_OEM_PLUS' = uint8(0xBB)
		.field static public literal uint8 'VK_OEM_RESET' = uint8(0xE9)
		.field static public literal uint8 'VK_OEM_WSCTRL' = uint8(0xEE)
		.field static public literal uint8 'VK_PA1' = uint8(0xFD)
		.field static public literal uint8 'VK_PACKET' = uint8(0xE7)
		.field static public literal uint8 'VK_PAUSE' = uint8(0x13)
		.field static public literal uint8 'VK_PLAY' = uint8(0xFA)
		.field static public literal uint8 'VK_PRINT' = uint8(0x2A)
		.field static public literal uint8 'VK_PRIOR' = uint8(0x21)
		.field static public literal uint8 'VK_PROCESSKEY' = uint8(0xE5)
		.field static public literal uint8 'VK_RBUTTON' = uint8(0x02)
		.field static public literal uint8 'VK_RCONTROL' = uint8(0xA3)
		.field static public literal uint8 'VK_RETURN' = uint8(0x0D)
		.field static public literal uint8 'VK_RIGHT' = uint8(0x27)
		.field static public literal uint8 'VK_RMENU' = uint8(0xA5)
		.field static public literal uint8 'VK_RSHIFT' = uint8(0xA1)
		.field static public literal uint8 'VK_RWIN' = uint8(0x5C)
		.field static public literal uint8 'VK_SCROLL' = uint8(0x91)
		.field static public literal uint8 'VK_SELECT' = uint8(0x29)
		.field static public literal uint8 'VK_SEPARATOR' = uint8(0x6C)
		.field static public literal uint8 'VK_SHIFT' = uint8(0x10)
		.field static public literal uint8 'VK_SLEEP' = uint8(0x5F)
		.field static public literal uint8 'VK_SNAPSHOT' = uint8(0x2C)
		.field static public literal uint8 'VK_SPACE' = uint8(0x20)
		.field static public literal uint8 'VK_SUBTRACT' = uint8(0x6D)
		.field static public literal uint8 'VK_TAB' = uint8(0x09)
		.field static public literal uint8 'VK_UP' = uint8(0x26)
		.field static public literal uint8 'VK_VOLUME_DOWN' = uint8(0xAE)
		.field static public literal uint8 'VK_VOLUME_MUTE' = uint8(0xAD)
		.field static public literal uint8 'VK_VOLUME_UP' = uint8(0xAF)
		.field static public literal uint8 'VK_XBUTTON1' = uint8(0x05)
		.field static public literal uint8 'VK_XBUTTON2' = uint8(0x06)
		.field static public literal uint8 'VK_ZOOM' = uint8(0xFB)
		.field static public literal int32 'WHITENESS' = int32(0x00FF0062)
		.field static public literal int32 'WM_ACTIVATE' = int32(0x00000006)
		.field static public literal int32 'WM_ACTIVATEAPP' = int32(0x0000001C)
		.field static public literal int32 'WM_CAPTURECHANGED' = int32(0x00000215)
		.field static public literal int32 'WM_CHAR' = int32(0x00000102)
		.field static public literal int32 'WM_CLOSE' = int32(0x00000010)
		.field static public literal int32 'WM_COMMAND' = int32(0x00000111)
		.field static public literal int32 'WM_CREATE' = int32(0x00000001)
		.field static public literal int32 'WM_DESTROY' = int32(0x00000002)
		.field static public literal int32 'WM_DISPLAYCHANGE' = int32(0x0000007E)
		.field static public literal int32 'WM_ENABLE' = int32(0x0000000A)
		.field static public literal int32 'WM_ERASEBKGND' = int32(0x00000014)
		.field static public literal int32 'WM_EXITSIZEMOVE' = int32(0x00000232)
		.field static public literal int32 'WM_GETOBJECT' = int32(0x0000003D)
		.field static public literal int32 'WM_GETTEXT' = int32(0x0000000D)
		.field static public literal int32 'WM_GETTEXTLENGTH' = int32(0x0000000E)
		.field static public literal int32 'WM_HOTKEY' = int32(0x00000312)
		.field static public literal int32 'WM_HSCROLL' = int32(0x00000114)
		.field static public literal int32 'WM_INPUTLANGCHANGE' = int32(0x00000051)
		.field static public literal int32 'WM_KEYDOWN' = int32(0x00000100)
		.field static public literal int32 'WM_KEYUP' = int32(0x00000101)
		.field static public literal int32 'WM_KILLFOCUS' = int32(0x00000008)
		.field static public literal int32 'WM_LBUTTONDBLCLK' = int32(0x00000203)
		.field static public literal int32 'WM_LBUTTONDOWN' = int32(0x00000201)
		.field static public literal int32 'WM_LBUTTONUP' = int32(0x00000202)
		.field static public literal int32 'WM_MBUTTONDBLCLK' = int32(0x00000209)
		.field static public literal int32 'WM_MBUTTONDOWN' = int32(0x00000207)
		.field static public literal int32 'WM_MBUTTONUP' = int32(0x00000208)
		.field static public literal int32 'WM_MOUSEACTIVATE' = int32(0x00000021)
		.field static public literal int32 'WM_MOUSEFIRST' = int32(0x00000200)
		.field static public literal int32 'WM_MOUSEHOVER' = int32(0x000002A1)
		.field static public literal int32 'WM_MOUSELAST' = int32(0x0000020D)
		.field static public literal int32 'WM_MOUSELEAVE' = int32(0x000002A3)
		.field static public literal int32 'WM_MOUSEMOVE' = int32(0x00000200)
		.field static public literal int32 'WM_MOUSEWHEEL' = int32(0x0000020A)
		.field static public literal int32 'WM_MOVE' = int32(0x00000003)
		.field static public literal int32 'WM_NCCREATE' = int32(0x00000081)
		.field static public literal int32 'WM_NCDESTROY' = int32(0x00000082)
		.field static public literal int32 'WM_NCHITTEST' = int32(0x00000084)
		.field static public literal int32 'WM_NCLBUTTONDBLCLK' = int32(0x000000A3)
		.field static public literal int32 'WM_NCLBUTTONDOWN' = int32(0x000000A1)
		.field static public literal int32 'WM_NCLBUTTONUP' = int32(0x000000A2)
		.field static public literal int32 'WM_NCMBUTTONDBLCLK' = int32(0x000000A9)
		.field static public literal int32 'WM_NCMBUTTONDOWN' = int32(0x000000A7)
		.field static public literal int32 'WM_NCMBUTTONUP' = int32(0x000000A8)
		.field static public literal int32 'WM_NCRBUTTONDBLCLK' = int32(0x000000A6)
		.field static public literal int32 'WM_NCRBUTTONDOWN' = int32(0x000000A4)
		.field static public literal int32 'WM_NCRBUTTONUP' = int32(0x000000A5)
		.field static public literal int32 'WM_NCXBUTTONDBLCLK' = int32(0x000000AD)
		.field static public literal int32 'WM_NCXBUTTONDOWN' = int32(0x000000AB)
		.field static public literal int32 'WM_NCXBUTTONUP' = int32(0x000000AC)
		.field static public literal int32 'WM_NULL' = int32(0x00000000)
		.field static public literal int32 'WM_PAINT' = int32(0x0000000F)
		.field static public literal int32 'WM_PRINTCLIENT' = int32(0x00000318)
		.field static public literal int32 'WM_QUIT' = int32(0x00000012)
		.field static public literal int32 'WM_RBUTTONDBLCLK' = int32(0x00000206)
		.field static public literal int32 'WM_RBUTTONDOWN' = int32(0x00000204)
		.field static public literal int32 'WM_RBUTTONUP' = int32(0x00000205)
		.field static public literal int32 'WM_SETCURSOR' = int32(0x00000020)
		.field static public literal int32 'WM_SETFOCUS' = int32(0x00000007)
		.field static public literal int32 'WM_SETFONT' = int32(0x00000030)
		.field static public literal int32 'WM_SETREDRAW' = int32(0x0000000B)
		.field static public literal int32 'WM_SETTEXT' = int32(0x0000000C)
		.field static public literal int32 'WM_SIZE' = int32(0x00000005)
		.field static public literal int32 'WM_SYSCHAR' = int32(0x00000106)
		.field static public literal int32 'WM_SYSKEYDOWN' = int32(0x00000104)
		.field static public literal int32 'WM_SYSKEYUP' = int32(0x00000105)
		.field static public literal int32 'WM_TIMER' = int32(0x00000113)
		.field static public literal int32 'WM_USER' = int32(0x00000400)
		.field static public literal int32 'WM_WINDOWPOSCHANGED' = int32(0x00000047)
		.field static public literal int32 'WM_XBUTTONDBLCLK' = int32(0x0000020D)
		.field static public literal int32 'WM_XBUTTONDOWN' = int32(0x0000020B)
		.field static public literal int32 'WM_XBUTTONUP' = int32(0x0000020C)
	}
	.class public abstract sealed WinForms
		extends [mscorlib]System.Object
	{
		.method public static hidebysig 
			class [System.Windows.Forms]System.Windows.Forms.IDataObject ClipboardGetDataObject()
		{
			ret
		}
		.method public static hidebysig 
			string ClipboardGetDataObjectAsString()
		{
			ret
		}
		.method public static hidebysig 
			string[] ClipboardGetDataObjectFormats()
		{
			ret
		}
		.method public static hidebysig 
			void ClipboardSetDataObject(object dataObject)
		{
			ret
		}
	}
}
