// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//                   Restructuring by separating more into xamlpanel and
//                       rtfpanel and let them handle all of the related
//                       functionalities.  Added next/prev; window mgmt; etc.
//                       One of the noticable thing would be that the actual
//                       plain xaml is displayed instead of a ripped and then
//                       autogenerated

using System;
using System.IO;
using System.Text;
using System.Diagnostics;

// avalon
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Media;

namespace RtfXamlView
{
   /// <summary>
   /// 
   /// </summary>
   public enum rxCommands
   {
      /// <summary></summary>
      rxOpenFile = 0,

      /// <summary></summary>
      rxRTRtf = 1,

      /// <summary></summary>
      rxRTXaml = 2,

      /// <summary></summary>
      rxRTRTFXAML = 3,

      /// <summary></summary>
      rxRTREAssert = 4,

      /// <summary></summary>
      rxBVTDir = 5,

      /// <summary></summary>
      rxFileList = 6,

      /// <summary></summary>
      rxNumFiles = 7,

      /// <summary></summary>
      rxIndex = 8,

      /// <summary></summary>
      rxLogFile = 9,

      /// <summary></summary>
      rxLogPri0Only = 10,

      /// <summary></summary>
      rxUseXCVT = 11,

      /// <summary></summary>
      rxSumary = 12
   };

   /// <summary>
   /// 
   /// </summary>
   public struct sCommand
   {
      /// <summary>
      /// 
      /// </summary>
      public rxCommands cmd;

      /// <summary>
      /// Location in the args list to find string to go with param
      /// </summary>
      /// 
      public int argParam;
   };

   /// <summary>
   /// 
   /// </summary>
   public class RtfXamlViewApp : Application
   {
      /// <summary>
      /// 
      /// </summary>
      /// <param name="args"></param>
      public RtfXamlViewApp(string[] args)
      {
         _args = args;
         _pathFileIndex = 0;
         _szLogFile = null;
         _szBVTDir = null;
         _appCommands = null;
         _szSumaryFile = null;
         _fBVTRun = false;

         Process thisProc = Process.GetCurrentProcess();
         _szAppPath = Path.GetDirectoryName(thisProc.MainModule.FileName);
         _ini = new CInifile(_szAppPath + "\\rtfxamlview.ini");
         ProcessCmdLineArgs();
      }

      #region Start-up/Application Init related methods
      /// <summary>
      /// 
      /// </summary>
      protected void ProcessCmdLineArgs()
      {
         int cCmds = 0;
         //first count the number of command args
         for (int i = 0; i < _args.Length; i++)
         {
            if (_args[i].StartsWith(@"/", StringComparison.OrdinalIgnoreCase) ||
               _args[i].StartsWith(@"\", StringComparison.OrdinalIgnoreCase) ||
               _args[i].StartsWith(@"-", StringComparison.OrdinalIgnoreCase))
            {
                //count only commandline args which we understand
                if ( ((_args[i].Substring(1, _args[i].Length - 1))=="f") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "BVTDir") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "NumFiles") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "Index") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "LogFile") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "LogPri0Only") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "UseXCVT") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "FileList") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "Sumary") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "RTRtf") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "RTRtfXaml") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "RTXaml") ||
                    ((_args[i].Substring(1, _args[i].Length - 1)) == "REAssert"))
                {
                    cCmds++;
                }
                else
                {
                    continue;
                }                
            }

         }
         //Next allocate sCommand array of correct size
         _appCommands = new sCommand[cCmds];

         //parse through args and fill our command array.
         #region
         int thisCmd = 0;
         for (int i = 0; i < _args.Length; i++)
         {
            if (_args[i].StartsWith(@"/", StringComparison.OrdinalIgnoreCase) ||
               _args[i].StartsWith(@"\", StringComparison.OrdinalIgnoreCase) ||
               _args[i].StartsWith(@"-", StringComparison.OrdinalIgnoreCase))
            {
               switch (_args[i])
               {
                  case @"\f":
                  case @"/f":
                  case @"-f":
                     {
                        //open file command
                        _appCommands[thisCmd].cmd = rxCommands.rxOpenFile;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                  case @"\BVTDir":
                  case @"/BVTDir":
                  case @"-BVTDir":
                     {
                        //assing BVTDir
                        _appCommands[thisCmd].cmd = rxCommands.rxBVTDir;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                  case @"\NumFiles":
                  case @"/NumFiles":
                  case @"-NumFiles":
                     {
                        //Number of files to run
                        _appCommands[thisCmd].cmd = rxCommands.rxNumFiles;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                  case @"\Index":
                  case @"/Index":
                  case @"-Index":
                     {
                        //Index of files to run
                        _appCommands[thisCmd].cmd = rxCommands.rxIndex;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                  case @"\LogFile":
                  case @"/LogFile":
                  case @"-LogFile":
                     {
                        //open file command
                        _appCommands[thisCmd].cmd = rxCommands.rxLogFile;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                 case @"\LogPri0Only":
                 case @"/LogPri0Only":
                 case @"-LogPri0Only":
                     {
                         //open file command
                         _appCommands[thisCmd].cmd = rxCommands.rxLogPri0Only;
                         _appCommands[thisCmd].argParam = ++i;
                         thisCmd++;
                         break;
                     }
                 case @"\UseXCVT":
                 case @"/UseXCVT":
                 case @"-UseXCVT":
                     {
                         //open file command
                         _appCommands[thisCmd].cmd = rxCommands.rxUseXCVT;
                         _appCommands[thisCmd].argParam = ++i;
                         thisCmd++;
                         break;
                     }
                  case @"\FileList":
                  case @"/FileList":
                  case @"-FileList":
                     {
                        //List of Specific Files to run
                        _appCommands[thisCmd].cmd = rxCommands.rxFileList;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                  case @"\Sumary":
                  case @"/Sumary":
                  case @"-Sumary":
                     {
                        //List of Specific Files to run
                        _appCommands[thisCmd].cmd = rxCommands.rxSumary;
                        _appCommands[thisCmd].argParam = ++i;
                        thisCmd++;
                        break;
                     }
                  //BVT Test Types
                  case @"\RTRtf":
                  case @"/RTRtf":
                  case @"-RTRtf":
                     {
                        //RTF Round Trip
                        _appCommands[thisCmd].cmd = rxCommands.rxRTRtf;
                        thisCmd++;
                        break;
                     }
                  case @"\RTRtfXaml":
                  case @"/RTRtfXaml":
                  case @"-RTRtfXaml":
                     {
                        //RTF to XAML Compare
                        _appCommands[thisCmd].cmd = rxCommands.rxRTRTFXAML;
                        thisCmd++;
                        break;
                     }
                  case @"\RTXaml":
                  case @"/RTXaml":
                  case @"-RTXaml":
                     {
                        //XAML Round Trip
                        _appCommands[thisCmd].cmd = rxCommands.rxRTXaml;
                        thisCmd++;
                        break;
                     }
                  case @"\REAssert":
                  case @"/REAssert":
                  case @"-REAssert":
                     {
                        //RTF pasting assert test
                        _appCommands[thisCmd].cmd = rxCommands.rxRTREAssert;
                        thisCmd++;
                        break;
                     }
               }//switch
            }//if
         }//for
         #endregion
      }

      /// <summary>
      /// 
      /// </summary>
      /// <param name="szListFile"></param>
      protected void ParseFileList(string szListFile)
      {
         int Count = 0;
         StreamReader sr = new StreamReader(szListFile);
         string szFiles = sr.ReadToEnd();
         string[] rgFiles = szFiles.Split(new Char[] { ',' });
         _fileInfo = new FileInfo[rgFiles.Length];
         foreach (string sz in rgFiles)
         {
            _fileInfo[Count] = new FileInfo(sz);
            Count++;
         }
      }

      /// <summary>
      /// 
      /// </summary>
      protected void ExecuteCommands()
      {
         //If any BVT task is selected, run that task and exit the app
         if (_appCommands.Length > 0)
         {
            //first, check to see if we are just going to open a specific 
            //file, if so, set it up and do it, otherwise handle bvt tasks
            //and shutdown. 
            if (_appCommands[0].cmd == rxCommands.rxOpenFile)
            {
               _filename = _args[_appCommands[0].argParam];
            }
            else
            {
               //ok, first check for filelist, index, bvtdir stuff.                
               #region
               for (int i = 0; i < _appCommands.Length; i++)
               {
                  switch (_appCommands[i].cmd)
                  {
                     case rxCommands.rxBVTDir:
                        {
                           _szBVTDir = _args[_appCommands[i].argParam];
                           _ini._szBVTPath = _szBVTDir;
                           break;
                        }
                     case rxCommands.rxFileList:
                        {
                           ParseFileList(_args[_appCommands[i].argParam]);
                           break;
                        }
                     case rxCommands.rxIndex:
                        {
                           _pathFileIndex = uint.Parse(_args[_appCommands[i].argParam]);
                           break;
                        }
                     case rxCommands.rxLogFile:
                        {
                           _szLogFile = _args[_appCommands[i].argParam];
                           _ini._szLogFilePath = _szLogFile;
                           break;
                        }
                    case rxCommands.rxLogPri0Only:
                        {
                            _szLogPri0Only = _args[_appCommands[i].argParam] == "1" ? true : false;
                            _ini._fLogPri = _args[_appCommands[i].argParam] == "1" ? true : false;
                            break;
                        }
                    case rxCommands.rxUseXCVT:
                        {
                            _szUseXCVT = _args[_appCommands[i].argParam] == "1" ? true : false;
                            _ini._fUseXCVT = _args[_appCommands[i].argParam] == "1" ? true : false;
                            break;
                        }
                     case rxCommands.rxNumFiles:
                        {
                           _cNumFilesToRun = uint.Parse(_args[_appCommands[i].argParam]);
                           break;
                        }
                     case rxCommands.rxSumary:
                        {
                           _szSumaryFile = _args[_appCommands[i].argParam];
                           break;
                        }
                  }
               }
               #endregion
               
               //Now run Appropriat bvt on files.
               for (int i = 0; i < _appCommands.Length; i++)
               {
                  switch (_appCommands[i].cmd)
                  {
                     case rxCommands.rxRTREAssert:
                        {
                           _fCMDLineRun = true;
                           _fBVTRun = true;
                           OnTestRERtfToXamlASSERTBVT(new object(), new RoutedEventArgs());
                           break;
                        }
                     case rxCommands.rxRTRtf:
                        {
                           _fCMDLineRun = true;
                           _fBVTRun = true;
                           OnTestRtfRoundTripBVT(new object(), new RoutedEventArgs());
                           break;
                        }
                     case rxCommands.rxRTRTFXAML:
                        {
                           _fCMDLineRun = true;
                           _fBVTRun = true;
                           OnTestRtfToXamlBVT(new object(), new RoutedEventArgs());
                           break;
                        }
                     case rxCommands.rxRTXaml:
                        {
                           _fCMDLineRun = true;
                           _fBVTRun = true;
                           OnTestXAMLRoundTripBVT(new object(), new RoutedEventArgs());
                           break;
                        }
                  }
               }
               
               this.Shutdown();
            }
         }
      }

      /// <summary>
      /// 
      /// </summary>
      /// <param name="e"></param>
      protected override void OnStartup(StartupEventArgs e)
      {
         InitializeMainWindow();

         _mainWindow.Show();

         _rtfPanel.GetWindow().Load += new EventHandler(_rtfPanel_Load);
         _rtfPanel.GetWindow().Show();         
         
         _xamlPanel.GetWindow().Left = _mainWindow.Left + (double)_rtfPanel.GetWindow().Width;
         _xamlPanel.GetWindow().Top = _mainWindow.Top + _mainWindow.ActualHeight;
         _xamlPanel.GetWindow().Show();

         _mainWindow.Focus();

         //Main Window Events
         _mainWindow.StateChanged += new EventHandler(OnMainWindowStateChanged);
         _mainWindow.Activated += new EventHandler(OnMainWindowActivated);

         //Converter Buttons Events
         _convertPanel.RtfToXamlButton.Click += new RoutedEventHandler(OnRtfToXamlClick);
         _convertPanel.XamlToRtfButton.Click += new RoutedEventHandler(OnXamlToRtfClick);

         // Uncomment out the following line to make the converter pass
         // XAML directly to the Avalon RichTextBox (rather than use the clipboard and IDataObjects)
         //_xamlPanel.UseCopyPaste(false);

         this.Exit += new ExitEventHandler(RtfXamlView_Exit);

         //if there were any command line tasks, do them now.
         if (_appCommands.Length > 0)
         {
            ExecuteCommands();
         }
      }

      void _rtfPanel_Load(object sender, EventArgs e)
      {
          _rtfPanel.GetWindow().Location = new System.Drawing.Point((int)_mainWindow.Left, (int)_mainWindow.Top + (int)_mainWindow.ActualHeight);
      }

      private void InitializeMainWindow()
      {
         ShutdownMode = ShutdownMode.OnMainWindowClose;

         _mainWindow = new Window();
         _mainWindowTitle = "Rtf/Xaml Viewer";
         _mainWindow.Title = _mainWindowTitle;

         _mainWindow.Background = new SolidColorBrush(Color.FromRgb(153, 198, 241));
         _mainWindow.SizeToContent = SizeToContent.WidthAndHeight;
         _mainWindow.ResizeMode = ResizeMode.CanMinimize;

         // setup layout grid
         Grid grid = new Grid();

         // Add row for text views
         grid.RowDefinitions.Add(new RowDefinition());
         // Add row for logging panel
         grid.RowDefinitions.Add(new RowDefinition());

         _logPanel = new LogPanel();

         // Add the rtf and xaml plain-text views to the grid
         Grid textGrid = InitializeTextGrid(_logPanel);
         Grid.SetRow(textGrid, 0);
         grid.Children.Add(textGrid);

         // Add logging panel
         Grid.SetRow(_logPanel, 1);
         grid.Children.Add(_logPanel);

         grid.RowDefinitions.Add(new RowDefinition());

         // store all the window contents in a dockpanel
         DockPanel topPanel = new DockPanel();

         // Setup Menu
         Menu menu = InitializeMenu();
         menu.SetValue(DockPanel.DockProperty, Dock.Top);

         // Add menu and grid to the topPanel
         topPanel.Children.Add(menu);
         topPanel.Children.Add(grid);

         _mainWindow.Content = topPanel;
      }

      private Grid InitializeTextGrid(LogPanel messageBox)
      {
         Grid grid = new Grid();
         ColumnDefinition colDefinition;

         // column for the RTF view panel
         colDefinition = new ColumnDefinition();
         grid.ColumnDefinitions.Add(colDefinition);

         // column for the cross format conversion panel
         colDefinition = new ColumnDefinition();
         grid.ColumnDefinitions.Add(colDefinition);

         // column for the XAML view panel
         colDefinition = new ColumnDefinition();
         grid.ColumnDefinitions.Add(colDefinition);

         _rtfPanel = new RtfPanel(messageBox);
         Grid.SetColumn(_rtfPanel, 0);

         _convertPanel = new ConvertButtonsPanel();
         Grid.SetColumn(_convertPanel, 1);
         grid.Children.Add(_convertPanel);


         _xamlPanel = new XamlPanel(messageBox);
         Grid.SetColumn(_xamlPanel, 2);

         grid.Children.Add(_rtfPanel);
         grid.Children.Add(_xamlPanel);

         return grid;
      }

      private Menu InitializeMenu()
      {
         Menu menu = new Menu();

         LinearGradientBrush menuBackground = new LinearGradientBrush();
         menuBackground.StartPoint = new Point(0, 0);
         menuBackground.EndPoint = new Point(0, 1);
         GradientStop gs = new GradientStop(Color.FromRgb(153, 198, 241), 1);

         menuBackground.GradientStops.Add(gs);
         gs = new GradientStop(Color.FromRgb(88, 147, 222), 0);
         menuBackground.GradientStops.Add(gs);
         menu.Background = menuBackground;

         #region Menu - File
         MenuItem fileMenu = new MenuItem();
         fileMenu.Header = "_File";
         MenuItem fileOpenMenuItem = new MenuItem();
         fileOpenMenuItem.Header = "_Open";
         fileOpenMenuItem.Click += new RoutedEventHandler(OnFileMenuOpen);
         fileMenu.Items.Add(fileOpenMenuItem);

         MenuItem fileSaveRtfMenuItem = new MenuItem();
         fileSaveRtfMenuItem.Header = "Save _Rtf Plaintext";
         fileSaveRtfMenuItem.Click += new RoutedEventHandler(OnFileMenuSaveAsRtf);
         fileMenu.Items.Add(fileSaveRtfMenuItem);

         MenuItem fileSaveXamlMenuItem = new MenuItem();
         fileSaveXamlMenuItem.Header = "Save _Xaml Plaintext";
         fileSaveXamlMenuItem.Click += new RoutedEventHandler(OnFileMenuSaveAsXaml);
         fileMenu.Items.Add(fileSaveXamlMenuItem);

         MenuItem fileResetMenuItem = new MenuItem();
         fileResetMenuItem.Header = "_Reset";
         fileResetMenuItem.Click += new RoutedEventHandler(OnFileMenuReset);
         fileMenu.Items.Add(fileResetMenuItem);

         MenuItem fileBVTMenuItem = new MenuItem();
         fileBVTMenuItem.Header = "_BVT";
         fileBVTMenuItem.Click += new RoutedEventHandler(OnFileMenuBVT);
         fileMenu.Items.Add(fileBVTMenuItem);
         #endregion

         #region Menu - Test
         MenuItem testMenu = new MenuItem();
         testMenu.Header = "_Test";

         MenuItem testCompareRtfToXamlMenuItem = new MenuItem();
         testCompareRtfToXamlMenuItem.Header = "Rtf To Xaml Compare";
         testCompareRtfToXamlMenuItem.Click += new RoutedEventHandler(OnTestCompareRtfToXaml);
         testMenu.Items.Add(testCompareRtfToXamlMenuItem);

         MenuItem testRtfRoundTrip = new MenuItem();
         testRtfRoundTrip.Header = "_RtfRoundTrip BVT";
         testRtfRoundTrip.Click += new RoutedEventHandler(OnTestRtfRoundTripBVT);
         testMenu.Items.Add(testRtfRoundTrip);

         MenuItem testRtfXamlBVT = new MenuItem();
         testRtfXamlBVT.Header = "_RtfXaml BVT";
         testRtfXamlBVT.Click += new RoutedEventHandler(OnTestRtfToXamlBVT);
         testMenu.Items.Add(testRtfXamlBVT);

         MenuItem testRtfRoundTripOnce = new MenuItem();
         testRtfRoundTripOnce.Header = "_RTFRoundTrip this file";
         testRtfRoundTripOnce.Click += new RoutedEventHandler(OnTestRTRtf);
         testMenu.Items.Add(testRtfRoundTripOnce);

         MenuItem testREAssertBVT = new MenuItem();
         testREAssertBVT.Header = "_RE Assert BVT";
         testREAssertBVT.Click += new RoutedEventHandler(OnTestRERtfToXamlASSERTBVT);
         testMenu.Items.Add(testREAssertBVT);

         MenuItem testRTXAMLBVT = new MenuItem();
         testRTXAMLBVT.Header = "_XAML Round trip BVT";
         testRTXAMLBVT.Click += new RoutedEventHandler(OnTestXAMLRoundTripBVT);
         testMenu.Items.Add(testRTXAMLBVT);

         MenuItem testOptions = new MenuItem();
         testOptions.Header = "_Options";
         testOptions.Click += new RoutedEventHandler(OnTestOptions);
         testMenu.Items.Add(testOptions);
         #endregion

         #region Menu - RichEdit
         MenuItem rtbMenu = new MenuItem();
         rtbMenu.Header = "_RichEdit";

         MenuItem rtbRichTextToCLPMenuItem = new MenuItem();
         rtbRichTextToCLPMenuItem.Header = "RichText To Clipboard";
         rtbRichTextToCLPMenuItem.Click += new RoutedEventHandler(OnRtbTextToClp);

         MenuItem rtbgotoCPMenuItem = new MenuItem();
         rtbgotoCPMenuItem.Header = "RichText Goto CP";
         rtbgotoCPMenuItem.Click += new RoutedEventHandler(OnRtbGotoCP);
         rtbMenu.Items.Add(rtbRichTextToCLPMenuItem);
         rtbMenu.Items.Add(rtbgotoCPMenuItem);
         #endregion

         #region Menu - Xaml
         MenuItem xamlMenu = new MenuItem();
         xamlMenu.Header = "_Xaml";

         MenuItem xamlTextToCLPMenuItem = new MenuItem();
         xamlTextToCLPMenuItem.Header = "xaml To Clipboard";
         xamlTextToCLPMenuItem.Click += new RoutedEventHandler(OnXamlTextToClp);

         MenuItem xamlgotoCPMenuItem = new MenuItem();
         xamlgotoCPMenuItem.Header = "xaml goto CP";
         xamlgotoCPMenuItem.Click += new RoutedEventHandler(OnXamlGotoCP);

         xamlMenu.Items.Add(xamlTextToCLPMenuItem);
         xamlMenu.Items.Add(xamlgotoCPMenuItem);
         #endregion

         #region remaining menu init
         //Menu - Prev
         _prevFileMenuItem = new MenuItem();
         _prevFileMenuItem.Header = "_PrevFile";
         _prevFileMenuItem.IsEnabled = false;
         _prevFileMenuItem.Click += new RoutedEventHandler(OnMainMenuPrev);

         //Menu - Next
         _nextFileMenuItem = new MenuItem();
         _nextFileMenuItem.Header = "_NextFile";
         _nextFileMenuItem.IsEnabled = false;
         _nextFileMenuItem.Click += new RoutedEventHandler(OnMainMenuNext);

         //Main Menu
         menu.Items.Add(fileMenu);
         menu.Items.Add(_prevFileMenuItem);
         menu.Items.Add(_nextFileMenuItem);
         menu.Items.Add(testMenu);
         menu.Items.Add(rtbMenu);
         menu.Items.Add(xamlMenu);
         #endregion

         return menu;
      }
      #endregion

      #region Window related methods
      private void UpdateMainWindowTitle()
      {
         if (null != _mainWindow)
         {
            _mainWindow.Title = System.IO.Path.GetFileName(_filename) + " - " + _mainWindowTitle;
         }
      }
      #endregion

      #region File Related methods
      /// <summary>
      /// 
      /// </summary>
      /// <param name="filename"></param>
      /// <returns></returns>
      public ConverterError LoadFile(string filename)
      {
         string fileContent = "";
         string loadingText = "Loading " + _filename + ": ";
         ConverterError err = new ConverterError();
         err.errortype = ConverterErrorType.ErrorNone;

         #region load the file into a string
         try
         {
            using (StreamReader sr = new StreamReader(filename))
            {
               _logPanel.LogInfo(loadingText + "Reading file...");
               fileContent = sr.ReadToEnd();
               sr.Close();
            }
         }
         catch (Exception x)
         {
            _logPanel.LogError(x.Message);
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
            return err;
         }
         #endregion

         if (fileContent != "")
         {
            //Set the name of the loaded file
            _filename = filename;
            UpdateMainWindowTitle();

            #region Rtf file handling
            // first character of rtf file must be an open-brace
            if (fileContent[0] == '{')
            {

               using (FileStream fileOpenStream = new FileStream(filename, FileMode.Open, FileAccess.Read))
               {
                  _logPanel.LogInfo(loadingText + "Reading file...");
                  // read the file in as ANSI (otherwise StreamReader will mess up the conversion to Unicode)
                  BinaryReader br = new BinaryReader(fileOpenStream);
                  byte[] rtfBytesAnsi = br.ReadBytes((int)br.BaseStream.Length);
                  Encoding rtfEncoding = Encoding.GetEncoding(1252);
                  fileContent = rtfEncoding.GetString(rtfBytesAnsi);
                  br.Close();
                  fileOpenStream.Close();
               }

               _logPanel.LogInfo(loadingText + "Setting rtf plaint text...");
               if (!_fBVTRun)
               {
                  _rtfPanel.SetPlainText(fileContent, true);
                  err = ConvertRtfToXaml();
               }
               else
               {
                  _rtfPanel.SetRichEditContents(fileContent);
                  err = ConvertRTFFileToXaml(fileContent);
               }
            }
            #endregion
            #region Xaml File Handling
            else// try to treat it like XAML
            {
               if (!_fBVTRun)
               {
                  _logPanel.LogInfo(loadingText + "Setting xaml plaint text...");
                  _xamlPanel.SetPlainText(fileContent, true);
                  err = ConvertXamlToRtf();
               }
               else
               {
                  //Load the file directly into the Controls as quickly 
                  //as possible.
                  try
                  {
                     try
                     {
                        _xamlPanel.SetXaml(fileContent);
                     }
                     catch
                     {
                           //if the above didn'tt work, then try to load the document 
                           //via the clipboard
                           UTF8Encoding encoder = new UTF8Encoding();
                           byte[] bytes = encoder.GetBytes(fileContent);
                           Clipboard.SetData(DataFormats.Xaml, new MemoryStream(bytes));
                           _xamlPanel.GetRichTextBox().Paste();
                     }
                     
                     //Now Load the RE ctrl.
                     if (_ini._fUseXCVT)
                     {
                        //note this will also load the RE control with the converted rtf.
                        err = ConvertXamlFileToRtfViaReflection(fileContent);
                     }
                     else//utilize the clipboard to load richedit control.
                     {
                        _rtfPanel.SetRichEditContents(_xamlPanel.GetXamlAsRTF());
                     }
                  }
                  catch (Exception e)
                  {
                     err.errortype = ConverterErrorType.ErrorException;
                     err.ExceptionText = e.Message;
                  }
               }
            }
            #endregion
         }
         else
         {
            _logPanel.LogError("File is empty: " + filename);
            err.errortype = ConverterErrorType.ErrorFile;
         }
         return err;
      }
      #endregion

      #region Menu events / methods
      private void UpdatePrevNextMenuItems()
      {
         if (_pathFileIndex < 2)
            _prevFileMenuItem.IsEnabled = false;
         else
            _prevFileMenuItem.IsEnabled = true;

         if (_pathFileIndex < _fileInfo.Length)
            _nextFileMenuItem.IsEnabled = true;
         else
            _nextFileMenuItem.IsEnabled = false;
      }

      private void OnFileMenuOpen(object sender, RoutedEventArgs e)
      {
         System.Windows.Forms.OpenFileDialog openDialog = new System.Windows.Forms.OpenFileDialog();
         openDialog.Multiselect = false;
         openDialog.Filter = "Valid Files (*.rtf;*.xaml)|*.rtf;*.xaml|RTF files (*.rtf)|*.rtf|XAML files (*.xaml)|*.xaml|All files (*.*)|*.*";
         openDialog.Title = "Open RTF or XAML File";

         System.Windows.Forms.DialogResult result = openDialog.ShowDialog();
         if (result == System.Windows.Forms.DialogResult.OK)
         {
            LoadFile(openDialog.FileName);

            //Create list of files in the path
            DirectoryInfo di = new DirectoryInfo(System.IO.Path.GetDirectoryName(openDialog.FileName));
            _fileInfo = di.GetFiles("*" + System.IO.Path.GetExtension(openDialog.FileName));

            _pathFileIndex = 0;

            //Find current file
            string fnTemp = System.IO.Path.GetFileName(_filename);
            foreach (FileInfo fiTemp in _fileInfo)
            {
               ++_pathFileIndex;
               if (fiTemp.Name == fnTemp)
               break;
            }
            UpdatePrevNextMenuItems();
         }
      }

      private void OnFileMenuReset(object sender, RoutedEventArgs e)
      {
         _mainWindow.Title = _mainWindowTitle;
         _rtfPanel.Reset();
         _xamlPanel.Reset();
         _logPanel.Clear();
      }

      private void OnFileMenuSaveAsXaml(object sender, RoutedEventArgs e)
      {
         System.Windows.Forms.SaveFileDialog saveDialog = new System.Windows.Forms.SaveFileDialog();
         System.Windows.Forms.DialogResult result;
         saveDialog.InitialDirectory = System.Windows.Forms.Application.ExecutablePath;
         saveDialog.Filter = "XAML files (*.xaml)|*.xaml|All files (*.*)|*.*";
         saveDialog.AddExtension = true;
         saveDialog.Title = "Save XAML Plaintext";

         result = saveDialog.ShowDialog();
         if (result == System.Windows.Forms.DialogResult.OK)
         {
            try
            {
               using (StreamWriter sw = new StreamWriter(saveDialog.FileName))
               {
                  sw.Write(_xamlPanel.GetPlainText());
                  sw.Close();
               }
            }
            catch (Exception x)
            {
               _logPanel.Text = "Error: " + ": " + x.Message;
               return;
            }
         }

         _filename = saveDialog.FileName;
         UpdateMainWindowTitle();
      }

      private void OnFileMenuSaveAsRtf(object sender, RoutedEventArgs e)
      {
         System.Windows.Forms.SaveFileDialog saveDialog = new System.Windows.Forms.SaveFileDialog();
         System.Windows.Forms.DialogResult result;
         saveDialog.InitialDirectory = System.Windows.Forms.Application.ExecutablePath;
         saveDialog.Filter = "RTF files (*.rtf)|*.rtf|All files (*.*)|*.*";
         saveDialog.AddExtension = true;
         saveDialog.Title = "Save RTF Plaintext";

         result = saveDialog.ShowDialog();
         if (result == System.Windows.Forms.DialogResult.OK)
         {
            try
            {
               using (StreamWriter sw = new StreamWriter(saveDialog.FileName))
               {
                  sw.Write(_rtfPanel.GetPlainText());
                  sw.Close();
               }
            }
            catch (Exception x)
            {
               _logPanel.Text = "Error: " + x.Message;
               return;
            }
         }

         _filename = saveDialog.FileName;
         UpdateMainWindowTitle();
      }

      // For now, automation is kicked off from the UI. Later on, this can be seperated out
      // into a command line, and xcvtaut.cs can be moved into a dll that can be shared with
      // other automation frameworks. 
      private void OnFileMenuBVT(object sender, RoutedEventArgs e)
      {
         _logPanel.Clear();
         _logPanel.Text = "Running old RTF Round trip BVT ...";
         _fBVTRun = true;
         //Create list of files in the path
         _fileInfo = GetFiles();
         _pathFileIndex = 0;
         int cFailures = 0;
         ErrorLog elErrors = null;
         xcvtaut xa = new xcvtaut(this, ref elErrors);
         
          //$comment:leaving stream in this test while I complete dev and testing on new compare tests.
         StreamWriter sw = new StreamWriter(_ini._szLogFilePath + "\\bvt.log", false, System.Text.Encoding.Unicode);
         foreach (FileInfo fiTemp in _fileInfo)
         {
            ++_pathFileIndex;
            if (false == xa.CompareRtfRoundtrip(_fileInfo[_pathFileIndex - 1].FullName, ref sw))
               cFailures++;
            OnFileMenuReset(sender, e);
         }
         string bvtlog = "Failures:\t" + cFailures.ToString() +
                 "\r\n" + "Total files:\t" + _pathFileIndex.ToString();
         sw.WriteLine(bvtlog);
         sw.Close();
         _logPanel.Text = "BVT finnished.";
      }

      #region Test Menu Items
      private void OnTestCompareRtfToXaml(object sender, RoutedEventArgs e)
      {
         ErrorLog elErrors = new ErrorLog(_ini._fLogPri, _ini._szLogFilePath + "\\cmp_rtf_xaml "
             + Path.GetFileName(_filename) + ".log", _szSumaryFile);
         xcvtaut xa = new xcvtaut(this, ref elErrors);
         elErrors.BeginCase(_filename);
         if (xa.CompareRtfToXaml() == 0)
         {
            _logPanel.Text = "Compare had no fails.";
         }
         else
         {
            _logPanel.Text = "Compare had fails.";
         }
         elErrors.EndCase();
      }
      private void OnTestRTRtf(object sender, RoutedEventArgs e)
      {
         ConverterError err = new ConverterError();
         OnFileMenuReset(sender, e);
         ErrorLog Errors = new ErrorLog(_ini._fLogPri, _ini._szLogFilePath + "\\cmp_rtrtf "
             + Path.GetFileName(_filename) + ".log", _szSumaryFile);
         xcvtaut xa = new xcvtaut(this, ref Errors);
         Errors.BeginCase(_filename);
         try
         {
            err = LoadFile(_filename);
            if (xa.NewCompareRtfRoundTrip() > 0)
            {
               _logPanel.Text = "Compare had fails.";
            }
            else
            {
               _logPanel.Text = "Compare had no fails.";
            }
         }
         catch (Exception exc)
         {
            string szError = "AF: " + exc.Message;
            Errors.LogError(ConverterErrorType.ErrorException, 0, szError);
            _logPanel.Text = "Exception occured during Compare: " + exc.Message;
            OnFileMenuReset(sender, e);
         }
         Errors.EndCase();
      }
      
      private void OnTestRtfToXamlBVT(object sender, RoutedEventArgs e)
      {
         ConverterError cnvError;
         string szLogFile;
         //Create list of files in the path
         
         //If this is a CMDLine run, then _file info might have been 
         //filled already. If not, but if not target BVT folder is 
         //selected or loaded, then just use whatever user last had selected
         if ((_fileInfo == null) || (_fileInfo.Length == 0))
         {
            _fileInfo = GetFiles();
            _pathFileIndex = 0;
         }
         int cFailures = 0;
         if (_fCMDLineRun && (_szLogFile != null))
         {
            szLogFile = _szLogFile;
         }
         else
         {
            szLogFile = _ini._szLogFilePath + "\\RtfToXamlBVT.log";
         }
         _fBVTRun = true;
         ErrorLog Errors = new ErrorLog(_ini._fLogPri, szLogFile, _szSumaryFile);
         xcvtaut xa = new xcvtaut(this, ref Errors);
         if ((!_fCMDLineRun) || (_cNumFilesToRun == 0))
         {
            _cNumFilesToRun = (uint)_fileInfo.Length;
         }
         for (uint i = 0; ((i < _cNumFilesToRun) &&
               ((_pathFileIndex + i) < _fileInfo.Length)); i++)
         {
            _filename = _fileInfo[_pathFileIndex + i].FullName;
            Errors.BeginCase(_filename);
            cnvError = LoadFile(_filename);
            if (cnvError.errortype == ConverterErrorType.ErrorNone)
            {
               try
               {
                  cFailures = xa.CompareRtfToXaml();
               }
               catch (Exception exc)
               {
                  cnvError.errortype = ConverterErrorType.ErrorException;
                  cnvError.ExceptionText = exc.Message;
               }
            }
            if (cnvError.errortype != ConverterErrorType.ErrorNone)
            {
               string szError = "AF: " + cnvError.ExceptionText;
               Errors.LogError(ConverterErrorType.ErrorException, 0, szError);
               cFailures++;
            }
            Errors.EndCase();
            OnFileMenuReset(sender, e);
         }

         Errors.EndRun();//write out sumary info

         if (!_fCMDLineRun)
         {
            _logPanel.Clear();
            _logPanel.Text = "Finished Run.";
         }
      }

      private void OnTestRERtfToXamlASSERTBVT(object sender, RoutedEventArgs e)
      {
         ConverterError cnvError;
         string szLogFile;
         //Create list of files in the path
         
         //If this is a CMDLine run, then _file info might have been 
         //filled already. If not, but if not target BVT folder is 
         //selected or loaded, then just use whatever user last had selected
         if ((_fileInfo == null) || (_fileInfo.Length == 0))
         {
            _fileInfo = GetFiles();
            _pathFileIndex = 0;
         }
         int cFailures = 0;
         if (_fCMDLineRun && (_szLogFile != null))
         {
            szLogFile = _szLogFile;
         }
         else
         {
            szLogFile = _ini._szLogFilePath + "\\RERtfToXamlASSERTBVT.log";
         }

         _fBVTRun = true;
         ErrorLog Errors = new ErrorLog(_ini._fLogPri, szLogFile, _szSumaryFile);
         xcvtaut xa = new xcvtaut(this, ref Errors);
         if ((!_fCMDLineRun) || (_cNumFilesToRun == 0))
         {
            _cNumFilesToRun = (uint)_fileInfo.Length;
         }

         for (uint i = 0; ((i < _cNumFilesToRun) &&
               ((_pathFileIndex + i) < _fileInfo.Length)); i++)
         {
            _filename = _fileInfo[_pathFileIndex + i].FullName;
            Errors.BeginCase(_filename);
            cnvError = LoadFile(_filename);

            if (cnvError.errortype == ConverterErrorType.ErrorException)
            {
               string szError = "AF: " + cnvError.ExceptionText;
               Errors.LogError(ConverterErrorType.ErrorException, 0, szError);
               cFailures++;
            }
            else if (cnvError.errortype != ConverterErrorType.ErrorNone)
            {
               Errors.LogError(ConverterErrorType.ErrorException, 0, "Unable to load file.");
               cFailures++;
            }
            Errors.EndCase();
            OnFileMenuReset(sender, e);
         }

         Errors.EndRun();//write out sumary info
         if (!_fCMDLineRun)
         {
            _logPanel.Clear();
            _logPanel.Text = "Finnished Run.";
         }
      }

      private void OnTestRtfRoundTripBVT(object sender, RoutedEventArgs e)
      {
         ConverterError cnvError;
         string szLogFile;
         //Create list of files in the path
         
         //If this is a CMDLine run, then _file info might have been 
         //filled already. If not, but if not target BVT folder is 
         //selected or loaded, then just use whatever user last had selected
         if ((_fileInfo == null) || (_fileInfo.Length == 0))
         {
            _fileInfo = GetFiles();
            _pathFileIndex = 0;
         }
         int cFailures = 0;
         if (_fCMDLineRun && (_szLogFile != null))
         {
            szLogFile = _szLogFile;
         }
         else
         {
            szLogFile = _ini._szLogFilePath + "\\rtRTFBVT.log";
         }
         _fBVTRun = true;
         ErrorLog Errors = new ErrorLog(_ini._fLogPri, szLogFile, _szSumaryFile);
         xcvtaut xa = new xcvtaut(this, ref Errors);
         if ((!_fCMDLineRun) || (_cNumFilesToRun == 0))
         {
            _cNumFilesToRun = (uint)_fileInfo.Length;
         }
         for (uint i = 0; ((i < _cNumFilesToRun) &&
               ((_pathFileIndex + i) < _fileInfo.Length)); i++)
         {
            _filename = _fileInfo[_pathFileIndex + i].FullName;
            Errors.BeginCase(_filename);
            cnvError = LoadFile(_filename);
            if (cnvError.errortype == ConverterErrorType.ErrorNone)
            {
               try
               {
                  cFailures = xa.NewCompareRtfRoundTrip();
               }
               catch (Exception ExRTRTF)
               {
                  Errors.LogError(ConverterErrorType.ErrorException, 0, ExRTRTF.Message);
                  cFailures++;
               }
            }
            else
            {
               Errors.LogError(ConverterErrorType.ErrorFile, 0, "Unable to load file.");
               cFailures++;
            }
            Errors.EndCase();
            OnFileMenuReset(sender, e);
         }

         Errors.EndRun();//write out sumary info

         if (!_fCMDLineRun)
         {
            _logPanel.Clear();
            _logPanel.Text = "Finnished Run.";
         }
      }
      
      private void OnTestXAMLRoundTripBVT(object sender, RoutedEventArgs e)
      {
         ConverterError cnvError;
         string szLogFile;
         //Create list of files in the path
         
         //If this is a CMDLine run, then _file info might have been 
         //filled already. If not, but if not target BVT folder is 
         //selected or loaded, then just use whatever user last had selected
         if ((_fileInfo == null) || (_fileInfo.Length == 0))
         {
            _fileInfo = GetFiles();
            _pathFileIndex = 0;
         }

         int cFailures = 0;
         if (_fCMDLineRun && (_szLogFile != null))
         {
            szLogFile = _szLogFile;
         }
         else
         {
            szLogFile = _ini._szLogFilePath + "\\rtXAMLBVT.log";
         }

         _fBVTRun = true;
         ErrorLog Errors = new ErrorLog(_ini._fLogPri, szLogFile, _szSumaryFile);
         xcvtaut xa = new xcvtaut(this, ref Errors);

         if ((!_fCMDLineRun) || (_cNumFilesToRun == 0))
         {
            _cNumFilesToRun = (uint)_fileInfo.Length;
         }

         for (uint i = 0; ((i < _cNumFilesToRun) &&
               ((_pathFileIndex + i) < _fileInfo.Length)); i++)
         {
            _filename = _fileInfo[_pathFileIndex + i].FullName;
            Errors.BeginCase(_filename);
            cnvError = LoadFile(_filename);
            if (cnvError.errortype == ConverterErrorType.ErrorNone)
            {
               try
               {
                  cFailures += xa.CompareXamlRoundtrip();
               }
               catch (Exception ExRTXaml)
               {
                  Errors.LogError(ConverterErrorType.ErrorException, 0, ExRTXaml.Message);
                  cFailures++;
               }
            }
            else
            {
               Errors.LogError(ConverterErrorType.ErrorFile, 0, "Unable to load file.");
               cFailures++;
            }
            Errors.EndCase();
            OnFileMenuReset(sender, e);
         }

         Errors.EndRun();//write out sumary info

         if (!_fCMDLineRun)
         {
            _logPanel.Clear();
            _logPanel.Text = "Finnished Run.";
         }
      }

      private void OnTestOptions(object sender, RoutedEventArgs e)
      {
         Options dlg = new Options(ref _ini);
         dlg.ShowDialog();
         dlg.Dispose();
      }
      #endregion//Test Menu Items

      #region Richedit menu Items
      private void OnRtbTextToClp(object sender, RoutedEventArgs e)
      {
         _rtfPanel.GetRichTextBox().SelectAll();
         _rtfPanel.GetRichTextBox().Copy();
         _rtfPanel.GetRichTextBox().Select(0, 0);
      }

      private void OnRtbGotoCP(object sender, RoutedEventArgs e)
      {
         gotocp dlg = new gotocp(_rtfPanel.GetRichTextBox().SelectionStart);
         dlg.ShowDialog();
         _rtfPanel.GetRichTextBox().SelectionStart = dlg.m_GetCP();
         _rtfPanel.GetRichTextBox().SelectionLength = 0;
         _rtfPanel.GetRichTextBox().Focus();
         dlg.Dispose();
      }
      #endregion

      #region xaml menu Items
      private void OnXamlTextToClp(object sender, RoutedEventArgs e)
      {
         TextPointer tp = _xamlPanel.GetRichTextBox().Selection.Start;
         _xamlPanel.GetRichTextBox().SelectAll();
         _xamlPanel.GetRichTextBox().Copy();
         _xamlPanel.GetRichTextBox().Selection.Select(tp, tp);
      }

      //there is problems with this function currently.
      private void OnXamlGotoCP(object sender, RoutedEventArgs e)
      {
         System.Windows.Controls.RichTextBox xamlTextBox = _xamlPanel.GetRichTextBox();
         TextPointer start = xamlTextBox.Document.ContentStart;
         TextPointer CurrentSel = xamlTextBox.Selection.Start;
         int currentCP = CurrentSel.GetOffsetToPosition(start);
         gotocp dlg = new gotocp(currentCP);
         dlg.ShowDialog();

         TextPointer end = xamlTextBox.Document.ContentEnd;
         TextRange tr = new TextRange(start, end);
         xamlTextBox.CaretPosition = start.GetPositionAtOffset(dlg.m_GetCP());
         dlg.Dispose();
      }
      #endregion

      private void OnMainMenuPrev(object sender, RoutedEventArgs e)
      {
         //Should not be here if the index is 1
         --_pathFileIndex;

         UpdatePrevNextMenuItems();
         LoadFile(_fileInfo[_pathFileIndex - 1].FullName);
      }

      private void OnMainMenuNext(object sender, RoutedEventArgs e)
      {
         //Should not be here if the index is _fileInfo.Length
         ++_pathFileIndex;

         UpdatePrevNextMenuItems();
         LoadFile(_fileInfo[_pathFileIndex - 1].FullName);
      }
      #endregion

      #region Application Events
      private void RtfXamlView_Exit(object sender, ExitEventArgs e)
      {
         _ini.SaveSettings();
         this.Shutdown();
      }
      #endregion

      #region Main Window Events
      void OnMainWindowStateChanged(object sender, EventArgs e)
      {
         if (WindowState.Minimized == _mainWindow.WindowState)
         {
            _rtfPanel.GetWindow().Visible = false;
            _xamlPanel.GetWindow().Visibility = Visibility.Hidden;
         }
         else
         {
            _rtfPanel.GetWindow().Visible = true;
            _xamlPanel.GetWindow().Visibility = Visibility.Visible;
         }
      }

      void OnMainWindowActivated(object sender, EventArgs e)
      {
         //This is bad but until we figure out how to place
         //both form and uielement in the same window, it will
         //help us navigating
         // commmented out for now - the newer builds of Avalon infinite loop with this code
         // when dismissing the file open dialog
         //_mainWindow.Activated -= new EventHandler(OnMainWindowActivated);
         //_rtfPanel.GetWindow().Focus();
         //_xamlPanel.GetWindow().Focus();
         //_mainWindow.Focus();
         //_mainWindow.Activated += new EventHandler(OnMainWindowActivated);

      }
      #endregion

      #region Rtf / Xaml Conversion Events
      void OnXamlToRtfClick(object sender, RoutedEventArgs e)
      {
         ConvertXamlToRtf();
      }

      void OnRtfToXamlClick(object sender, RoutedEventArgs e)
      {
         ConvertRtfToXaml();
      }
      #endregion

      #region Rtf / Xaml Conversion Helpers
      /// <summary>
      /// 
      /// </summary>
      /// <returns></returns>
      public System.Windows.Forms.RichTextBox GetRETextBox()
      {
         return _rtfPanel.GetRichTextBox();
      }

      /// <summary>
      /// 
      /// </summary>
      /// <returns></returns>
      public System.Windows.Controls.RichTextBox GetXamlTextBox()
      {
         return _xamlPanel.GetRichTextBox();
      }

      #region XamlToRtf

      /// <summary>
      /// 
      /// </summary>
      /// <returns></returns>
      public ConverterError ConvertXamlToRtf()
      {
         ConverterError err = new ConverterError();
         string szRTF;
         err.errortype = ConverterErrorType.ErrorNone;
         try
         {
            _logPanel.LogInfo("Converting XAML to RTF...");
            _rtfPanel.Reset();
            if (_ini._fUseXCVT)
            {
               UTF8Encoding encoder = new UTF8Encoding();
               byte[] bytes = encoder.GetBytes(_xamlPanel.GetPlainText());
               szRTF = ConvertXamlToRtfViaReflection(new MemoryStream(bytes));
            }
            else
            {
               _xamlPanel.GetRichTextBox().SelectAll();
               _xamlPanel.GetRichTextBox().Copy();
               IDataObject ido = Clipboard.GetDataObject();
               szRTF = ido.GetData("Rich Text Format").ToString();
            }
            if (!_fBVTRun)
            {
               _rtfPanel.SetPlainText(szRTF, true);
            }
         }
         catch (Exception x)
         {
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
            _logPanel.LogError(x.Message);
         }
         return err;
      }

      /// <summary>
      /// 
      /// </summary>
      /// <returns></returns>
      public ConverterError SendXamlContentToRECtrl()
      {
         ConverterError err = new ConverterError();
         err.errortype = ConverterErrorType.ErrorNone;
         try
         {
            _rtfPanel.Reset();
            
            //Gather the XAML from the control
            //via clibboard
            if (_ini._fUseXCVT)
            {
               string szXaml = _xamlPanel.GetXaml();
               UTF8Encoding encoder = new UTF8Encoding(); 
               byte[] bytes = encoder.GetBytes(szXaml);
               string szRTF = ConvertXamlToRtfViaReflection(new MemoryStream(bytes));
               _rtfPanel.SetRichEditContents(szRTF);
            }
            else//use reflection methods
            {
               _rtfPanel.SetRichEditContents(_xamlPanel.GetXamlAsRTF());
            }
         }
         catch (Exception x)
         {
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
         }
         return err;
      }
 
      //Going from XAML to rtf is a bit tricky as richedit doesn't 
      //convert from xaml to to rtf, so either we invoke converter 
      //through reflection or use the cliboard. This method can only
      //use the reflection method.
      /// <summary>
      /// 
      /// </summary>
      /// <param name="szXamlFileContent"></param>
      /// <returns></returns>
      public ConverterError ConvertXamlFileToRtfViaReflection(string szXamlFileContent)
      {
         string szRTF;
         ConverterError err = new ConverterError();
         err.errortype = ConverterErrorType.ErrorNone;
         try
         {
            _rtfPanel.Reset();
            if (_ini._fUseXCVT)
            {
               UTF8Encoding encoder = new UTF8Encoding();
               byte[] bytes = encoder.GetBytes(szXamlFileContent);
               szRTF = ConvertXamlToRtfViaReflection(new MemoryStream(bytes));
            }
            else
            {
               _xamlPanel.GetRichTextBox().SelectAll();
               _xamlPanel.GetRichTextBox().Copy();
               IDataObject ido = Clipboard.GetDataObject();
               szRTF = ido.GetData("Rich Text Format").ToString();
            }
            _rtfPanel.SetRichEditContents(szRTF);
         }
         catch (Exception x)
         {
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
         }
         return err;
      }

      // convert the xaml to RTF using XCVT like methods (instead of RichTextBox copy/paste).
      private static string ConvertXamlToRtfViaReflection(Stream streamXaml)
      {
         try
         {
            using (StreamReader xamlTextReader = new StreamReader(streamXaml))
            {
               // Get XamlRtfConverter type and get the internal ConvertXamlToRtf method
               System.Reflection.Assembly assemblyFrameworkPresentation =
                   System.Reflection.Assembly.GetAssembly(typeof(System.Windows.FrameworkElement));
               Type xamlRtfConverterType =
                   assemblyFrameworkPresentation.GetType("System.Windows.Documents.XamlRtfConverter");

               System.Reflection.MethodInfo convertXamlToRtf =
                   xamlRtfConverterType.GetMethod("ConvertXamlToRtf",
                   System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
               if (convertXamlToRtf == null)
               {
                  Console.WriteLine("ERROR: XCVT: Fail to access ConvertXamlToRtf property.\n");
                  return string.Empty;
               }

               object xamlRtfConverterInstance = Activator.CreateInstance(xamlRtfConverterType, true/*nonPublic*/);
               if (xamlRtfConverterInstance == null)
               {
                  Console.WriteLine("ERROR: XCVT: Fail to create xamlRtfConverter instance.\n");
                  return string.Empty;
               }

               // Converts xaml to rtf by using XamlRtfConverter
               string rtfContent =
                   (string)convertXamlToRtf.Invoke(xamlRtfConverterInstance, new object[] { xamlTextReader.ReadToEnd() });

               // Return rtf content as string
               return rtfContent;
            }
         }
         catch (System.IO.IOException)
         {
            Console.WriteLine("ERROR: XCVT: file is not acessible.\n");
         }
         return string.Empty;
      }
      #endregion

      #region RtfToXaml
      
      /// <summary>
      ///   used with File Open and next file, etc, but not for BVT's.
      /// </summary>
      /// <returns></returns>
      public ConverterError ConvertRtfToXaml()
      {
         ConverterError err = new ConverterError();
         err.errortype = ConverterErrorType.ErrorNone;
         try
         {
            _logPanel.LogInfo("Converting RTF to XAML...");
            if (_ini._fUseXCVT)
            {
               Encoding rtfEncoding = Encoding.GetEncoding(1252);
               byte[] bytes = rtfEncoding.GetBytes(_rtfPanel.GetPlainText());
               string sz = ConvertRtfToXamlViaReflection(new MemoryStream(bytes));
               if (string.Empty == sz)
               {
                  err.errortype = ConverterErrorType.ErrorFile;
                  _xamlPanel.SetPlainText("", true);
               }
               else
                  _xamlPanel.SetPlainText(sz, true);
            }
            else
            {
               err = _xamlPanel.SetRTF(_rtfPanel.GetPlainText(), true);
            }
         }
         catch (Exception x)
         {
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
            _logPanel.LogError(x.Message);
         }
         return err;
      }

      // Converts rtf content to xaml content.
      private static string ConvertRtfToXamlViaReflection(Stream fileOpenStream)
      {
         // Get XamlRtfConverter type and get the internal ForceParagraph and ConvertRtfToXaml methods
         System.Reflection.Assembly assemblyFrameworkPresentation =
             System.Reflection.Assembly.GetAssembly(typeof(System.Windows.FrameworkElement));
         Type xamlRtfConverterType =
             assemblyFrameworkPresentation.GetType("System.Windows.Documents.XamlRtfConverter");

         System.Reflection.PropertyInfo forceParagraphPropertyInfo =
             xamlRtfConverterType.GetProperty("ForceParagraph",
             System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
         if (forceParagraphPropertyInfo == null)
         {
            return string.Empty;
         }
         System.Reflection.MethodInfo forceParagraphMethodInfo = forceParagraphPropertyInfo.GetSetMethod(true);
         if (forceParagraphMethodInfo == null)
         {
            return string.Empty;
         }
         System.Reflection.MethodInfo convertRtfToXaml =
             xamlRtfConverterType.GetMethod("ConvertRtfToXaml",
             System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
         if (convertRtfToXaml == null)
         {
            return string.Empty;
         }

         object xamlRtfConverterInstance = Activator.CreateInstance(xamlRtfConverterType, true);
         if (xamlRtfConverterInstance == null)
         {
            return string.Empty;
         }

         // Set ForceParagraph to XamlRtfConverter
         // Note that setting this to false makes it behave differently than XCVT, which sets it to true.
         // Terry will handle the last paragraph a little differently if this is on or off, sometimes
         // leading to bugs.
         forceParagraphMethodInfo.Invoke(xamlRtfConverterInstance, new object[] { false });

         BinaryReader rtfBinaryReader = new BinaryReader(fileOpenStream);

         // Get rtf content as string from rtf binary reader
         byte[] rtfBytes = new byte[rtfBinaryReader.BaseStream.Length];
#pragma warning disable CA2022 // Avoid inexact read
         rtfBinaryReader.BaseStream.Read(rtfBytes, 0, rtfBytes.Length);
#pragma warning restore CA2022
         Encoding rtfEncoding = Encoding.GetEncoding(RtfCodePage);
         string rtfContent = rtfEncoding.GetString(rtfBytes);

         // Converts rtf to xaml by using XamlRtfConverter
         string xamlContent = (string)convertRtfToXaml.Invoke(xamlRtfConverterInstance,
             new object[] { rtfContent });

         if (xamlContent.Length > 0)
         {
             return xamlContent;
         }
         else
         {
             return string.Empty;
         }
      }

      /// <summary>
      ///  Loads the input string into the XAML Control
      //         This function assumes the string is an ansi string,
      //         if calling review how LoadFile reads in the file to 
      //         get a similar string.
      /// </summary>
      /// <param name="szRtfFileContent"></param>
      /// <returns></returns>
      public ConverterError ConvertRTFFileToXaml(string szRtfFileContent)
      {
         ConverterError err = new ConverterError();
         err.errortype = ConverterErrorType.ErrorNone;
         try
         {
            if (_ini._fUseXCVT)
            {
               Encoding rtfEncoding = Encoding.GetEncoding(1252);
               byte[] bytes = rtfEncoding.GetBytes(szRtfFileContent);
               string sz = ConvertRtfToXamlViaReflection(new MemoryStream(bytes));
               if (string.Empty == sz)
               {
                  err.errortype = ConverterErrorType.ErrorFile;
                  _xamlPanel.GetWindow().Content = "";
               }
               else
               {
                 err =  _xamlPanel.SetXaml(sz);
               }
            }
            else
            {
               err = _xamlPanel.SetRTF(szRtfFileContent, false);
            }
         }
         catch (Exception x)
         {
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
         }
         return err;
      }


      // takes the richedit content from the richedit control,
      // converts it to xaml, via either reflection or 
      // copy/paste and loads the xaml control with it.
      // currently it is intended for BVT's and doesn't
      // update the plaintext controls on either pannel.
      /// <summary>
      /// 
      /// </summary>
      /// <returns></returns>
      public ConverterError SendREContentToXamlCtrl()
      {
         ConverterError err = new ConverterError();
         err.errortype = ConverterErrorType.ErrorNone;
         try
         {
            //Gather the rtf from the control
            string szRtf = _rtfPanel.GetRichEditContentsRtf();

            if (!_ini._fUseXCVT)
            {
               //SetRtf builds an IDataObject from the supplied rtf
               //and pastes it into the control.
               _xamlPanel.SetRTF(_rtfPanel.GetRichEditContentsRtf(), false);
            }
            else//use reflection methods
            {
               Encoding rtfEncoding = Encoding.GetEncoding(1252);
               byte[] bytes = rtfEncoding.GetBytes(szRtf);
               string sz = ConvertRtfToXamlViaReflection(new MemoryStream(bytes));
               if (string.Empty == sz)
               {
                  err.errortype = ConverterErrorType.ErrorFile;
                  _xamlPanel.Reset();
               }
               else
               {
                  err = _xamlPanel.SetXaml(sz);
               }
            }
         }
         catch (Exception x)
         {
            err.errortype = ConverterErrorType.ErrorException;
            err.ExceptionText = x.Message;
         }
         return err;
      }
      #endregion

      private FileInfo[] GetFiles()
      {
         DirectoryInfo di = new DirectoryInfo(_ini._szBVTPath);
         FileInfo[] fiRtf = di.GetFiles("*.rtf",
            (_ini._fBVTSubDir ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly));
         FileInfo[] fiXaml = di.GetFiles("*.xaml",
             (_ini._fBVTSubDir ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly));
         FileInfo[] fi = new FileInfo[fiRtf.Length + fiXaml.Length];
         if (fiRtf.Length > 0)
            fiRtf.CopyTo(fi, 0);
         if (fiXaml.Length > 0)
             fiXaml.CopyTo(fi, fiRtf.Length);
         return fi;
      }

      #endregion

      #region Private Fields
      // Window related
      private Window _mainWindow;
      private string _mainWindowTitle;

      // Panels (children of the main window)
      private RtfPanel _rtfPanel;
      private XamlPanel _xamlPanel;
      private ConvertButtonsPanel _convertPanel;
      private LogPanel _logPanel;

      // Currently opened file
      private string _filename;

      //stored app settings
      CInifile _ini;
      string _szAppPath;//path to rtfxamlview
      string[] _args;//command line args
      sCommand[] _appCommands;//our tokenized version of commandline args
      /// <summary></summary>
      public string _szLogFile;//logfile name to use for our errorlog
      string _szBVTDir;//command line assigned BVT dir. 
      bool _szLogPri0Only; //whether to log pri:0 failures only.
      bool _szUseXCVT;
      uint _cNumFilesToRun;
      string _szSumaryFile;
      bool _fCMDLineRun;
      
      //this flag triggers optimizations like not loading the 
      //plain text controls with converted text.      
      bool _fBVTRun;

      //for Terry's converter code
      private const int RtfCodePage = 1252;

      // For navigating through list of files in currently opened dir
      private uint _pathFileIndex;//index into fileList to start processing files or BVTDir list files
      private FileInfo[] _fileInfo;

      // Accessible menu items
      MenuItem _prevFileMenuItem;
      MenuItem _nextFileMenuItem;
      #endregion
   }
}