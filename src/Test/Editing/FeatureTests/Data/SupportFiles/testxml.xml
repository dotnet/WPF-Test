<?xml version='1.0'?>
<TestData>
<!--
This file has test cases organized in the following categories.

Commanding
Clipboard
DragDrop
EditRouter
KeyNavigationTest
Mouse selection
Selection
SelectionService
SimpleTextDesigner
TextBox
TextOM TextRange
TextOM TextSelection
External dependencies

-->

  <RandomCaretWalker>
    <MainXaml><![CDATA[<?Mapping XmlNamespace="medians" ClrNamespace="System.Windows.Media" Assembly="PresentationCore" ?>
<DockPanel
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:mil="medians"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xml:space="preserve">
  <TextBox Width="1000" Height="700" Name="TextBox1" AcceptsReturn="true" TextWrapping="NoWrap" FontFamily="Courier New"/>
</DockPanel>]]>
    </MainXaml>
    <!--TestIterations Value="100" /-->
    <!--KeySequence Value="Delete | Right | Left | Right | Down | Right | Left | Down | Left | Up" /-->
    <!--Seed Value="-416132434" /-->
    <Debug Value="false" />
    <TestString Value="
Ninety-five victims were identified - many of them children whose shattered,
bloodied bodies were placed on lines of stretchers - and Interfax quoted unnamed sources in the
Russian authorities insisted that the militants initiated Friday's violence as emergency teams entered the school,
 with the hostage-takers' permission,

Twenty militants were killed in more than 10 hours of gunfights with security forces, 10 of them Arabs, Valery Andreyev
region's Federal Security Service chief, said in televised comments. Putin's adviser on Chechnya, Aslanbek Aslakhanov

" />
  </RandomCaretWalker>

  <RandomCaretWalker2>
    <MainXaml><![CDATA[<?Mapping XmlNamespace="medians" ClrNamespace="System.Windows.Media" Assembly="PresentationCore" ?>
<Canvas
xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <RichTextBox
        Name="RichTextBox1"
        FontFamily="Courier New"
        Width = "1000"
        Height = "800"
><Paragraph /></RichTextBox>
</Canvas>
]]>
    </MainXaml>
    <!--TestIterations Value="100" /-->
    <!--KeySequence Value="Delete | Right | Left | Right | Down | Right | Left | Down | Left | Up" /-->
    <!--Seed Value="-416132434" /-->
    <Debug Value="false" />
    <TestString Value="
Ninety-five victims were identified - many of them children whose shattered,
bloodied bodies were placed on lines of stretchers - and Interfax quoted unnamed sources in the
Russian authorities insisted that the militants initiated Friday's violence as emergency teams entered the school,
 with the hostage-takers' permission,

Twenty militants were killed in more than 10 hours of gunfights with security forces, 10 of them Arabs, Valery Andreyev
region's Federal Security Service chief, said in televised comments. Putin's adviser on Chechnya, Aslanbek Aslakhanov

" />
  </RandomCaretWalker2>

  <Commanding-ReproRegression_Bug396>
    <!-- TestTactics: 70. TestBugs: Regression_Bug396. -->
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="AcceptsReturn" />
      <Param Value="True" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="abcd{HOME}{ENTER}{UP}+{END}" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^c^v^v" />
    </Action>
  </Commanding-ReproRegression_Bug396>

  <EditCommandText-Canvas-TextBox-AllCommand>
    <!-- TestTactics: 71-->
    <ContainerType1    Value="Canvas" />
  </EditCommandText-Canvas-TextBox-AllCommand>

  <EditCommandText-Canvas-RichTextBox-AllCommand>
    <!-- TestTactics: 72-->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <ContainerType1    Value="Canvas" />
  </EditCommandText-Canvas-RichTextBox-AllCommand>

  <!-- Test cases for Commanding end here. -->

  <!-- Test cases for Clipboard start here. -->

  <ClipboardTestCase-RichTextBox>
    <!-- TestTactics:33-->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <ContainerType1    Value="Canvas" />
  </ClipboardTestCase-RichTextBox>

  <CustomClipboardData-RichTextBox>
    <!-- TestTactics:38-->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <ContainerType1    Value="Canvas" />
  </CustomClipboardData-RichTextBox>

  <ClipboardLeak/>

  <!-- Test cases for Clipboard start here. -->

  <!-- Test cases for DragDrop start here. -->
  <DragDropUIText-Repro>
    <!--For manual repro purpose-->
    <ContainerType1    Value="Canvas" />
    <Xaml2             Value="TextBoxInsidePanel2.xaml" />
    <ContainerType2    Value="DockPanel" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossApp" />
    <TestAction        Value="a" />
    <AfterDrop         Value="abc" />
  </DragDropUIText-Repro>

  <DragDropUIText-Canvas-CrossContainer-TTFT>
    <!-- TestTactics: 73 -->
    <!-- Verify cannot drag text if AllowDrag is set to false -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <AllowDragDrop     Value="TTFT" />
    <TestAction        Value="TTFT" />
  </DragDropUIText-Canvas-CrossContainer-TTFT>

  <DragDropUIText-Canvas-CrossContainer-TTTF>
    <!-- TestTactics: 74 -->
    <!-- Verify cannot drop text if AllowDrop is set to false -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <AllowDragDrop     Value="TTTF" />
    <TestAction        Value="TTTF" />
  </DragDropUIText-Canvas-CrossContainer-TTTF>

  <DragDropUIText-Canvas-SameContainer-DragDrop>
    <!-- TestTactics: 75 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <AfterDrop         Value=" defabc" />
    <TestAction        Value="DragDrop" />
  </DragDropUIText-Canvas-SameContainer-DragDrop>

  <DragDropUIText-Canvas-SameContainer-DragDropEsc>
    <!-- TestTactics: 76 -->
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <TestAction        Value="DragDropEsc" />
  </DragDropUIText-Canvas-SameContainer-DragDropEsc>

  <DragDropUIText-Canvas-SameContainer-DragDropCopy>
    <!-- TestTactics: 77 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <AfterDropCopy     Value="abc defabc" />
    <TestAction        Value="DragDropCopy" />
  </DragDropUIText-Canvas-SameContainer-DragDropCopy>

  <DragDropUIText-Canvas-SameContainer-DragDropOnSelf>
    <!-- TestTactics: 78 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <TestAction        Value="DragDropOnSelf" />
  </DragDropUIText-Canvas-SameContainer-DragDropOnSelf>

  <DragDropUIText-Canvas-CrossContainer-DragDrop>
    <!-- TestTactics: 79 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <AfterDrop         Value="abc" />
    <TestAction        Value="DragDrop" />
    <AfterDropBack     Value=" defabc" />
  </DragDropUIText-Canvas-CrossContainer-DragDrop>

  <DragDropUIText-Canvas-CrossContainer-DragDropEsc>
    <!-- TestTactics: 80 -->
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <TestAction        Value="DragDropEsc" />
  </DragDropUIText-Canvas-CrossContainer-DragDropEsc>

  <DragDropUIText-Canvas-CrossContainer-DragDropCopy>
    <!-- TestTactics: 81 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <TestAction        Value="DragDropCopy" />
  </DragDropUIText-Canvas-CrossContainer-DragDropCopy>

  <DragDropUIText-Canvas-CrossContainer-DragDropOnSelf>
    <!-- TestTactics: 82 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <TestAction        Value="DragDropOnSelf" />
  </DragDropUIText-Canvas-CrossContainer-DragDropOnSelf>

  <DragDropUIText-Canvas-CrossApp-DockPanel-DragDrop>
    <!-- TestTactics: 83 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <Xaml2             Value="TextBoxInsidePanel2.xaml" />
    <ContainerType2    Value="DockPanel" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossApp" />
    <TestAction        Value="DragDrop" />
    <AfterDrop         Value="abc" />
  </DragDropUIText-Canvas-CrossApp-DockPanel-DragDrop>

  <DragDropUIText-Canvas-CrossApp-FlowPanel-DragDropEsc>
    <!-- TestTactics: 84 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <Xaml2             Value="TextBoxInsidePanel2.xaml" />
    <ContainerType2    Value="StackPanel" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossApp" />
    <TestAction        Value="DragDropEsc" />
  </DragDropUIText-Canvas-CrossApp-FlowPanel-DragDropEsc>

  <DragDropUIText-Canvas-CrossApp-GridPanel-DragDropCopy>
    <!-- TestTactics: 85 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <Xaml2             Value="TextBoxInsidePanel2.xaml" />
    <ContainerType2    Value="Grid" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossApp" />
    <TestAction        Value="DragDropCopy" />
    <AfterDrop         Value="abc" />
  </DragDropUIText-Canvas-CrossApp-GridPanel-DragDropCopy>

  <DragDropUIText-Canvas-SameContainer-Bold>
    <!-- TestTactics: 86 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def.
    line two.
    line three.
    line four." />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <TestAction        Value="Bold" />
  </DragDropUIText-Canvas-SameContainer-Bold>

  <DragDropUIText-Canvas-SameContainer-Italic>
    <!-- TestTactics: 87 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def.
    line two.
    line three.
    line four." />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <TestAction        Value="Italic" />
  </DragDropUIText-Canvas-SameContainer-Italic>

  <DragDropUIText-Canvas-SameContainer-Atomic>
    <!-- TestTactics: 88 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def.
    line two.
    line three.
    line four." />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <TestAction        Value="Atomic" />
  </DragDropUIText-Canvas-SameContainer-Atomic>

  <DragDropUIText-Canvas-SameContainer-Underline>
    <!-- TestTactics: 89 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def.
    line two.
    line three.
    line four." />
    <ExpectedSelection Value="abc" />
    <Container         Value="SameContainer" />
    <TestAction        Value="Underline" />
  </DragDropUIText-Canvas-SameContainer-Underline>

  <DragDropUIText-Canvas-CrossContainer-Regression_Bug303>
    <!-- TestTactics: 90 Regression_Bug303 -->
    <Combinations>
      <Dimension Name="EditableType">
        <Value Text="RichTextBox" />
      </Dimension>
    </Combinations>
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Container         Value="CrossContainer" />
    <AfterDrop         Value="abc d" />
    <TestAction        Value="Regression_Bug303" />
  </DragDropUIText-Canvas-CrossContainer-Regression_Bug303>

  <DragDropUIText-Canvas-CrossIEinWinForm-FlowPanelGridPanel-DragDrop>
    <!-- TestTactics: 91 -->
    <InputMonitorEnabled Value="false" />
    <ContainerType1    Value="Canvas" />
    <InputText         Value="abc def" />
    <ExpectedSelection Value="abc" />
    <Xaml2             Value="PanelPanel.xaml" />
    <RootContainer2    Value="Canvas" />
    <ChildContainer3   Value="Grid" />
    <Container         Value="CrossIEinWinForm" />
    <TestAction        Value="DragDrop" />
  </DragDropUIText-Canvas-CrossIEinWinForm-FlowPanelGridPanel-DragDrop>

  <!-- Test cases for DragDrop end here. -->

  <!-- Test cases for EditRouter start here. -->

  <EditRouterAddRemove-Comb>
    <Combinations>
      <Dimension Name="ScopeTypeName">
        <Value Text="System.Windows.ContentElement" />
        <Value Text="System.Windows.UIElement" />
      </Dimension>
      <Dimension Name="HookedEvent">
        <Value Text="Click" />
        <Value Text="Keyboard" />
      </Dimension>
    </Combinations>
  </EditRouterAddRemove-Comb>

  <!-- Test cases for EditRouter end here. -->


  <!-- Test cases for KeyNavigationTest start here. -->
  <KeyNavigationTest--InputBasic--English--TextBoxChildOfDockPanel>
      <KeystrokeString Value="This is a test" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--InputBasic--English--TextBoxChildOfDockPanel>
  <KeyNavigationTest--StyledTextBox--English>
      <MainXaml><![CDATA[<?Mapping XmlNamespace="medians" ClrNamespace="MSAvalon.Windows.Media" Assembly="PresentationCore" ?>
          <Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
              <DockPanel>
                 <TextBox DockPanel.Dock="Top" Name="TextBox1" />
              </DockPanel>
           </Grid>]]>
      </MainXaml>
      <KeystrokeString Value="This is a test" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--StyledTextBox--English>
  <KeyNavigationTest--Left--English>
      <KeystrokeString Value="This is a test{LEFT 3}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </KeyNavigationTest--Left--English>
  <KeyNavigationTest--Right--English>
      <KeystrokeString Value="This is a test{LEFT 3}{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a te" />
      <ExpectedStringOnCaretRight Value="st" />
  </KeyNavigationTest--Right--English>
  <KeyNavigationTest--Delete--English>
    <!-- TestTactics: 92. TestBugs: Regression_Bug397. -->
    <KeystrokeString Value="This is a test{LEFT 3}{DELETE}" />
    <ExpectedStringOnCaretLeft Value="This is a t" />
    <ExpectedStringOnCaretRight Value="st" />
  </KeyNavigationTest--Delete--English>
  <KeyNavigationTest--EnterDelete--English>
        <!-- TestTactics: 93. TestBugs: Regression_Bug398. -->
        <KeystrokeString Value="abc{ENTER}def{Left 2}+{LEFT}{DELETE}" />
        <ExpectedStringOnCaretLeft Value="abc
" />
        <ExpectedStringOnCaretRight Value="ef" />
  </KeyNavigationTest--EnterDelete--English>
  <KeyNavigationTest--Up--English>
      <KeystrokeString Value="This is a test{ENTER}This is a test this is a test{UP}" />
      <AcceptsReturn Value="true" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="
This is a test this is a test" />
  </KeyNavigationTest--Up--English>
  <KeyNavigationTest--Down--English>
      <KeystrokeString Value="This is a test this is a test{ENTER}This is a test{UP}{RIGHT 15}{DOWN}" />
      <AcceptsReturn Value="true" />
      <ExpectedStringOnCaretLeft Value="This is a test this is a test
This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--Down--English>
  <KeyNavigationTest--Backspace--English>
      <KeystrokeString Value="This is a test{LEFT 3}{BACKSPACE}" />
      <ExpectedStringOnCaretLeft Value="This is a " />
      <ExpectedStringOnCaretRight Value="est" />
  </KeyNavigationTest--Backspace--English>
  <KeyNavigationTest--Home--English>
      <KeystrokeString Value="This is a test{HOME}" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="This is a test" />
  </KeyNavigationTest--Home--English>
  <KeyNavigationTest--End--English>
      <KeystrokeString Value="This is a test{LEFT 3}{END}" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--End--English>
  <KeyNavigationTest--OtherKeysEmptyTextBox--English>
      <KeystrokeString Value="{HOME}{END}{LEFT}{RIGHT}{UP}{DOWN}{DELETE}{BACKSPACE}" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--OtherKeysEmptyTextBox--English>
  <KeyNavigationTest--Insert--English>
      <KeystrokeString Value="This is a test{LEFT 4}{INSERT}long string" />
      <ExpectedStringOnCaretLeft Value="This is a long string" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--Insert--English>
  <KeyNavigationTest--Enter--English>
      <KeystrokeString Value="This is the first line{ENTER}This is the second line{LEFT 23}" />
      <AcceptsReturn Value="true" />
      <ExpectedStringOnCaretLeft Value="This is the first line
" />
      <ExpectedStringOnCaretRight Value="This is the second line" />
  </KeyNavigationTest--Enter--English>
  <KeyNavigationTest--AltEnter--English>
      <KeystrokeString Value="This is a test^{ENTER}" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--AltEnter--English>
  <KeyNavigationTest--CtrlCCopyPaste--English>
      <KeystrokeString Value="This is a test{LEFT 4}+{LEFT 3}^c{RIGHT 5}^v" />
      <ExpectedStringOnCaretLeft Value="This is a test a " />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--CtrlCCopyPaste--English>
  <KeyNavigationTest--CtrlXCutPaste--English>
      <KeystrokeString Value="This is a test{LEFT 4}+{LEFT 3}^x{RIGHT 5}^v" />
      <ExpectedStringOnCaretLeft Value="This istest a " />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--CtrlXCutPaste--English>
  <KeyNavigationTest--CtrlZUndo--English>
      <KeystrokeString Value="This is a test{LEFT 4}+{LEFT 3}^x^z" />
      <ExpectedStringOnCaretLeft Value="This is" />
      <ExpectedStringOnCaretRight Value="test" />
  </KeyNavigationTest--CtrlZUndo--English>
  <KeyNavigationTest--CtrlHome--English>
      <KeystrokeString Value="This is the first line{ENTER}This is the second line{ENTER}This is the third line^{HOME}" />
      <AcceptsReturn Value="true" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="This is the first line
This is the second line
This is the third line" />
  </KeyNavigationTest--CtrlHome--English>
  <KeyNavigationTest--CtrlEnd--English>
      <KeystrokeString Value="This is the first line{ENTER}This is the second line{ENTER}This is the third line{UP 2}^{END}" />
      <AcceptsReturn Value="true" />
      <ExpectedStringOnCaretLeft Value="This is the first line
This is the second line
This is the third line" />
      <ExpectedStringOnCaretRight Value="" />
  </KeyNavigationTest--CtrlEnd--English>
  <KeyNavigationTest-ReproRegression_Bug399>
    <!-- TestTactics: 94,95. TestBugs: Regression_Bug399. -->
    <AcceptsReturn  Value="True" />
    <Steps>!EC:
    {ENTER}{ENTER}|LogSelection|
    {UP}{UP}|LogSelection|
    {DOWN}|LogSelection|
    {DOWN}|LogSelection|
    {UP}|LogSelection;SelectionStart=2|
    </Steps>
  </KeyNavigationTest-ReproRegression_Bug399>
  <KeyNavigationTest-ReproRegression_Bug400>
    <!-- TestTactics: 96. TestBugs: Regression_Bug400. -->
    <!--
    Verifies that after an End and Enter sequence, the caret
    is rendered in the correct line. This is done by comparing
    the first line to see if the caret remains on it after
    hitting Enter.
    -->
    <TestControl1Attributes Value='AcceptsReturn="True"' />
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="TBWrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="line one{ENTER}line two" />
    </Action>
    <!-- Capture the bitmap for the first line. -->
    <Action MethodName="CaptureElementLine" Name="ControlBitmap1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TBWrapper" />
      <Param Value="0" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{LEFT}{UP}{END}{ENTER}" />
    </Action>
    <!-- Capture the bitmap for the second line. -->
    <Action MethodName="CaptureElementLine" Name="ControlBitmap2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TBWrapper" />
      <Param Value="0" />
    </Action>
    <Action MethodName="VerifyBitmapsEqual" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="ControlBitmap1" />
      <Param RetrieveFromReturnValue="ControlBitmap2" />
    </Action>
  </KeyNavigationTest-ReproRegression_Bug400>
  <!-- Test cases for KeyNavigationTest end here. -->

  <!-- Test cases for Mouse click position start here -->
  <MouseClickToPositionCaret--Regression_Bug91--English>
      <MainXaml><![CDATA[<Border xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
<TextBox xml:space="preserve" Width="200px" Height="200px" Name="TextBox1">This is one line.
This is another.</TextBox>
</Border>]]>
      </MainXaml>
      <Action MethodName="GetArgument" Name="GetXamlData" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="MainXaml" />
      </Action>
      <Action MethodName="SetMainXaml" Name="SetXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param RetrieveFromReturnValue="GetXamlData"/>
      </Action>
      <Action MethodName="CreateTextWrapperForElement" Name="FindTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="TextBox1"/>
      </Action>
      <Action MethodName="FindElement" Name="FindTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="TextBox1"/>
      </Action>
      <Action Name="ClickOnUpperRight" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
          <Param Value="TextBox1" />
          <Param Value="UpperRight" />
      </Action>
      <Action Name="VerifyTextOnLeft" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifyTextOnCaretLeft">
          <Param RetrieveFromReturnValue="FindTextBox" />
          <Param Value="This is one line."/>
      </Action>
  </MouseClickToPositionCaret--Regression_Bug91--English>
  <!-- Test cases for Mouse click position end here -->

  <!-- Test cases for Mouse selection start here. -->
  <MouseSelectionTestSimple--English>
      <KeystrokeString Value="This is a test" />
      <ExpectedString Value="This is a test" />
      <ExpectedSelectedString Value="his is a" />
      <Action Name="GetKeystrokeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="KeystrokeString" />
      </Action>
      <Action Name="GetExpectedString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="ExpectedString" />
      </Action>
      <Action Name="CreateTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateEmptyDefaultTextBoxAsUIElement">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="SetFocusOnTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement" UseWorkerThread="true">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="GetKeystrokeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="GetKeystrokeString"/>
      </Action>
      <Action Name="VerifyTextBoxText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifyElementText">
          <Param RetrieveFromReturnValue="CreateTextBox"/>
          <Param RetrieveFromReturnValue="GetExpectedString"/>
      </Action>
      <Action Name="SelectCharLeftToRight" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SelectCharacterByMouse" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="CreateTextBox"/>
          <Param Value="LeftToRight" />
          <Param Value="1"/>
          <Param Value="9" />
      </Action>
      <Action Name="GetExpectedSelectedString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="ExpectedSelectedString" />
      </Action>
      <Action Name="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
          <Param RetrieveFromReturnValue="CreateTextBox"/>
          <Param RetrieveFromReturnValue="GetExpectedSelectedString"/>
      </Action>
      <Action Name="DismissOnRightKey" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString">
          <Param Value="{RIGHT}"/>
      </Action>
      <Action Name="SelectCharRightToLeft" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SelectCharacterByMouse" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="CreateTextBox"/>
          <Param Value="RightToLeft" />
          <Param Value="2"/>
          <Param Value="5" />
      </Action>
      <Action Name="VerifyFinalSelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
          <Param RetrieveFromReturnValue="CreateTextBox"/>
          <Param Value="is i"/>
      </Action>
  </MouseSelectionTestSimple--English>

  <MouseSelectionTestSimpleLargeFont--English>
      <KeystrokeString Value="This is a test" />
      <ExpectedString Value="This is a test" />
      <ExpectedSelectedString Value="his is a" />
      <MainXaml><![CDATA[<DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <TextBox Name="TextBox1" Width="1000" Height="500" FontSize="75pt" FontFamily="Trebuchet MS"></TextBox>
</DockPanel>]]>
      </MainXaml>
      <Action Name="GetKeystrokeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="KeystrokeString" />
      </Action>
      <Action Name="GetExpectedString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="ExpectedString" />
      </Action>
      <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="MainXaml" />
      </Action>
      <Action Name="LoadXaml" MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param RetrieveFromReturnValue="MainXamlData" />
      </Action>
      <Action Name="SetFocusOnTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement" UseWorkerThread="true">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="GetKeystrokeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="GetKeystrokeString"/>
      </Action>
      <Action MethodName="CreateTextWrapperForElement" Name="FindTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="TextBox1"/>
      </Action>
      <Action Name="VerifyTextBoxText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifyElementText">
          <Param RetrieveFromReturnValue="FindTextBox"/>
          <Param RetrieveFromReturnValue="GetExpectedString"/>
      </Action>
      <Action Name="SelectCharLeftToRight" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SelectCharacterByMouse" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="FindTextBox"/>
          <Param Value="LeftToRight" />
          <Param Value="1"/>
          <Param Value="9" />
      </Action>
      <Action Name="GetExpectedSelectedString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="ExpectedSelectedString" />
      </Action>
      <Action Name="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
          <Param RetrieveFromReturnValue="FindTextBox"/>
          <Param RetrieveFromReturnValue="GetExpectedSelectedString"/>
      </Action>
      <Action Name="DismissOnRightKey" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString">
          <Param Value="{RIGHT}"/>
      </Action>
      <Action Name="SelectCharRightToLeft" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SelectCharacterByMouse" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="FindTextBox"/>
          <Param Value="RightToLeft" />
          <Param Value="2"/>
          <Param Value="5" />
      </Action>
      <Action Name="VerifyFinalSelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
          <Param RetrieveFromReturnValue="FindTextBox"/>
          <Param Value="is i"/>
      </Action>
  </MouseSelectionTestSimpleLargeFont--English>


  <MultipleMouseSelectionTestSimple--English>
      <MainXaml><![CDATA[<?Mapping XmlNamespace="medians" ClrNamespace="MSAvalon.Windows.Media" Assembly="PresentationCore" ?>
          <DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mil="medians" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
              <TextBox Height="200" Width="400" Name="TextBox1"></TextBox>
              <TextBox Height="200" Width="400" Name="TextBox2"></TextBox>
          </DockPanel>]]>
      </MainXaml>
      <KeystrokeString Value="This is a test" />
      <ExpectedSelectedString Value="his is a test" />
      <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
        <Param Value="MainXaml" />
      </Action>
      <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
        <Param RetrieveFromReturnValue="MainXamlData" />
      </Action>
      <Action Name="GetKeystrokeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="KeystrokeString" />
      </Action>
      <Action Name="FindTextBox1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="FindTextBox2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
          <Param Value="TextBox2" />
      </Action>
      <Action Name="ClickTextBox1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="TypeInTextBox1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString">
          <Param RetrieveFromReturnValue="GetKeystrokeString"/>
      </Action>
      <Action Name="ClickTextBox2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
          <Param Value="TextBox2" />
      </Action>
      <Action Name="TypeInTextBox2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString">
          <Param RetrieveFromReturnValue="GetKeystrokeString"/>
      </Action>
      <Action Name="SelectCharacterInTextBox1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SelectCharacterByMouse" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="FindTextBox1"/>
          <Param Value="LeftToRight" />
          <Param Value="1"/>
          <Param Value="14" />
      </Action>
      <Action Name="PressControlKey" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="PressOrReleaseOneKey">
          <Param Value="{CTRL}" />
          <Param Value="true"/>
      </Action>
      <Action Name="SelectCharacterInTextBox2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SelectCharacterByMouse" UseWorkerThread="true">
          <Param RetrieveFromReturnValue="FindTextBox2"/>
          <Param Value="RightToLeft" />
          <Param Value="1"/>
          <Param Value="14" />
      </Action>
      <Action Name="ReleaseControlKey" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="PressOrReleaseOneKey">
          <Param Value="{CTRL}" />
          <Param Value="false"/>
      </Action>
      <Action Name="GetExpectedSelectedString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="ExpectedSelectedString" />
      </Action>
      <Action Name="VerifySelectedStringTextBox1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
          <Param RetrieveFromReturnValue="FindTextBox1"/>
          <Param RetrieveFromReturnValue="GetExpectedSelectedString"/>
      </Action>
      <Action Name="VerifySelectedStringTextBox2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
          <Param RetrieveFromReturnValue="FindTextBox2"/>
          <Param RetrieveFromReturnValue="GetExpectedSelectedString"/>
      </Action>
  </MultipleMouseSelectionTestSimple--English>

  <SpringLoadedPropertyTest--1>
      <MainXaml><![CDATA[<?Mapping XmlNamespace="medians" ClrNamespace="System.Windows.Media" Assembly="PresentationCore" ?>
          <DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mil="medians" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
              <RichTextBox Height="200" Width="400" Name="RichTextBox1"/>
          </DockPanel>]]>
      </MainXaml>
      <InitialStringContent Value="This is black text" />
      <TestString Value="This is red text" />
      <ExpectedString Value="This is red text" />
  </SpringLoadedPropertyTest--1>

  <MouseSelection-ClickWhitespace>
    <!-- TestTactics: 97. TestBugs: Regression_Bug401. -->
    <!--
    Verifies that a TextBox containing only whitespace can receive
    clicks in its run and position the caret appropriately.
    -->
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="TBWrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="            "/>
    </Action>
    <Action MethodName="FindElement" Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1"/>
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 15 10" />
    </Action>
    <Action Name="TB1SelectionStart" MethodName="GetProperty" Type="StaticMethod" ClassName="Test.Uis.Utils.ReflectionUtils">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="SelectionStart" />
    </Action>
    <Action MethodName="VerifyGreaterThan" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="5" ConvertTo="System.Int32" />
      <Param RetrieveFromReturnValue="TB1SelectionStart" />
      <Param Value="minimum for selection start" />
    </Action>
  </MouseSelection-ClickWhitespace>

  <MouseSelectionTest-Alignments>
    <!-- TestTactics: 98. TestBugs: Regression_Bug402. -->
    <!--
    Verifies that mouse selection works with text with
    different horizontal alignments.
    (do not confuse with right-to-left editing).
    -->
    <Combinations>
      <Dimension Name="Alignment">
        <Value Text="Left" />
        <Value Text="Right" />
        <Value Text="Center" />
        <Value Text="Justify" />
        <Value Text="Start" />
        <Value Text="End" />
      </Dimension>
    </Combinations>
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="TBWrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="GetArgument" Name="Alignment" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="Alignment" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="0123456789"/>
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1"/>
    </Action>
    <Action MethodName="SetDependencyProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB"/>
      <Param Value="TextBlock.HorizontalAlignment"/>
      <Param RetrieveFromReturnValue="Alignment"/>
    </Action>
    <Action MethodName="SelectCharacterByMouse" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TBWrapper"/>
      <Param Value="LeftToRight" />
      <Param Value="5"/>
      <Param Value="1" />
    </Action>
    <Action MethodName="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TBWrapper"/>
      <Param Value="5"/>
    </Action>
  </MouseSelectionTest-Alignments>
  <!-- Test cases for Mouse selection end here. -->


  <!-- Test cases for Selection start here. -->
  <SelectionByKeyboardTest--Up--DismissOnLeftKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 1}+{UP 3}" />
      <SelectedText Value="est
This is a test

This is a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test

This is a test
This is a test" />
  </SelectionByKeyboardTest--Up--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--Up--DismissOnRightKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 1}+{UP 3}" />
      <SelectedText Value="est
This is a test

This is a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretRight Value="est
This is a test" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a t" />
  </SelectionByKeyboardTest--Up--DismissOnRightKey--English>

  <SelectionByKeyboardTest--Up--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}+{UP 3}" />
      <SelectedText Value="est

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test

This is a test
This is a test" />
  </SelectionByKeyboardTest--Up--DismissOnUpKey--English>

  <SelectionByKeyboardTest--Up--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}+{UP 3}" />
      <SelectedText Value="est

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretRight Value="
This is a test
This is a test" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test
" />
  </SelectionByKeyboardTest--Up--DismissOnDownKey--English>

  <SelectionByKeyboardTest--Down--DismissOnLeftKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{LEFT 3}{UP 3}{DOWN 1}+{DOWN 2}" />
      <SelectedText Value="est

This is a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a t" />
      <ExpectedStringOnCaretRight Value="est

This is a test" />
  </SelectionByKeyboardTest--Down--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--Down--DismissOnRightKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{LEFT 3}{UP 3}{DOWN 1}+{DOWN 2}" />
      <SelectedText Value="est

This is a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretRight Value="est" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a t" />
  </SelectionByKeyboardTest--Down--DismissOnRightKey--English>

  <SelectionByKeyboardTest--Down--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{LEFT 3}{UP 3}+{DOWN 3}" />
      <SelectedText Value="est
This is a test

This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test
" />
      <ExpectedStringOnCaretRight Value="
This is a test" />
  </SelectionByKeyboardTest--Down--DismissOnUpKey--English>

  <SelectionByKeyboardTest--Down--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 4}+{DOWN 3}" />
      <SelectedText Value="est
This is a test

This is a t" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretRight Value="est" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a test
This is a t" />
  </SelectionByKeyboardTest--Down--DismissOnDownKey--English>

  <SelectionByKeyboardTest--Home--DismissOnLeftKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{HOME}{RIGHT 11}+{HOME}" />
      <SelectedText Value="This is a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="This is a test" />
  </SelectionByKeyboardTest--Home--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--Home--DismissOnRightKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{HOME}{RIGHT 11}+{HOME}" />
      <SelectedText Value="This is a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--Home--DismissOnRightKey--English>

  <SelectionByKeyboardTest--Home--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}This is a test{UP}{HOME}{RIGHT 11}+{HOME}" />
      <SelectedText Value="This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="This is a test
This is a test
This is a test" />
  </SelectionByKeyboardTest--Home--DismissOnUpKey--English>

  <SelectionByKeyboardTest--Home--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}This is a test{UP}{HOME}{RIGHT 11}+{HOME}" />
      <SelectedText Value="This is a t" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test
" />
      <ExpectedStringOnCaretRight Value="This is a test" />
  </SelectionByKeyboardTest--Home--DismissOnDownKey--English>

  <SelectionByKeyboardTest--End--DismissOnLeftKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{HOME}{END}{LEFT 7}+{END}" />
      <SelectedText Value=" a test" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is" />
      <ExpectedStringOnCaretRight Value=" a test" />
  </SelectionByKeyboardTest--End--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--End--DismissOnRightKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{HOME}{END}{LEFT 7}+{END}" />
      <SelectedText Value=" a test" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </SelectionByKeyboardTest--End--DismissOnRightKey--English>

  <SelectionByKeyboardTest--End--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}This is a test{UP}{LEFT 7}+{END}" />
      <SelectedText Value=" a test
" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="
This is a test
This is a test" />
  </SelectionByKeyboardTest--End--DismissOnUpKey--English>

  <SelectionByKeyboardTest--End--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}This is a test{UP}{HOME}{END}{LEFT 7}+{END}" />
      <SelectedText Value=" a test
" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test
This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </SelectionByKeyboardTest--End--DismissOnDownKey--English>

  <SelectionByKeyboardTest--PgUp--DismissOnLeftKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{PGUP}{DOWN 5}+{PGUP}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test

This is a test
This is a test" />
  </SelectionByKeyboardTest--PgUp--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--PgUp--DismissOnRightKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{PGUP}{DOWN 5}+{PGUP}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a test
This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--PgUp--DismissOnRightKey--English>

  <SelectionByKeyboardTest--PgUp--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{PGUP}{DOWN 5}+{PGUP}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test

This is a test
This is a test" />
  </SelectionByKeyboardTest--PgUp--DismissOnUpKey--English>

  <SelectionByKeyboardTest--PgUp--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{PGUP}{DOWN 5}+{PGUP}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a t" />
      <ExpectedStringOnCaretRight Value="est

This is a test
This is a test" />
  </SelectionByKeyboardTest--PgUp--DismissOnDownKey--English>

  <SelectionByKeyboardTest--PgDn--DismissOnLeftKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 5}{PGDN}{PGUP}+{PGDN}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test

This is a test
This is a test" />
  </SelectionByKeyboardTest--PgDn--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--PgDn--DismissOnRightKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 5}{PGDN}{PGUP}+{PGDN}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a test
This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--PgDn--DismissOnRightKey--English>

  <SelectionByKeyboardTest--PgDn--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 5}{PGDN}{PGUP}+{PGDN}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test" />
  </SelectionByKeyboardTest--PgDn--DismissOnUpKey--English>

  <SelectionByKeyboardTest--PgDn--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 3}{UP 5}{PGDN}{PGUP}+{PGDN}" />
      <SelectedText Value="est
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{Down}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a test
This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--PgDn--DismissOnDownKey--English>

  <SelectionByKeyboardTest--RightToLeft--DismissOnLeftKey--English>
      <KeystrokeString Value="This is a test{LEFT 3}+{LEFT 3}" />
      <SelectedText Value="a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="a test" />
  </SelectionByKeyboardTest--RightToLeft--DismissOnLeftKey--English>
  <SelectionByKeyboardTest--RightToLeft--DismissOnRightKey--English>
      <KeystrokeString Value="This is a test{LEFT 3}+{LEFT 3}" />
      <SelectedText Value="a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--RightToLeft--DismissOnRightKey--English>

  <SelectionByKeyboardTest--RightToLeft--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{LEFT 3}+{LEFT 34}" />
      <SelectedText Value="a test
This is a test

This is a t" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is " />
      <ExpectedStringOnCaretRight Value="a test

This is a test" />
  </SelectionByKeyboardTest--RightToLeft--DismissOnDownKey--English>
  <SelectionByKeyboardTest--RightToLeft--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{LEFT 3}+{LEFT 19}" />
      <SelectedText Value="a test

This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="a test
This is a test

This is a test" />
  </SelectionByKeyboardTest--RightToLeft--DismissOnUpKey--English>

  <SelectionByKeyboardTest--LeftToRight--DismissOnRightKey--English>
      <KeystrokeString Value="This is a test{LEFT 6}+{RIGHT 3}" />
      <SelectedText Value="a t" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--LeftToRight--DismissOnRightKey--English>
  <SelectionByKeyboardTest--LeftToRight--DismissOnLeftKey--English>
      <KeystrokeString Value="This is a test{LEFT 6}+{RIGHT 3}" />
      <SelectedText Value="a t" />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="a test" />
  </SelectionByKeyboardTest--LeftToRight--DismissOnLeftKey--English>

  <SelectionByKeyboardTest--LeftToRight--DismissOnUpKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 6}{UP 4}+{RIGHT 49}" />
      <SelectedText Value="a test
This is a test

This is a test
This is a t" />
      <DismissSelectionKeystroke Value="{UP}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a t" />
      <ExpectedStringOnCaretRight Value="est
This is a test" />
  </SelectionByKeyboardTest--LeftToRight--DismissOnUpKey--English>
  <SelectionByKeyboardTest--LeftToRight--DismissOnDownKey--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{ENTER}This is a test{LEFT 6}{UP 4}+{RIGHT 34}" />
      <SelectedText Value="a test
This is a test

This is a t" />
      <DismissSelectionKeystroke Value="{DOWN}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a test
This is a t" />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--LeftToRight--DismissOnDownKey--English>

  <SelectionByKeyboardTest--CntrlRight--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test{PGUP}{HOME}^{RIGHT 2}^+{RIGHT 8}" />
      <SelectedText Value="a test
This is a test

This is " />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="a test
This is a test

This is a test" />
  </SelectionByKeyboardTest--CntrlRight--English>

  <SelectionByKeyboardTest--CntrlLeft--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test^{LEFT 2}^+{LEFT 8}" />
      <SelectedText Value="a test
This is a test

This is " />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="a test
This is a test

This is a test" />
  </SelectionByKeyboardTest--CntrlLeft--English>

  <SelectionByKeyboardTest--CntrlHome--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test^{HOME}^{RIGHT 10}^+{HOME}" />
      <SelectedText Value="This is a test
This is a test

This is " />
      <DismissSelectionKeystroke Value="{LEFT}" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="This is a test
This is a test

This is a test" />
  </SelectionByKeyboardTest--CntrlHome--English>

  <SelectionByKeyboardTest--CntrlEnd--English>
      <AcceptsReturn Value="true"/>
      <KeystrokeString Value="This is a test{ENTER}This is a test{ENTER}{ENTER}This is a test^{LEFT 7}^{END}^{LEFT 6}^+{END}" />
      <SelectedText Value="a test

This is a test" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is a test

This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </SelectionByKeyboardTest--CntrlEnd--English>

  <SelectionByKeyboardTest--Backspace--English>
      <KeystrokeString Value="This is a test{LEFT 6}+{RIGHT 3}" />
      <SelectedText Value="a t" />
      <DismissSelectionKeystroke Value="{BACKSPACE}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--Backspace--English>
  <SelectionByKeyboardTest--Delete--English>
      <KeystrokeString Value="This is a test{LEFT 6}+{RIGHT 3}" />
      <SelectedText Value="a t" />
      <DismissSelectionKeystroke Value="{DELETE}" />
      <ExpectedStringOnCaretLeft Value="This is " />
      <ExpectedStringOnCaretRight Value="est" />
  </SelectionByKeyboardTest--Delete--English>
  <SelectionByKeyboardTest--ShiftHome--English>
      <KeystrokeString Value="This is a test{LEFT 3}+{HOME}" />
      <SelectedText Value="This is a t" />
      <DismissSelectionKeystroke Value="" />
      <ExpectedStringOnCaretLeft Value="" />
      <ExpectedStringOnCaretRight Value="This is a test" />
  </SelectionByKeyboardTest--ShiftHome--English>
  <SelectionByKeyboardTest--ShiftEnd--English>
      <KeystrokeString Value="This is a test{LEFT 3}+{END}" />
      <SelectedText Value="est" />
      <DismissSelectionKeystroke Value="" />
      <ExpectedStringOnCaretLeft Value="This is a test" />
      <ExpectedStringOnCaretRight Value="" />
  </SelectionByKeyboardTest--ShiftEnd--English>
  <SelectionByKeyboardTest--CtrlShiftEnd--English>
      <AcceptsReturn Value="true" />
      <KeystrokeString Value="This is a test{ENTER}This is 2nd line of test (longer){ENTER}This is 3rd line of test{UP 2}^+{END}" />
      <SelectedText Value="
This is 2nd line of test (longer)
This is 3rd line of test" />
      <DismissSelectionKeystroke Value="{UP}{END}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is 2nd line of test (longer)" />
      <ExpectedStringOnCaretRight Value="
This is 3rd line of test" />
  </SelectionByKeyboardTest--CtrlShiftEnd--English>
  <SelectionByKeyboardTest--CtrlShiftHome--English>
      <AcceptsReturn Value="true" />
      <KeystrokeString Value="This is a test{ENTER}This is 2nd line of test (longer){ENTER}This is 3rd line of test^+{HOME}" />
      <SelectedText Value="This is a test
This is 2nd line of test (longer)
This is 3rd line of test" />
      <DismissSelectionKeystroke Value="{RIGHT}" />
      <ExpectedStringOnCaretLeft Value="This is a test
This is 2nd line of test (longer)
This is 3rd line of test" />
      <ExpectedStringOnCaretRight Value="" />
  </SelectionByKeyboardTest--CtrlShiftHome--English>
  <!-- Test cases for Selection end here. -->

  <!-- Test cases for SelectionService start here. -->
  <SelectionServiceKeyboard-Normal>
    <ControlCount           Value="4" />
    <PressAlt               Value="False" />
    <PressCtrl              Value="False" />
    <PressShift             Value="False" />
    <SelectAllByDefault     Value="False" />

    <ExpectedLastPrimary    Value="True" />
    <ExpectedSelectionCount Value="4" />
  </SelectionServiceKeyboard-Normal>

  <SelectionServiceKeyboard-Control>
    <ControlCount           Value="4" />
    <PressAlt               Value="False" />
    <PressCtrl              Value="True" />
    <PressShift             Value="False" />
    <SelectAllByDefault     Value="False" />

    <ExpectedLastPrimary    Value="True" />
    <ExpectedSelectionCount Value="4" />
  </SelectionServiceKeyboard-Control>

  <SelectionServiceKeyboard-Shift>
    <ControlCount           Value="4" />
    <PressAlt               Value="False" />
    <PressCtrl              Value="False" />
    <PressShift             Value="True" />
    <SelectAllByDefault     Value="False" />

    <ExpectedLastPrimary    Value="True" />
    <ExpectedSelectionCount Value="4" />
  </SelectionServiceKeyboard-Shift>

  <SelectionServiceKeyboard-ControlRemove>
    <ControlCount           Value="4" />
    <PressAlt               Value="False" />
    <PressCtrl              Value="True" />
    <PressShift             Value="False" />
    <SelectAllByDefault     Value="True" />

    <ExpectedLastPrimary    Value="False" />
    <ExpectedSelectionCount Value="0" />
  </SelectionServiceKeyboard-ControlRemove>

  <SelectionServiceKeyboard-ShiftMultiple>
    <ControlCount           Value="4" />
    <PressAlt               Value="False" />
    <PressCtrl              Value="False" />
    <PressShift             Value="True" />
    <SelectAllByDefault     Value="True" />

    <ExpectedLastPrimary    Value="False" />
    <ExpectedSelectionCount Value="4" />
  </SelectionServiceKeyboard-ShiftMultiple>

  <SelectionServiceKeyboard-ShiftSingle>
    <ControlCount           Value="1" />
    <PressAlt               Value="False" />
    <PressCtrl              Value="False" />
    <PressShift             Value="True" />
    <SelectAllByDefault     Value="True" />

    <ExpectedLastPrimary    Value="True" />
    <ExpectedSelectionCount Value="1" />
  </SelectionServiceKeyboard-ShiftSingle>
  <!-- Test cases for SelectionService end here. -->

  <!-- Test cases for SimpleTextDesigner start here. -->
  <SimpleTextDesignerHitTest-Simple>
    <ExpectedBackwardLength Value="3" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="20" />
    <PointY                 Value="12" />
    <TextBlock              Value="Simple text that may or may not be localizable." />
  </SimpleTextDesignerHitTest-Simple>

  <SimpleTextDesignerHitTest-Below>
    <ExpectedBackwardLength Value="3" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="20" />
    <PointY                 Value="2000" />
    <TextBlock              Value="Unimportant text." />
  </SimpleTextDesignerHitTest-Below>

  <SimpleTextDesignerHitTest-Above>
    <ExpectedBackwardLength Value="3" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="20" />
    <PointY                 Value="-1" />
    <TextBlock              Value="Unimportant text." />
  </SimpleTextDesignerHitTest-Above>

  <SimpleTextDesignerHitTest-Left>
    <ExpectedBackwardLength Value="0" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="-1" />
    <PointY                 Value="-1" />
    <TextBlock              Value="Unimportant text." />
  </SimpleTextDesignerHitTest-Left>

  <SimpleTextDesignerHitTest-Right>
    <ExpectedBackwardLength Value="17" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="2000" />
    <PointY                 Value="-1" />
    <TextBlock             Value="Unimportant text." />
  </SimpleTextDesignerHitTest-Right>

  <SimpleTextDesignerHitTest-LeftUnsnap>
    <!-- Causes Regression_Bug304 -->
    <ExpectedBackwardLength Value="-1" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="False" />
    <PointX                 Value="-1" />
    <PointY                 Value="10" />
    <TextBlock             Value="Unimportant text." />
  </SimpleTextDesignerHitTest-LeftUnsnap>

  <SimpleTextDesignerHitTest-RightUnsnap>
    <!-- Causes Regression_Bug304, Regression_Bug305 -->
    <ExpectedBackwardLength Value="-1" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="False" />
    <PointX                 Value="2000" />
    <PointY                 Value="10" />
    <TextBlock             Value="Unimportant text." />
  </SimpleTextDesignerHitTest-RightUnsnap>

  <SimpleTextDesignerHitTest-Multiline>
    <!-- 11, because EOL is a \r\n -->
    <ExpectedBackwardLength Value="11" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="2" />
    <PointY                 Value="22" />
    <TextBlock>Line One.
Line Two.
Line Three.
    </TextBlock>
  </SimpleTextDesignerHitTest-Multiline>

  <SimpleTextDesignerHitTest-MultilineBottom>
    <ExpectedBackwardLength Value="35" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="2" />
    <PointY                 Value="200" />
    <TextBlock>Line One.
Line Two.
Line Three.
</TextBlock>
  </SimpleTextDesignerHitTest-MultilineBottom>

  <SimpleTextDesignerHitTest-MultilineRight>
    <!-- TestTactics: 99. -->
    <ExpectedBackwardLength Value="20" />
    <DesignedTypeName       Value="System.Windows.Controls.TextBlock" />
    <SnapToText             Value="True" />
    <PointX                 Value="200" />
    <PointY                 Value="20" />
    <TextBlock>Line One.
Line Two.
Line Three.
</TextBlock>
  </SimpleTextDesignerHitTest-MultilineRight>

  <SimpleTextDesignerGetRect-Simple>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <Position         Value="2" />
    <ExpectedRect     Value="8,0,7.2,14.5" />
    <TextBlock>Texto</TextBlock>
  </SimpleTextDesignerGetRect-Simple>

  <SimpleTextDesignerGetRect-Start>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <Position         Value="1" />
    <ExpectedRect     Value="0,0,8,15" />
    <TextBlock>Texto</TextBlock>
  </SimpleTextDesignerGetRect-Start>

  <SimpleTextDesignerGetRect-End>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <Position         Value="5" />
    <ExpectedRect     Value="25.28,0,7.23,14.52" />
    <TextBlock>Texto</TextBlock>
  </SimpleTextDesignerGetRect-End>

  <SimpleTextDesignerGetRect-MultiEnd>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Line One
Line Two</TextBlock>
    <Combinations>
      <Dimension Name="Position">
        <Value Text="1" />
        <Value Text="2" />
        <Value Text="3" />
        <Value Text="4" />
        <Value Text="5" />
        <Value Text="6" />
        <Value Text="7" />
        <Value Text="8" />
        <Value Text="9" />
        <Value Text="10" />
        <Value Text="11" />
        <Value Text="12" />
        <Value Text="13" />
        <Value Text="18" />
        <Value Text="19" />
      </Dimension>
      <Dimension Name="ExpectedRect">
        <!--
        Remember that filtering expressions use indexes into Value tags,
        not values selected for the dimension.
        -->
        <Value Filter="Position==0" Text="0,0,7.23,14.3" />
        <Value Filter="Position==1" Text="7.23,0,2.88,14.3" />
        <Value Filter="Position==2" Text="10.11,0,7.23,14.3" />
        <Value Filter="Position==3" Text="17.34,0,7.23,14.3" />
        <Value Filter="Position==4" Text="24.58,0,3.613,14.3" />
        <Value Filter="Position==5" Text="28.19,0,10.11,14.3" />
        <Value Filter="Position==6" Text="38.3,0,7.23,14.3" />
        <Value Filter="Position==7" Text="45.53,0,7.23,14.3" />
        <!-- between "e" and newline -->
        <Value Filter="Position==8" Text="52.76,0,0,14.3" />
        <!-- between newline and "L", defaults to previous line -->
        <Value Filter="Position==9" Text="52.76,0,0,14.3" />
        <!-- second line... -->
        <Value Filter="Position==10" Text="0,14.523,7.23,14.52" />
        <Value Filter="Position==11" Text="7.23,14.53,2.9,14.52" />
        <Value Filter="Position==12" Text="10.12,14.53,7.23,14.52" />
        <!-- test the second-to-last and the last -->
        <Value Filter="Position==13" Text="45.51,14.53,7.23,14.52" />
        <Value Filter="Position==14" Text="52.74,14.53,0,14.52" />
      </Dimension>
    </Combinations>
  </SimpleTextDesignerGetRect-MultiEnd>

  <SimpleTextDesignerAdvanceLine-Simple>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Line One
Line Two</TextBlock>
    <ExpectedCount    Value="1" />
    <ExpectedPosition Value="10" />
    <Limit            Value="-1" />
    <LineCount        Value="1" />
    <Options          Value="" />
    <Position         Value="0" />
  </SimpleTextDesignerAdvanceLine-Simple>

  <SimpleTextDesignerAdvanceLine-NoCount>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Single line.</TextBlock>
    <ExpectedCount    Value="0" />
    <ExpectedPosition Value="1" />
    <Limit            Value="-1" />
    <LineCount        Value="0" />
    <Options          Value="" />
    <Position         Value="1" />
  </SimpleTextDesignerAdvanceLine-NoCount>

  <SimpleTextDesignerAdvanceLine-BeforeStart>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Single line.</TextBlock>
    <ExpectedCount    Value="0" />
    <ExpectedPosition Value="1" />
    <Limit            Value="-1" />
    <LineCount        Value="-1" />
    <Options          Value="" />
    <Position         Value="1" />
  </SimpleTextDesignerAdvanceLine-BeforeStart>

  <SimpleTextDesignerAdvanceLine-AfterEnd>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Single line.</TextBlock>
    <ExpectedCount    Value="0" />
    <ExpectedPosition Value="1" />
    <Limit            Value="-1" />
    <LineCount        Value="3" />
    <Options          Value="" />
    <Position         Value="1" />
  </SimpleTextDesignerAdvanceLine-AfterEnd>

  <SimpleTextDesignerAdvanceLine-ToWhitespace>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>ABC
A
ABC</TextBlock>
    <ExpectedCount    Value="1" />
    <ExpectedPosition Value="6" />
    <Limit            Value="-1" />
    <LineCount        Value="1" />
    <Options          Value="" />
    <Position         Value="3" />
  </SimpleTextDesignerAdvanceLine-ToWhitespace>

  <SimpleTextDesignerAdvanceLineInvalid>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Line One.Line Two</TextBlock>
  </SimpleTextDesignerAdvanceLineInvalid>

  <SimpleTextDesignerGetLineRange-Simple>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Line One.
Line Two.
Line Three.</TextBlock>
    <Position         Value="3" />
    <ExpectedStart    Value="0" />
    <ExpectedEnd      Value="11" />
  </SimpleTextDesignerGetLineRange-Simple>

  <SimpleTextDesignerGetLineRange-Last>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock>Line One.
Line Two.
Line Three.</TextBlock>
    <Position         Value="25" />
    <ExpectedStart    Value="22" />
    <ExpectedEnd      Value="33" />
  </SimpleTextDesignerGetLineRange-Last>

  <SimpleTextDesignerGetLineRange-Empty>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock             Value="" />
    <Position         Value="0" />
    <ExpectedStart    Value="0" />
    <ExpectedEnd      Value="0" />
  </SimpleTextDesignerGetLineRange-Empty>

  <SimpleTextDesignerGetLineRange-WhiteSpace>
    <DesignedTypeName Value="System.Windows.Controls.TextBlock" />
    <TextBlock             Value=" " />
    <Position         Value="0" />
    <ExpectedStart    Value="0" />
    <ExpectedEnd      Value="1" />
  </SimpleTextDesignerGetLineRange-WhiteSpace>

  <!-- Test cases for SimpleTextDesigner end here. -->

  <!-- Test cases for TextEditor start here. -->

  <TextEditor-ReproRegression_Bug403>
    <!-- TestTactics: 100. TestBugs: Regression_Bug403. -->
    <!--
    Verifies that the user can click on a TextBox after selecting a ComboBox
    item.
    -->
    <MainXaml><![CDATA[<StackPanel xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' Background='Green'>
      <ComboBox Name="ComboBox1"><ListBoxItem><TextBlock>Item 1</TextBlock></ListBoxItem>
        <ListBoxItem><TextBlock>Item 2</TextBlock></ListBoxItem><ListBoxItem><TextBlock>Item 3</TextBlock></ListBoxItem>
        </ComboBox><TextBox Name="TextBox1" Width='100px' Height='30px' /></StackPanel>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>

    <!-- Click and type on text box. -->
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="abcdefg  abcdefg"/>
    </Action>

    <!-- Select a ComboBox item. -->
    <Action MethodName="FindElement" Name="CB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="ComboBox1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="CB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="CB1" />
      <Param Value="click left 50 60" />
    </Action>

    <!-- Click back on TextBox. -->
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="abcdefg  abcdefg"/>
    </Action>
  </TextEditor-ReproRegression_Bug403>

  <TextEditor-ReproRegression_Bug404>
    <!-- TestTactics: 101. TestBugs: Regression_Bug404. -->
    <!--
    Verifies that pressing up and down in a TextBox will not modify
    the caret position.
    -->
    <TextBlock Value="!AD:index=0" />
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>

    <!-- Get the caret position, move up and down, and compare. -->
    <Action Name="SelectionStartBefore" MethodName="GetProperty" Type="StaticMethod" ClassName="Test.Uis.Utils.ReflectionUtils">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="SelectionStart" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{UP}{DOWN}"/>
    </Action>
    <Action Name="SelectionStartAfter" MethodName="GetProperty" Type="StaticMethod" ClassName="Test.Uis.Utils.ReflectionUtils">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="SelectionStart" />
    </Action>
    <Action MethodName="VerifyEquals" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="SelectionStartBefore" />
      <Param RetrieveFromReturnValue="SelectionStartAfter" />
      <Param Value="caret position" />
    </Action>
  </TextEditor-ReproRegression_Bug404>

  <!-- Test cases for TextEditor end here. -->

  <!-- Test cases for TextBox start here. -->

  <TextBox-CombiningSelection>
    <!-- TestTactics: 123. TestBugs: 123. -->
    <!--
    Verifies that a glyph composed of a base character and a combining
    character behaves as a single unit.

    This test case will be added when support for combining characters in
    editing is implemented.
    -->
    <TextBlock Value="!EC:a\u0301" />
    <TestControl1Attributes>FontSize="96pt"</TestControl1Attributes>
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="GetArgument" Name="TextArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="Text" />
    </Action>
    <Action MethodName="SetProperty" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper" />
      <Param Value="Text" />
      <Param RetrieveFromReturnValue="TextArgument" />
    </Action>

    <!-- Verify that the selection length is always 0. -->
    <Action MethodName="ClickOnElementWithCoordinates" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /> <Param Value="10" /> <Param Value="20" />
    </Action>
    <Action MethodName="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper" /> <Param Value="" />
    </Action>
    <Action MethodName="ClickOnElementWithCoordinates" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /> <Param Value="20" /> <Param Value="20" />
    </Action>
    <Action MethodName="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper" /> <Param Value="" />
    </Action>
    <Action MethodName="ClickOnElementWithCoordinates" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /> <Param Value="30" /> <Param Value="20" />
    </Action>
    <Action MethodName="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper" /> <Param Value="" />
    </Action>
    <Action MethodName="ClickOnElementWithCoordinates" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /> <Param Value="40" /> <Param Value="20" />
    </Action>
    <Action MethodName="VerifySelectedText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper" /> <Param Value="" />
    </Action>
  </TextBox-CombiningSelection>

  <TextBox-ReproRegression_Bug405>
    <!-- TestTactics: 102. TestBugs: Regression_Bug405. -->
    <!--
    Verifies that multiple TextBox controls can be edited
    in a table.
    -->
    <MainXaml><![CDATA[<FlowDocumentScrollViewer xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation'><FlowDocument><Table Background='Green'>
      <TableRowGroup><TableRow><TableCell><Paragraph><TextBox Name="TextBox1" /></Paragraph></TableCell><TableCell><TextBox Name="TextBox2" /></TableCell></TableRow></TableRowGroup></Table></FlowDocument></FlowDocumentScrollViewer>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>

    <!-- Click and type on each text box. -->
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox1" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="  "/>
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="Wrapper1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox1" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper1" />
      <Param Value="  " />
    </Action>

    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox2" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="  "/>
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="Wrapper2" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox2" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper2" />
      <Param Value="  " />
    </Action>
  </TextBox-ReproRegression_Bug405>

  <TextBoxFind-Simple>
    <!-- TestTactics: 103. TestBugs: Regression_Bug406. -->
    <!--
    Verifies that the TextBox.Find method works as expected for simple
    text. Surrogates and combining characters are not tested. The
    following are verified:
    * Matches work at the beginning/middle/end/whole of text.
    * Matches work for single/multiple characters of text.
    * Matches reject empty patterns.
    * Matches can find whole words.
    * Matches can ignore case.
    * Matches can work backwards.
    * Matches honor SearchFrom and SearchTo.
    -->
    <Find Text="sample" Pattern="s"
      ExpectedResult="0"
      Description="Match at start of string." />
    <Find Text="sample" Pattern="a"
      ExpectedResult="1"
      Description="Match in middle of string." />
    <Find Text="sample" Pattern="e"
      ExpectedResult="5"
      Description="Match at end of string."/>
    <Find Text="sample" Pattern="sample"
      ExpectedResult="0"
      Description="Match at end."/>
    <Find Text="sample" Pattern="sample"
      ExpectedResult="0"
      Description="Match whole string." />
    <Find Text="sample" Pattern="plea"
      ExpectedResult="-1"
      Description="Partial match at end of string fails."/>

    <Find Text="ab2 ab" Pattern="ab" Options="MatchWholeWords"
      ExpectedResult="4"
      Description="Match whole word." />

    <Find Text="ab cd" Pattern=""
      ExpectedResult="-1"
      Description="Empty patterns never match." />

    <Find Text="AB2 AB ab" Pattern="ab" Options="IgnoreCase"
      ExpectedResult="0"
      Description="Match can ignore case." />

    <Find Text="AB2 AB ab" Pattern="ab" Options="MatchWholeWords,IgnoreCase"
      ExpectedResult="4"
      Description="Match can ignore case with whole words." />

    <Find Text="ab cd" Pattern="cd" Options="MatchWholeWords"
      ExpectedResult="3"
      Description="Whole word match." />

    <Find Text="ab ab" Pattern="ab" Options="Backward"  SearchFrom="5"
      ExpectedResult="-1"
      Description="Backward match." />
    <Find Text="ab ab" Pattern="ab" SearchFrom="1"
      ExpectedResult="3"
      Description="Match with leading start." />
    <Find Text="ab ab" Pattern="ab" SearchFrom="1" SearchTo="2"
      ExpectedResult="-1"
      Description="Match with search cut short." />
  </TextBoxFind-Simple>

  <TextBoxGetTextPositionFromPoint>
    <!-- TestTactics: 104. -->
    <!--
    Verifies that GetTextPositionFromPoint works for beginning-of-line,
    middle-of-line, right-of-line, combined with different values of
    snap-to-text and above/below/on-line.
    -->
    <FontFamily Value='Lucida Console' />
    <FontSize   Value='12' />
    <TextBlock       Value='123' />
    <Combinations>
      <Dimension Name='SnapToText'>
        <Value Text='True' /><Value Text='False' />
      </Dimension>
      <Dimension Name='SourcePointX'>
        <Value Text='-1' /><Value Text='20' /><Value Text='9000' />
      </Dimension>
      <Dimension Name='SourcePointY'>
        <Value Text='-1' /><Value Text='10' /><Value Text='9000' />
      </Dimension>
      <Dimension Name='TextPositionLength'>
        <!-- These are all snap-to-text = true -->
        <Value Filter='SnapToText==0 AND SourcePointX==0' Text='0' />
        <Value Filter='SnapToText==0 AND SourcePointX==1' Text='2' />
        <Value Filter='SnapToText==0 AND SourcePointX==2' Text='3' />

        <!-- These are all snap-to-text = false -->
        <Value Filter='SnapToText==1 AND SourcePointX==1 AND SourcePointY==1' Text='2' />
        <Value Filter='SnapToText==1 AND (SourcePointX!=1 OR SourcePointY!=1)' Text='-1' />
      </Dimension>
    </Combinations>
  </TextBoxGetTextPositionFromPoint>

  <TextBoxNavigationText-Simple>
    <!-- TestTactics: 105. TestBugs: Regression_Bug407. -->
    <!--
    Verifies that a TextBox serializes its Text property as expected
    when navigating back and forth between pages, and that it can
    restore its state.
    -->
    <FirstFileContents><![CDATA[<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <TextBox Width="80px" Height="36px" Name="TB" />
        <TextBox Width="80px" Height="36px" Name="TB2" Text="abc" /></StackPanel>]]></FirstFileContents>
    <SecondFileContents><![CDATA[<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <Rectangle Fill="Green" Width="50px" Height="50px" /></Canvas>]]></SecondFileContents>
  </TextBoxNavigationText-Simple>

  <TextBoxSelection-Empty>
    <!-- TestTactics: 106. -->
    <!--
    Verifies that the arrow keys do not cause problems when moving
    in an empty TextBox. This also tests the no-lines case for the
    SimpleTextDesigner.
    -->
    <ExpectedTextBeforeDelete Value="!EC:\r\n" />
    <ExpectedTextAfterDelete Value="!EC:" />
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="GetArgument" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="ExpectedTextBeforeDelete" />
    </Action>
    <Action MethodName="GetArgument" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="ExpectedTextAfterDelete" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="AcceptsReturn" />
      <Param Value="True" />
    </Action>
    <Action MethodName="ClickOnElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{DOWN}{UP}{LEFT}{RIGHT}{ENTER}{DOWN}{DOWN}{UP}{RIGHT}"/>
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param RetrieveFromReturnValue="2" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{LEFT}{DEL}"/>
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param RetrieveFromReturnValue="3" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{ENTER}"/>
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param RetrieveFromReturnValue="2" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{BACKSPACE}"/>
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param RetrieveFromReturnValue="3" />
    </Action>
  </TextBoxSelection-Empty>

  <TextBoxSelection-ReproRegression_Bug408>
    <!-- TestTactics: 107. TestBugs: Regression_Bug408 -->
    <!--
    Verifies that the contents of a textbox loaded by xaml do not appear
    selected by default.
    -->
    <TestControl1Contents Value="sample" />
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="LoadMainXaml">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TestControl1" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifySelectedText">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="" />
    </Action>
  </TextBoxSelection-ReproRegression_Bug408>

  <TextBoxText-ReproRegression_Bug409>
    <!-- TestTactics: 108. TestBugs: Regression_Bug409. -->
    <!--
    Verifies that the caret is not moved when the text property is set
    on an empty TextBox.
    -->
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1"/>
    </Action>
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Utils.ReflectionUtils">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="Text" />
      <Param Value="ABC" />
    </Action>
    <Action MethodName="GetProperty" Name="SelectionStart" Type="StaticMethod" ClassName="Test.Uis.Utils.ReflectionUtils">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="SelectionStart" />
    </Action>
    <Action MethodName="VerifyEquals" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="SelectionStart" />
      <Param Value="0" />
      <Param Value="SelectionStart is at the beginning of the text stream" />
    </Action>
  </TextBoxText-ReproRegression_Bug409>

  <TextBoxText-ReproRegression_Bug410>
    <!-- TestTactics: 109. TestBugs: Regression_Bug410 -->
    <!--
    Verifies that a styled data-bound ListBox produces TextBox instances
    that can be clicked on without throwing an exception.
    -->
    <MainXaml><![CDATA[
<DockPanel  Height="100" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <DockPanel.Resources>
        <DataTemplate x:Key="TextBoxTemplate">
            <TextBox  DockPanel.Dock="Top" Height="24px" >
<TextBox.Text>
<Binding XPath="Name"/>
</TextBox.Text>
</TextBox>
        </DataTemplate>
        <XmlDataProvider x:Key="Employees1" XPath="Employees">
            <x:XData>
                    <Employees xmlns="">
                        <Employee Name="Axel" />
                        <Employee Name="Duff" />
                        <Employee Name="Slash" />
                </Employees>
            </x:XData>
        </XmlDataProvider>
    </DockPanel.Resources>
    <ListBox  Height="100"  ItemsSource="{Binding Source={StaticResource Employees1}, XPath=*}" >
       <ListBox.ItemTemplate>
      <DataTemplate>
        <TextBlock FontSize="12">
          <TextBlock.Text>
            <Binding XPath="@Name"/>
          </TextBlock.Text>
        </TextBlock>
      </DataTemplate>
    </ListBox.ItemTemplate>

    </ListBox>
</DockPanel>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickEveryMainWindowElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
    </Action>
  </TextBoxText-ReproRegression_Bug410>

  <TextBoxUIElement-InGridPanel>
    <!-- TestTactics: 110. TestBugs: Regression_Bug411. -->
    <!--
    Verifies that the layout of a TextBox in a GridPanel allows the
    control to be clicked on and accept keyboard input.
    -->
    <MainXaml><![CDATA[<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <TextBox Name="txt"/></Grid>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txt" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="  "/>
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txt" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Wrapper" />
      <Param Value="  " />
    </Action>
  </TextBoxUIElement-InGridPanel>

  <TextBoxAcceptsReturn-True>
    <!-- TestTactics: 111. TestBugs: Regression_Bug412,Regression_Bug413. -->
    <AcceptsReturn Value="True" />
    <Steps>!EC:
    Line One.|Text=Line One.;AcceptsReturn=True|
    {ENTER}Line Two.|Text=Line One.\r\nLine Two.;LineCount=2|
    </Steps>
  </TextBoxAcceptsReturn-True>

  <TextBoxIsSpellCheckEnabled-True>
      <MainXaml><![CDATA[<?Mapping XmlNamespace="medians" ClrNamespace="MSAvalon.Windows.Media" Assembly="PresentationCore" ?>
<DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
    <StackPanel Name="FlowPanel1" Width="1000" Height="1000">
        <TextBox Name="TextBox1" Width="700" Height="500" SpellCheck.IsEnabled="true"></TextBox>
    </StackPanel>
</DockPanel>]]>
      </MainXaml>
      <Action Name="GetXamlString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
          <Param Value="MainXaml" />
      </Action>
      <Action Name="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
          <Param RetrieveFromReturnValue="GetXamlString" />
      </Action>
      <Action MethodName="CreateTextWrapperForElement" Name="Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="TextBox1" />
      </Action>
      <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Utils.KeyboardInput" MethodName="TypeString">
          <Param Value="This is a test"/>
      </Action>
      <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
          <Param RetrieveFromReturnValue="Wrapper" />
          <Param Value="This is a test" />
      </Action>
  </TextBoxIsSpellCheckEnabled-True>

  <TextBoxScrollScrollbars-Sizes>
    <TextBlock>Some simple sample text.</TextBlock>
  </TextBoxScrollScrollbars-Sizes>

  <TextBoxScroll-ReproRegression_Bug414>
    <!-- TestTactics: 112. TestBugs: Regression_Bug414 -->
    <!--
    Verifies that clicking on text does not modify the text box layout.
    -->
    <MainXaml><![CDATA[<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <TextBox Name="TextBox1" FontSize="48px" Width="300px" Height="200px">aaa bbb ccc ddd eee fff ggg</TextBox>
      <Button Name="AlternativeButton" Canvas.Top="220px">button</Button>
      </Canvas>
    ]]></MainXaml>
    <Action Name="MainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="MainXaml" />
    </Action>
    <Action Name="TB1Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="FindElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
      <Param Value="AlternativeButton" />
    </Action>
    <Action Name="BeforeClickImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
      <Param Value="AlternativeButton" />
    </Action>
    <Action Name="AfterClickImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifyBitmapsEqual">
      <Param RetrieveFromReturnValue="BeforeClickImage" />
      <Param RetrieveFromReturnValue="AfterClickImage" />
    </Action>
  </TextBoxScroll-ReproRegression_Bug414>

  <TextBoxScroll-FollowCaretHorizontal-Single>
    <!-- TestTactics: 113. -->
    <!--
    Verifies that the caret is followed in single-line text boxes.
    -->
    <MainXaml><![CDATA[!EC:<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <TextBox Name="TextBox1" FontSize="48px" Width="300px" Height="60px" AcceptsReturn="True">aaa bbb ccc ddd eee fff ggg</TextBox>
      </Canvas>
    ]]></MainXaml>
    <DifferentCriteria-MaxColorDistance Value="1" />
    <DifferentCriteria-MinColorDistance Value="0.2" />
    <DifferentCriteria-MaxErrorProportion Value="0.9" />
    <SimilarCriteria-MaxColorDistance Value="0.5" />
    <SimilarCriteria-MaxPixelDistance Value="1" />

    <Action Name="MainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="MainXaml" />
    </Action>
    <Action Name="TB1Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="FindElement">
      <Param Value="TextBox1" />
    </Action>
    <!--
    Click on the element, take a snapshot, then select to the right
    and verify that the rendering has changed.
    -->
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="BeforeScrollImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="pressdrag left 800 20" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="AfterScrollImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifyBitmapsDifferent">
      <Param RetrieveFromReturnValue="BeforeScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollImage" />
    </Action>
    <!-- Repeat, this time moving left. -->
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="pressdrag left -10 20" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="AfterScrollLeftImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="AfterScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollLeftImage" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="BeforeScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollLeftImage" />
      <Param Value="SimilarCriteria-" />
    </Action>
  </TextBoxScroll-FollowCaretHorizontal-Single>

  <TextBoxScroll-FollowCaretVertical>
    <!-- TestTactics: 114. -->
    <!--
    Verifies that the caret is followed in vertical scrolling.
    -->
    <MainXaml><![CDATA[!EC:<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <TextBox Name="TextBox1" FontSize="96px" Width="300px" Height="200px" TextWrapping="Wrap">aaa bbb ccc ddd eee fff ggg</TextBox>
      </Canvas>
    ]]></MainXaml>
    <DifferentCriteria-MaxColorDistance Value="1" />
    <DifferentCriteria-MinColorDistance Value="0.2" />
    <DifferentCriteria-MaxErrorProportion Value="0.9" />
    <SimilarCriteria-MaxColorDistance Value="0.5" />
    <SimilarCriteria-MaxPixelDistance Value="1" />

    <Action Name="MainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="MainXaml" />
    </Action>
    <Action Name="TB1Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="FindElement">
      <Param Value="TextBox1" />
    </Action>
    <!--
    Click on the element, take a snapshot, then select below and
    verify that the rendering has changed.
    -->
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="BeforeScrollImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="pressdrag left 50 300" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="AfterScrollImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="BeforeScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollImage" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <!-- Repeat, this time moving up. -->
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="pressdrag left 50 -10" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="AfterScrollUpImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="AfterScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollUpImage" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="BeforeScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollUpImage" />
      <Param Value="SimilarCriteria-" />
    </Action>
  </TextBoxScroll-FollowCaretVertical>

  <TextBoxScroll-SnapScrollsVertical>
    <!-- TestTactics: 115. -->
    <!--
    Verifies that the TextBox is scrolled when clicking on a line
    causes the caret to snap to it and puts it partially out of view.
    -->
    <MainXaml><![CDATA[!EC:<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <TextBox Name="TextBox1" Height="200px" Width="300px" TextWrapping="Wrap"
        FontSize="120px" FontFamily="Arial" Text="ABCDEF" />
      </Canvas>
    ]]></MainXaml>
    <DifferentCriteria-MaxColorDistance Value="1" />
    <DifferentCriteria-MinColorDistance Value="0.2" />
    <DifferentCriteria-MaxErrorProportion Value="0.9" />
    <SimilarCriteria-MaxColorDistance Value="0.5" />
    <SimilarCriteria-MaxPixelDistance Value="1" />

    <Action Name="MainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="MainXaml" />
    </Action>
    <Action Name="TB1Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="FindElement">
      <Param Value="TextBox1" />
    </Action>
    <!--
    Click on the element, take a snapshot, then click on the
    second line and verify that the rendering has changed.
    -->
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="BeforeScrollImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 180" />
    </Action>
    <Action Name="AfterScrollImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="BeforeScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollImage" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <!-- Repeat, this time moving up. -->
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 50 20" />
    </Action>
    <Action Name="AfterScrollUpImage" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="AfterScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollUpImage" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="BeforeScrollImage" />
      <Param RetrieveFromReturnValue="AfterScrollUpImage" />
      <Param Value="SimilarCriteria-" />
    </Action>
  </TextBoxScroll-SnapScrollsVertical>

  <TextBoxScroll-KeyboardScrolls>
    <!-- TestTactics: 116. -->
    <!--
    Verifies that the TextBox is scrolled when the keyboard is used
    to move the caret or the selection around the TextBox.
    Steps:
    StartBitmap,       right, Moved1 (!= Start), left,                   Moved2 (== Start)
                       down,  Moved3 (!= Start), up,                     Moved4 (== Start)
                 shift+down,  Moved5 (!= Start), click, shift+up,        Moved6 (!= Moved5)
                 ctrl +end,   Moved7 (!= Start), click, shift+ctrl+home, Moved8 (!= Moved7)
                       click, Moved9 (== Start)
    -->
    <MainXaml><![CDATA[!EC:<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <TextBox Name="TextBox1" Height="200px" Width="300px" TextWrapping="NoWrap" AcceptsReturn="True"
        FontSize="96px" xml:space="preserve" FontFamily="Arial">1: 0123456789
2: ABCDEFGHIJ
3: _|.*/  .`8</TextBox>
      </Canvas>
    ]]></MainXaml>
    <DifferentCriteria-MaxColorDistance Value="1" />
    <DifferentCriteria-MinColorDistance Value="0.2" />
    <DifferentCriteria-MaxErrorProportion Value="0.9" />
    <SimilarCriteria-MaxColorDistance Value="0.5" />
    <SimilarCriteria-MaxPixelDistance Value="1" />

    <Action Name="MainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="MainXaml" />
    </Action>
    <Action Name="TB1Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="FindElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>

    <Action Name="StartBitmap" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>

    <!-- left and right -->
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{RIGHT 10}" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action Name="Moved1" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved1" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{HOME}{RIGHT 10}{LEFT 10}" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action Name="Moved2" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved2" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="SimilarCriteria-" />
    </Action>

    <!-- down and up -->
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{DOWN 2}" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action Name="Moved3" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved3" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^{END}{HOME}{UP 2}" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action Name="Moved4" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved4" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="SimilarCriteria-" />
    </Action>

    <!-- down and up with selection-->
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="+{DOWN}+{DOWN}" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action Name="Moved5" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved5" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^{END}{HOME}+{UP}+{UP}" />
    </Action>
    <Action Name="Moved6" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved5" />
      <Param RetrieveFromReturnValue="Moved6" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>

    <!-- ctrl+end, ctrl+home w/selection -->
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^{END}" />
    </Action>
    <Action Name="Moved7" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved7" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="DifferentCriteria-" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="+^{HOME}" />
    </Action>
    <Action Name="Moved8" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved7" />
      <Param RetrieveFromReturnValue="Moved8" />
      <Param Value="DifferentCriteria-" />
    </Action>

    <!-- back to the start -->
  ﻿﻿﻿﻿  <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action Name="Moved9" Type="StaticMethod" ClassName="Microsoft.Test.Imaging.BitmapCapture" MethodName="CreateBitmapFromElement">
      <Param RetrieveFromReturnValue="TB1" />
    </Action>
    <Action MethodName="VerifyBitmapComparison" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="Moved9" />
      <Param RetrieveFromReturnValue="StartBitmap" />
      <Param Value="SimilarCriteria-" />
    </Action>
  </TextBoxScroll-KeyboardScrolls>

  <TextBoxScroll-CommandScrolls>
    <!-- TestTactics: 117. -->
    <!--
    Verifies that using a command such as Paste will also
    scroll if that is required.
    -->
    <MainXaml><![CDATA[!EC:<Canvas xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <TextBox Name="TextBox1" Height="200px" Width="300px" TextWrapping="NoWrap" AcceptsReturn="True"
        FontSize="96px" FontFamily="Arial">1234</TextBox>
      </Canvas>
    ]]></MainXaml>
    <Action Name="MainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="MainXaml" />
    </Action>
    <Action Name="TB1Wrapper" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateTextWrapperForElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="TB1" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="FindElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="MouseElementRelative">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="click left 20 20" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{END}+{HOME}^c{END}^v" />
    </Action>
    <Action Name="TB1HorizontalPosition" MethodName="GetProperty" Type="StaticMethod" ClassName="Test.Uis.Utils.ReflectionUtils">
      <Param RetrieveFromReturnValue="TB1" />
      <Param Value="HorizontalOffset" />
    </Action>
    <Action MethodName="VerifyGreaterThan" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB1HorizontalPosition" />
      <Param Value="20" />
      <Param Value="horizontal position" />
    </Action>
  </TextBoxScroll-CommandScrolls>

  <TextBoxType-ShiftBackspace>
    <!-- TestTactics: 118. TestBugs: Regression_Bug415. -->
    <!--
    Verifies that Shift+Backspace produces the same behavior as Backspace.
    -->
    <Steps>!EC:
    {SPACE}{SPACE}{SPACE}|TextLength=3|
    +{BACKSPACE}|TextLength=2|
    </Steps>
  </TextBoxType-ShiftBackspace>

  <TextBoxXamlAddButton>
    <TestControl1Contents>
    <![CDATA[ content-content <Button>my button</Button> content-content ]]>
    </TestControl1Contents>
  </TextBoxXamlAddButton>

  <TextBoxReproRegression_Bug897>
    <!-- TestTactics: 119 -->
    <TestControl1Contents>!EC:\x5cb8\x4efc\x4e67\x01ec\x5ba3\x8bdc\x7281\xccba\xff6d\xeff0\xab0d\xa8ae\x6afc\x1d9a\x6726\x493c\x098d\x6cc0\xbde1\x8622\xa14f\x6b4c\x1640\x4259\x6c1a\xfb4e\x5097\x8187\x62b7\xe9af\xd80b\xdc61\x3f2d\x0943\x54c3\xd0e2\x21a4\x5a3c\x4316\x92fc\xeb8d\xcb8e\x9614\xeef7\x5097\x0c38\x9838\x97e9\xd1a0\x8f76\xd2d1\x858c\xf3c2\x3ad1\x5b0e\xf16a\x38bc\x0c0e\x95d0\x6054\x3b44\xf0f9\x6a02\x15be\x138e\xa829\x6980\x61b8\xc8d6\x9642\x2797\xaf50\x29a9\x2ae5\x9a94\xd5bf\xd537\x2747\xf1c0\x5fe2\x6315\xb8ad\xafe5\xd33f\x16dd\x56d4\x0f20\x045c\xae33\x6357\x9825\x1596\xc46b\xe2c1\x57b7\xfa93\x618c\x8056\xdb68\xdea1\xa2b6\x3680\xcf12\x3b5d\x67df\x2381\x5be3\xc8dd\xa03c\x854e\x1c33\x1174\x1a4c\x35ee\xfd3e\x8296\x4113\x96c1\xfedf\xbcb8\x9909\x6523\xb383\x657e\xfe1c\x1200\xeae3\x46e7\xd32c\x9fff\x7433\x54e0\x4bde\x4952\xbd2a\x2c94\xe999\x7488\x6b60\xf35a\xfaf0\x4641\x641e\x28e5\x4723\x86b1\xfb48\x8e7c\xe581\xd520\xb980\xcac9\x8175\x1eaf\x0f64\x3d92\x82fb\x6993\x3d40\x55de\x389c\x14fc\xf5af\x003c\x111a\xc752\xc595\xd0f9\x78c2\xd0a9\x98fb\xcc8a\x2b60\x0b85\xc1c7\x52c7\x0105\x8a9d\x1e5b\x776a\x16b7\x5c67\x6164\xfe0b\xe67e\xa969\xd36a\x2d2e\x39ee\x7f97\xa998\x8005\x3747\x1582\xbabd\xe5f4\x5090\x63e1\x17cb\x7fcf\xc11b\x2a4f\x15b9\x14d8\x3c24\xecf4\x9f68\x75f0\x5ce7\xbc9b\x3c8d\xf85c\x4b37\xc5d4\x3f27\xdace\xdc34\xf7a3\x19bd\x67af\xf3e7\x9866\x970a\xf92a\x2711\x18f5\x9542\x15de\x50c6\xdbd2\xdc08\x9d22\x72d2\x9e8b\xb64e\xec66\x46ad\x4c8c\xc1e6\xf988\x0a00\x5d79\xd046\x7d51\x4309\xb13a\x34ce\x7172\xd65a\xd8c9\xde88\x58eb\x4a24\xb01b\x8be7\x28b4\x9343\x1c8e\xedc6\x232e\x57b2\x898a\x2529\x8113\xba64\x9f6a\x858a\xacab\x0f86\x52bf\x9586\x670a\x35bd\x2033\x5daf\x966d\xc81e\x19b8\xb620\x75d5\xe426\x23cf\x3f83\x723d\xa974\xa94a\x52fe\xc2b6\x12a3\x8d99\x5922\x2a1f\x5ec5\x9eb7\xa1d6\x8075\x3850\x4f32\xc2ec\xa39e\x2baf\x8821\x61ec\x839a\x4901\xcb52\x232e\x29f0\x526b\xf578\x6095\x798b\x666c\x77f0\x3f07\x33e2\x4a07\xb2eb\xd79e\x111a\x4c6c\xc2d3\x9a07\x81eb\xf99b\x6b67\x0844\x9704\x7e5c\xd978\xdd39\x78eb\x56cb\x1281\x4a25\x5c04\xc1e2\xbbe7\x293b\xda18\xde20\x290d\x704a\x1d29\x2d04\xdb0e\xdf96\xe6d3\x5fb0\x6df3\x366e\x8563\x7793\xb1d2\x5732\x68db\xee18\xda27\xdfff\xdb0c\xdd98\x8c29\xab92\x7531\x975b\xe7a8\x22bf\x53eb\x2dca\xe301\x71fe\x8e1e\x89b0\xf97d\x8afd\x235e\x5289\x7cdd\x54e7\x1a04\xa7b5\x216f\x3754\x1069\xa6cb\xd8b9\xdc05\xa4f7\xbb4d\xe149\x6deb\xe1e2\x31e9\x4ba1\x1b12\xf9f1\x7d7a\xfb17\x85cd\x455a\xbcd6\x6fc5\xb909\x7cae\xfbf3\xa84e\xfbb2\x7e15\x26d4\x33d4\x1652\x713b\x8b17\x6ff9\x35e3\xa19d\x54d4\x9b29\xce65\xbea1\xe650\x7dc7\x989c\x4c7f\x7516\x901b\x5c35\x3e0e\xda44\xde6a\xa5e3\x5770\xf70f\x0f8d\x5d2d\x37ef\x6865\xbaa5\x1474\xfe7b\xda0d\xdd05\x7e23\x8779\xcaf7\xfcae\x56ca\xc1ee\x15be\x7973\xa51c\xe24f\x2cb2\xc72a\x5f08\x3f0f\xd728\x6c8a\x0797\x6bd8\x4c19\xbda3\x9fa9\x95c7\x8df0\xbee0\x7a2a\x7b8a\x12cc\xfdf2\x3938\x9a2e\x86b4\xcfe8\xe19a\x630e\xffa2\x1122\x8186\x7866\x3950\x9a45\x284f\x64f6\xebed\xc392\x2abd\x2fe4\xb084\x1e1d\x60c5\xfbda\xb30d\xa89b\xb262\x1f61\xe397\xe85a\xf988\x0c16\x8283\xdb3f\xdebc\x17ca\x403b\x0aee\x5b9a\x5cc8\xe58f\xfbf8\x3f6c\xc605\xeb02\x8f30\x3287\xb1d3\x9554\x3ab3\xa9d8\xca5c\x9423\x4a46\xcb04\xf4ad\x9d2d\x3d5d\xe71f\xd876\xde18\xc238\x7f76\x1747\x1799\x7570\xf5e1\x5e0f\xeb21\x1084\x24bb\xe0ff\x67f7\xcdf4\x4a54\xb48a\xda6a\xdeb0\x10d7\x23dd\x7613\x008f\x8a0c\xa8e3\x3e82\x2f2b\x77f2\x383d\x103a\xba73\x7a9c\x02dd\x23cd\x7d80\x3f42\x2356\x7c81\x2824\xae6c\x7592\x994d\xd477\xc6b0\x84cf\x15f8\xc8d7\x6264\xc62e\xfff1\x167a\x15fd\x026e\x2c85\xc342\x6805\x1cf7\x382c\xd692\xd8c4\xdfa1\xfd7c\xbda4\x4dd4\x30ad\x95e7\x21dd\xbd32\xea75\x8eb1\x26fd\x3808\xb68b\xec52\x9b44\x8a8e\xa19b\x39dd\x053d\x92eb\x75a9\xccc5\xb1c3\x384a\xf9bf\xa476\x782e\xd656\x6089\x157b\x224a\xeb29\xa5ee\x4f5f\xc5fe\x7814\xdba8\xde1a\x9602\xeee6\xf419\x0ba5\x77ed\x377c\xd8f4\xdf79\x5f70\x161b\x913f\x38b4\xc669\xe319\x32ee\x43a6\x631b\x1ba7\x4bb8\x8559\x5413\x8c36\x1db9\x4b85\x5ca9\xd4fa\x6c67\x3bd2\x9219\x672c\x2654\x2330\xaee5\x1af8\xa3d9\x1655\x9ed1\x6a04\x54d8\x7a47\x5f55\x1b4f\x4505\x6213\x4517\x27d5\x4f10\x3f30\xb83a\x6248\xec43\xaa56\x2c5c\x564e\x328e\x09cc\xd12d\xa893\xaefb\xa2f2\xcb13\x9d21\x4c57\xf843\xefc5\x6e0f\x89cd\xab70\x3f3f\x1c99\xa4d4\xf916\xc6ce\xd16f\x2604\x38c4\x4731\xbba4\x066e\x34d3\x85e9\x2d36\x8396\x2fd0\x7ae8\x7bfc\xf6d2\x5897\xe869\x9a0d\x4526\xf63c\xbb08\xb1e4\xaf32\xc232\xcef7\x4cc0\x724c\xd706\x9e07\xa39f\xfff0\x9ba0\xbd72\xf32b\xe387\x5aeb\x3049\xf9c9\xc29a\x1588\xa224\x7a27\x1d08\x9ddd\x198b\x1c86\x7d5b\x73c9\x773b\x3135\xc306\xa531\xd772\xae96\x3e0d\x14e9\x223c\x63d1\x69cb\xfa6f\x4958\x2f67\x96cb\xe249\x2d45\xe7f4\x725d\x87bb\x9873\x9be7\x284d\xee9f\xd772\x2f9d\x5417\x40e0\x94dc\x1155\xa8a6\xb271\xcf64\xfe81\x5fca\x6cd1\xe098\x5abf\xc42d\x0edb\xb51d\xce9e\x38ae\xcc77\x8ffd\xc829\xcc2f\x72bd\xe35a\x3abe\x7097\x3195\xaa28\xf59e\xdb55\xdf6d\x08e8\xd466\xcdbd\xa7d5\x5a7f\xfd2c\x800c\x10e7\xbb29\xb759\x2b0b\x4ad5\xcf9b\x29fa\x01b0\xd285\x23c7\x6381\xd29c\xc9d3\x6339\x5bd4\x5ea1\x0f48\x636c\xe158\x5d85\x5a1d\xa0bd\x7710\x0848\xd9c4\xdc8c\x8475\x63e8\x0c32\x8d00\x1c58\xb45b\xb7f0\x4e92\x27c7\x114e\xd8a3\xde74\x8159\xa320\xb960\x390d\x9e11\x0dce\x46a7\x2302\x1181\x781a\xad12\x75c4\xbe74\x4468\x7925\x9fa6\x25ee\x7028\x4418\xaf10\x5145\x27a9\x4b25\xc610\xf57d\x4584\x076f\xaf24\x1aab\x7b41\x3b71\x4a85\x85fc\x7229\xe211\x3e38\xa424\x2110\x02ab\x6942\xc1a0\xb6c2\x11ab\x0c5b\xb6d5\x966c\xce8a\xd7ee\x3b35\x1849\x28a4\xb79d\xcd35\x2993\x4bd9\x59b0\x57fa\xf34e\x438e\x588c\x065f\x9781\x0856\x963e\x3ca8\x628c\xefc7\x4c4b\x6255\x3aed\xfb81\x04dd\x6d7c\xdad5\xdfb5\x9a81\x15fe\x3eca\x0f3b\x5f11\x76f9\x2f7f\x73ee\x0261\x529d\x83d3\x7d4f\x5c69\x2650\x8861\xe63c\xb0d4\xdaa8\xdd80\x62e2\x2a1f\xae6c\x7b6b\xcfb2\x5448\xa6a3\x823e\x7598H\x1cc7\x23c6\x4a20\xf25f\x3c23\xb156\x43b2\x1930\xe413\xe47c\xe191\xd6df\x2392\x05f4\x43a1\xb8d3\xe53c\x935d\x25fb\xd9f3\xdd52\x4aad\x275c\xc35d\x77f2\xc34f\xec14\x9a91\x6f16\xbaf1\xb86c\xf4b9\xb9e5\x73a6\xe599\x2ed7\x39b2\x8aee\x2046\x74f8\x44ae\xcd0b\xccc0\xf903\xc88b\x8c02\x068c\xa877\x37ca\x16de\x6f0b\x1346\x5c43\x9ba4\xab97\xd218\xfc68\x86c2\x7a6c\x78d2\xc541\xa91f\xaa18\x2921\x2c0f\xecd7\x1cf9\xafeb\x205a\x14c9\x7f20\x5a4d\x7317\xb101\x9544\x87a3\x7deb\x2e57\xfad0\xebef\xbcc2\x439c\x62c7\x5838\x4be6\xa526\x9875\x1e41\xc80d\x1380\x326d\xb2ef\x1082\xa772\xafb5\x9b8e\x22f2\xa39f\xccf4\xdbb3\xddbc\x56a0\x881d\x2300\x97bc\x14bd\xa02e\xab41\x065f\x23f3\x542d\xce11\x8bf0\x8e7b\xbc0e\x81a5\x4658\x51e0\xda1b\xdd39\x5461\xfeb6\xe7dc\x0cd9\xe25b\xcc30\x49cb\xcba3\x014c\xf9b5\x64b0\xda4b\xdd85\x1f1c\x7ce7\x6622\xbb7e\x3fc7\xc07b\x3728\x04f7\xed33\x17e1\xa419\xbf52\x645b\x26ff\x8205\xeb63\x2e10\x5535\xd111\xc664\x460b\x8752\x7050\x6ec2\x7b43\x40a3\xcb8b\xcaf1\xd48a\xa9f4\x0ca9\xbf42\x79e0\x6cae\x6cd3\x1194\x55ec\xc625\x0691\x9163\xa611\x81f0\x672c\xe6d5\x43c2\x4d86\x7e00\xa530\xc7c5\xe03f\xd33a\xa47f\x939e\x13e7\x1b56\x97c9\x0c96\xf75e\x403b\xff22\xf4ef\x6c35\x306c\x433e\x0b38\xe4d6\x4571\xf7ab\xba2a\x7070\x9576\x67ea\x4ea4\x3fae\x2053\xc41a\x2026\x897a\x2b00\x2dbd\xc2a2\x265a\x032c\xf449\xd6b9\x6828\x2ba4\x65f9\x5157\xd509\x04fe\x5e8c\x85ea\x076e\x9c73\x39db\x5183\x23ed\xdb9c\xdd7b\x0814\x8653\xeb05\x5754\x4ac8\x6b50\x55db\x53f0\xf393\x573a\x77a2\x831b\xcc5e\x127d\x3c7f\xce94\x6909\x3c21\x6c84\xa30e\xb932\xda99\xdf77\xe51f\x6b72\x36ea\xe1fe\x4736\xa339\xe676\x7297\xfc37\xaddc\xcc13\x25a9\x3c4e\x3b53\xabd6\xa981\x6b69\x124c\xd7b3\x7265\xfa1c\x5d66\x81e1\x922c\x736c\xcaed\xcddd\xd0d0\x1561\xb767\x388e\xa5b7\x289b\xd817\xdffe\xebe1\x13de\x8950\x0ea5\xb0b5\x0d1c\xe4a2\x7b69\xd53eJ\xecd30\x9340\xbd31\x929f\x011b\x90c1\xe17e\x6d12\xac36\x87b8\xe98f\xa4bc\x6e92\x7c48\xd55a\x15a5\x5d35\x44cf\x754e\x265c\xfd0c\x5c4f\x356e\xbff4\x95a3\xe217\x03a7\x26fd\x6549\x1579\xe1fc\xaca2\x91e1\x8698\xcabc\x3a9c\x139e\x82c1\xb64c\xa7cb\xc438\xbb88\x33c8\x7e2b\x0252\x6f20\x1abe\x925c\xdb59\xdfdd\x876d\x3699\x5fef\xd9ed\xdfbf\xa3e0\x5dd2\xfd3c\xfcfa\x1f02\x8d1a\xba80\x07c9\x96bd\xa5bb\x3cec\x12da\xe7f9\xb18a\x9abd\x0207\xda73\xde3a\xcd81\x6222\x4184\x2887\xb741\xbda2\x2683\xc759\x714a\x4ba2\x6dd2\x8e0b\xab62\x4cb2\xb7f3\x96d1\x26db\xd859\xdcc9\x85c5\x974a\x1ab0\x09b7\xb3bf\x9d09\xd86f\xdf15\x5c45\x32c4\xe0d0\x409b\xf56e\xacf8\xa816\x926d\x77ca\xae41\x7b59\xa690\x3f9a\xd677\x57a8\x1bd0\x6edd\x99f5\x08b2\xfa58\xf038\x5ae6\x5127\x8aaf\xbdf3\xeba4\x54ad\xf736\xb2d1\x586b\x8dc4\x8b7c\xdbe0\xded1\xca3c\x9494\x9078\x0b06\x7863\xe111\x034b\xba44\x4028\xe88e\xab80\x3638\xd6c5\xaf4d\x3fa2\xfedf\x9ad8\x19c9\x9457\xdb54\xde15\x015f\xe19b\x5620\x82a7\x09c9\x584a\xb0df\xd87d\xdf9a\x207d\xefdc\xc7be\x475d\x0c3b\xc312\x8b56\x63d6\x2191\x279f\xf70d\x35f3\x1abd\x6898\xda1e\xdf2e\x14df\xa55f\xb794\xb3f0\xbd91\x73fa\xf724\x00bb\x2312\xc8dd\xb2f8\x3a57\x885e\x6e9a\x88c6\x526b\xdaa8\xdc83\xc811\xbba3\x6e78\x8f68\xa311\x7c8e\x7388\x3701\xf836\x6cb7\xe707\x9f36\xe6a0\x7903\x76f1\xfaea\xf4e9\xb2ea\xf949\x2baa\x61cc\xac81\xf8b7\xc703\x244a\x435d\x101a\x50fe\xdb76\xdecb\x9ed7\xa4a2\x5b4a\xf9f3\xa085\x238b\x1942\x8576\x024d\x3b05\x4068\x868f\x7bc3\x8a6c\x19b3\x83da\xe23b\x39f4\xc365\x8d73\x79b0\xd5db\x5920\xaefe\xbefb\x1b8f\xc2ea\xa774\x6b1d\x5fb4\x6c74\x2289\x5b89\x4540\xcdde\x4265\x43ec\xecac\xd87c\xdd4d\xe1a8\x6f72\xb09c\xbe43\xeb40\xdb3c\xdcc2\x6e4a\xad4f\xa06f\x6120\xd624\x8d98\x4e03\x3946\xc8fb\x4b81\xac4a\x3af7\x84f5\x609f\x71cc\x1a58\xa298\xce90\x1dde\x2b05\x3683\xbc8c\xd74d\x3fee\xf58d\x6177\x6ffe\xabca\x0a3d\x253f\x9adc\xc3bc\xe3be\xead0\x54a0\xfa24\xcaad\xfe93\x964f\x94ef\x0d86\x0bf9\x04e3\xf6e2\x97a1\xb1b5\x5386\xf2c6\x6fdb\x551a\x0e04\xefb2\xcd62\xb036\xfa3a\xb1bd\xd601\x6081\x6b91\x74ad\x1d99\xa238\x2f09\xa3bc\xb0a4\xe88c\x5737\x9a24\x0bff\x77a7\x4faa\xa403\x3841\x88ed\x1d7f\x2a89\xb7a8\xe069\xa84b\x43d8\x0df0\x7d37\x3bee\xb521\x173a\xab28\xf659\x3387\xf095\xa2e1\x2422\x6a2b\x9301\x21a1\x7756\x6b4c\xd984\xdcef\x463e\xaf14\x5a7d\xb961\xe6c7\xf832\x056f\x69ff\xb771\x4474\x92b7\xcfb0\xfa13\xf597\xb834\x27b9\x66bc\xa061\x6649\x79e6\x8c81\x057b\xf231\x23af\xa98d\x691c\x5384\xe57d\x1102\x169f\x1197\xb231\x4d99\x5682\x9a2a\xf936\xe95a\x548e\x966f\x43bb\xafb2\xad3a\xf3b6\xb1e5\xa0cf\x20e4\xa8cc\x2e8a\xb1f6\x6b48\xbae4\xd6f3\x0503\x6308\xd4a3\x40c3\xbce1\x36cd\x0fd3\x7daa\xa4ad\x1ff1\x58fc\xa0d2\x32dc\xe084\x8217\xa390\x5b6c\xbefc\x3e5d\x122e\x09f2\x228e\xca33\xd847\xdf46\x404c\x82df\x88a9\xc04e\x24fa\x3387\xa5b9\x5bb9\x3aa3\xad2e\xea8f\x81de\x5967\x3c54\xb28c\x44bb\x18c4\x9f0c\x8fc0\x543d\x52e3\x7f08\xc049\x9ecb\x053c\xd31d\xf2f8\x2cea\xa8b6\xcd01\xe273\x98d4\xf55c\x2efe\x7c95\xb3ed\x8728\xbd5b\x7fb3\xec68\xb342\x4518\xf838\x3356\x9786\x21b1\x0205\x82a7\x8bcf\xcd71\xf12d\x8381\x3a72\x8b08\xbedf\xc143\xc294\xe9dc\xbb12\x51dc\x408d\x78ce\xb302\x6da0\xcab9\x51bb\x8c81\x2a69\xbfbe\xfe9e\xbd91\x5b67\x1f58\xa356\xa0fa\x0dca\x86ce\x8cf3\x0744\xe389\xd118\x7050\xa11a\xdb43\xdf6f\x5ef2\x5e61\x6a53\x701d\xbb51\xf157\x9d4b\x0249\x2dd7\xabdb\x3a73\x9215\x8a97\x689c\x45cb\x952f\xd79a\xc2e8\x8d30\x0fe0\x95c5\x6428\x971a\xea0d\xb114\x3a74\x35a0\xe297\xd787\x80c3\xd03b\xd7b3\xd7bd\x91cc\x6bc6\xf358\x222e\xba4a\x046d\x0d46\x2045\x591e\xf180\xf77a\x6686\x7bb4\xfc35\x2457\xc178\x4e59\xf97c\xad67\x13ea\xcb62\x460d\xfac9\xc746\x8045\xbf07\x80dc\xbbb7\xbab2\x2ac0\xad13\xdb9e\xdd8a\xba57\xf8c9\xfcd4\x5272\x7301\x1d50\xbe7a\x7fe9\xef99\x3ca6\x72a7\x9f9e\x8386\x3560\x3e3d\x1149\x211f\x892d\x8745\x22d4\xc3c9\x0c5a\x4bbf\x70fc\x2c12\xa1e7\xfb42\x838f\x518e\x6592\x2e5e\x446c\x1bdc\x03c6\xc15b\x036b\x2781\x6f06\xdb57\xdf70\xeeeb\x93ff\xdbc7\xdc25\x8821\x27a7\xfcbd\x89a6\x429f\xaa6d\x9993\xa191\x25cd\xb8ca\x9ef5\xadfc\xad0a\x8bd8\x265f\xd118\x220d\x3aeb\x2e5a\x8a07\x0e47\x2e3a\x83c2\x7fbf\x7403\x3ad1\xe9c7\xb218\xadd5\xab19\x33e7\x2fc9\x3091\x4257\xe8d9\x046b\xa529\x719b\x40f0\xa720\xcbfd\x8ccc\x1e9f\x6310\x64d0\x135f\x5660\x9ba7\x48a6\x0a3e\xba1e\xb400\x65a4\x51c0\xfb1e\x59e6\xa3e3\x7cfd\x15a3\x07cd\xc0a4\xe77a\xf3bb\x7ab3\x84e2\x6f2b\x7d6a\x6ab2\xa2fe\x21f4\x2bef\xb071\xf9f9\x8739\xbe08\x817a\x0f9b\x20b1\x1aef\x60a4\xe470\x4e1f\x6971\xa396\xf0f9\x7fe6\xca23\xd91c\xded0\x8ef2\x6087\x282b\x5bf8\x3923\xe67a\xe482\x990f\xa3ea\xdbd6\xde2d\x95f3\xebac\xf8a8\x26b2\xd826\xde4e\xba05\xda4e\xde6a\x79a3\x4a4b\x8331\x620e\xb4fd\x235b\x7285\x7e09\x5024\x89b8\x04fb\xa506\x9e99\x237a\x140b\xc16c\x03c4\x5479\xc0d6\xa0bd\xd985\xdfa1\x6bb0\x4283\x254a\xcaaf\xf8c3\x5575\x42bf\xc547\xe74c\xc5e0\xebb8\x4b19\xcd94\x44a7\xdb18\xdd54\xa6f9\x15c8\x73f5\x6678\x48eb\x1a32\xd932\xdd42\xf758\xc832\xe49d\x6545\xda89\xded4\xf92e\x3dac\xba2f\x9138\xd902\xde9a\x3cc4\xea4d\x2a96\x1d0f\x3b49\x8adc\xa26b\x3f1a\xb94d\x537f\x55e4\xcf63\xe416\x3da7\xad7e\xab0d\x2cc8\x730c\x9f7e\x517d\x6950\xd4ab\xd355\x3091\x70d7\xdbaa\xdd78\x3219\xccb1\xae0b\x90e9\x3c5b\x660c\x9ca6\x8957\xbcab\xeb30\x56e5\x2b2e\xbe0d\x77c5\x9a17\x974f\xa3d9</TestControl1Contents>
    <Steps>abc||</Steps>
  </TextBoxReproRegression_Bug897>

  <TextBoxIsNumberOnly-Simple>
    <!-- TestTactics: 120. TestBug: Regression_Bug416. -->
    <!--
    Verifies that the user cannot type nor paste numbers into a TextBox
    with IsNumberOnly set to True.
    -->
    <IsNumberOnly  Value="True" />
    <Steps>!EC:
    1b5|Text=15|
    </Steps>
  </TextBoxIsNumberOnly-Simple>

  <TextBoxCustomStyle-ReproRegression_Bug417>
    <!-- TestTactics: 121. TestBugs: Regression_Bug417. -->
    <!--
    Verifies that using a custom-styled text box will not hang the application.
    -->
    <MainXaml><![CDATA[<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" >
      <StackPanel.Resources>
        <Style x:Key="MyStyle">
          <Style.VisualTree>
            <Border Background="Green">
              <Canvas><TextBlock /></Canvas>
            </Border>
          </Style.VisualTree>
        </Style>
      </StackPanel.Resources>
      <Button Name="pp" />
      <TextBox Style="{MyStyle}" Name="TextBox1" /></StackPanel>]]></MainXaml>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="0" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
      <Param Value="TextBox1" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="TypeString">
      <Param Value="{ENTER}"/>
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
      <Param Value="TextBox1" />
    </Action>
  </TextBoxCustomStyle-ReproRegression_Bug417>

  <TextBoxRendering-ReproRegression_Bug418>
    <!-- TestTactics: 122. TestBugs: Regression_Bug418. -->
    <!--
    Verifies that assertions are not generated when a TextBox is put inside
    a FlowDocumentScrollViewer.
    -->
    <MainXaml><![CDATA[
      <Border xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" Background="Yellow">
      <FlowDocumentScrollViewer><FlowDocument><Paragraph><TextBox Name="TextBox1">Sample text</TextBox></Paragraph></FlowDocument></FlowDocumentScrollViewer>
      </Border>
    ]]></MainXaml>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="GetArgument">
      <Param Value="MainXaml" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="SetMainXaml">
      <Param RetrieveFromReturnValue="0" />
    </Action>
    <Action Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="ClickOnElement">
      <Param Value="TextBox1" />
    </Action>
  </TextBoxRendering-ReproRegression_Bug418>

  <TextBoxAtomics-SelectDelete>
    <!-- TestTactics: 123. TestBugs: Regression_Bug419. -->
    <!--
    Selects and deletes a atomic elements from a TextBox.
    -->
    <TestControl1Contents Value="1111 2222 3333 4444" />
    <Action MethodName="LoadMainXaml" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" />
    </Action>
    <Action MethodName="CreateTextWrapperForElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>

    <!-- Set up an atomic element on the first four characters -->
    <Action MethodName="CreateAtomicTextElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="0" />
      <Param Value="4" />
    </Action>
    <Action MethodName="ClickOnElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
    </Action>

    <!-- Select and delete the element -->
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{LEFT 20}+{RIGHT}" />
    </Action>
    <Action MethodName="VerifySelectedText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="1111" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{DEL}" />
    </Action>
    <Action MethodName="VerifySelectedText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value=" 2222 3333 4444" />
    </Action>

    <!-- Set up an atomic element with the last four characters, then select and overwrite it -->
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{DEL}" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="2222 3333 4444" />
    </Action>
    <Action MethodName="CreateAtomicTextElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="10" />
      <Param Value="4" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{RIGHT 20}+{LEFT} " />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="2222 3333  " />
    </Action>

    <!-- Set up an atomic element with the first four characters, click it and delete with backspace -->
    <Action MethodName="CreateAtomicTextElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="0" />
      <Param Value="4" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="2222 3333  " />
    </Action>
    <Action MethodName="ClickOnElementWithCoordinates" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" />
      <Param Value="16" />
      <Param Value="8" />
    </Action>
    <Action MethodName="VerifySelectedText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="2222" />
    </Action>
    <Action MethodName="TypeString" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{BACKSPACE}" />
    </Action>
    <Action MethodName="VerifySelectedText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value="" />
    </Action>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value=" 3333  " />
    </Action>
  </TextBoxAtomics-SelectDelete>

  <TextBoxAtomics--NestedAtomicNonAtomicElement>
    <Action MethodName="VerifyElementText" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="1" />
      <Param Value=" 3333  " />
    </Action>

  </TextBoxAtomics--NestedAtomicNonAtomicElement>

  <TextBoxUIElementAdd-Comb>
    <!-- TestTactics: 124. -->
    <!--
    Verifies that different UIElements can be added to different
    parts of a TextBox text.
    -->
    <AcceptsReturn  Value="True" />
    <Combinations>
      <Dimension Name="Text">
        <Value Text="abcd  " />
        <Value Text="!EC:ab\r\ncd" />
      </Dimension>
      <Dimension Name="UIElementTypeName">
        <Value Text="System.Windows.Controls.TextBox" />
        <Value Text="System.Windows.Controls.Button" />
      </Dimension>
      <Dimension Name="InsertionCharPosition">
        <Value Text="0" /><Value Text="2" /><Value Text="4" /><Value Text="6" />
      </Dimension>
      <Dimension Name="Wrap">
        <Value Text="True" /><Value Text="False" />
      </Dimension>
    </Combinations>
  </TextBoxUIElementAdd-Comb>

  <TextBoxUndoRedo-IsReadOnly>
    <!-- TestTactics: 125. TestBugs: Regression_Bug420. -->
    <!-- Verifies that Undo and Redo do not modify the tree when IsReadOnly is set. -->
    <Action MethodName="LoadMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TextBox.xaml" /></Action>
    <Action Name="TB1" MethodName="CreateTextWrapperForElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /></Action>
    <Action Name="TestControl1" MethodName="FindElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /></Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="TestControl1" /></Action>
    <!-- Verify that the IsReadOnly is honored when true. -->
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="abc+{HOME}{DEL}" /></Action>
    <Action MethodName="VerifyElementText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB1" /><Param Value="" /></Action>
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TestControl1" /><Param Value="IsReadOnly" /><Param Value="True" /></Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^z" /></Action>
    <Action MethodName="VerifyElementText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB1" /><Param Value="" /></Action>
    <!-- Verify that the IsReadOnly can be set to false and undo/redo works again. -->
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TestControl1" /><Param Value="IsReadOnly" /><Param Value="False" /></Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^z" /></Action>
    <Action MethodName="VerifyElementText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB1" /><Param Value="abc" /></Action>
    <!-- Repeat for Redo. -->
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TestControl1" /><Param Value="IsReadOnly" /><Param Value="True" /></Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^y" /></Action>
    <Action MethodName="VerifyElementText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB1" /><Param Value="abc" /></Action>
    <Action MethodName="SetProperty" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TestControl1" /><Param Value="IsReadOnly" /><Param Value="False" /></Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="^y" /></Action>
    <Action MethodName="VerifyElementText" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB1" /><Param Value="" /></Action>
  </TextBoxUndoRedo-IsReadOnly>
  <!-- Test cases for TextBox end here. -->

  <!-- Test cases for TextOM TextContainer start here. -->
  <TextTreePositionFixOnDelete-Simple>
    <!-- TestTactics: 126. -->
    <!--
    Verifies that a single character deletion works as expected.
    -->
    <DeleteLength   Value="1" />
    <DeleteStart    Value="1" />
    <GravityForward Value="True" />
    <TestDistance   Value="2" />
    <TextToInsert   Value="abcd" />
  </TextTreePositionFixOnDelete-Simple>

  <TextTreeTest_TextEditing-Simple>
  <!-- TestTactics: 127. -->
    <!--
    Performs various Insertion/Deletion operations on plain text in TextTree and then compares its dump with
    the expected dump. It also creates some TextPositions and insert text at those positions.
    -->
    <TextStep1>abcd efgh</TextStep1>
    <TextStep2> ijkl</TextStep2>
    <TextStep3>0123 </TextStep3>
    <TextStep4> xxxx</TextStep4>
    <TextStep5> yyyy</TextStep5>
    <TextStep7>X</TextStep7>
    <TP1>9</TP1>
    <TP2>9</TP2>
    <TP3FromTP1>5</TP3FromTP1>
    <ExpectedTreeDumpStep3>
    <![CDATA[[ TextTreeRootNode SC=21 Indent=0 ];[ TextTreeTextNode SC=19 Indent=1 ];[ TextTreeRootNode SC=21 Indent=0 ];]]>
    </ExpectedTreeDumpStep3>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=31 Indent=0 ];[ TextTreeTextNode SC=9 Indent=1 ];[ TextTreeTextNode SC=10 Indent=1 ];[ TextTreeTextNode SC=10 Indent=1 ];[ TextTreeRootNode SC=31 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=21 Indent=0 ];[ TextTreeTextNode SC=9 Indent=1 ];[ TextTreeTextNode SC=10 Indent=1 ];[ TextTreeRootNode SC=21 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep7>
    <![CDATA[[ TextTreeRootNode SC=22 Indent=0 ];[ TextTreeTextNode SC=9 Indent=1 ];[ TextTreeTextNode SC=1 Indent=1 ];[ TextTreeTextNode SC=10 Indent=1 ];[ TextTreeRootNode SC=22 Indent=0 ];]]>
    </ExpectedTreeDumpStep7>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=2 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
  </TextTreeTest_TextEditing-Simple>

  <TextTreeTest_TextElementEditing-Simple>
  <!-- TestTactics: 128. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.InlineSpan</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.Bold</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-Simple>

  <TextTreeTest_TextElementEditing-Paragraph>
  <!-- TestTactics: 129. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.Paragraph</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.Paragraph</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-Paragraph>

  <TextTreeTest_TextElementEditing-Heading>
  <!-- TestTactics: 130. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.Heading</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.Heading</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-Heading>

  <TextTreeTest_TextElementEditing-Section>
  <!-- TestTactics: 131. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.Section</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.Section</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-Section>

  <TextTreeTest_TextElementEditing-LineBreak>
  <!-- TestTactics: 132. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.LineBreak</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.LineBreak</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-LineBreak>

  <TextTreeTest_TextElementEditing-Italic>
  <!-- TestTactics: 133. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.Italic</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.Italic</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-Italic>

  <TextTreeTest_TextElementEditing-Underline>
  <!-- TestTactics: 134. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements in TextTree and then compares its dump with
    the expected dump. TextNavigators are used to insert text/textelements in most of the steps.
    -->
    <TextElementTypeName1>System.Windows.Documents.Underline</TextElementTypeName1>
    <TextElementTypeName2>System.Windows.Documents.Underline</TextElementTypeName2>
    <TextStep2>abcd</TextStep2>
    <TN1>5</TN1> <!-- Length of TextStep2 + 1 -->
    <TN2FromTN1>-2</TN2FromTN1> <!-- Should be less then the length of TextStep2 -->
    <TextStep3>efgh</TextStep3>
    <TextStep4>ijkl</TextStep4>
    <TextStep7>abcdefghijkl</TextStep7>
    <TN2Step7>6</TN2Step7> <!-- Should be greater or equal to 4 (we want to nest textelements) and less than length of TextStep7-->
    <ExpectedTreeDumpStep2>
    <![CDATA[[ TextTreeRootNode SC=8 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=2 Indent=1 ];[ TextTreeRootNode SC=8 Indent=0 ];]]>
    </ExpectedTreeDumpStep2>
    <ExpectedTreeDumpStep4>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep4>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=4 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=12 Indent=0 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=12 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=18 Indent=0 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=4 Indent=3 ];[ TextTreeTextElementNode SC=6 Indent=2 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextElementNode SC=10 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=18 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep10>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=1 Indent=2 ];[ TextTreeTextNode SC=3 Indent=2 ];[ TextTreeTextNode SC=2 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeTextNode SC=6 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep10>
  </TextTreeTest_TextElementEditing-Underline>

  <TextTreeTest_UIElementEditing-Simple>
  <!-- TestTactics: -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements/UIElements in TextTree and then compares its dump with
    the expected dump.
    -->
    <!--EmbeddedObjectTypeName>System.Windows.Controls.Button</EmbeddedObjectTypeName-->
    <TextElementTypeName>System.Windows.Documents.InlineSpan</TextElementTypeName>
    <TextToInsert>abcdefgh</TextToInsert>
    <ExpectedTreeDumpStep3>
    <![CDATA[[ TextTreeRootNode SC=11 Indent=0 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeObjectNode SC=1 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=11 Indent=0 ];]]>
    </ExpectedTreeDumpStep3>
    <ExpectedTreeDumpStep5>
    <![CDATA[[ TextTreeRootNode SC=15 Indent=0 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextElementNode SC=7 Indent=1 ];[ TextTreeObjectNode SC=1 Indent=2 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=7 Indent=1 ];[ TextTreeRootNode SC=15 Indent=0 ];]]>
    </ExpectedTreeDumpStep5>
    <ExpectedTreeDumpStep6>
    <![CDATA[[ TextTreeRootNode SC=13 Indent=0 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeObjectNode SC=1 Indent=1 ];[ TextTreeTextNode SC=4 Indent=1 ];[ TextTreeRootNode SC=13 Indent=0 ];]]>
    </ExpectedTreeDumpStep6>
    <ExpectedTreeDumpStep7>
    <![CDATA[[ TextTreeRootNode SC=14 Indent=0 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeRootNode SC=14 Indent=0 ];]]>
    </ExpectedTreeDumpStep7>
    <ExpectedTreeDumpStep8>
    <![CDATA[[ TextTreeRootNode SC=16 Indent=0 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeObjectNode SC=1 Indent=2 ];[ TextTreeObjectNode SC=1 Indent=2 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=8 Indent=1 ];[ TextTreeRootNode SC=16 Indent=0 ];]]>
    </ExpectedTreeDumpStep8>
    <ExpectedTreeDumpStep9>
    <![CDATA[[ TextTreeRootNode SC=15 Indent=0 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=6 Indent=1 ];[ TextTreeTextElementNode SC=7 Indent=1 ];[ TextTreeObjectNode SC=1 Indent=2 ];[ TextTreeTextNode SC=4 Indent=2 ];[ TextTreeTextElementNode SC=7 Indent=1 ];[ TextTreeRootNode SC=15 Indent=0 ];]]>
    </ExpectedTreeDumpStep9>
  </TextTreeTest_UIElementEditing-Simple>

  <TextTreeTest_PropertyInheritanceWithRoot-Simple>
  <!-- TestTactics: 135. -->
    <!--
    Verify property inheritance is inplace when you create a TextTree with a root.
    -->
    <RootTypeName>System.Windows.Documents.InlineSpan</RootTypeName>
    <TextElement1TypeName>System.Windows.Documents.Italic</TextElement1TypeName>
    <TextElement2TypeName>System.Windows.Documents.Bold</TextElement2TypeName>
    <TextElement3TypeName>System.Windows.Documents.InlineSpan</TextElement3TypeName>
    <UIElementTypeName>System.Windows.Controls.ScrollViewer</UIElementTypeName>
    <PropertyName>FontFamily</PropertyName>
    <PropertyValue>Verdana</PropertyValue>
    <SecondPropertyValue>Courier</SecondPropertyValue>
  </TextTreeTest_PropertyInheritanceWithRoot-Simple>

  <TextTreeTest_PropertyInheritanceWithoutRoot-Simple>
  <!-- TestTactics: 136. -->
    <!--
    Verify property inheritance is inplace when you create a TextTree without a root.
    -->
    <TextElement1TypeName>System.Windows.Documents.Italic</TextElement1TypeName>
    <TextElement2TypeName>System.Windows.Documents.Bold</TextElement2TypeName>
    <TextElement3TypeName>System.Windows.Documents.Underline</TextElement3TypeName>
    <UIElementTypeName>System.Windows.Controls.ScrollViewer</UIElementTypeName>
    <PropertyName>FontFamily</PropertyName>
    <PropertyValue>Verdana</PropertyValue>
    <SecondPropertyValue>Courier</SecondPropertyValue>
  </TextTreeTest_PropertyInheritanceWithoutRoot-Simple>

  <TextTreeTest_TextChangedEvent-Simple>
  <!-- TestTactics: 137. -->
    <!--
    Performs various Insertion/Deletion operations on Text/TextElements/UIElements
    in TextTree and then checks if TextChangedEvent is fired.
    -->
    <EmbeddedObjectTypeName>System.Windows.Controls.Button</EmbeddedObjectTypeName>
    <TextElementTypeName>System.Windows.Documents.InlineSpan</TextElementTypeName>
    <TextToInsertStep1>abcdefgh</TextToInsertStep1>
    <TextToInsertStep2>ij</TextToInsertStep2>
  </TextTreeTest_TextChangedEvent-Simple>

  <TextTreeTest_InsertingElementInstances-Simple>
  <!-- TestTactics: 138. -->
    <!--
    Inserts already created instances of TextElements with some text into TextTree. Also tests inserting
    TextElements/EmbeddedObjects which were previously inserted and removed in a different TextTree.
    -->
    <EmbeddedObjectTypeName>System.Windows.Controls.Button</EmbeddedObjectTypeName>
    <TextElement1TypeName>System.Windows.Documents.InlineSpan</TextElement1TypeName>
    <TextElement2TypeName>System.Windows.Documents.Italic</TextElement2TypeName>
    <TextElement1Text>abcdefgh</TextElement1Text>
    <TextElement2Text>xxxxxxxx</TextElement2Text>
  </TextTreeTest_InsertingElementInstances-Simple>

  <TextTreeTest_UndoRedo-Simple>
  <!-- TestTactics: 139. -->
    <!--
    This test case tests the functionality of UndoRedo in TextTree.
    -->
    <TestText>This is a test</TestText>
    <TextElement1TypeName>System.Windows.Documents.InlineSpan</TextElement1TypeName>
    <EmbeddedObjectTypeName>System.Windows.Controls.Button</EmbeddedObjectTypeName>
    <TextElement2TypeName>System.Windows.Documents.Italic</TextElement2TypeName>
    <TextElement1Text>abcdefgh</TextElement1Text>
    <TextElement2Text>xxxxxxxx</TextElement2Text>
  </TextTreeTest_UndoRedo-Simple>

  <TPTest_TextEditing-Simple>
  <!-- TestTactics: 140. -->
    <!--
    This test case does various types of verification  on the functionality
    of TextPosition in a simple Text editing scenario.
    -->
    <TestText1>This is a test</TestText1>
    <TestText2>xxxx</TestText2>
  </TPTest_TextEditing-Simple>

  <TPTest_TextElementEditing-Simple>
  <!-- TestTactics: 141. -->
    <!--
    This test case verifies the functionality of TextPosition in a TextElement editing scenario.
    -->
    <TestText1>This is a test</TestText1>
    <TextElementTypeName>InlineSpan</TextElementTypeName>
    <TestFontFamily>Verdana</TestFontFamily>
    <TestProperty>FontFamily</TestProperty>
  </TPTest_TextElementEditing-Simple>

  <TPTest_UIElementEditing-Simple>
  <!-- TestTactics: 142. -->
    <!--
    This test case verifies the functionality of TextPosition in a UIElement editing scenario.
    -->
    <UIElementTypeName>Button</UIElementTypeName>
    <TestText1>This is a test</TestText1>
    <TextElementTypeName>InlineSpan</TextElementTypeName>
  </TPTest_UIElementEditing-Simple>

  <!-- Test cases for TextOM TextContainer end here. -->

  <!-- Test cases for TextOM TextRange start here. -->
  <TextRangeAppend-Xaml>
    <!-- TestTactics: 143. -->
    <!--
    Verifies that different controls that rely on TextRange.Append
    can be used to load different kinds of objects at XAML-parse-time.
    -->
    <MainXaml><![CDATA[<DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <Button Name="HostControlID" DockPanel.Dock="Top">
        Text. <TextBlock><Bold>Bold.</Bold></TextBlock>
        <Button>This is an embedded button.</Button></Button>
      <HyperLink Name="HostControlID" DockPanel.Dock="Top">
        Text. <TextBlock><Bold>Bold.</Bold></TextBlock>
        <Button>This is an embedded button.</Button></HyperLink>
      <TextBlock Name="HostControlID" DockPanel.Dock="Top">
        Text. <Bold>Bold.</Bold>
        <Button>This is an embedded button.</Button></TextBlock>
      <TextBox Name="HostControlID" DockPanel.Dock="Top">
        Text. <Bold>Bold.</Bold>
        <Button>This is an embedded button.</Button></TextBox>
      <FlowDocumentScrollViewer Name="HostControlID" DockPanel.Dock="Top"><FlowDocument>
        <Paragraph>Text. <Bold>Bold.</Bold>
        <Button>This is an embedded button.</Button></Paragraph></FlowDocument></FlowDocumentScrollViewer>
      </DockPanel>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="HostControlID" />
    </Action>
  </TextRangeAppend-Xaml>

  <TextRangeGetXmlTest--Scenario1>
     <MainXaml><![CDATA[<DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
        <TextBox Name="TextBox1">This <Bold>is <Italic>a</Italic>t </Bold>est</TextBox>
      </DockPanel>]]>
     </MainXaml>
     <NeedsRangeMarker Value="false" />
     <XmlFormat Value="xaml" />
     <ExpectedXmlString><![CDATA[<TextRange xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">This <Bold>is <Italic>a</Italic>t</Bold>est</TextRange>]]></ExpectedXmlString>
  </TextRangeGetXmlTest--Scenario1>

  <TextRangeContainsTest--Scenario1>
      <MainXaml><![CDATA[<DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
         <TextBox Name="TextBox1">This <Bold>is <Italic>a</Italic>t </Bold>est</TextBox>
       </DockPanel>]]>
      </MainXaml>
      <TestTextPositionOffset Value="5" />
      <StartTextPositionOffsetForTextRange Value="3" />
      <EndTextPositionOffsetForTextRange Value="7" />
      <StringInInline Value="This is a test" />
      <ExpectedTestResult Value="true" />
  </TextRangeContainsTest--Scenario1>
  <TextRangeContainsTest--Scenario2>
      <MainXaml><![CDATA[<DockPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
         <TextBox Name="TextBox1">This <Bold>is <Italic>a</Italic>t </Bold>est</TextBox>
       </DockPanel>]]>
      </MainXaml>
      <TestTextPositionOffset Value="8" />
      <StartTextPositionOffsetForTextRange Value="3" />
      <EndTextPositionOffsetForTextRange Value="7" />
      <StringInInline Value="This is a test" />
      <ExpectedTestResult Value="false" />
  </TextRangeContainsTest--Scenario2>
  <!-- Test cases for TextOM TextRange end here. -->

  <!-- Test cases for TextOM TextSelection start here. -->
  <TextSelectionAppendString--English>
      <InitialTextString Value="This is a test" />
      <SelectionStartDisplacement Value="6" />
      <SelectionEndDisplacement Value="10" />
      <AppendString Value="This is a string appended to the selection" />
      <ExpectedFinalSelectedString Value="s a This is a string appended to the selection" />
  </TextSelectionAppendString--English>
  <TextSelectiongetStartEnd--English>
      <KeystrokeString Value="This is a test{LEFT 3}+{LEFT 3}" />
      <BackwardExpectedString Value="This is " />
      <ForwardExpectedString Value="a test" />
  </TextSelectiongetStartEnd--English>
  <TextSelectionsetText--English>
      <KeystrokeString Value="This is a test{LEFT 2}+{LEFT 5}" />
      <SetTextString Value="replacement" />
      <ExpectedString Value="This isreplacementst" />
  </TextSelectionsetText--English>
  <TextSelectiongetText--English>
      <KeystrokeString Value="This is a test{LEFT 2}+{LEFT 5}" />
      <ExpectedString Value=" a te" />
  </TextSelectiongetText--English>
  <TextSelectionDeleteContent--English>
      <KeystrokeString Value="This is a test{LEFT 2}+{LEFT 5}" />
      <ExpectedString Value="This isst" />
  </TextSelectionDeleteContent--English>
  <TextSelectionDelete--EmptyRangeSelection--English>
      <KeystrokeString Value="This is a test{LEFT 2}" />
      <ExpectedString Value="This is a test" />
  </TextSelectionDelete--EmptyRangeSelection--English>
  <TextSelectionCopyPaste--English>
      <KeystrokeString Value="This is a test{LEFT 2}+{LEFT 4}" />
      <ExpectedSelectedString Value="a te" />
      <KeystrokeToPositionCaretToEOL Value="{RIGHT}+{RIGHT 2}" />
      <BackwardExpectedString Value="This is a tea te" />
      <ForwardExpectedString Value="" />
  </TextSelectionCopyPaste--English>
  <TextSelectionInputText--English>
      <InitialTextString Value="This is a pretty long string" />
      <InputTextString Value="replacement string" />
      <SelectionStartInitialOffset Value="6" />
      <SelectionEndInitialOffset Value="10" />
      <BackwardExpectedString Value="This ireplacement string" />
      <ForwardExpectedString Value="pretty long string" />
  </TextSelectionInputText--English>
  <TextSelectionMove--English>
      <InputTextString Value="This is a test" />
      <MoveIndex Value="-5" />
      <BackwardExpectedString Value="This is a" />
      <ForwardExpectedString Value=" test" />
  </TextSelectionMove--English>
  <TextSelectionMoveStartAndMoveEnd--English--1>
      <InputTextString Value="This is a test This is a much longer string" />
      <SelectionStartInitialOffset Value="20" />
      <SelectionEndInitialOffset Value="25" />
      <InitialSelectedTexr Value="is a "/>
      <LimitStartTextPositionOffset Value="2" />
      <LimitEndTextPositionOffset Value="3" />
      <MoveStartCount Value="-10" />
      <MoveEndCount Value="-6" />
      <ExpectedStartDisplacement Value="10" />
      <ExpectedEndDisplacement Value="6" />
      <ExpectedSelectedText Value="test This" />
  </TextSelectionMoveStartAndMoveEnd--English--1>
  <TextSelectionSetActiveEnd--English--1>
      <InputTextString Value="This is a test" />
      <ExpectedInitialSelectedText Value="s a " />
      <SelectionStartDisplacement Value="6" />
      <SelectionEndDisplacement Value="10" />
      <ActiveEndDisplacement Value="-5" />
      <ActiveEndDirection Value="Backward" />
      <ExpectedFinalSelectedText Value="his i" />
      <DirectionalKeystroke Value="+{RIGHT}" />
      <ExpectedSelectedTextAfterDirectionalKeystroke Value="is i" />
  </TextSelectionSetActiveEnd--English--1>
  <TextSelectionMoveActiveEnd--English--1>
      <InputTextString Value="This is a test" />
      <ExpectedInitialSelectedText Value="s a " />
      <SelectionStartDisplacement Value="6" />
      <SelectionEndDisplacement Value="10" />
      <LimitTextPositionOffset Value="2" />
      <ActiveEndDirection Value="Backward" />
      <ExpectedFinalSelectedText Value="s a" />
  </TextSelectionMoveActiveEnd--English--1>
  <TextSelectionMoveToPosition--English--1>
      <InputTextString Value="This is a test" />
      <TextPositionOffset Value="6" />
      <Direction Value="Forward" />
      <KeystrokeString Value="+{RIGHT 3}" />
      <ExpectedSelectedString Value="s a" />
  </TextSelectionMoveToPosition--English--1>
  <TextSelectionMoveToPosition--English--2>
      <InputTextString Value="This is a test
This is the second line" />
      <TextPositionOffset Value="14" />
      <Direction Value="Forward" />
      <KeystrokeString Value="{RIGHT 3}+{RIGHT 3}" />
      <ExpectedSelectedString Value="s i" />
  </TextSelectionMoveToPosition--English--2>
  <TextSelectionMoveToPosition--English--3>
      <InputTextString Value="This is a test
This is the second line" />
      <TextPositionOffset Value="14" />
      <Direction Value="Backward" />
      <KeystrokeString Value="{RIGHT 3}+{RIGHT 3}" />
      <ExpectedSelectedString Value="is " />
  </TextSelectionMoveToPosition--English--3>
  <TextSelectionMoveToPositions--English--1>
      <InputTextString Value="This is a test
this is the extension of the line" />
      <StartTextPositionOffset Value="10" />
      <EndTextPositionOffset Value="20" />
      <KeystrokeString Value="+{RIGHT 3}" />
      <ExpectedSelectedString Value="test
this" />
  </TextSelectionMoveToPositions--English--1>
  <TextSelectionMoveToRange--English--1>
      <StringInTextBox Value="This is a test" />
      <StartTextPositionOffset Value="10" />
      <EndTextPositionOffset Value="12" />
      <ExpectedStrOnCaretLeft Value="This is a te" />
      <ExpectedStrOnCaretRight Value="st" />
      <ExpectedSelectedString Value="te" />
  </TextSelectionMoveToRange--English--1>
  <TextSelectionAppendEmbeddedObject--English--1>
      <StringInTextBox Value="This is a test" />
      <StartTextPositionOffset Value="10" />
      <EndTextPositionOffset Value="12" />
      <AssemblyName Value="PresentationFramework" />
      <TypeName Value="System.Windows.Controls.TextBox" />
  </TextSelectionAppendEmbeddedObject--English--1>


  <TextRangeSerializationTestPlainText--1>
      <TextRangeType Value="WholeTextContainer" />
      <TestString Value="This is a test. This is a long string" />
      <SplitTextNodeByHowMany Value="1" />
      <TextRangeMarker Value="true" />
      <ExpectedString Value="This is a test. This is a long string" />
  </TextRangeSerializationTestPlainText--1>
  <TextRangeSerializationTestPlainText--2>
      <TextRangeType Value="WholeTextContainer" />
      <TestString Value="This is a test. This is a long string" />
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString Value="This is a test. This is a long string" />
  </TextRangeSerializationTestPlainText--2>
  <TextRangeSerializationTestPlainText--3>
      <TextRangeType Value="WholeTextContainer" />
      <TestString Value="This is a test. This is a long string" />
      <StartPositionOffset Value="4" />
      <EndPositionOffset Value="20" />
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString Value=" is a test. This" />
  </TextRangeSerializationTestPlainText--3>
  <TextRangeSerializationTestPlainText--4>
      <TextRangeType Value="WholeTextContainer" />
      <TestString><![CDATA[!@#$%^&*()_+{{}}[]/><?,.]]></TestString>
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString><![CDATA[!@#$%^&*()_+{{}}[]/><?,.]]></ExpectedString>
  </TextRangeSerializationTestPlainText--4>
  <TextRangeSerializationTestPlainText--5>
      <TextRangeType Value="WholeTextContainer" />
      <TestString Value="This is the first line.
This is the second line." />
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString Value="This is the first line.
This is the second line." />
  </TextRangeSerializationTestPlainText--5>
  <TextRangeSerializationTestPlainText--6>
      <TextRangeType Value="WholeTextContainer" />
      <TestString Value="今日はいい天気国境の長いトンネルを抜けるとそこは雪国だった。" />
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString Value="今日はいい天気国境の長いトンネルを抜けるとそこは雪国だった。" />
  </TextRangeSerializationTestPlainText--6>
  <TextRangeSerializationTestPlainText--7>
      <TextRangeType Value="WholeTextContainer" />
      <TestString><![CDATA[<Button /><TextBox>This is a test</TextBox><CheckBox>]]></TestString>
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString><![CDATA[<Button /><TextBox>This is a test</TextBox><CheckBox>]]></ExpectedString>
  </TextRangeSerializationTestPlainText--7>
  <TextRangeSerializationTestPlainText--8>
      <TextRangeType Value="WholeTextContainer" />
      <TestString><![CDATA[<Button /><TextBox>This is a test</TextBox<CheckBox>]]></TestString>
      <SplitTextNodeByHowMany Value="5" />
      <TextRangeMarker Value="true" />
      <ExpectedString><![CDATA[<Button /><TextBox>This is a test</TextBox<CheckBox>]]></ExpectedString>
  </TextRangeSerializationTestPlainText--8>


  <!-- Test cases for TextOM TextSelection end here. -->

  <!-- Test cases for ShellPeoplePickerBug start here. -->
  <ShellPeoplePickerRegression_Bug358>
       <TestString Value="This is a test" />
  </ShellPeoplePickerRegression_Bug358>
  <!-- Test cases for ShellPeoplePickerBug end here. -->
  <!-- Test cases for TextBox perf start here. -->
  <TextBoxModuleLoadingPerf--Scenario1>
      <ProofingServiceLoaded Value="false" />
      <Action Name="CreateTextBox" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="CreateEmptyDefaultTextBoxAsUIElement">
          <Param Value="TextBox1" />
      </Action>
      <Action Name="IsProofingServiceLoaded" Type="StaticMethod" ClassName="Test.Uis.Utils.ProcessUtils" MethodName="CheckLoadedModule" >
          <Param Value="ProofingService.dll" />
      </Action>
      <Action Name="VerifyProofingServiceLoaded" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper" MethodName="VerifyBooleanValue">
          <Param RetrieveFromReturnValue="IsProofingServiceLoaded"/>
          <Param Value="ProofingServiceLoaded" />
      </Action>
  </TextBoxModuleLoadingPerf--Scenario1>
  <!-- Test cases for TextBox perf end here. -->


  <!-- Test cases for external dependencies start here. -->

  <ControlsReproRegression_Bug421>
    <!-- TestTactics: 123. TestBugs: Regression_Bug421. -->
    <!--
    Verifies that pressing Shift+Tab on the first item does not cause
    a stack overflow.
    -->
    <MainXaml><![CDATA[<Canvas xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' Background='Green'>
      <TextBox Name="txt" Height='30px' /><Button Canvas.Top='100px' /></Canvas>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txt" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="+{TAB}" />
    </Action>
  </ControlsReproRegression_Bug421>

  <ElementReproRegression_Bug422>
    <!-- TestTactics: 144. TestBugs: Regression_Bug422. -->
    <!-- Verifies that the parser accepts single quotes in mapping PIs. -->
    <MainXaml><![CDATA[<?Mapping XmlNamespace='design' ClrNamespace="System.Windows.Design" Assembly="PresentationFramework"?>
      <Canvas xmlns='http://schemas.microsoft.com/winfx/2006/xaml/presentation' xmlns:d='design' Background='Green'>
      <TextBox Name="txt" Height='30px' /><Button Canvas.Top='100px' /></Canvas>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txt" />
    </Action>
  </ElementReproRegression_Bug422>

  <LayoutReproRegression_Bug423>
    <!-- TestTactics: 145. TestBugs: Regression_Bug423. -->
    <!--
    Verifies that a matting size assert / exception is not thrown.
    -->
    <MainXaml><![CDATA[<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <DockPanel><TextBox DockPanel.Dock="Top" Name="txtSample" />
      </DockPanel></Grid>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Name="Custom" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txtSample" />
    </Action>
  </LayoutReproRegression_Bug423>

  <TextReproRegression_Bug424>
    <!-- TestTactics: 146. TestBugs: Regression_Bug424. -->
    <!--
    Verifies that typing Hebrew or Arabic text does not produce an assert / exception.
    -->
    <MainXaml><![CDATA[<Grid xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <DockPanel ><TextBox DockPanel.Dock="Top" Name="txtSample" />
      </DockPanel></Grid>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txtSample" />
    </Action>
    <Action MethodName="SetActiveInputLocale" Type="StaticMethod" ClassName="Test.Uis.Utils.KeyboardInput">
      <Param Value="0000040d" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="hebrew text" />
    </Action>
    <Action MethodName="SetActiveInputLocale" Type="StaticMethod" ClassName="Test.Uis.Utils.KeyboardInput">
      <Param Value="00000409" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="english text" />
    </Action>
    <Action MethodName="SetActiveInputLocale" Type="StaticMethod" ClassName="Test.Uis.Utils.KeyboardInput">
      <Param Value="00000401" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="arabic text" />
    </Action>
    <Action MethodName="TypeString" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="{HOME}{RIGHT 10}{END}{LEFT 30}{UP}+{END}overwrite" />
    </Action>
  </TextReproRegression_Bug424>

  <TextReproRegression_Bug425>
    <!-- TestTactics: 147. TestBugs: Regression_Bug425. -->
    <!--
    Verifies that combining marks can be displayed in a TextBox.
    -->
    <MainXaml><![CDATA[!EC:<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <TextBox Name="txtSample">a + combining acute accent = a\u0301</TextBox>
      </StackPanel>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="ClickOnElement" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txtSample" />
    </Action>
  </TextReproRegression_Bug425>

  <TextReproRegression_Bug426>
    <!-- TestTactics: 148. TestBugs: Regression_Bug426. -->
    <!--
    Verifies that Hebrew text can be displayed and clicked in a block element.
    -->
    <MainXaml><![CDATA[!EC:<StackPanel xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
      <RichTextBox Name="txtSample" Width="200px" FontSize="22px"><FlowDocument><Paragraph>\u05e9\u05e0</Paragraph></FlowDocument></RichTextBox>
      </StackPanel>]]>
    </MainXaml>
    <Action Name="MainXamlData" MethodName="GetArgument" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="MainXaml" />
    </Action>
    <Action MethodName="SetMainXaml" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="MainXamlData" />
    </Action>
    <Action MethodName="FindElement" Name="TB" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param Value="txtSample" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 10 10" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 60 20" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 80 20" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 100 20" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 60 18" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 80 18" />
    </Action>
    <Action MethodName="MouseElementRelative" Type="StaticMethod" ClassName="Test.Uis.Wrappers.ActionItemWrapper">
      <Param RetrieveFromReturnValue="TB" />
      <Param Value="click left 90 18" />
    </Action>
  </TextReproRegression_Bug426>


  <!-- Test cases for external dependencies end here. -->

</TestData>
